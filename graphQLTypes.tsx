import gql from 'graphql-tag';
import * as ApolloReactCommon from '@apollo/client';
import * as ApolloReactHooks from '@apollo/client';
export type Maybe<T> = T | null;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  uuid: any;
  timestamptz: any;
  json: any;
  date: any;
  numeric: any;
  time: any;
  interval: any;
  timestamp: any;
  bigint: any;
  float8: any;
};


export type AcceptInviteInput = {
  claimedIsForeman?: Maybe<Scalars['Boolean']>;
  claimedSubRole?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  inviteId: Scalars['String'];
  name?: Maybe<Scalars['String']>;
  password?: Maybe<Scalars['String']>;
  subcontractorName?: Maybe<Scalars['String']>;
};

/** fields of action: "actionName" */
export type ActionName = {
   __typename?: 'actionName';
  /** the time at which this action was created */
  created_at?: Maybe<Scalars['timestamptz']>;
  /** errors related to the invocation */
  errors?: Maybe<Scalars['json']>;
  /** the unique id of an action */
  id?: Maybe<Scalars['uuid']>;
  /** the output fields of this action */
  output?: Maybe<SampleOutput>;
};

/** columns and relationships of "address" */
export type Address = {
   __typename?: 'address';
  city: Scalars['String'];
  created_at: Scalars['timestamptz'];
  /** An array relationship */
  hourly_forecasts: Array<Hourly_Forecast>;
  /** An aggregated array relationship */
  hourly_forecasts_aggregate: Hourly_Forecast_Aggregate;
  id: Scalars['uuid'];
  latitude?: Maybe<Scalars['numeric']>;
  line_1?: Maybe<Scalars['String']>;
  line_2?: Maybe<Scalars['String']>;
  longitude?: Maybe<Scalars['numeric']>;
  /** An object relationship */
  state: State;
  state_code: Scalars['String'];
  zip_code?: Maybe<Scalars['String']>;
};


/** columns and relationships of "address" */
export type AddressHourly_ForecastsArgs = {
  distinct_on?: Maybe<Array<Hourly_Forecast_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Hourly_Forecast_Order_By>>;
  where?: Maybe<Hourly_Forecast_Bool_Exp>;
};


/** columns and relationships of "address" */
export type AddressHourly_Forecasts_AggregateArgs = {
  distinct_on?: Maybe<Array<Hourly_Forecast_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Hourly_Forecast_Order_By>>;
  where?: Maybe<Hourly_Forecast_Bool_Exp>;
};

/** aggregated selection of "address" */
export type Address_Aggregate = {
   __typename?: 'address_aggregate';
  aggregate?: Maybe<Address_Aggregate_Fields>;
  nodes: Array<Address>;
};

/** aggregate fields of "address" */
export type Address_Aggregate_Fields = {
   __typename?: 'address_aggregate_fields';
  avg?: Maybe<Address_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Address_Max_Fields>;
  min?: Maybe<Address_Min_Fields>;
  stddev?: Maybe<Address_Stddev_Fields>;
  stddev_pop?: Maybe<Address_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Address_Stddev_Samp_Fields>;
  sum?: Maybe<Address_Sum_Fields>;
  var_pop?: Maybe<Address_Var_Pop_Fields>;
  var_samp?: Maybe<Address_Var_Samp_Fields>;
  variance?: Maybe<Address_Variance_Fields>;
};


/** aggregate fields of "address" */
export type Address_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Address_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "address" */
export type Address_Aggregate_Order_By = {
  avg?: Maybe<Address_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Address_Max_Order_By>;
  min?: Maybe<Address_Min_Order_By>;
  stddev?: Maybe<Address_Stddev_Order_By>;
  stddev_pop?: Maybe<Address_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Address_Stddev_Samp_Order_By>;
  sum?: Maybe<Address_Sum_Order_By>;
  var_pop?: Maybe<Address_Var_Pop_Order_By>;
  var_samp?: Maybe<Address_Var_Samp_Order_By>;
  variance?: Maybe<Address_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "address" */
export type Address_Arr_Rel_Insert_Input = {
  data: Array<Address_Insert_Input>;
  on_conflict?: Maybe<Address_On_Conflict>;
};

/** aggregate avg on columns */
export type Address_Avg_Fields = {
   __typename?: 'address_avg_fields';
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "address" */
export type Address_Avg_Order_By = {
  latitude?: Maybe<Order_By>;
  longitude?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "address". All fields are combined with a logical 'AND'. */
export type Address_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Address_Bool_Exp>>>;
  _not?: Maybe<Address_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Address_Bool_Exp>>>;
  city?: Maybe<String_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  hourly_forecasts?: Maybe<Hourly_Forecast_Bool_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  latitude?: Maybe<Numeric_Comparison_Exp>;
  line_1?: Maybe<String_Comparison_Exp>;
  line_2?: Maybe<String_Comparison_Exp>;
  longitude?: Maybe<Numeric_Comparison_Exp>;
  state?: Maybe<State_Bool_Exp>;
  state_code?: Maybe<String_Comparison_Exp>;
  zip_code?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "address" */
export enum Address_Constraint {
  /** unique or primary key constraint */
  AddressLine_1Line_2CityStateCodeZipCodeKey = 'address_line_1_line_2_city_state_code_zip_code_key',
  /** unique or primary key constraint */
  AddressPkey = 'address_pkey'
}

/** input type for incrementing integer column in table "address" */
export type Address_Inc_Input = {
  latitude?: Maybe<Scalars['numeric']>;
  longitude?: Maybe<Scalars['numeric']>;
};

/** input type for inserting data into table "address" */
export type Address_Insert_Input = {
  city?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  hourly_forecasts?: Maybe<Hourly_Forecast_Arr_Rel_Insert_Input>;
  id?: Maybe<Scalars['uuid']>;
  latitude?: Maybe<Scalars['numeric']>;
  line_1?: Maybe<Scalars['String']>;
  line_2?: Maybe<Scalars['String']>;
  longitude?: Maybe<Scalars['numeric']>;
  state?: Maybe<State_Obj_Rel_Insert_Input>;
  state_code?: Maybe<Scalars['String']>;
  zip_code?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Address_Max_Fields = {
   __typename?: 'address_max_fields';
  city?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  latitude?: Maybe<Scalars['numeric']>;
  line_1?: Maybe<Scalars['String']>;
  line_2?: Maybe<Scalars['String']>;
  longitude?: Maybe<Scalars['numeric']>;
  state_code?: Maybe<Scalars['String']>;
  zip_code?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "address" */
export type Address_Max_Order_By = {
  city?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  latitude?: Maybe<Order_By>;
  line_1?: Maybe<Order_By>;
  line_2?: Maybe<Order_By>;
  longitude?: Maybe<Order_By>;
  state_code?: Maybe<Order_By>;
  zip_code?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Address_Min_Fields = {
   __typename?: 'address_min_fields';
  city?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  latitude?: Maybe<Scalars['numeric']>;
  line_1?: Maybe<Scalars['String']>;
  line_2?: Maybe<Scalars['String']>;
  longitude?: Maybe<Scalars['numeric']>;
  state_code?: Maybe<Scalars['String']>;
  zip_code?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "address" */
export type Address_Min_Order_By = {
  city?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  latitude?: Maybe<Order_By>;
  line_1?: Maybe<Order_By>;
  line_2?: Maybe<Order_By>;
  longitude?: Maybe<Order_By>;
  state_code?: Maybe<Order_By>;
  zip_code?: Maybe<Order_By>;
};

/** response of any mutation on the table "address" */
export type Address_Mutation_Response = {
   __typename?: 'address_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Address>;
};

/** input type for inserting object relation for remote table "address" */
export type Address_Obj_Rel_Insert_Input = {
  data: Address_Insert_Input;
  on_conflict?: Maybe<Address_On_Conflict>;
};

/** on conflict condition type for table "address" */
export type Address_On_Conflict = {
  constraint: Address_Constraint;
  update_columns: Array<Address_Update_Column>;
  where?: Maybe<Address_Bool_Exp>;
};

/** ordering options when selecting data from "address" */
export type Address_Order_By = {
  city?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  hourly_forecasts_aggregate?: Maybe<Hourly_Forecast_Aggregate_Order_By>;
  id?: Maybe<Order_By>;
  latitude?: Maybe<Order_By>;
  line_1?: Maybe<Order_By>;
  line_2?: Maybe<Order_By>;
  longitude?: Maybe<Order_By>;
  state?: Maybe<State_Order_By>;
  state_code?: Maybe<Order_By>;
  zip_code?: Maybe<Order_By>;
};

/** primary key columns input for table: "address" */
export type Address_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "address" */
export enum Address_Select_Column {
  /** column name */
  City = 'city',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Latitude = 'latitude',
  /** column name */
  Line_1 = 'line_1',
  /** column name */
  Line_2 = 'line_2',
  /** column name */
  Longitude = 'longitude',
  /** column name */
  StateCode = 'state_code',
  /** column name */
  ZipCode = 'zip_code'
}

/** input type for updating data in table "address" */
export type Address_Set_Input = {
  city?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  latitude?: Maybe<Scalars['numeric']>;
  line_1?: Maybe<Scalars['String']>;
  line_2?: Maybe<Scalars['String']>;
  longitude?: Maybe<Scalars['numeric']>;
  state_code?: Maybe<Scalars['String']>;
  zip_code?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Address_Stddev_Fields = {
   __typename?: 'address_stddev_fields';
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "address" */
export type Address_Stddev_Order_By = {
  latitude?: Maybe<Order_By>;
  longitude?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Address_Stddev_Pop_Fields = {
   __typename?: 'address_stddev_pop_fields';
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "address" */
export type Address_Stddev_Pop_Order_By = {
  latitude?: Maybe<Order_By>;
  longitude?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Address_Stddev_Samp_Fields = {
   __typename?: 'address_stddev_samp_fields';
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "address" */
export type Address_Stddev_Samp_Order_By = {
  latitude?: Maybe<Order_By>;
  longitude?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Address_Sum_Fields = {
   __typename?: 'address_sum_fields';
  latitude?: Maybe<Scalars['numeric']>;
  longitude?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "address" */
export type Address_Sum_Order_By = {
  latitude?: Maybe<Order_By>;
  longitude?: Maybe<Order_By>;
};

/** update columns of table "address" */
export enum Address_Update_Column {
  /** column name */
  City = 'city',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Latitude = 'latitude',
  /** column name */
  Line_1 = 'line_1',
  /** column name */
  Line_2 = 'line_2',
  /** column name */
  Longitude = 'longitude',
  /** column name */
  StateCode = 'state_code',
  /** column name */
  ZipCode = 'zip_code'
}

/** aggregate var_pop on columns */
export type Address_Var_Pop_Fields = {
   __typename?: 'address_var_pop_fields';
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "address" */
export type Address_Var_Pop_Order_By = {
  latitude?: Maybe<Order_By>;
  longitude?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Address_Var_Samp_Fields = {
   __typename?: 'address_var_samp_fields';
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "address" */
export type Address_Var_Samp_Order_By = {
  latitude?: Maybe<Order_By>;
  longitude?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Address_Variance_Fields = {
   __typename?: 'address_variance_fields';
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "address" */
export type Address_Variance_Order_By = {
  latitude?: Maybe<Order_By>;
  longitude?: Maybe<Order_By>;
};

export type AdminUInput = {
  u: Scalars['String'];
};

export type AppNotificationCounts = {
   __typename?: 'AppNotificationCounts';
  chats: Scalars['Int'];
  todos: Scalars['Int'];
  menu: Scalars['Int'];
  projects: Scalars['Int'];
};

/** columns and relationships of "auto_email" */
export type Auto_Email = {
   __typename?: 'auto_email';
  created_at: Scalars['timestamptz'];
  email: Scalars['String'];
  event: Scalars['String'];
  id: Scalars['uuid'];
  /** An object relationship */
  project?: Maybe<Project>;
  project_id?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  project_worker?: Maybe<Project_Worker>;
  project_worker_id?: Maybe<Scalars['uuid']>;
  sub_id?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  subcontractor?: Maybe<Subcontractor>;
};

/** aggregated selection of "auto_email" */
export type Auto_Email_Aggregate = {
   __typename?: 'auto_email_aggregate';
  aggregate?: Maybe<Auto_Email_Aggregate_Fields>;
  nodes: Array<Auto_Email>;
};

/** aggregate fields of "auto_email" */
export type Auto_Email_Aggregate_Fields = {
   __typename?: 'auto_email_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Auto_Email_Max_Fields>;
  min?: Maybe<Auto_Email_Min_Fields>;
};


/** aggregate fields of "auto_email" */
export type Auto_Email_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Auto_Email_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "auto_email" */
export type Auto_Email_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Auto_Email_Max_Order_By>;
  min?: Maybe<Auto_Email_Min_Order_By>;
};

/** input type for inserting array relation for remote table "auto_email" */
export type Auto_Email_Arr_Rel_Insert_Input = {
  data: Array<Auto_Email_Insert_Input>;
  on_conflict?: Maybe<Auto_Email_On_Conflict>;
};

/** Boolean expression to filter rows from the table "auto_email". All fields are combined with a logical 'AND'. */
export type Auto_Email_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Auto_Email_Bool_Exp>>>;
  _not?: Maybe<Auto_Email_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Auto_Email_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  email?: Maybe<String_Comparison_Exp>;
  event?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  project_worker?: Maybe<Project_Worker_Bool_Exp>;
  project_worker_id?: Maybe<Uuid_Comparison_Exp>;
  sub_id?: Maybe<Uuid_Comparison_Exp>;
  subcontractor?: Maybe<Subcontractor_Bool_Exp>;
};

/** unique or primary key constraints on table "auto_email" */
export enum Auto_Email_Constraint {
  /** unique or primary key constraint */
  AutoEmailPkey = 'auto_email_pkey',
  /** unique or primary key constraint */
  AutoEmailProjectWorkerIdEventEmailKey = 'auto_email_project_worker_id_event_email_key',
  /** unique or primary key constraint */
  AutoEmailSubIdEventEmailProjectIdKey = 'auto_email_sub_id_event_email_project_id_key'
}

/** columns and relationships of "auto_email_event_type" */
export type Auto_Email_Event_Type = {
   __typename?: 'auto_email_event_type';
  value: Scalars['String'];
};

/** aggregated selection of "auto_email_event_type" */
export type Auto_Email_Event_Type_Aggregate = {
   __typename?: 'auto_email_event_type_aggregate';
  aggregate?: Maybe<Auto_Email_Event_Type_Aggregate_Fields>;
  nodes: Array<Auto_Email_Event_Type>;
};

/** aggregate fields of "auto_email_event_type" */
export type Auto_Email_Event_Type_Aggregate_Fields = {
   __typename?: 'auto_email_event_type_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Auto_Email_Event_Type_Max_Fields>;
  min?: Maybe<Auto_Email_Event_Type_Min_Fields>;
};


/** aggregate fields of "auto_email_event_type" */
export type Auto_Email_Event_Type_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Auto_Email_Event_Type_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "auto_email_event_type" */
export type Auto_Email_Event_Type_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Auto_Email_Event_Type_Max_Order_By>;
  min?: Maybe<Auto_Email_Event_Type_Min_Order_By>;
};

/** input type for inserting array relation for remote table "auto_email_event_type" */
export type Auto_Email_Event_Type_Arr_Rel_Insert_Input = {
  data: Array<Auto_Email_Event_Type_Insert_Input>;
  on_conflict?: Maybe<Auto_Email_Event_Type_On_Conflict>;
};

/** Boolean expression to filter rows from the table "auto_email_event_type". All fields are combined with a logical 'AND'. */
export type Auto_Email_Event_Type_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Auto_Email_Event_Type_Bool_Exp>>>;
  _not?: Maybe<Auto_Email_Event_Type_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Auto_Email_Event_Type_Bool_Exp>>>;
  value?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "auto_email_event_type" */
export enum Auto_Email_Event_Type_Constraint {
  /** unique or primary key constraint */
  AutoEmailEventTypePkey = 'auto_email_event_type_pkey'
}

/** input type for inserting data into table "auto_email_event_type" */
export type Auto_Email_Event_Type_Insert_Input = {
  value?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Auto_Email_Event_Type_Max_Fields = {
   __typename?: 'auto_email_event_type_max_fields';
  value?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "auto_email_event_type" */
export type Auto_Email_Event_Type_Max_Order_By = {
  value?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Auto_Email_Event_Type_Min_Fields = {
   __typename?: 'auto_email_event_type_min_fields';
  value?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "auto_email_event_type" */
export type Auto_Email_Event_Type_Min_Order_By = {
  value?: Maybe<Order_By>;
};

/** response of any mutation on the table "auto_email_event_type" */
export type Auto_Email_Event_Type_Mutation_Response = {
   __typename?: 'auto_email_event_type_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Auto_Email_Event_Type>;
};

/** input type for inserting object relation for remote table "auto_email_event_type" */
export type Auto_Email_Event_Type_Obj_Rel_Insert_Input = {
  data: Auto_Email_Event_Type_Insert_Input;
  on_conflict?: Maybe<Auto_Email_Event_Type_On_Conflict>;
};

/** on conflict condition type for table "auto_email_event_type" */
export type Auto_Email_Event_Type_On_Conflict = {
  constraint: Auto_Email_Event_Type_Constraint;
  update_columns: Array<Auto_Email_Event_Type_Update_Column>;
  where?: Maybe<Auto_Email_Event_Type_Bool_Exp>;
};

/** ordering options when selecting data from "auto_email_event_type" */
export type Auto_Email_Event_Type_Order_By = {
  value?: Maybe<Order_By>;
};

/** primary key columns input for table: "auto_email_event_type" */
export type Auto_Email_Event_Type_Pk_Columns_Input = {
  value: Scalars['String'];
};

/** select columns of table "auto_email_event_type" */
export enum Auto_Email_Event_Type_Select_Column {
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "auto_email_event_type" */
export type Auto_Email_Event_Type_Set_Input = {
  value?: Maybe<Scalars['String']>;
};

/** update columns of table "auto_email_event_type" */
export enum Auto_Email_Event_Type_Update_Column {
  /** column name */
  Value = 'value'
}

/** input type for inserting data into table "auto_email" */
export type Auto_Email_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  email?: Maybe<Scalars['String']>;
  event?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_id?: Maybe<Scalars['uuid']>;
  project_worker?: Maybe<Project_Worker_Obj_Rel_Insert_Input>;
  project_worker_id?: Maybe<Scalars['uuid']>;
  sub_id?: Maybe<Scalars['uuid']>;
  subcontractor?: Maybe<Subcontractor_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Auto_Email_Max_Fields = {
   __typename?: 'auto_email_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  email?: Maybe<Scalars['String']>;
  event?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
  sub_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "auto_email" */
export type Auto_Email_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  email?: Maybe<Order_By>;
  event?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  project_worker_id?: Maybe<Order_By>;
  sub_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Auto_Email_Min_Fields = {
   __typename?: 'auto_email_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  email?: Maybe<Scalars['String']>;
  event?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
  sub_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "auto_email" */
export type Auto_Email_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  email?: Maybe<Order_By>;
  event?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  project_worker_id?: Maybe<Order_By>;
  sub_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "auto_email" */
export type Auto_Email_Mutation_Response = {
   __typename?: 'auto_email_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Auto_Email>;
};

/** input type for inserting object relation for remote table "auto_email" */
export type Auto_Email_Obj_Rel_Insert_Input = {
  data: Auto_Email_Insert_Input;
  on_conflict?: Maybe<Auto_Email_On_Conflict>;
};

/** on conflict condition type for table "auto_email" */
export type Auto_Email_On_Conflict = {
  constraint: Auto_Email_Constraint;
  update_columns: Array<Auto_Email_Update_Column>;
  where?: Maybe<Auto_Email_Bool_Exp>;
};

/** ordering options when selecting data from "auto_email" */
export type Auto_Email_Order_By = {
  created_at?: Maybe<Order_By>;
  email?: Maybe<Order_By>;
  event?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project?: Maybe<Project_Order_By>;
  project_id?: Maybe<Order_By>;
  project_worker?: Maybe<Project_Worker_Order_By>;
  project_worker_id?: Maybe<Order_By>;
  sub_id?: Maybe<Order_By>;
  subcontractor?: Maybe<Subcontractor_Order_By>;
};

/** primary key columns input for table: "auto_email" */
export type Auto_Email_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "auto_email" */
export enum Auto_Email_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Email = 'email',
  /** column name */
  Event = 'event',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  ProjectWorkerId = 'project_worker_id',
  /** column name */
  SubId = 'sub_id'
}

/** input type for updating data in table "auto_email" */
export type Auto_Email_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  email?: Maybe<Scalars['String']>;
  event?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
  sub_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "auto_email" */
export enum Auto_Email_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Email = 'email',
  /** column name */
  Event = 'event',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  ProjectWorkerId = 'project_worker_id',
  /** column name */
  SubId = 'sub_id'
}

/** columns and relationships of "awareness_question" */
export type Awareness_Question = {
   __typename?: 'awareness_question';
  created_at?: Maybe<Scalars['timestamptz']>;
  id: Scalars['uuid'];
  /** An object relationship */
  question: Text_Translation;
  question_id: Scalars['uuid'];
  question_text: Scalars['String'];
  /** An object relationship */
  subcontractor?: Maybe<Subcontractor>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregated selection of "awareness_question" */
export type Awareness_Question_Aggregate = {
   __typename?: 'awareness_question_aggregate';
  aggregate?: Maybe<Awareness_Question_Aggregate_Fields>;
  nodes: Array<Awareness_Question>;
};

/** aggregate fields of "awareness_question" */
export type Awareness_Question_Aggregate_Fields = {
   __typename?: 'awareness_question_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Awareness_Question_Max_Fields>;
  min?: Maybe<Awareness_Question_Min_Fields>;
};


/** aggregate fields of "awareness_question" */
export type Awareness_Question_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Awareness_Question_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "awareness_question" */
export type Awareness_Question_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Awareness_Question_Max_Order_By>;
  min?: Maybe<Awareness_Question_Min_Order_By>;
};

/** input type for inserting array relation for remote table "awareness_question" */
export type Awareness_Question_Arr_Rel_Insert_Input = {
  data: Array<Awareness_Question_Insert_Input>;
  on_conflict?: Maybe<Awareness_Question_On_Conflict>;
};

/** Boolean expression to filter rows from the table "awareness_question". All fields are combined with a logical 'AND'. */
export type Awareness_Question_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Awareness_Question_Bool_Exp>>>;
  _not?: Maybe<Awareness_Question_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Awareness_Question_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  question?: Maybe<Text_Translation_Bool_Exp>;
  question_id?: Maybe<Uuid_Comparison_Exp>;
  question_text?: Maybe<String_Comparison_Exp>;
  subcontractor?: Maybe<Subcontractor_Bool_Exp>;
  subcontractor_id?: Maybe<Uuid_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "awareness_question" */
export enum Awareness_Question_Constraint {
  /** unique or primary key constraint */
  AwarenessQuestionPkey = 'awareness_question_pkey',
  /** unique or primary key constraint */
  AwarenessQuestionQuestionSubcontractorIdKey = 'awareness_question_question_subcontractor_id_key'
}

/** input type for inserting data into table "awareness_question" */
export type Awareness_Question_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  question?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  question_id?: Maybe<Scalars['uuid']>;
  question_text?: Maybe<Scalars['String']>;
  subcontractor?: Maybe<Subcontractor_Obj_Rel_Insert_Input>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate max on columns */
export type Awareness_Question_Max_Fields = {
   __typename?: 'awareness_question_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  question_id?: Maybe<Scalars['uuid']>;
  question_text?: Maybe<Scalars['String']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** order by max() on columns of table "awareness_question" */
export type Awareness_Question_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  question_id?: Maybe<Order_By>;
  question_text?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Awareness_Question_Min_Fields = {
   __typename?: 'awareness_question_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  question_id?: Maybe<Scalars['uuid']>;
  question_text?: Maybe<Scalars['String']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** order by min() on columns of table "awareness_question" */
export type Awareness_Question_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  question_id?: Maybe<Order_By>;
  question_text?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** response of any mutation on the table "awareness_question" */
export type Awareness_Question_Mutation_Response = {
   __typename?: 'awareness_question_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Awareness_Question>;
};

/** input type for inserting object relation for remote table "awareness_question" */
export type Awareness_Question_Obj_Rel_Insert_Input = {
  data: Awareness_Question_Insert_Input;
  on_conflict?: Maybe<Awareness_Question_On_Conflict>;
};

/** on conflict condition type for table "awareness_question" */
export type Awareness_Question_On_Conflict = {
  constraint: Awareness_Question_Constraint;
  update_columns: Array<Awareness_Question_Update_Column>;
  where?: Maybe<Awareness_Question_Bool_Exp>;
};

/** ordering options when selecting data from "awareness_question" */
export type Awareness_Question_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  question?: Maybe<Text_Translation_Order_By>;
  question_id?: Maybe<Order_By>;
  question_text?: Maybe<Order_By>;
  subcontractor?: Maybe<Subcontractor_Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** primary key columns input for table: "awareness_question" */
export type Awareness_Question_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "awareness_question" */
export enum Awareness_Question_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  QuestionId = 'question_id',
  /** column name */
  QuestionText = 'question_text',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** input type for updating data in table "awareness_question" */
export type Awareness_Question_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  question_id?: Maybe<Scalars['uuid']>;
  question_text?: Maybe<Scalars['String']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** update columns of table "awareness_question" */
export enum Awareness_Question_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  QuestionId = 'question_id',
  /** column name */
  QuestionText = 'question_text',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  UpdatedAt = 'updated_at'
}


/** expression to compare columns of type bigint. All fields are combined with logical 'AND'. */
export type Bigint_Comparison_Exp = {
  _eq?: Maybe<Scalars['bigint']>;
  _gt?: Maybe<Scalars['bigint']>;
  _gte?: Maybe<Scalars['bigint']>;
  _in?: Maybe<Array<Scalars['bigint']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['bigint']>;
  _lte?: Maybe<Scalars['bigint']>;
  _neq?: Maybe<Scalars['bigint']>;
  _nin?: Maybe<Array<Scalars['bigint']>>;
};

/** expression to compare columns of type Boolean. All fields are combined with logical 'AND'. */
export type Boolean_Comparison_Exp = {
  _eq?: Maybe<Scalars['Boolean']>;
  _gt?: Maybe<Scalars['Boolean']>;
  _gte?: Maybe<Scalars['Boolean']>;
  _in?: Maybe<Array<Scalars['Boolean']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['Boolean']>;
  _lte?: Maybe<Scalars['Boolean']>;
  _neq?: Maybe<Scalars['Boolean']>;
  _nin?: Maybe<Array<Scalars['Boolean']>>;
};

export enum CacheControlScope {
  Private = 'PRIVATE',
  Public = 'PUBLIC'
}

/** columns and relationships of "calendar" */
export type Calendar = {
   __typename?: 'calendar';
  color_hex: Scalars['String'];
  created_at: Scalars['timestamptz'];
  created_by_user_id?: Maybe<Scalars['uuid']>;
  id: Scalars['uuid'];
  /** An object relationship */
  name?: Maybe<Text_Translation>;
  name_id: Scalars['uuid'];
  /** An object relationship */
  project?: Maybe<Project>;
  project_id?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  user?: Maybe<User>;
};

/** aggregated selection of "calendar" */
export type Calendar_Aggregate = {
   __typename?: 'calendar_aggregate';
  aggregate?: Maybe<Calendar_Aggregate_Fields>;
  nodes: Array<Calendar>;
};

/** aggregate fields of "calendar" */
export type Calendar_Aggregate_Fields = {
   __typename?: 'calendar_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Calendar_Max_Fields>;
  min?: Maybe<Calendar_Min_Fields>;
};


/** aggregate fields of "calendar" */
export type Calendar_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Calendar_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "calendar" */
export type Calendar_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Calendar_Max_Order_By>;
  min?: Maybe<Calendar_Min_Order_By>;
};

/** input type for inserting array relation for remote table "calendar" */
export type Calendar_Arr_Rel_Insert_Input = {
  data: Array<Calendar_Insert_Input>;
  on_conflict?: Maybe<Calendar_On_Conflict>;
};

/** Boolean expression to filter rows from the table "calendar". All fields are combined with a logical 'AND'. */
export type Calendar_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Calendar_Bool_Exp>>>;
  _not?: Maybe<Calendar_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Calendar_Bool_Exp>>>;
  color_hex?: Maybe<String_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  created_by_user_id?: Maybe<Uuid_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  name?: Maybe<Text_Translation_Bool_Exp>;
  name_id?: Maybe<Uuid_Comparison_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  user?: Maybe<User_Bool_Exp>;
};

/** unique or primary key constraints on table "calendar" */
export enum Calendar_Constraint {
  /** unique or primary key constraint */
  CalendarPkey = 'calendar_pkey'
}

/** input type for inserting data into table "calendar" */
export type Calendar_Insert_Input = {
  color_hex?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  name_id?: Maybe<Scalars['uuid']>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_id?: Maybe<Scalars['uuid']>;
  user?: Maybe<User_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Calendar_Max_Fields = {
   __typename?: 'calendar_max_fields';
  color_hex?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  name_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "calendar" */
export type Calendar_Max_Order_By = {
  color_hex?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  created_by_user_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Calendar_Min_Fields = {
   __typename?: 'calendar_min_fields';
  color_hex?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  name_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "calendar" */
export type Calendar_Min_Order_By = {
  color_hex?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  created_by_user_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "calendar" */
export type Calendar_Mutation_Response = {
   __typename?: 'calendar_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Calendar>;
};

/** input type for inserting object relation for remote table "calendar" */
export type Calendar_Obj_Rel_Insert_Input = {
  data: Calendar_Insert_Input;
  on_conflict?: Maybe<Calendar_On_Conflict>;
};

/** on conflict condition type for table "calendar" */
export type Calendar_On_Conflict = {
  constraint: Calendar_Constraint;
  update_columns: Array<Calendar_Update_Column>;
  where?: Maybe<Calendar_Bool_Exp>;
};

/** ordering options when selecting data from "calendar" */
export type Calendar_Order_By = {
  color_hex?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  created_by_user_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Text_Translation_Order_By>;
  name_id?: Maybe<Order_By>;
  project?: Maybe<Project_Order_By>;
  project_id?: Maybe<Order_By>;
  user?: Maybe<User_Order_By>;
};

/** primary key columns input for table: "calendar" */
export type Calendar_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "calendar" */
export enum Calendar_Select_Column {
  /** column name */
  ColorHex = 'color_hex',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CreatedByUserId = 'created_by_user_id',
  /** column name */
  Id = 'id',
  /** column name */
  NameId = 'name_id',
  /** column name */
  ProjectId = 'project_id'
}

/** input type for updating data in table "calendar" */
export type Calendar_Set_Input = {
  color_hex?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  name_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "calendar" */
export enum Calendar_Update_Column {
  /** column name */
  ColorHex = 'color_hex',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CreatedByUserId = 'created_by_user_id',
  /** column name */
  Id = 'id',
  /** column name */
  NameId = 'name_id',
  /** column name */
  ProjectId = 'project_id'
}

/** columns and relationships of "certification" */
export type Certification = {
   __typename?: 'certification';
  id: Scalars['uuid'];
  is_custom: Scalars['Boolean'];
  name: Scalars['String'];
};

/** aggregated selection of "certification" */
export type Certification_Aggregate = {
   __typename?: 'certification_aggregate';
  aggregate?: Maybe<Certification_Aggregate_Fields>;
  nodes: Array<Certification>;
};

/** aggregate fields of "certification" */
export type Certification_Aggregate_Fields = {
   __typename?: 'certification_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Certification_Max_Fields>;
  min?: Maybe<Certification_Min_Fields>;
};


/** aggregate fields of "certification" */
export type Certification_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Certification_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "certification" */
export type Certification_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Certification_Max_Order_By>;
  min?: Maybe<Certification_Min_Order_By>;
};

/** input type for inserting array relation for remote table "certification" */
export type Certification_Arr_Rel_Insert_Input = {
  data: Array<Certification_Insert_Input>;
  on_conflict?: Maybe<Certification_On_Conflict>;
};

/** Boolean expression to filter rows from the table "certification". All fields are combined with a logical 'AND'. */
export type Certification_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Certification_Bool_Exp>>>;
  _not?: Maybe<Certification_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Certification_Bool_Exp>>>;
  id?: Maybe<Uuid_Comparison_Exp>;
  is_custom?: Maybe<Boolean_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "certification" */
export enum Certification_Constraint {
  /** unique or primary key constraint */
  CertificationsPkey = 'certifications_pkey'
}

/** input type for inserting data into table "certification" */
export type Certification_Insert_Input = {
  id?: Maybe<Scalars['uuid']>;
  is_custom?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Certification_Max_Fields = {
   __typename?: 'certification_max_fields';
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "certification" */
export type Certification_Max_Order_By = {
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Certification_Min_Fields = {
   __typename?: 'certification_min_fields';
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "certification" */
export type Certification_Min_Order_By = {
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
};

/** response of any mutation on the table "certification" */
export type Certification_Mutation_Response = {
   __typename?: 'certification_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Certification>;
};

/** input type for inserting object relation for remote table "certification" */
export type Certification_Obj_Rel_Insert_Input = {
  data: Certification_Insert_Input;
  on_conflict?: Maybe<Certification_On_Conflict>;
};

/** on conflict condition type for table "certification" */
export type Certification_On_Conflict = {
  constraint: Certification_Constraint;
  update_columns: Array<Certification_Update_Column>;
  where?: Maybe<Certification_Bool_Exp>;
};

/** ordering options when selecting data from "certification" */
export type Certification_Order_By = {
  id?: Maybe<Order_By>;
  is_custom?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
};

/** primary key columns input for table: "certification" */
export type Certification_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "certification" */
export enum Certification_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  IsCustom = 'is_custom',
  /** column name */
  Name = 'name'
}

/** input type for updating data in table "certification" */
export type Certification_Set_Input = {
  id?: Maybe<Scalars['uuid']>;
  is_custom?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
};

/** update columns of table "certification" */
export enum Certification_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  IsCustom = 'is_custom',
  /** column name */
  Name = 'name'
}

/** columns and relationships of "chat" */
export type Chat = {
   __typename?: 'chat';
  created_at: Scalars['timestamptz'];
  /** An object relationship */
  created_by_employee?: Maybe<General_Contractor_Employee>;
  created_by_employee_id?: Maybe<Scalars['uuid']>;
  created_by_project_worker_id?: Maybe<Scalars['uuid']>;
  id: Scalars['uuid'];
  /** An array relationship */
  items: Array<Chat_Item>;
  /** An aggregated array relationship */
  items_aggregate: Chat_Item_Aggregate;
  last_message_at: Scalars['timestamptz'];
  /** An array relationship */
  members: Array<Chat_Member>;
  /** An aggregated array relationship */
  members_aggregate: Chat_Member_Aggregate;
  name?: Maybe<Scalars['String']>;
  /** An object relationship */
  project: Project;
  project_id: Scalars['uuid'];
  type: Scalars['String'];
  updated_at: Scalars['timestamptz'];
  /** An array relationship */
  user_notifications: Array<User_Notification>;
  /** An aggregated array relationship */
  user_notifications_aggregate: User_Notification_Aggregate;
};


/** columns and relationships of "chat" */
export type ChatItemsArgs = {
  distinct_on?: Maybe<Array<Chat_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Item_Order_By>>;
  where?: Maybe<Chat_Item_Bool_Exp>;
};


/** columns and relationships of "chat" */
export type ChatItems_AggregateArgs = {
  distinct_on?: Maybe<Array<Chat_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Item_Order_By>>;
  where?: Maybe<Chat_Item_Bool_Exp>;
};


/** columns and relationships of "chat" */
export type ChatMembersArgs = {
  distinct_on?: Maybe<Array<Chat_Member_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Member_Order_By>>;
  where?: Maybe<Chat_Member_Bool_Exp>;
};


/** columns and relationships of "chat" */
export type ChatMembers_AggregateArgs = {
  distinct_on?: Maybe<Array<Chat_Member_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Member_Order_By>>;
  where?: Maybe<Chat_Member_Bool_Exp>;
};


/** columns and relationships of "chat" */
export type ChatUser_NotificationsArgs = {
  distinct_on?: Maybe<Array<User_Notification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Notification_Order_By>>;
  where?: Maybe<User_Notification_Bool_Exp>;
};


/** columns and relationships of "chat" */
export type ChatUser_Notifications_AggregateArgs = {
  distinct_on?: Maybe<Array<User_Notification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Notification_Order_By>>;
  where?: Maybe<User_Notification_Bool_Exp>;
};

/** aggregated selection of "chat" */
export type Chat_Aggregate = {
   __typename?: 'chat_aggregate';
  aggregate?: Maybe<Chat_Aggregate_Fields>;
  nodes: Array<Chat>;
};

/** aggregate fields of "chat" */
export type Chat_Aggregate_Fields = {
   __typename?: 'chat_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Chat_Max_Fields>;
  min?: Maybe<Chat_Min_Fields>;
};


/** aggregate fields of "chat" */
export type Chat_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Chat_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "chat" */
export type Chat_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Chat_Max_Order_By>;
  min?: Maybe<Chat_Min_Order_By>;
};

/** input type for inserting array relation for remote table "chat" */
export type Chat_Arr_Rel_Insert_Input = {
  data: Array<Chat_Insert_Input>;
  on_conflict?: Maybe<Chat_On_Conflict>;
};

/** Boolean expression to filter rows from the table "chat". All fields are combined with a logical 'AND'. */
export type Chat_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Chat_Bool_Exp>>>;
  _not?: Maybe<Chat_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Chat_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  created_by_employee?: Maybe<General_Contractor_Employee_Bool_Exp>;
  created_by_employee_id?: Maybe<Uuid_Comparison_Exp>;
  created_by_project_worker_id?: Maybe<Uuid_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  items?: Maybe<Chat_Item_Bool_Exp>;
  last_message_at?: Maybe<Timestamptz_Comparison_Exp>;
  members?: Maybe<Chat_Member_Bool_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  type?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  user_notifications?: Maybe<User_Notification_Bool_Exp>;
};

/** unique or primary key constraints on table "chat" */
export enum Chat_Constraint {
  /** unique or primary key constraint */
  ChatPkey = 'chat_pkey'
}

/**
 * placeholder table for employe_chat_previews function requiring SET OF
 * 
 * 
 * columns and relationships of "chat_employee_preview"
 */
export type Chat_Employee_Preview = {
   __typename?: 'chat_employee_preview';
  /** An object relationship */
  chat_member: Chat_Member;
  chat_member_id: Scalars['uuid'];
  last_read: Scalars['timestamptz'];
  unread_count: Scalars['bigint'];
};

/** aggregated selection of "chat_employee_preview" */
export type Chat_Employee_Preview_Aggregate = {
   __typename?: 'chat_employee_preview_aggregate';
  aggregate?: Maybe<Chat_Employee_Preview_Aggregate_Fields>;
  nodes: Array<Chat_Employee_Preview>;
};

/** aggregate fields of "chat_employee_preview" */
export type Chat_Employee_Preview_Aggregate_Fields = {
   __typename?: 'chat_employee_preview_aggregate_fields';
  avg?: Maybe<Chat_Employee_Preview_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Chat_Employee_Preview_Max_Fields>;
  min?: Maybe<Chat_Employee_Preview_Min_Fields>;
  stddev?: Maybe<Chat_Employee_Preview_Stddev_Fields>;
  stddev_pop?: Maybe<Chat_Employee_Preview_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Chat_Employee_Preview_Stddev_Samp_Fields>;
  sum?: Maybe<Chat_Employee_Preview_Sum_Fields>;
  var_pop?: Maybe<Chat_Employee_Preview_Var_Pop_Fields>;
  var_samp?: Maybe<Chat_Employee_Preview_Var_Samp_Fields>;
  variance?: Maybe<Chat_Employee_Preview_Variance_Fields>;
};


/** aggregate fields of "chat_employee_preview" */
export type Chat_Employee_Preview_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Chat_Employee_Preview_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "chat_employee_preview" */
export type Chat_Employee_Preview_Aggregate_Order_By = {
  avg?: Maybe<Chat_Employee_Preview_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Chat_Employee_Preview_Max_Order_By>;
  min?: Maybe<Chat_Employee_Preview_Min_Order_By>;
  stddev?: Maybe<Chat_Employee_Preview_Stddev_Order_By>;
  stddev_pop?: Maybe<Chat_Employee_Preview_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Chat_Employee_Preview_Stddev_Samp_Order_By>;
  sum?: Maybe<Chat_Employee_Preview_Sum_Order_By>;
  var_pop?: Maybe<Chat_Employee_Preview_Var_Pop_Order_By>;
  var_samp?: Maybe<Chat_Employee_Preview_Var_Samp_Order_By>;
  variance?: Maybe<Chat_Employee_Preview_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "chat_employee_preview" */
export type Chat_Employee_Preview_Arr_Rel_Insert_Input = {
  data: Array<Chat_Employee_Preview_Insert_Input>;
  on_conflict?: Maybe<Chat_Employee_Preview_On_Conflict>;
};

/** aggregate avg on columns */
export type Chat_Employee_Preview_Avg_Fields = {
   __typename?: 'chat_employee_preview_avg_fields';
  unread_count?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "chat_employee_preview" */
export type Chat_Employee_Preview_Avg_Order_By = {
  unread_count?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "chat_employee_preview". All fields are combined with a logical 'AND'. */
export type Chat_Employee_Preview_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Chat_Employee_Preview_Bool_Exp>>>;
  _not?: Maybe<Chat_Employee_Preview_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Chat_Employee_Preview_Bool_Exp>>>;
  chat_member?: Maybe<Chat_Member_Bool_Exp>;
  chat_member_id?: Maybe<Uuid_Comparison_Exp>;
  last_read?: Maybe<Timestamptz_Comparison_Exp>;
  unread_count?: Maybe<Bigint_Comparison_Exp>;
};

/** unique or primary key constraints on table "chat_employee_preview" */
export enum Chat_Employee_Preview_Constraint {
  /** unique or primary key constraint */
  ChatEmployeePreviewPkey = 'chat_employee_preview_pkey'
}

/** input type for incrementing integer column in table "chat_employee_preview" */
export type Chat_Employee_Preview_Inc_Input = {
  unread_count?: Maybe<Scalars['bigint']>;
};

/** input type for inserting data into table "chat_employee_preview" */
export type Chat_Employee_Preview_Insert_Input = {
  chat_member?: Maybe<Chat_Member_Obj_Rel_Insert_Input>;
  chat_member_id?: Maybe<Scalars['uuid']>;
  last_read?: Maybe<Scalars['timestamptz']>;
  unread_count?: Maybe<Scalars['bigint']>;
};

/** aggregate max on columns */
export type Chat_Employee_Preview_Max_Fields = {
   __typename?: 'chat_employee_preview_max_fields';
  chat_member_id?: Maybe<Scalars['uuid']>;
  last_read?: Maybe<Scalars['timestamptz']>;
  unread_count?: Maybe<Scalars['bigint']>;
};

/** order by max() on columns of table "chat_employee_preview" */
export type Chat_Employee_Preview_Max_Order_By = {
  chat_member_id?: Maybe<Order_By>;
  last_read?: Maybe<Order_By>;
  unread_count?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Chat_Employee_Preview_Min_Fields = {
   __typename?: 'chat_employee_preview_min_fields';
  chat_member_id?: Maybe<Scalars['uuid']>;
  last_read?: Maybe<Scalars['timestamptz']>;
  unread_count?: Maybe<Scalars['bigint']>;
};

/** order by min() on columns of table "chat_employee_preview" */
export type Chat_Employee_Preview_Min_Order_By = {
  chat_member_id?: Maybe<Order_By>;
  last_read?: Maybe<Order_By>;
  unread_count?: Maybe<Order_By>;
};

/** response of any mutation on the table "chat_employee_preview" */
export type Chat_Employee_Preview_Mutation_Response = {
   __typename?: 'chat_employee_preview_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Chat_Employee_Preview>;
};

/** input type for inserting object relation for remote table "chat_employee_preview" */
export type Chat_Employee_Preview_Obj_Rel_Insert_Input = {
  data: Chat_Employee_Preview_Insert_Input;
  on_conflict?: Maybe<Chat_Employee_Preview_On_Conflict>;
};

/** on conflict condition type for table "chat_employee_preview" */
export type Chat_Employee_Preview_On_Conflict = {
  constraint: Chat_Employee_Preview_Constraint;
  update_columns: Array<Chat_Employee_Preview_Update_Column>;
  where?: Maybe<Chat_Employee_Preview_Bool_Exp>;
};

/** ordering options when selecting data from "chat_employee_preview" */
export type Chat_Employee_Preview_Order_By = {
  chat_member?: Maybe<Chat_Member_Order_By>;
  chat_member_id?: Maybe<Order_By>;
  last_read?: Maybe<Order_By>;
  unread_count?: Maybe<Order_By>;
};

/** primary key columns input for table: "chat_employee_preview" */
export type Chat_Employee_Preview_Pk_Columns_Input = {
  chat_member_id: Scalars['uuid'];
};

/** select columns of table "chat_employee_preview" */
export enum Chat_Employee_Preview_Select_Column {
  /** column name */
  ChatMemberId = 'chat_member_id',
  /** column name */
  LastRead = 'last_read',
  /** column name */
  UnreadCount = 'unread_count'
}

/** input type for updating data in table "chat_employee_preview" */
export type Chat_Employee_Preview_Set_Input = {
  chat_member_id?: Maybe<Scalars['uuid']>;
  last_read?: Maybe<Scalars['timestamptz']>;
  unread_count?: Maybe<Scalars['bigint']>;
};

/** aggregate stddev on columns */
export type Chat_Employee_Preview_Stddev_Fields = {
   __typename?: 'chat_employee_preview_stddev_fields';
  unread_count?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "chat_employee_preview" */
export type Chat_Employee_Preview_Stddev_Order_By = {
  unread_count?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Chat_Employee_Preview_Stddev_Pop_Fields = {
   __typename?: 'chat_employee_preview_stddev_pop_fields';
  unread_count?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "chat_employee_preview" */
export type Chat_Employee_Preview_Stddev_Pop_Order_By = {
  unread_count?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Chat_Employee_Preview_Stddev_Samp_Fields = {
   __typename?: 'chat_employee_preview_stddev_samp_fields';
  unread_count?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "chat_employee_preview" */
export type Chat_Employee_Preview_Stddev_Samp_Order_By = {
  unread_count?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Chat_Employee_Preview_Sum_Fields = {
   __typename?: 'chat_employee_preview_sum_fields';
  unread_count?: Maybe<Scalars['bigint']>;
};

/** order by sum() on columns of table "chat_employee_preview" */
export type Chat_Employee_Preview_Sum_Order_By = {
  unread_count?: Maybe<Order_By>;
};

/** update columns of table "chat_employee_preview" */
export enum Chat_Employee_Preview_Update_Column {
  /** column name */
  ChatMemberId = 'chat_member_id',
  /** column name */
  LastRead = 'last_read',
  /** column name */
  UnreadCount = 'unread_count'
}

/** aggregate var_pop on columns */
export type Chat_Employee_Preview_Var_Pop_Fields = {
   __typename?: 'chat_employee_preview_var_pop_fields';
  unread_count?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "chat_employee_preview" */
export type Chat_Employee_Preview_Var_Pop_Order_By = {
  unread_count?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Chat_Employee_Preview_Var_Samp_Fields = {
   __typename?: 'chat_employee_preview_var_samp_fields';
  unread_count?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "chat_employee_preview" */
export type Chat_Employee_Preview_Var_Samp_Order_By = {
  unread_count?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Chat_Employee_Preview_Variance_Fields = {
   __typename?: 'chat_employee_preview_variance_fields';
  unread_count?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "chat_employee_preview" */
export type Chat_Employee_Preview_Variance_Order_By = {
  unread_count?: Maybe<Order_By>;
};

/** input type for inserting data into table "chat" */
export type Chat_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_employee?: Maybe<General_Contractor_Employee_Obj_Rel_Insert_Input>;
  created_by_employee_id?: Maybe<Scalars['uuid']>;
  created_by_project_worker_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  items?: Maybe<Chat_Item_Arr_Rel_Insert_Input>;
  last_message_at?: Maybe<Scalars['timestamptz']>;
  members?: Maybe<Chat_Member_Arr_Rel_Insert_Input>;
  name?: Maybe<Scalars['String']>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_id?: Maybe<Scalars['uuid']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  user_notifications?: Maybe<User_Notification_Arr_Rel_Insert_Input>;
};

/** columns and relationships of "chat_item" */
export type Chat_Item = {
   __typename?: 'chat_item';
  /** An array relationship */
  attachments: Array<Chat_Item_Attachment>;
  /** An aggregated array relationship */
  attachments_aggregate: Chat_Item_Attachment_Aggregate;
  /** An object relationship */
  chat?: Maybe<Chat>;
  chat_id?: Maybe<Scalars['uuid']>;
  created_at: Scalars['timestamptz'];
  id: Scalars['uuid'];
  insertStatus: Scalars['String'];
  isOwn: Scalars['Boolean'];
  /** An object relationship */
  message: Text_Translation;
  message_text_id: Scalars['uuid'];
  /** An object relationship */
  sender_chat_member?: Maybe<Chat_Member>;
  sender_chat_member_id?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  sender_todo_assignee?: Maybe<Todo_Assignee>;
  sender_todo_assignee_id?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  todo?: Maybe<Todo>;
  todo_id?: Maybe<Scalars['uuid']>;
  /** An array relationship */
  todos: Array<Todo>;
  /** An aggregated array relationship */
  todos_aggregate: Todo_Aggregate;
  type: Chat_Item_Type_Enum;
  updated_at: Scalars['timestamptz'];
};


/** columns and relationships of "chat_item" */
export type Chat_ItemAttachmentsArgs = {
  distinct_on?: Maybe<Array<Chat_Item_Attachment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Item_Attachment_Order_By>>;
  where?: Maybe<Chat_Item_Attachment_Bool_Exp>;
};


/** columns and relationships of "chat_item" */
export type Chat_ItemAttachments_AggregateArgs = {
  distinct_on?: Maybe<Array<Chat_Item_Attachment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Item_Attachment_Order_By>>;
  where?: Maybe<Chat_Item_Attachment_Bool_Exp>;
};


/** columns and relationships of "chat_item" */
export type Chat_ItemTodosArgs = {
  distinct_on?: Maybe<Array<Todo_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Todo_Order_By>>;
  where?: Maybe<Todo_Bool_Exp>;
};


/** columns and relationships of "chat_item" */
export type Chat_ItemTodos_AggregateArgs = {
  distinct_on?: Maybe<Array<Todo_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Todo_Order_By>>;
  where?: Maybe<Todo_Bool_Exp>;
};

/** aggregated selection of "chat_item" */
export type Chat_Item_Aggregate = {
   __typename?: 'chat_item_aggregate';
  aggregate?: Maybe<Chat_Item_Aggregate_Fields>;
  nodes: Array<Chat_Item>;
};

/** aggregate fields of "chat_item" */
export type Chat_Item_Aggregate_Fields = {
   __typename?: 'chat_item_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Chat_Item_Max_Fields>;
  min?: Maybe<Chat_Item_Min_Fields>;
};


/** aggregate fields of "chat_item" */
export type Chat_Item_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Chat_Item_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "chat_item" */
export type Chat_Item_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Chat_Item_Max_Order_By>;
  min?: Maybe<Chat_Item_Min_Order_By>;
};

/** input type for inserting array relation for remote table "chat_item" */
export type Chat_Item_Arr_Rel_Insert_Input = {
  data: Array<Chat_Item_Insert_Input>;
  on_conflict?: Maybe<Chat_Item_On_Conflict>;
};

/** columns and relationships of "chat_item_attachment" */
export type Chat_Item_Attachment = {
   __typename?: 'chat_item_attachment';
  /** An object relationship */
  chat_item: Chat_Item;
  chat_item_id: Scalars['uuid'];
  created_at: Scalars['timestamptz'];
  id: Scalars['uuid'];
  /** An object relationship */
  image?: Maybe<Image>;
  image_id?: Maybe<Scalars['uuid']>;
  sort_index: Scalars['numeric'];
  type: Scalars['String'];
};

/** aggregated selection of "chat_item_attachment" */
export type Chat_Item_Attachment_Aggregate = {
   __typename?: 'chat_item_attachment_aggregate';
  aggregate?: Maybe<Chat_Item_Attachment_Aggregate_Fields>;
  nodes: Array<Chat_Item_Attachment>;
};

/** aggregate fields of "chat_item_attachment" */
export type Chat_Item_Attachment_Aggregate_Fields = {
   __typename?: 'chat_item_attachment_aggregate_fields';
  avg?: Maybe<Chat_Item_Attachment_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Chat_Item_Attachment_Max_Fields>;
  min?: Maybe<Chat_Item_Attachment_Min_Fields>;
  stddev?: Maybe<Chat_Item_Attachment_Stddev_Fields>;
  stddev_pop?: Maybe<Chat_Item_Attachment_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Chat_Item_Attachment_Stddev_Samp_Fields>;
  sum?: Maybe<Chat_Item_Attachment_Sum_Fields>;
  var_pop?: Maybe<Chat_Item_Attachment_Var_Pop_Fields>;
  var_samp?: Maybe<Chat_Item_Attachment_Var_Samp_Fields>;
  variance?: Maybe<Chat_Item_Attachment_Variance_Fields>;
};


/** aggregate fields of "chat_item_attachment" */
export type Chat_Item_Attachment_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Chat_Item_Attachment_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "chat_item_attachment" */
export type Chat_Item_Attachment_Aggregate_Order_By = {
  avg?: Maybe<Chat_Item_Attachment_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Chat_Item_Attachment_Max_Order_By>;
  min?: Maybe<Chat_Item_Attachment_Min_Order_By>;
  stddev?: Maybe<Chat_Item_Attachment_Stddev_Order_By>;
  stddev_pop?: Maybe<Chat_Item_Attachment_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Chat_Item_Attachment_Stddev_Samp_Order_By>;
  sum?: Maybe<Chat_Item_Attachment_Sum_Order_By>;
  var_pop?: Maybe<Chat_Item_Attachment_Var_Pop_Order_By>;
  var_samp?: Maybe<Chat_Item_Attachment_Var_Samp_Order_By>;
  variance?: Maybe<Chat_Item_Attachment_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "chat_item_attachment" */
export type Chat_Item_Attachment_Arr_Rel_Insert_Input = {
  data: Array<Chat_Item_Attachment_Insert_Input>;
  on_conflict?: Maybe<Chat_Item_Attachment_On_Conflict>;
};

/** aggregate avg on columns */
export type Chat_Item_Attachment_Avg_Fields = {
   __typename?: 'chat_item_attachment_avg_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "chat_item_attachment" */
export type Chat_Item_Attachment_Avg_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "chat_item_attachment". All fields are combined with a logical 'AND'. */
export type Chat_Item_Attachment_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Chat_Item_Attachment_Bool_Exp>>>;
  _not?: Maybe<Chat_Item_Attachment_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Chat_Item_Attachment_Bool_Exp>>>;
  chat_item?: Maybe<Chat_Item_Bool_Exp>;
  chat_item_id?: Maybe<Uuid_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  image?: Maybe<Image_Bool_Exp>;
  image_id?: Maybe<Uuid_Comparison_Exp>;
  sort_index?: Maybe<Numeric_Comparison_Exp>;
  type?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "chat_item_attachment" */
export enum Chat_Item_Attachment_Constraint {
  /** unique or primary key constraint */
  ChatItemAttachmentPkey = 'chat_item_attachment_pkey'
}

/** input type for incrementing integer column in table "chat_item_attachment" */
export type Chat_Item_Attachment_Inc_Input = {
  sort_index?: Maybe<Scalars['numeric']>;
};

/** input type for inserting data into table "chat_item_attachment" */
export type Chat_Item_Attachment_Insert_Input = {
  chat_item?: Maybe<Chat_Item_Obj_Rel_Insert_Input>;
  chat_item_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  image?: Maybe<Image_Obj_Rel_Insert_Input>;
  image_id?: Maybe<Scalars['uuid']>;
  sort_index?: Maybe<Scalars['numeric']>;
  type?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Chat_Item_Attachment_Max_Fields = {
   __typename?: 'chat_item_attachment_max_fields';
  chat_item_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  image_id?: Maybe<Scalars['uuid']>;
  sort_index?: Maybe<Scalars['numeric']>;
  type?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "chat_item_attachment" */
export type Chat_Item_Attachment_Max_Order_By = {
  chat_item_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  image_id?: Maybe<Order_By>;
  sort_index?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Chat_Item_Attachment_Min_Fields = {
   __typename?: 'chat_item_attachment_min_fields';
  chat_item_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  image_id?: Maybe<Scalars['uuid']>;
  sort_index?: Maybe<Scalars['numeric']>;
  type?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "chat_item_attachment" */
export type Chat_Item_Attachment_Min_Order_By = {
  chat_item_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  image_id?: Maybe<Order_By>;
  sort_index?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
};

/** response of any mutation on the table "chat_item_attachment" */
export type Chat_Item_Attachment_Mutation_Response = {
   __typename?: 'chat_item_attachment_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Chat_Item_Attachment>;
};

/** input type for inserting object relation for remote table "chat_item_attachment" */
export type Chat_Item_Attachment_Obj_Rel_Insert_Input = {
  data: Chat_Item_Attachment_Insert_Input;
  on_conflict?: Maybe<Chat_Item_Attachment_On_Conflict>;
};

/** on conflict condition type for table "chat_item_attachment" */
export type Chat_Item_Attachment_On_Conflict = {
  constraint: Chat_Item_Attachment_Constraint;
  update_columns: Array<Chat_Item_Attachment_Update_Column>;
  where?: Maybe<Chat_Item_Attachment_Bool_Exp>;
};

/** ordering options when selecting data from "chat_item_attachment" */
export type Chat_Item_Attachment_Order_By = {
  chat_item?: Maybe<Chat_Item_Order_By>;
  chat_item_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  image?: Maybe<Image_Order_By>;
  image_id?: Maybe<Order_By>;
  sort_index?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
};

/** primary key columns input for table: "chat_item_attachment" */
export type Chat_Item_Attachment_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "chat_item_attachment" */
export enum Chat_Item_Attachment_Select_Column {
  /** column name */
  ChatItemId = 'chat_item_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  ImageId = 'image_id',
  /** column name */
  SortIndex = 'sort_index',
  /** column name */
  Type = 'type'
}

/** input type for updating data in table "chat_item_attachment" */
export type Chat_Item_Attachment_Set_Input = {
  chat_item_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  image_id?: Maybe<Scalars['uuid']>;
  sort_index?: Maybe<Scalars['numeric']>;
  type?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Chat_Item_Attachment_Stddev_Fields = {
   __typename?: 'chat_item_attachment_stddev_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "chat_item_attachment" */
export type Chat_Item_Attachment_Stddev_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Chat_Item_Attachment_Stddev_Pop_Fields = {
   __typename?: 'chat_item_attachment_stddev_pop_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "chat_item_attachment" */
export type Chat_Item_Attachment_Stddev_Pop_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Chat_Item_Attachment_Stddev_Samp_Fields = {
   __typename?: 'chat_item_attachment_stddev_samp_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "chat_item_attachment" */
export type Chat_Item_Attachment_Stddev_Samp_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Chat_Item_Attachment_Sum_Fields = {
   __typename?: 'chat_item_attachment_sum_fields';
  sort_index?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "chat_item_attachment" */
export type Chat_Item_Attachment_Sum_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** update columns of table "chat_item_attachment" */
export enum Chat_Item_Attachment_Update_Column {
  /** column name */
  ChatItemId = 'chat_item_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  ImageId = 'image_id',
  /** column name */
  SortIndex = 'sort_index',
  /** column name */
  Type = 'type'
}

/** aggregate var_pop on columns */
export type Chat_Item_Attachment_Var_Pop_Fields = {
   __typename?: 'chat_item_attachment_var_pop_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "chat_item_attachment" */
export type Chat_Item_Attachment_Var_Pop_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Chat_Item_Attachment_Var_Samp_Fields = {
   __typename?: 'chat_item_attachment_var_samp_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "chat_item_attachment" */
export type Chat_Item_Attachment_Var_Samp_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Chat_Item_Attachment_Variance_Fields = {
   __typename?: 'chat_item_attachment_variance_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "chat_item_attachment" */
export type Chat_Item_Attachment_Variance_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "chat_item". All fields are combined with a logical 'AND'. */
export type Chat_Item_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Chat_Item_Bool_Exp>>>;
  _not?: Maybe<Chat_Item_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Chat_Item_Bool_Exp>>>;
  attachments?: Maybe<Chat_Item_Attachment_Bool_Exp>;
  chat?: Maybe<Chat_Bool_Exp>;
  chat_id?: Maybe<Uuid_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  message?: Maybe<Text_Translation_Bool_Exp>;
  message_text_id?: Maybe<Uuid_Comparison_Exp>;
  sender_chat_member?: Maybe<Chat_Member_Bool_Exp>;
  sender_chat_member_id?: Maybe<Uuid_Comparison_Exp>;
  sender_todo_assignee?: Maybe<Todo_Assignee_Bool_Exp>;
  sender_todo_assignee_id?: Maybe<Uuid_Comparison_Exp>;
  todo?: Maybe<Todo_Bool_Exp>;
  todo_id?: Maybe<Uuid_Comparison_Exp>;
  todos?: Maybe<Todo_Bool_Exp>;
  type?: Maybe<Chat_Item_Type_Enum_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "chat_item" */
export enum Chat_Item_Constraint {
  /** unique or primary key constraint */
  MessagePkey = 'message_pkey'
}

/** input type for inserting data into table "chat_item" */
export type Chat_Item_Insert_Input = {
  attachments?: Maybe<Chat_Item_Attachment_Arr_Rel_Insert_Input>;
  chat?: Maybe<Chat_Obj_Rel_Insert_Input>;
  chat_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  message?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  message_text_id?: Maybe<Scalars['uuid']>;
  sender_chat_member?: Maybe<Chat_Member_Obj_Rel_Insert_Input>;
  sender_chat_member_id?: Maybe<Scalars['uuid']>;
  sender_todo_assignee?: Maybe<Todo_Assignee_Obj_Rel_Insert_Input>;
  sender_todo_assignee_id?: Maybe<Scalars['uuid']>;
  todo?: Maybe<Todo_Obj_Rel_Insert_Input>;
  todo_id?: Maybe<Scalars['uuid']>;
  todos?: Maybe<Todo_Arr_Rel_Insert_Input>;
  type?: Maybe<Chat_Item_Type_Enum>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate max on columns */
export type Chat_Item_Max_Fields = {
   __typename?: 'chat_item_max_fields';
  chat_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  message_text_id?: Maybe<Scalars['uuid']>;
  sender_chat_member_id?: Maybe<Scalars['uuid']>;
  sender_todo_assignee_id?: Maybe<Scalars['uuid']>;
  todo_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** order by max() on columns of table "chat_item" */
export type Chat_Item_Max_Order_By = {
  chat_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  message_text_id?: Maybe<Order_By>;
  sender_chat_member_id?: Maybe<Order_By>;
  sender_todo_assignee_id?: Maybe<Order_By>;
  todo_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Chat_Item_Min_Fields = {
   __typename?: 'chat_item_min_fields';
  chat_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  message_text_id?: Maybe<Scalars['uuid']>;
  sender_chat_member_id?: Maybe<Scalars['uuid']>;
  sender_todo_assignee_id?: Maybe<Scalars['uuid']>;
  todo_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** order by min() on columns of table "chat_item" */
export type Chat_Item_Min_Order_By = {
  chat_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  message_text_id?: Maybe<Order_By>;
  sender_chat_member_id?: Maybe<Order_By>;
  sender_todo_assignee_id?: Maybe<Order_By>;
  todo_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** response of any mutation on the table "chat_item" */
export type Chat_Item_Mutation_Response = {
   __typename?: 'chat_item_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Chat_Item>;
};

/** input type for inserting object relation for remote table "chat_item" */
export type Chat_Item_Obj_Rel_Insert_Input = {
  data: Chat_Item_Insert_Input;
  on_conflict?: Maybe<Chat_Item_On_Conflict>;
};

/** on conflict condition type for table "chat_item" */
export type Chat_Item_On_Conflict = {
  constraint: Chat_Item_Constraint;
  update_columns: Array<Chat_Item_Update_Column>;
  where?: Maybe<Chat_Item_Bool_Exp>;
};

/** ordering options when selecting data from "chat_item" */
export type Chat_Item_Order_By = {
  attachments_aggregate?: Maybe<Chat_Item_Attachment_Aggregate_Order_By>;
  chat?: Maybe<Chat_Order_By>;
  chat_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  message?: Maybe<Text_Translation_Order_By>;
  message_text_id?: Maybe<Order_By>;
  sender_chat_member?: Maybe<Chat_Member_Order_By>;
  sender_chat_member_id?: Maybe<Order_By>;
  sender_todo_assignee?: Maybe<Todo_Assignee_Order_By>;
  sender_todo_assignee_id?: Maybe<Order_By>;
  todo?: Maybe<Todo_Order_By>;
  todo_id?: Maybe<Order_By>;
  todos_aggregate?: Maybe<Todo_Aggregate_Order_By>;
  type?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** primary key columns input for table: "chat_item" */
export type Chat_Item_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "chat_item" */
export enum Chat_Item_Select_Column {
  /** column name */
  ChatId = 'chat_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  MessageTextId = 'message_text_id',
  /** column name */
  SenderChatMemberId = 'sender_chat_member_id',
  /** column name */
  SenderTodoAssigneeId = 'sender_todo_assignee_id',
  /** column name */
  TodoId = 'todo_id',
  /** column name */
  Type = 'type',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** input type for updating data in table "chat_item" */
export type Chat_Item_Set_Input = {
  chat_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  message_text_id?: Maybe<Scalars['uuid']>;
  sender_chat_member_id?: Maybe<Scalars['uuid']>;
  sender_todo_assignee_id?: Maybe<Scalars['uuid']>;
  todo_id?: Maybe<Scalars['uuid']>;
  type?: Maybe<Chat_Item_Type_Enum>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** columns and relationships of "chat_item_type" */
export type Chat_Item_Type = {
   __typename?: 'chat_item_type';
  value: Scalars['String'];
};

/** aggregated selection of "chat_item_type" */
export type Chat_Item_Type_Aggregate = {
   __typename?: 'chat_item_type_aggregate';
  aggregate?: Maybe<Chat_Item_Type_Aggregate_Fields>;
  nodes: Array<Chat_Item_Type>;
};

/** aggregate fields of "chat_item_type" */
export type Chat_Item_Type_Aggregate_Fields = {
   __typename?: 'chat_item_type_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Chat_Item_Type_Max_Fields>;
  min?: Maybe<Chat_Item_Type_Min_Fields>;
};


/** aggregate fields of "chat_item_type" */
export type Chat_Item_Type_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Chat_Item_Type_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "chat_item_type" */
export type Chat_Item_Type_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Chat_Item_Type_Max_Order_By>;
  min?: Maybe<Chat_Item_Type_Min_Order_By>;
};

/** input type for inserting array relation for remote table "chat_item_type" */
export type Chat_Item_Type_Arr_Rel_Insert_Input = {
  data: Array<Chat_Item_Type_Insert_Input>;
  on_conflict?: Maybe<Chat_Item_Type_On_Conflict>;
};

/** Boolean expression to filter rows from the table "chat_item_type". All fields are combined with a logical 'AND'. */
export type Chat_Item_Type_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Chat_Item_Type_Bool_Exp>>>;
  _not?: Maybe<Chat_Item_Type_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Chat_Item_Type_Bool_Exp>>>;
  value?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "chat_item_type" */
export enum Chat_Item_Type_Constraint {
  /** unique or primary key constraint */
  ChatItemTypePkey = 'chat_item_type_pkey'
}

export enum Chat_Item_Type_Enum {
  ChatCreated = 'chat_created',
  ChatUpdatedName = 'chat_updated_name',
  MemberAdded = 'member_added',
  MemberLeft = 'member_left',
  MemberRemoved = 'member_removed',
  TodoAddedAssignee = 'todo_added_assignee',
  TodoAddedImage = 'todo_added_image',
  TodoAddedNotifyee = 'todo_added_notifyee',
  TodoCompleted = 'todo_completed',
  TodoCreated = 'todo_created',
  TodoRemovedAssignee = 'todo_removed_assignee',
  TodoRemovedNotifyee = 'todo_removed_notifyee',
  TodoReopened = 'todo_reopened',
  TodoUpdatedDescription = 'todo_updated_description',
  TodoUpdatedDueDate = 'todo_updated_due_date',
  UserMessage = 'user_message'
}

/** expression to compare columns of type chat_item_type_enum. All fields are combined with logical 'AND'. */
export type Chat_Item_Type_Enum_Comparison_Exp = {
  _eq?: Maybe<Chat_Item_Type_Enum>;
  _in?: Maybe<Array<Chat_Item_Type_Enum>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _neq?: Maybe<Chat_Item_Type_Enum>;
  _nin?: Maybe<Array<Chat_Item_Type_Enum>>;
};

/** input type for inserting data into table "chat_item_type" */
export type Chat_Item_Type_Insert_Input = {
  value?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Chat_Item_Type_Max_Fields = {
   __typename?: 'chat_item_type_max_fields';
  value?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "chat_item_type" */
export type Chat_Item_Type_Max_Order_By = {
  value?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Chat_Item_Type_Min_Fields = {
   __typename?: 'chat_item_type_min_fields';
  value?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "chat_item_type" */
export type Chat_Item_Type_Min_Order_By = {
  value?: Maybe<Order_By>;
};

/** response of any mutation on the table "chat_item_type" */
export type Chat_Item_Type_Mutation_Response = {
   __typename?: 'chat_item_type_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Chat_Item_Type>;
};

/** input type for inserting object relation for remote table "chat_item_type" */
export type Chat_Item_Type_Obj_Rel_Insert_Input = {
  data: Chat_Item_Type_Insert_Input;
  on_conflict?: Maybe<Chat_Item_Type_On_Conflict>;
};

/** on conflict condition type for table "chat_item_type" */
export type Chat_Item_Type_On_Conflict = {
  constraint: Chat_Item_Type_Constraint;
  update_columns: Array<Chat_Item_Type_Update_Column>;
  where?: Maybe<Chat_Item_Type_Bool_Exp>;
};

/** ordering options when selecting data from "chat_item_type" */
export type Chat_Item_Type_Order_By = {
  value?: Maybe<Order_By>;
};

/** primary key columns input for table: "chat_item_type" */
export type Chat_Item_Type_Pk_Columns_Input = {
  value: Scalars['String'];
};

/** select columns of table "chat_item_type" */
export enum Chat_Item_Type_Select_Column {
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "chat_item_type" */
export type Chat_Item_Type_Set_Input = {
  value?: Maybe<Scalars['String']>;
};

/** update columns of table "chat_item_type" */
export enum Chat_Item_Type_Update_Column {
  /** column name */
  Value = 'value'
}

/** update columns of table "chat_item" */
export enum Chat_Item_Update_Column {
  /** column name */
  ChatId = 'chat_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  MessageTextId = 'message_text_id',
  /** column name */
  SenderChatMemberId = 'sender_chat_member_id',
  /** column name */
  SenderTodoAssigneeId = 'sender_todo_assignee_id',
  /** column name */
  TodoId = 'todo_id',
  /** column name */
  Type = 'type',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** aggregate max on columns */
export type Chat_Max_Fields = {
   __typename?: 'chat_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_employee_id?: Maybe<Scalars['uuid']>;
  created_by_project_worker_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  last_message_at?: Maybe<Scalars['timestamptz']>;
  name?: Maybe<Scalars['String']>;
  project_id?: Maybe<Scalars['uuid']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** order by max() on columns of table "chat" */
export type Chat_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  created_by_employee_id?: Maybe<Order_By>;
  created_by_project_worker_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  last_message_at?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** columns and relationships of "chat_member" */
export type Chat_Member = {
   __typename?: 'chat_member';
  /** An object relationship */
  chat: Chat;
  chat_id: Scalars['uuid'];
  /** An array relationship */
  chat_items: Array<Chat_Item>;
  /** An aggregated array relationship */
  chat_items_aggregate: Chat_Item_Aggregate;
  created_at: Scalars['timestamptz'];
  deleted_at?: Maybe<Scalars['timestamptz']>;
  /** An object relationship */
  employee?: Maybe<General_Contractor_Employee>;
  general_contractor_employee_id?: Maybe<Scalars['uuid']>;
  id: Scalars['uuid'];
  last_read: Scalars['timestamptz'];
  /** An object relationship */
  project_worker?: Maybe<Project_Worker>;
  project_worker_id?: Maybe<Scalars['uuid']>;
  updated_at: Scalars['timestamptz'];
};


/** columns and relationships of "chat_member" */
export type Chat_MemberChat_ItemsArgs = {
  distinct_on?: Maybe<Array<Chat_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Item_Order_By>>;
  where?: Maybe<Chat_Item_Bool_Exp>;
};


/** columns and relationships of "chat_member" */
export type Chat_MemberChat_Items_AggregateArgs = {
  distinct_on?: Maybe<Array<Chat_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Item_Order_By>>;
  where?: Maybe<Chat_Item_Bool_Exp>;
};

/** aggregated selection of "chat_member" */
export type Chat_Member_Aggregate = {
   __typename?: 'chat_member_aggregate';
  aggregate?: Maybe<Chat_Member_Aggregate_Fields>;
  nodes: Array<Chat_Member>;
};

/** aggregate fields of "chat_member" */
export type Chat_Member_Aggregate_Fields = {
   __typename?: 'chat_member_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Chat_Member_Max_Fields>;
  min?: Maybe<Chat_Member_Min_Fields>;
};


/** aggregate fields of "chat_member" */
export type Chat_Member_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Chat_Member_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "chat_member" */
export type Chat_Member_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Chat_Member_Max_Order_By>;
  min?: Maybe<Chat_Member_Min_Order_By>;
};

/** input type for inserting array relation for remote table "chat_member" */
export type Chat_Member_Arr_Rel_Insert_Input = {
  data: Array<Chat_Member_Insert_Input>;
  on_conflict?: Maybe<Chat_Member_On_Conflict>;
};

/** Boolean expression to filter rows from the table "chat_member". All fields are combined with a logical 'AND'. */
export type Chat_Member_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Chat_Member_Bool_Exp>>>;
  _not?: Maybe<Chat_Member_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Chat_Member_Bool_Exp>>>;
  chat?: Maybe<Chat_Bool_Exp>;
  chat_id?: Maybe<Uuid_Comparison_Exp>;
  chat_items?: Maybe<Chat_Item_Bool_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  deleted_at?: Maybe<Timestamptz_Comparison_Exp>;
  employee?: Maybe<General_Contractor_Employee_Bool_Exp>;
  general_contractor_employee_id?: Maybe<Uuid_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  last_read?: Maybe<Timestamptz_Comparison_Exp>;
  project_worker?: Maybe<Project_Worker_Bool_Exp>;
  project_worker_id?: Maybe<Uuid_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "chat_member" */
export enum Chat_Member_Constraint {
  /** unique or primary key constraint */
  ChatMemberChatIdGeneralContractorEmployeeIdDeletedAtK = 'chat_member_chat_id_general_contractor_employee_id_deleted_at_k',
  /** unique or primary key constraint */
  ChatMemberChatIdProjectWorkerIdDeletedAtKey = 'chat_member_chat_id_project_worker_id_deleted_at_key',
  /** unique or primary key constraint */
  ChatMemberPkey = 'chat_member_pkey'
}

/** input type for inserting data into table "chat_member" */
export type Chat_Member_Insert_Input = {
  chat?: Maybe<Chat_Obj_Rel_Insert_Input>;
  chat_id?: Maybe<Scalars['uuid']>;
  chat_items?: Maybe<Chat_Item_Arr_Rel_Insert_Input>;
  created_at?: Maybe<Scalars['timestamptz']>;
  deleted_at?: Maybe<Scalars['timestamptz']>;
  employee?: Maybe<General_Contractor_Employee_Obj_Rel_Insert_Input>;
  general_contractor_employee_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  last_read?: Maybe<Scalars['timestamptz']>;
  project_worker?: Maybe<Project_Worker_Obj_Rel_Insert_Input>;
  project_worker_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate max on columns */
export type Chat_Member_Max_Fields = {
   __typename?: 'chat_member_max_fields';
  chat_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  deleted_at?: Maybe<Scalars['timestamptz']>;
  general_contractor_employee_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  last_read?: Maybe<Scalars['timestamptz']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** order by max() on columns of table "chat_member" */
export type Chat_Member_Max_Order_By = {
  chat_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  deleted_at?: Maybe<Order_By>;
  general_contractor_employee_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  last_read?: Maybe<Order_By>;
  project_worker_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Chat_Member_Min_Fields = {
   __typename?: 'chat_member_min_fields';
  chat_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  deleted_at?: Maybe<Scalars['timestamptz']>;
  general_contractor_employee_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  last_read?: Maybe<Scalars['timestamptz']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** order by min() on columns of table "chat_member" */
export type Chat_Member_Min_Order_By = {
  chat_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  deleted_at?: Maybe<Order_By>;
  general_contractor_employee_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  last_read?: Maybe<Order_By>;
  project_worker_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** response of any mutation on the table "chat_member" */
export type Chat_Member_Mutation_Response = {
   __typename?: 'chat_member_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Chat_Member>;
};

/** input type for inserting object relation for remote table "chat_member" */
export type Chat_Member_Obj_Rel_Insert_Input = {
  data: Chat_Member_Insert_Input;
  on_conflict?: Maybe<Chat_Member_On_Conflict>;
};

/** on conflict condition type for table "chat_member" */
export type Chat_Member_On_Conflict = {
  constraint: Chat_Member_Constraint;
  update_columns: Array<Chat_Member_Update_Column>;
  where?: Maybe<Chat_Member_Bool_Exp>;
};

/** ordering options when selecting data from "chat_member" */
export type Chat_Member_Order_By = {
  chat?: Maybe<Chat_Order_By>;
  chat_id?: Maybe<Order_By>;
  chat_items_aggregate?: Maybe<Chat_Item_Aggregate_Order_By>;
  created_at?: Maybe<Order_By>;
  deleted_at?: Maybe<Order_By>;
  employee?: Maybe<General_Contractor_Employee_Order_By>;
  general_contractor_employee_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  last_read?: Maybe<Order_By>;
  project_worker?: Maybe<Project_Worker_Order_By>;
  project_worker_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** primary key columns input for table: "chat_member" */
export type Chat_Member_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "chat_member" */
export enum Chat_Member_Select_Column {
  /** column name */
  ChatId = 'chat_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DeletedAt = 'deleted_at',
  /** column name */
  GeneralContractorEmployeeId = 'general_contractor_employee_id',
  /** column name */
  Id = 'id',
  /** column name */
  LastRead = 'last_read',
  /** column name */
  ProjectWorkerId = 'project_worker_id',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** input type for updating data in table "chat_member" */
export type Chat_Member_Set_Input = {
  chat_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  deleted_at?: Maybe<Scalars['timestamptz']>;
  general_contractor_employee_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  last_read?: Maybe<Scalars['timestamptz']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** update columns of table "chat_member" */
export enum Chat_Member_Update_Column {
  /** column name */
  ChatId = 'chat_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DeletedAt = 'deleted_at',
  /** column name */
  GeneralContractorEmployeeId = 'general_contractor_employee_id',
  /** column name */
  Id = 'id',
  /** column name */
  LastRead = 'last_read',
  /** column name */
  ProjectWorkerId = 'project_worker_id',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** aggregate min on columns */
export type Chat_Min_Fields = {
   __typename?: 'chat_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_employee_id?: Maybe<Scalars['uuid']>;
  created_by_project_worker_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  last_message_at?: Maybe<Scalars['timestamptz']>;
  name?: Maybe<Scalars['String']>;
  project_id?: Maybe<Scalars['uuid']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** order by min() on columns of table "chat" */
export type Chat_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  created_by_employee_id?: Maybe<Order_By>;
  created_by_project_worker_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  last_message_at?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** response of any mutation on the table "chat" */
export type Chat_Mutation_Response = {
   __typename?: 'chat_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Chat>;
};

/** input type for inserting object relation for remote table "chat" */
export type Chat_Obj_Rel_Insert_Input = {
  data: Chat_Insert_Input;
  on_conflict?: Maybe<Chat_On_Conflict>;
};

/** on conflict condition type for table "chat" */
export type Chat_On_Conflict = {
  constraint: Chat_Constraint;
  update_columns: Array<Chat_Update_Column>;
  where?: Maybe<Chat_Bool_Exp>;
};

/** ordering options when selecting data from "chat" */
export type Chat_Order_By = {
  created_at?: Maybe<Order_By>;
  created_by_employee?: Maybe<General_Contractor_Employee_Order_By>;
  created_by_employee_id?: Maybe<Order_By>;
  created_by_project_worker_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  items_aggregate?: Maybe<Chat_Item_Aggregate_Order_By>;
  last_message_at?: Maybe<Order_By>;
  members_aggregate?: Maybe<Chat_Member_Aggregate_Order_By>;
  name?: Maybe<Order_By>;
  project?: Maybe<Project_Order_By>;
  project_id?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  user_notifications_aggregate?: Maybe<User_Notification_Aggregate_Order_By>;
};

/** primary key columns input for table: "chat" */
export type Chat_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "chat" */
export enum Chat_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CreatedByEmployeeId = 'created_by_employee_id',
  /** column name */
  CreatedByProjectWorkerId = 'created_by_project_worker_id',
  /** column name */
  Id = 'id',
  /** column name */
  LastMessageAt = 'last_message_at',
  /** column name */
  Name = 'name',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  Type = 'type',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** input type for updating data in table "chat" */
export type Chat_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_employee_id?: Maybe<Scalars['uuid']>;
  created_by_project_worker_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  last_message_at?: Maybe<Scalars['timestamptz']>;
  name?: Maybe<Scalars['String']>;
  project_id?: Maybe<Scalars['uuid']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** update columns of table "chat" */
export enum Chat_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CreatedByEmployeeId = 'created_by_employee_id',
  /** column name */
  CreatedByProjectWorkerId = 'created_by_project_worker_id',
  /** column name */
  Id = 'id',
  /** column name */
  LastMessageAt = 'last_message_at',
  /** column name */
  Name = 'name',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  Type = 'type',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** columns and relationships of "checklist_item" */
export type Checklist_Item = {
   __typename?: 'checklist_item';
  /** An array relationship */
  checklist_item_configs: Array<Checklist_Item_Config>;
  /** An aggregated array relationship */
  checklist_item_configs_aggregate: Checklist_Item_Config_Aggregate;
  /** An array relationship */
  checklist_item_notify_emails: Array<Checklist_Item_Notify_Email>;
  /** An aggregated array relationship */
  checklist_item_notify_emails_aggregate: Checklist_Item_Notify_Email_Aggregate;
  created_at: Scalars['timestamptz'];
  data_type: Scalars['String'];
  /** An object relationship */
  description: Text_Translation;
  description_id: Scalars['uuid'];
  did_notify: Scalars['Boolean'];
  id: Scalars['uuid'];
  option_response?: Maybe<Scalars['String']>;
  parent_id?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  project?: Maybe<Project>;
  project_id?: Maybe<Scalars['uuid']>;
  sort_index: Scalars['numeric'];
  /** An object relationship */
  subcontractor?: Maybe<Subcontractor>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  text_response: Text_Translation;
  text_response_id: Scalars['uuid'];
  type: Checklist_Item_Type_Enum;
  updated_at: Scalars['timestamptz'];
};


/** columns and relationships of "checklist_item" */
export type Checklist_ItemChecklist_Item_ConfigsArgs = {
  distinct_on?: Maybe<Array<Checklist_Item_Config_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Checklist_Item_Config_Order_By>>;
  where?: Maybe<Checklist_Item_Config_Bool_Exp>;
};


/** columns and relationships of "checklist_item" */
export type Checklist_ItemChecklist_Item_Configs_AggregateArgs = {
  distinct_on?: Maybe<Array<Checklist_Item_Config_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Checklist_Item_Config_Order_By>>;
  where?: Maybe<Checklist_Item_Config_Bool_Exp>;
};


/** columns and relationships of "checklist_item" */
export type Checklist_ItemChecklist_Item_Notify_EmailsArgs = {
  distinct_on?: Maybe<Array<Checklist_Item_Notify_Email_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Checklist_Item_Notify_Email_Order_By>>;
  where?: Maybe<Checklist_Item_Notify_Email_Bool_Exp>;
};


/** columns and relationships of "checklist_item" */
export type Checklist_ItemChecklist_Item_Notify_Emails_AggregateArgs = {
  distinct_on?: Maybe<Array<Checklist_Item_Notify_Email_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Checklist_Item_Notify_Email_Order_By>>;
  where?: Maybe<Checklist_Item_Notify_Email_Bool_Exp>;
};

/** aggregated selection of "checklist_item" */
export type Checklist_Item_Aggregate = {
   __typename?: 'checklist_item_aggregate';
  aggregate?: Maybe<Checklist_Item_Aggregate_Fields>;
  nodes: Array<Checklist_Item>;
};

/** aggregate fields of "checklist_item" */
export type Checklist_Item_Aggregate_Fields = {
   __typename?: 'checklist_item_aggregate_fields';
  avg?: Maybe<Checklist_Item_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Checklist_Item_Max_Fields>;
  min?: Maybe<Checklist_Item_Min_Fields>;
  stddev?: Maybe<Checklist_Item_Stddev_Fields>;
  stddev_pop?: Maybe<Checklist_Item_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Checklist_Item_Stddev_Samp_Fields>;
  sum?: Maybe<Checklist_Item_Sum_Fields>;
  var_pop?: Maybe<Checklist_Item_Var_Pop_Fields>;
  var_samp?: Maybe<Checklist_Item_Var_Samp_Fields>;
  variance?: Maybe<Checklist_Item_Variance_Fields>;
};


/** aggregate fields of "checklist_item" */
export type Checklist_Item_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Checklist_Item_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "checklist_item" */
export type Checklist_Item_Aggregate_Order_By = {
  avg?: Maybe<Checklist_Item_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Checklist_Item_Max_Order_By>;
  min?: Maybe<Checklist_Item_Min_Order_By>;
  stddev?: Maybe<Checklist_Item_Stddev_Order_By>;
  stddev_pop?: Maybe<Checklist_Item_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Checklist_Item_Stddev_Samp_Order_By>;
  sum?: Maybe<Checklist_Item_Sum_Order_By>;
  var_pop?: Maybe<Checklist_Item_Var_Pop_Order_By>;
  var_samp?: Maybe<Checklist_Item_Var_Samp_Order_By>;
  variance?: Maybe<Checklist_Item_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "checklist_item" */
export type Checklist_Item_Arr_Rel_Insert_Input = {
  data: Array<Checklist_Item_Insert_Input>;
  on_conflict?: Maybe<Checklist_Item_On_Conflict>;
};

/** aggregate avg on columns */
export type Checklist_Item_Avg_Fields = {
   __typename?: 'checklist_item_avg_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "checklist_item" */
export type Checklist_Item_Avg_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "checklist_item". All fields are combined with a logical 'AND'. */
export type Checklist_Item_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Checklist_Item_Bool_Exp>>>;
  _not?: Maybe<Checklist_Item_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Checklist_Item_Bool_Exp>>>;
  checklist_item_configs?: Maybe<Checklist_Item_Config_Bool_Exp>;
  checklist_item_notify_emails?: Maybe<Checklist_Item_Notify_Email_Bool_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  data_type?: Maybe<String_Comparison_Exp>;
  description?: Maybe<Text_Translation_Bool_Exp>;
  description_id?: Maybe<Uuid_Comparison_Exp>;
  did_notify?: Maybe<Boolean_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  option_response?: Maybe<String_Comparison_Exp>;
  parent_id?: Maybe<Uuid_Comparison_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  sort_index?: Maybe<Numeric_Comparison_Exp>;
  subcontractor?: Maybe<Subcontractor_Bool_Exp>;
  subcontractor_id?: Maybe<Uuid_Comparison_Exp>;
  text_response?: Maybe<Text_Translation_Bool_Exp>;
  text_response_id?: Maybe<Uuid_Comparison_Exp>;
  type?: Maybe<Checklist_Item_Type_Enum_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** columns and relationships of "checklist_item_config" */
export type Checklist_Item_Config = {
   __typename?: 'checklist_item_config';
  /** An object relationship */
  checklist_item: Checklist_Item;
  checklist_item_id: Scalars['uuid'];
  config: Checklist_Item_Config_Type_Enum;
  id: Scalars['uuid'];
};

/** aggregated selection of "checklist_item_config" */
export type Checklist_Item_Config_Aggregate = {
   __typename?: 'checklist_item_config_aggregate';
  aggregate?: Maybe<Checklist_Item_Config_Aggregate_Fields>;
  nodes: Array<Checklist_Item_Config>;
};

/** aggregate fields of "checklist_item_config" */
export type Checklist_Item_Config_Aggregate_Fields = {
   __typename?: 'checklist_item_config_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Checklist_Item_Config_Max_Fields>;
  min?: Maybe<Checklist_Item_Config_Min_Fields>;
};


/** aggregate fields of "checklist_item_config" */
export type Checklist_Item_Config_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Checklist_Item_Config_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "checklist_item_config" */
export type Checklist_Item_Config_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Checklist_Item_Config_Max_Order_By>;
  min?: Maybe<Checklist_Item_Config_Min_Order_By>;
};

/** input type for inserting array relation for remote table "checklist_item_config" */
export type Checklist_Item_Config_Arr_Rel_Insert_Input = {
  data: Array<Checklist_Item_Config_Insert_Input>;
  on_conflict?: Maybe<Checklist_Item_Config_On_Conflict>;
};

/** Boolean expression to filter rows from the table "checklist_item_config". All fields are combined with a logical 'AND'. */
export type Checklist_Item_Config_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Checklist_Item_Config_Bool_Exp>>>;
  _not?: Maybe<Checklist_Item_Config_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Checklist_Item_Config_Bool_Exp>>>;
  checklist_item?: Maybe<Checklist_Item_Bool_Exp>;
  checklist_item_id?: Maybe<Uuid_Comparison_Exp>;
  config?: Maybe<Checklist_Item_Config_Type_Enum_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "checklist_item_config" */
export enum Checklist_Item_Config_Constraint {
  /** unique or primary key constraint */
  ChecklistItemConfigChecklistItemIdConfigKey = 'checklist_item_config_checklist_item_id_config_key',
  /** unique or primary key constraint */
  ChecklistItemConfigPkey = 'checklist_item_config_pkey'
}

/** input type for inserting data into table "checklist_item_config" */
export type Checklist_Item_Config_Insert_Input = {
  checklist_item?: Maybe<Checklist_Item_Obj_Rel_Insert_Input>;
  checklist_item_id?: Maybe<Scalars['uuid']>;
  config?: Maybe<Checklist_Item_Config_Type_Enum>;
  id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Checklist_Item_Config_Max_Fields = {
   __typename?: 'checklist_item_config_max_fields';
  checklist_item_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "checklist_item_config" */
export type Checklist_Item_Config_Max_Order_By = {
  checklist_item_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Checklist_Item_Config_Min_Fields = {
   __typename?: 'checklist_item_config_min_fields';
  checklist_item_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "checklist_item_config" */
export type Checklist_Item_Config_Min_Order_By = {
  checklist_item_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
};

/** response of any mutation on the table "checklist_item_config" */
export type Checklist_Item_Config_Mutation_Response = {
   __typename?: 'checklist_item_config_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Checklist_Item_Config>;
};

/** input type for inserting object relation for remote table "checklist_item_config" */
export type Checklist_Item_Config_Obj_Rel_Insert_Input = {
  data: Checklist_Item_Config_Insert_Input;
  on_conflict?: Maybe<Checklist_Item_Config_On_Conflict>;
};

/** on conflict condition type for table "checklist_item_config" */
export type Checklist_Item_Config_On_Conflict = {
  constraint: Checklist_Item_Config_Constraint;
  update_columns: Array<Checklist_Item_Config_Update_Column>;
  where?: Maybe<Checklist_Item_Config_Bool_Exp>;
};

/** ordering options when selecting data from "checklist_item_config" */
export type Checklist_Item_Config_Order_By = {
  checklist_item?: Maybe<Checklist_Item_Order_By>;
  checklist_item_id?: Maybe<Order_By>;
  config?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
};

/** primary key columns input for table: "checklist_item_config" */
export type Checklist_Item_Config_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "checklist_item_config" */
export enum Checklist_Item_Config_Select_Column {
  /** column name */
  ChecklistItemId = 'checklist_item_id',
  /** column name */
  Config = 'config',
  /** column name */
  Id = 'id'
}

/** input type for updating data in table "checklist_item_config" */
export type Checklist_Item_Config_Set_Input = {
  checklist_item_id?: Maybe<Scalars['uuid']>;
  config?: Maybe<Checklist_Item_Config_Type_Enum>;
  id?: Maybe<Scalars['uuid']>;
};

/** columns and relationships of "checklist_item_config_type" */
export type Checklist_Item_Config_Type = {
   __typename?: 'checklist_item_config_type';
  value: Scalars['String'];
};

/** aggregated selection of "checklist_item_config_type" */
export type Checklist_Item_Config_Type_Aggregate = {
   __typename?: 'checklist_item_config_type_aggregate';
  aggregate?: Maybe<Checklist_Item_Config_Type_Aggregate_Fields>;
  nodes: Array<Checklist_Item_Config_Type>;
};

/** aggregate fields of "checklist_item_config_type" */
export type Checklist_Item_Config_Type_Aggregate_Fields = {
   __typename?: 'checklist_item_config_type_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Checklist_Item_Config_Type_Max_Fields>;
  min?: Maybe<Checklist_Item_Config_Type_Min_Fields>;
};


/** aggregate fields of "checklist_item_config_type" */
export type Checklist_Item_Config_Type_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Checklist_Item_Config_Type_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "checklist_item_config_type" */
export type Checklist_Item_Config_Type_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Checklist_Item_Config_Type_Max_Order_By>;
  min?: Maybe<Checklist_Item_Config_Type_Min_Order_By>;
};

/** input type for inserting array relation for remote table "checklist_item_config_type" */
export type Checklist_Item_Config_Type_Arr_Rel_Insert_Input = {
  data: Array<Checklist_Item_Config_Type_Insert_Input>;
  on_conflict?: Maybe<Checklist_Item_Config_Type_On_Conflict>;
};

/** Boolean expression to filter rows from the table "checklist_item_config_type". All fields are combined with a logical 'AND'. */
export type Checklist_Item_Config_Type_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Checklist_Item_Config_Type_Bool_Exp>>>;
  _not?: Maybe<Checklist_Item_Config_Type_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Checklist_Item_Config_Type_Bool_Exp>>>;
  value?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "checklist_item_config_type" */
export enum Checklist_Item_Config_Type_Constraint {
  /** unique or primary key constraint */
  ChecklistItemConfigTypePkey = 'checklist_item_config_type_pkey'
}

export enum Checklist_Item_Config_Type_Enum {
  NotifyNo = 'notify_no',
  NotifyYes = 'notify_yes',
  OptionNa = 'option_na',
  OptionNo = 'option_no',
  OptionYes = 'option_yes',
  ResponseOnNo = 'response_on_no',
  ResponseOnYes = 'response_on_yes',
  ResponseRequired = 'response_required'
}

/** expression to compare columns of type checklist_item_config_type_enum. All fields are combined with logical 'AND'. */
export type Checklist_Item_Config_Type_Enum_Comparison_Exp = {
  _eq?: Maybe<Checklist_Item_Config_Type_Enum>;
  _in?: Maybe<Array<Checklist_Item_Config_Type_Enum>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _neq?: Maybe<Checklist_Item_Config_Type_Enum>;
  _nin?: Maybe<Array<Checklist_Item_Config_Type_Enum>>;
};

/** input type for inserting data into table "checklist_item_config_type" */
export type Checklist_Item_Config_Type_Insert_Input = {
  value?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Checklist_Item_Config_Type_Max_Fields = {
   __typename?: 'checklist_item_config_type_max_fields';
  value?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "checklist_item_config_type" */
export type Checklist_Item_Config_Type_Max_Order_By = {
  value?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Checklist_Item_Config_Type_Min_Fields = {
   __typename?: 'checklist_item_config_type_min_fields';
  value?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "checklist_item_config_type" */
export type Checklist_Item_Config_Type_Min_Order_By = {
  value?: Maybe<Order_By>;
};

/** response of any mutation on the table "checklist_item_config_type" */
export type Checklist_Item_Config_Type_Mutation_Response = {
   __typename?: 'checklist_item_config_type_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Checklist_Item_Config_Type>;
};

/** input type for inserting object relation for remote table "checklist_item_config_type" */
export type Checklist_Item_Config_Type_Obj_Rel_Insert_Input = {
  data: Checklist_Item_Config_Type_Insert_Input;
  on_conflict?: Maybe<Checklist_Item_Config_Type_On_Conflict>;
};

/** on conflict condition type for table "checklist_item_config_type" */
export type Checklist_Item_Config_Type_On_Conflict = {
  constraint: Checklist_Item_Config_Type_Constraint;
  update_columns: Array<Checklist_Item_Config_Type_Update_Column>;
  where?: Maybe<Checklist_Item_Config_Type_Bool_Exp>;
};

/** ordering options when selecting data from "checklist_item_config_type" */
export type Checklist_Item_Config_Type_Order_By = {
  value?: Maybe<Order_By>;
};

/** primary key columns input for table: "checklist_item_config_type" */
export type Checklist_Item_Config_Type_Pk_Columns_Input = {
  value: Scalars['String'];
};

/** select columns of table "checklist_item_config_type" */
export enum Checklist_Item_Config_Type_Select_Column {
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "checklist_item_config_type" */
export type Checklist_Item_Config_Type_Set_Input = {
  value?: Maybe<Scalars['String']>;
};

/** update columns of table "checklist_item_config_type" */
export enum Checklist_Item_Config_Type_Update_Column {
  /** column name */
  Value = 'value'
}

/** update columns of table "checklist_item_config" */
export enum Checklist_Item_Config_Update_Column {
  /** column name */
  ChecklistItemId = 'checklist_item_id',
  /** column name */
  Config = 'config',
  /** column name */
  Id = 'id'
}

/** unique or primary key constraints on table "checklist_item" */
export enum Checklist_Item_Constraint {
  /** unique or primary key constraint */
  ChecklistItemPkey = 'checklist_item_pkey'
}

/** input type for incrementing integer column in table "checklist_item" */
export type Checklist_Item_Inc_Input = {
  sort_index?: Maybe<Scalars['numeric']>;
};

/** input type for inserting data into table "checklist_item" */
export type Checklist_Item_Insert_Input = {
  checklist_item_configs?: Maybe<Checklist_Item_Config_Arr_Rel_Insert_Input>;
  checklist_item_notify_emails?: Maybe<Checklist_Item_Notify_Email_Arr_Rel_Insert_Input>;
  created_at?: Maybe<Scalars['timestamptz']>;
  data_type?: Maybe<Scalars['String']>;
  description?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  description_id?: Maybe<Scalars['uuid']>;
  did_notify?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['uuid']>;
  option_response?: Maybe<Scalars['String']>;
  parent_id?: Maybe<Scalars['uuid']>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_id?: Maybe<Scalars['uuid']>;
  sort_index?: Maybe<Scalars['numeric']>;
  subcontractor?: Maybe<Subcontractor_Obj_Rel_Insert_Input>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  text_response?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  text_response_id?: Maybe<Scalars['uuid']>;
  type?: Maybe<Checklist_Item_Type_Enum>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate max on columns */
export type Checklist_Item_Max_Fields = {
   __typename?: 'checklist_item_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  data_type?: Maybe<Scalars['String']>;
  description_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  option_response?: Maybe<Scalars['String']>;
  parent_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  sort_index?: Maybe<Scalars['numeric']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  text_response_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** order by max() on columns of table "checklist_item" */
export type Checklist_Item_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  data_type?: Maybe<Order_By>;
  description_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  option_response?: Maybe<Order_By>;
  parent_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  sort_index?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  text_response_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Checklist_Item_Min_Fields = {
   __typename?: 'checklist_item_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  data_type?: Maybe<Scalars['String']>;
  description_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  option_response?: Maybe<Scalars['String']>;
  parent_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  sort_index?: Maybe<Scalars['numeric']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  text_response_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** order by min() on columns of table "checklist_item" */
export type Checklist_Item_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  data_type?: Maybe<Order_By>;
  description_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  option_response?: Maybe<Order_By>;
  parent_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  sort_index?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  text_response_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** response of any mutation on the table "checklist_item" */
export type Checklist_Item_Mutation_Response = {
   __typename?: 'checklist_item_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Checklist_Item>;
};

/** columns and relationships of "checklist_item_notify_email" */
export type Checklist_Item_Notify_Email = {
   __typename?: 'checklist_item_notify_email';
  checklist_item_id: Scalars['uuid'];
  email: Scalars['String'];
  id: Scalars['uuid'];
};

/** aggregated selection of "checklist_item_notify_email" */
export type Checklist_Item_Notify_Email_Aggregate = {
   __typename?: 'checklist_item_notify_email_aggregate';
  aggregate?: Maybe<Checklist_Item_Notify_Email_Aggregate_Fields>;
  nodes: Array<Checklist_Item_Notify_Email>;
};

/** aggregate fields of "checklist_item_notify_email" */
export type Checklist_Item_Notify_Email_Aggregate_Fields = {
   __typename?: 'checklist_item_notify_email_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Checklist_Item_Notify_Email_Max_Fields>;
  min?: Maybe<Checklist_Item_Notify_Email_Min_Fields>;
};


/** aggregate fields of "checklist_item_notify_email" */
export type Checklist_Item_Notify_Email_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Checklist_Item_Notify_Email_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "checklist_item_notify_email" */
export type Checklist_Item_Notify_Email_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Checklist_Item_Notify_Email_Max_Order_By>;
  min?: Maybe<Checklist_Item_Notify_Email_Min_Order_By>;
};

/** input type for inserting array relation for remote table "checklist_item_notify_email" */
export type Checklist_Item_Notify_Email_Arr_Rel_Insert_Input = {
  data: Array<Checklist_Item_Notify_Email_Insert_Input>;
  on_conflict?: Maybe<Checklist_Item_Notify_Email_On_Conflict>;
};

/**
 * Boolean expression to filter rows from the table "checklist_item_notify_email".
 * All fields are combined with a logical 'AND'.
 */
export type Checklist_Item_Notify_Email_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Checklist_Item_Notify_Email_Bool_Exp>>>;
  _not?: Maybe<Checklist_Item_Notify_Email_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Checklist_Item_Notify_Email_Bool_Exp>>>;
  checklist_item_id?: Maybe<Uuid_Comparison_Exp>;
  email?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "checklist_item_notify_email" */
export enum Checklist_Item_Notify_Email_Constraint {
  /** unique or primary key constraint */
  ChecklistItemNotifyEmailChecklistItemIdEmailKey = 'checklist_item_notify_email_checklist_item_id_email_key',
  /** unique or primary key constraint */
  ChecklistItemNotifyEmailPkey = 'checklist_item_notify_email_pkey'
}

/** input type for inserting data into table "checklist_item_notify_email" */
export type Checklist_Item_Notify_Email_Insert_Input = {
  checklist_item_id?: Maybe<Scalars['uuid']>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Checklist_Item_Notify_Email_Max_Fields = {
   __typename?: 'checklist_item_notify_email_max_fields';
  checklist_item_id?: Maybe<Scalars['uuid']>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "checklist_item_notify_email" */
export type Checklist_Item_Notify_Email_Max_Order_By = {
  checklist_item_id?: Maybe<Order_By>;
  email?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Checklist_Item_Notify_Email_Min_Fields = {
   __typename?: 'checklist_item_notify_email_min_fields';
  checklist_item_id?: Maybe<Scalars['uuid']>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "checklist_item_notify_email" */
export type Checklist_Item_Notify_Email_Min_Order_By = {
  checklist_item_id?: Maybe<Order_By>;
  email?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
};

/** response of any mutation on the table "checklist_item_notify_email" */
export type Checklist_Item_Notify_Email_Mutation_Response = {
   __typename?: 'checklist_item_notify_email_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Checklist_Item_Notify_Email>;
};

/** input type for inserting object relation for remote table "checklist_item_notify_email" */
export type Checklist_Item_Notify_Email_Obj_Rel_Insert_Input = {
  data: Checklist_Item_Notify_Email_Insert_Input;
  on_conflict?: Maybe<Checklist_Item_Notify_Email_On_Conflict>;
};

/** on conflict condition type for table "checklist_item_notify_email" */
export type Checklist_Item_Notify_Email_On_Conflict = {
  constraint: Checklist_Item_Notify_Email_Constraint;
  update_columns: Array<Checklist_Item_Notify_Email_Update_Column>;
  where?: Maybe<Checklist_Item_Notify_Email_Bool_Exp>;
};

/** ordering options when selecting data from "checklist_item_notify_email" */
export type Checklist_Item_Notify_Email_Order_By = {
  checklist_item_id?: Maybe<Order_By>;
  email?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
};

/** primary key columns input for table: "checklist_item_notify_email" */
export type Checklist_Item_Notify_Email_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "checklist_item_notify_email" */
export enum Checklist_Item_Notify_Email_Select_Column {
  /** column name */
  ChecklistItemId = 'checklist_item_id',
  /** column name */
  Email = 'email',
  /** column name */
  Id = 'id'
}

/** input type for updating data in table "checklist_item_notify_email" */
export type Checklist_Item_Notify_Email_Set_Input = {
  checklist_item_id?: Maybe<Scalars['uuid']>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "checklist_item_notify_email" */
export enum Checklist_Item_Notify_Email_Update_Column {
  /** column name */
  ChecklistItemId = 'checklist_item_id',
  /** column name */
  Email = 'email',
  /** column name */
  Id = 'id'
}

/** input type for inserting object relation for remote table "checklist_item" */
export type Checklist_Item_Obj_Rel_Insert_Input = {
  data: Checklist_Item_Insert_Input;
  on_conflict?: Maybe<Checklist_Item_On_Conflict>;
};

/** on conflict condition type for table "checklist_item" */
export type Checklist_Item_On_Conflict = {
  constraint: Checklist_Item_Constraint;
  update_columns: Array<Checklist_Item_Update_Column>;
  where?: Maybe<Checklist_Item_Bool_Exp>;
};

/** ordering options when selecting data from "checklist_item" */
export type Checklist_Item_Order_By = {
  checklist_item_configs_aggregate?: Maybe<Checklist_Item_Config_Aggregate_Order_By>;
  checklist_item_notify_emails_aggregate?: Maybe<Checklist_Item_Notify_Email_Aggregate_Order_By>;
  created_at?: Maybe<Order_By>;
  data_type?: Maybe<Order_By>;
  description?: Maybe<Text_Translation_Order_By>;
  description_id?: Maybe<Order_By>;
  did_notify?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  option_response?: Maybe<Order_By>;
  parent_id?: Maybe<Order_By>;
  project?: Maybe<Project_Order_By>;
  project_id?: Maybe<Order_By>;
  sort_index?: Maybe<Order_By>;
  subcontractor?: Maybe<Subcontractor_Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  text_response?: Maybe<Text_Translation_Order_By>;
  text_response_id?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** primary key columns input for table: "checklist_item" */
export type Checklist_Item_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "checklist_item" */
export enum Checklist_Item_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DataType = 'data_type',
  /** column name */
  DescriptionId = 'description_id',
  /** column name */
  DidNotify = 'did_notify',
  /** column name */
  Id = 'id',
  /** column name */
  OptionResponse = 'option_response',
  /** column name */
  ParentId = 'parent_id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  SortIndex = 'sort_index',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  TextResponseId = 'text_response_id',
  /** column name */
  Type = 'type',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** input type for updating data in table "checklist_item" */
export type Checklist_Item_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  data_type?: Maybe<Scalars['String']>;
  description_id?: Maybe<Scalars['uuid']>;
  did_notify?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['uuid']>;
  option_response?: Maybe<Scalars['String']>;
  parent_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  sort_index?: Maybe<Scalars['numeric']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  text_response_id?: Maybe<Scalars['uuid']>;
  type?: Maybe<Checklist_Item_Type_Enum>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate stddev on columns */
export type Checklist_Item_Stddev_Fields = {
   __typename?: 'checklist_item_stddev_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "checklist_item" */
export type Checklist_Item_Stddev_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Checklist_Item_Stddev_Pop_Fields = {
   __typename?: 'checklist_item_stddev_pop_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "checklist_item" */
export type Checklist_Item_Stddev_Pop_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Checklist_Item_Stddev_Samp_Fields = {
   __typename?: 'checklist_item_stddev_samp_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "checklist_item" */
export type Checklist_Item_Stddev_Samp_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Checklist_Item_Sum_Fields = {
   __typename?: 'checklist_item_sum_fields';
  sort_index?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "checklist_item" */
export type Checklist_Item_Sum_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** columns and relationships of "checklist_item_type" */
export type Checklist_Item_Type = {
   __typename?: 'checklist_item_type';
  value: Scalars['String'];
};

/** aggregated selection of "checklist_item_type" */
export type Checklist_Item_Type_Aggregate = {
   __typename?: 'checklist_item_type_aggregate';
  aggregate?: Maybe<Checklist_Item_Type_Aggregate_Fields>;
  nodes: Array<Checklist_Item_Type>;
};

/** aggregate fields of "checklist_item_type" */
export type Checklist_Item_Type_Aggregate_Fields = {
   __typename?: 'checklist_item_type_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Checklist_Item_Type_Max_Fields>;
  min?: Maybe<Checklist_Item_Type_Min_Fields>;
};


/** aggregate fields of "checklist_item_type" */
export type Checklist_Item_Type_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Checklist_Item_Type_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "checklist_item_type" */
export type Checklist_Item_Type_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Checklist_Item_Type_Max_Order_By>;
  min?: Maybe<Checklist_Item_Type_Min_Order_By>;
};

/** input type for inserting array relation for remote table "checklist_item_type" */
export type Checklist_Item_Type_Arr_Rel_Insert_Input = {
  data: Array<Checklist_Item_Type_Insert_Input>;
  on_conflict?: Maybe<Checklist_Item_Type_On_Conflict>;
};

/** Boolean expression to filter rows from the table "checklist_item_type". All fields are combined with a logical 'AND'. */
export type Checklist_Item_Type_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Checklist_Item_Type_Bool_Exp>>>;
  _not?: Maybe<Checklist_Item_Type_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Checklist_Item_Type_Bool_Exp>>>;
  value?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "checklist_item_type" */
export enum Checklist_Item_Type_Constraint {
  /** unique or primary key constraint */
  ChecklistItemTypePkey = 'checklist_item_type_pkey'
}

export enum Checklist_Item_Type_Enum {
  GcDaily = 'gc_daily',
  GcWorkerDailyLog = 'gc_worker_daily_log',
  SubWorkerDailyLog = 'sub_worker_daily_log'
}

/** expression to compare columns of type checklist_item_type_enum. All fields are combined with logical 'AND'. */
export type Checklist_Item_Type_Enum_Comparison_Exp = {
  _eq?: Maybe<Checklist_Item_Type_Enum>;
  _in?: Maybe<Array<Checklist_Item_Type_Enum>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _neq?: Maybe<Checklist_Item_Type_Enum>;
  _nin?: Maybe<Array<Checklist_Item_Type_Enum>>;
};

/** input type for inserting data into table "checklist_item_type" */
export type Checklist_Item_Type_Insert_Input = {
  value?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Checklist_Item_Type_Max_Fields = {
   __typename?: 'checklist_item_type_max_fields';
  value?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "checklist_item_type" */
export type Checklist_Item_Type_Max_Order_By = {
  value?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Checklist_Item_Type_Min_Fields = {
   __typename?: 'checklist_item_type_min_fields';
  value?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "checklist_item_type" */
export type Checklist_Item_Type_Min_Order_By = {
  value?: Maybe<Order_By>;
};

/** response of any mutation on the table "checklist_item_type" */
export type Checklist_Item_Type_Mutation_Response = {
   __typename?: 'checklist_item_type_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Checklist_Item_Type>;
};

/** input type for inserting object relation for remote table "checklist_item_type" */
export type Checklist_Item_Type_Obj_Rel_Insert_Input = {
  data: Checklist_Item_Type_Insert_Input;
  on_conflict?: Maybe<Checklist_Item_Type_On_Conflict>;
};

/** on conflict condition type for table "checklist_item_type" */
export type Checklist_Item_Type_On_Conflict = {
  constraint: Checklist_Item_Type_Constraint;
  update_columns: Array<Checklist_Item_Type_Update_Column>;
  where?: Maybe<Checklist_Item_Type_Bool_Exp>;
};

/** ordering options when selecting data from "checklist_item_type" */
export type Checklist_Item_Type_Order_By = {
  value?: Maybe<Order_By>;
};

/** primary key columns input for table: "checklist_item_type" */
export type Checklist_Item_Type_Pk_Columns_Input = {
  value: Scalars['String'];
};

/** select columns of table "checklist_item_type" */
export enum Checklist_Item_Type_Select_Column {
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "checklist_item_type" */
export type Checklist_Item_Type_Set_Input = {
  value?: Maybe<Scalars['String']>;
};

/** update columns of table "checklist_item_type" */
export enum Checklist_Item_Type_Update_Column {
  /** column name */
  Value = 'value'
}

/** update columns of table "checklist_item" */
export enum Checklist_Item_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DataType = 'data_type',
  /** column name */
  DescriptionId = 'description_id',
  /** column name */
  DidNotify = 'did_notify',
  /** column name */
  Id = 'id',
  /** column name */
  OptionResponse = 'option_response',
  /** column name */
  ParentId = 'parent_id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  SortIndex = 'sort_index',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  TextResponseId = 'text_response_id',
  /** column name */
  Type = 'type',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** aggregate var_pop on columns */
export type Checklist_Item_Var_Pop_Fields = {
   __typename?: 'checklist_item_var_pop_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "checklist_item" */
export type Checklist_Item_Var_Pop_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Checklist_Item_Var_Samp_Fields = {
   __typename?: 'checklist_item_var_samp_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "checklist_item" */
export type Checklist_Item_Var_Samp_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Checklist_Item_Variance_Fields = {
   __typename?: 'checklist_item_variance_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "checklist_item" */
export type Checklist_Item_Variance_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** columns and relationships of "cleared_project_covid_certify_worker" */
export type Cleared_Project_Covid_Certify_Worker = {
   __typename?: 'cleared_project_covid_certify_worker';
  /** An object relationship */
  cleared_by_project_employee: Project_Employee;
  cleared_by_project_employee_id: Scalars['uuid'];
  created_at: Scalars['timestamptz'];
  id: Scalars['uuid'];
  /** An object relationship */
  project_covid_certify_worker: Project_Covid_Certify_Worker;
  project_covid_certify_worker_id: Scalars['uuid'];
};

/** aggregated selection of "cleared_project_covid_certify_worker" */
export type Cleared_Project_Covid_Certify_Worker_Aggregate = {
   __typename?: 'cleared_project_covid_certify_worker_aggregate';
  aggregate?: Maybe<Cleared_Project_Covid_Certify_Worker_Aggregate_Fields>;
  nodes: Array<Cleared_Project_Covid_Certify_Worker>;
};

/** aggregate fields of "cleared_project_covid_certify_worker" */
export type Cleared_Project_Covid_Certify_Worker_Aggregate_Fields = {
   __typename?: 'cleared_project_covid_certify_worker_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Cleared_Project_Covid_Certify_Worker_Max_Fields>;
  min?: Maybe<Cleared_Project_Covid_Certify_Worker_Min_Fields>;
};


/** aggregate fields of "cleared_project_covid_certify_worker" */
export type Cleared_Project_Covid_Certify_Worker_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Cleared_Project_Covid_Certify_Worker_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "cleared_project_covid_certify_worker" */
export type Cleared_Project_Covid_Certify_Worker_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Cleared_Project_Covid_Certify_Worker_Max_Order_By>;
  min?: Maybe<Cleared_Project_Covid_Certify_Worker_Min_Order_By>;
};

/** input type for inserting array relation for remote table "cleared_project_covid_certify_worker" */
export type Cleared_Project_Covid_Certify_Worker_Arr_Rel_Insert_Input = {
  data: Array<Cleared_Project_Covid_Certify_Worker_Insert_Input>;
  on_conflict?: Maybe<Cleared_Project_Covid_Certify_Worker_On_Conflict>;
};

/**
 * Boolean expression to filter rows from the table
 * "cleared_project_covid_certify_worker". All fields are combined with a logical 'AND'.
 */
export type Cleared_Project_Covid_Certify_Worker_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Cleared_Project_Covid_Certify_Worker_Bool_Exp>>>;
  _not?: Maybe<Cleared_Project_Covid_Certify_Worker_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Cleared_Project_Covid_Certify_Worker_Bool_Exp>>>;
  cleared_by_project_employee?: Maybe<Project_Employee_Bool_Exp>;
  cleared_by_project_employee_id?: Maybe<Uuid_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  project_covid_certify_worker?: Maybe<Project_Covid_Certify_Worker_Bool_Exp>;
  project_covid_certify_worker_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "cleared_project_covid_certify_worker" */
export enum Cleared_Project_Covid_Certify_Worker_Constraint {
  /** unique or primary key constraint */
  ClearedProjectCovidCertifyWorkerPkey = 'cleared_project_covid_certify_worker_pkey',
  /** unique or primary key constraint */
  ClearedProjectCovidCertifyWorkerProjectCovidCertifyWork = 'cleared_project_covid_certify_worker_project_covid_certify_work'
}

/** input type for inserting data into table "cleared_project_covid_certify_worker" */
export type Cleared_Project_Covid_Certify_Worker_Insert_Input = {
  cleared_by_project_employee?: Maybe<Project_Employee_Obj_Rel_Insert_Input>;
  cleared_by_project_employee_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_covid_certify_worker?: Maybe<Project_Covid_Certify_Worker_Obj_Rel_Insert_Input>;
  project_covid_certify_worker_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Cleared_Project_Covid_Certify_Worker_Max_Fields = {
   __typename?: 'cleared_project_covid_certify_worker_max_fields';
  cleared_by_project_employee_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_covid_certify_worker_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "cleared_project_covid_certify_worker" */
export type Cleared_Project_Covid_Certify_Worker_Max_Order_By = {
  cleared_by_project_employee_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_covid_certify_worker_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Cleared_Project_Covid_Certify_Worker_Min_Fields = {
   __typename?: 'cleared_project_covid_certify_worker_min_fields';
  cleared_by_project_employee_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_covid_certify_worker_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "cleared_project_covid_certify_worker" */
export type Cleared_Project_Covid_Certify_Worker_Min_Order_By = {
  cleared_by_project_employee_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_covid_certify_worker_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "cleared_project_covid_certify_worker" */
export type Cleared_Project_Covid_Certify_Worker_Mutation_Response = {
   __typename?: 'cleared_project_covid_certify_worker_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Cleared_Project_Covid_Certify_Worker>;
};

/** input type for inserting object relation for remote table "cleared_project_covid_certify_worker" */
export type Cleared_Project_Covid_Certify_Worker_Obj_Rel_Insert_Input = {
  data: Cleared_Project_Covid_Certify_Worker_Insert_Input;
  on_conflict?: Maybe<Cleared_Project_Covid_Certify_Worker_On_Conflict>;
};

/** on conflict condition type for table "cleared_project_covid_certify_worker" */
export type Cleared_Project_Covid_Certify_Worker_On_Conflict = {
  constraint: Cleared_Project_Covid_Certify_Worker_Constraint;
  update_columns: Array<Cleared_Project_Covid_Certify_Worker_Update_Column>;
  where?: Maybe<Cleared_Project_Covid_Certify_Worker_Bool_Exp>;
};

/** ordering options when selecting data from "cleared_project_covid_certify_worker" */
export type Cleared_Project_Covid_Certify_Worker_Order_By = {
  cleared_by_project_employee?: Maybe<Project_Employee_Order_By>;
  cleared_by_project_employee_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_covid_certify_worker?: Maybe<Project_Covid_Certify_Worker_Order_By>;
  project_covid_certify_worker_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "cleared_project_covid_certify_worker" */
export type Cleared_Project_Covid_Certify_Worker_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "cleared_project_covid_certify_worker" */
export enum Cleared_Project_Covid_Certify_Worker_Select_Column {
  /** column name */
  ClearedByProjectEmployeeId = 'cleared_by_project_employee_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectCovidCertifyWorkerId = 'project_covid_certify_worker_id'
}

/** input type for updating data in table "cleared_project_covid_certify_worker" */
export type Cleared_Project_Covid_Certify_Worker_Set_Input = {
  cleared_by_project_employee_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_covid_certify_worker_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "cleared_project_covid_certify_worker" */
export enum Cleared_Project_Covid_Certify_Worker_Update_Column {
  /** column name */
  ClearedByProjectEmployeeId = 'cleared_by_project_employee_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectCovidCertifyWorkerId = 'project_covid_certify_worker_id'
}

/** columns and relationships of "cleared_project_covid_tested_positive_worker" */
export type Cleared_Project_Covid_Tested_Positive_Worker = {
   __typename?: 'cleared_project_covid_tested_positive_worker';
  /** An object relationship */
  cleared_by_project_employee: Project_Employee;
  cleared_by_project_employee_id: Scalars['uuid'];
  created_at: Scalars['timestamptz'];
  id: Scalars['uuid'];
  /** An object relationship */
  project_covid_tested_positive_worker: Project_Covid_Tested_Positive_Worker;
  project_covid_tested_positive_worker_id: Scalars['uuid'];
};

/** aggregated selection of "cleared_project_covid_tested_positive_worker" */
export type Cleared_Project_Covid_Tested_Positive_Worker_Aggregate = {
   __typename?: 'cleared_project_covid_tested_positive_worker_aggregate';
  aggregate?: Maybe<Cleared_Project_Covid_Tested_Positive_Worker_Aggregate_Fields>;
  nodes: Array<Cleared_Project_Covid_Tested_Positive_Worker>;
};

/** aggregate fields of "cleared_project_covid_tested_positive_worker" */
export type Cleared_Project_Covid_Tested_Positive_Worker_Aggregate_Fields = {
   __typename?: 'cleared_project_covid_tested_positive_worker_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Cleared_Project_Covid_Tested_Positive_Worker_Max_Fields>;
  min?: Maybe<Cleared_Project_Covid_Tested_Positive_Worker_Min_Fields>;
};


/** aggregate fields of "cleared_project_covid_tested_positive_worker" */
export type Cleared_Project_Covid_Tested_Positive_Worker_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Cleared_Project_Covid_Tested_Positive_Worker_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "cleared_project_covid_tested_positive_worker" */
export type Cleared_Project_Covid_Tested_Positive_Worker_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Cleared_Project_Covid_Tested_Positive_Worker_Max_Order_By>;
  min?: Maybe<Cleared_Project_Covid_Tested_Positive_Worker_Min_Order_By>;
};

/** input type for inserting array relation for remote table "cleared_project_covid_tested_positive_worker" */
export type Cleared_Project_Covid_Tested_Positive_Worker_Arr_Rel_Insert_Input = {
  data: Array<Cleared_Project_Covid_Tested_Positive_Worker_Insert_Input>;
  on_conflict?: Maybe<Cleared_Project_Covid_Tested_Positive_Worker_On_Conflict>;
};

/**
 * Boolean expression to filter rows from the table
 * "cleared_project_covid_tested_positive_worker". All fields are combined with a logical 'AND'.
 */
export type Cleared_Project_Covid_Tested_Positive_Worker_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Cleared_Project_Covid_Tested_Positive_Worker_Bool_Exp>>>;
  _not?: Maybe<Cleared_Project_Covid_Tested_Positive_Worker_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Cleared_Project_Covid_Tested_Positive_Worker_Bool_Exp>>>;
  cleared_by_project_employee?: Maybe<Project_Employee_Bool_Exp>;
  cleared_by_project_employee_id?: Maybe<Uuid_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  project_covid_tested_positive_worker?: Maybe<Project_Covid_Tested_Positive_Worker_Bool_Exp>;
  project_covid_tested_positive_worker_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "cleared_project_covid_tested_positive_worker" */
export enum Cleared_Project_Covid_Tested_Positive_Worker_Constraint {
  /** unique or primary key constraint */
  ClearedProjectCovidTestedProjectCovidTestedPositiveKey = 'cleared_project_covid_tested__project_covid_tested_positive_key',
  /** unique or primary key constraint */
  ClearedProjectCovidTestedPositiveWorkerPkey = 'cleared_project_covid_tested_positive_worker_pkey'
}

/** input type for inserting data into table "cleared_project_covid_tested_positive_worker" */
export type Cleared_Project_Covid_Tested_Positive_Worker_Insert_Input = {
  cleared_by_project_employee?: Maybe<Project_Employee_Obj_Rel_Insert_Input>;
  cleared_by_project_employee_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_covid_tested_positive_worker?: Maybe<Project_Covid_Tested_Positive_Worker_Obj_Rel_Insert_Input>;
  project_covid_tested_positive_worker_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Cleared_Project_Covid_Tested_Positive_Worker_Max_Fields = {
   __typename?: 'cleared_project_covid_tested_positive_worker_max_fields';
  cleared_by_project_employee_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_covid_tested_positive_worker_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "cleared_project_covid_tested_positive_worker" */
export type Cleared_Project_Covid_Tested_Positive_Worker_Max_Order_By = {
  cleared_by_project_employee_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_covid_tested_positive_worker_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Cleared_Project_Covid_Tested_Positive_Worker_Min_Fields = {
   __typename?: 'cleared_project_covid_tested_positive_worker_min_fields';
  cleared_by_project_employee_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_covid_tested_positive_worker_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "cleared_project_covid_tested_positive_worker" */
export type Cleared_Project_Covid_Tested_Positive_Worker_Min_Order_By = {
  cleared_by_project_employee_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_covid_tested_positive_worker_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "cleared_project_covid_tested_positive_worker" */
export type Cleared_Project_Covid_Tested_Positive_Worker_Mutation_Response = {
   __typename?: 'cleared_project_covid_tested_positive_worker_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Cleared_Project_Covid_Tested_Positive_Worker>;
};

/** input type for inserting object relation for remote table "cleared_project_covid_tested_positive_worker" */
export type Cleared_Project_Covid_Tested_Positive_Worker_Obj_Rel_Insert_Input = {
  data: Cleared_Project_Covid_Tested_Positive_Worker_Insert_Input;
  on_conflict?: Maybe<Cleared_Project_Covid_Tested_Positive_Worker_On_Conflict>;
};

/** on conflict condition type for table "cleared_project_covid_tested_positive_worker" */
export type Cleared_Project_Covid_Tested_Positive_Worker_On_Conflict = {
  constraint: Cleared_Project_Covid_Tested_Positive_Worker_Constraint;
  update_columns: Array<Cleared_Project_Covid_Tested_Positive_Worker_Update_Column>;
  where?: Maybe<Cleared_Project_Covid_Tested_Positive_Worker_Bool_Exp>;
};

/** ordering options when selecting data from "cleared_project_covid_tested_positive_worker" */
export type Cleared_Project_Covid_Tested_Positive_Worker_Order_By = {
  cleared_by_project_employee?: Maybe<Project_Employee_Order_By>;
  cleared_by_project_employee_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_covid_tested_positive_worker?: Maybe<Project_Covid_Tested_Positive_Worker_Order_By>;
  project_covid_tested_positive_worker_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "cleared_project_covid_tested_positive_worker" */
export type Cleared_Project_Covid_Tested_Positive_Worker_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "cleared_project_covid_tested_positive_worker" */
export enum Cleared_Project_Covid_Tested_Positive_Worker_Select_Column {
  /** column name */
  ClearedByProjectEmployeeId = 'cleared_by_project_employee_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectCovidTestedPositiveWorkerId = 'project_covid_tested_positive_worker_id'
}

/** input type for updating data in table "cleared_project_covid_tested_positive_worker" */
export type Cleared_Project_Covid_Tested_Positive_Worker_Set_Input = {
  cleared_by_project_employee_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_covid_tested_positive_worker_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "cleared_project_covid_tested_positive_worker" */
export enum Cleared_Project_Covid_Tested_Positive_Worker_Update_Column {
  /** column name */
  ClearedByProjectEmployeeId = 'cleared_by_project_employee_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectCovidTestedPositiveWorkerId = 'project_covid_tested_positive_worker_id'
}

export type ClientState = {
   __typename?: 'ClientState';
  uid?: Maybe<Scalars['String']>;
  role?: Maybe<Scalars['String']>;
  isAppLoading: Scalars['Boolean'];
};

export type CompletionAuditOutput = {
   __typename?: 'CompletionAuditOutput';
  dailyWorkLogs: Array<CompletionResult>;
  reports: Array<CompletionResult>;
  toolboxTalks: Array<CompletionResult>;
};

export type CompletionResult = {
   __typename?: 'CompletionResult';
  completed?: Maybe<Scalars['Boolean']>;
  date: Scalars['String'];
  onsite?: Maybe<Scalars['Boolean']>;
  subId: Scalars['String'];
  subName: Scalars['String'];
};

/** columns and relationships of "confined_space_permit" */
export type Confined_Space_Permit = {
   __typename?: 'confined_space_permit';
  /** An object relationship */
  applicant_project_worker?: Maybe<Project_Worker>;
  applicant_project_worker_id?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  communication_procedure: Text_Translation;
  communication_procedure_id: Scalars['uuid'];
  communication_procedure_text?: Maybe<Scalars['String']>;
  /** An object relationship */
  confined_space_description: Text_Translation;
  confined_space_description_id: Scalars['uuid'];
  confined_space_description_text?: Maybe<Scalars['String']>;
  /** An array relationship */
  confined_space_permit_readings: Array<Confined_Space_Permit_Reading>;
  /** An aggregated array relationship */
  confined_space_permit_readings_aggregate: Confined_Space_Permit_Reading_Aggregate;
  created_at?: Maybe<Scalars['timestamptz']>;
  /** An object relationship */
  emergency_contact_employee?: Maybe<General_Contractor_Employee>;
  emergency_contact_employee_uid?: Maybe<Scalars['uuid']>;
  entry_date?: Maybe<Scalars['timestamptz']>;
  /** An object relationship */
  equipment: Text_Translation;
  equipment_id: Scalars['uuid'];
  equipment_text?: Maybe<Scalars['String']>;
  expiry_date?: Maybe<Scalars['timestamptz']>;
  /** An object relationship */
  hazards_description: Text_Translation;
  hazards_description_id: Scalars['uuid'];
  hazards_description_text?: Maybe<Scalars['String']>;
  /** An array relationship */
  monitoring_equipment: Array<Confined_Space_Permit_Monitoring_Equipment>;
  /** An aggregated array relationship */
  monitoring_equipment_aggregate: Confined_Space_Permit_Monitoring_Equipment_Aggregate;
  /** An object relationship */
  permit: Permit;
  permit_id: Scalars['uuid'];
  /** An object relationship */
  rescue_plan: Text_Translation;
  rescue_plan_id: Scalars['uuid'];
  rescue_plan_text?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  updated_at: Scalars['timestamptz'];
  /** An object relationship */
  work_description: Text_Translation;
  work_description_id: Scalars['uuid'];
  work_description_text?: Maybe<Scalars['String']>;
  work_duration?: Maybe<Scalars['interval']>;
  /** An object relationship */
  work_location: Text_Translation;
  work_location_id: Scalars['uuid'];
  work_location_text?: Maybe<Scalars['String']>;
};


/** columns and relationships of "confined_space_permit" */
export type Confined_Space_PermitConfined_Space_Permit_ReadingsArgs = {
  distinct_on?: Maybe<Array<Confined_Space_Permit_Reading_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Confined_Space_Permit_Reading_Order_By>>;
  where?: Maybe<Confined_Space_Permit_Reading_Bool_Exp>;
};


/** columns and relationships of "confined_space_permit" */
export type Confined_Space_PermitConfined_Space_Permit_Readings_AggregateArgs = {
  distinct_on?: Maybe<Array<Confined_Space_Permit_Reading_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Confined_Space_Permit_Reading_Order_By>>;
  where?: Maybe<Confined_Space_Permit_Reading_Bool_Exp>;
};


/** columns and relationships of "confined_space_permit" */
export type Confined_Space_PermitMonitoring_EquipmentArgs = {
  distinct_on?: Maybe<Array<Confined_Space_Permit_Monitoring_Equipment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Confined_Space_Permit_Monitoring_Equipment_Order_By>>;
  where?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Bool_Exp>;
};


/** columns and relationships of "confined_space_permit" */
export type Confined_Space_PermitMonitoring_Equipment_AggregateArgs = {
  distinct_on?: Maybe<Array<Confined_Space_Permit_Monitoring_Equipment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Confined_Space_Permit_Monitoring_Equipment_Order_By>>;
  where?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Bool_Exp>;
};

/** aggregated selection of "confined_space_permit" */
export type Confined_Space_Permit_Aggregate = {
   __typename?: 'confined_space_permit_aggregate';
  aggregate?: Maybe<Confined_Space_Permit_Aggregate_Fields>;
  nodes: Array<Confined_Space_Permit>;
};

/** aggregate fields of "confined_space_permit" */
export type Confined_Space_Permit_Aggregate_Fields = {
   __typename?: 'confined_space_permit_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Confined_Space_Permit_Max_Fields>;
  min?: Maybe<Confined_Space_Permit_Min_Fields>;
};


/** aggregate fields of "confined_space_permit" */
export type Confined_Space_Permit_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Confined_Space_Permit_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "confined_space_permit" */
export type Confined_Space_Permit_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Confined_Space_Permit_Max_Order_By>;
  min?: Maybe<Confined_Space_Permit_Min_Order_By>;
};

/** input type for inserting array relation for remote table "confined_space_permit" */
export type Confined_Space_Permit_Arr_Rel_Insert_Input = {
  data: Array<Confined_Space_Permit_Insert_Input>;
  on_conflict?: Maybe<Confined_Space_Permit_On_Conflict>;
};

/** Boolean expression to filter rows from the table "confined_space_permit". All fields are combined with a logical 'AND'. */
export type Confined_Space_Permit_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Confined_Space_Permit_Bool_Exp>>>;
  _not?: Maybe<Confined_Space_Permit_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Confined_Space_Permit_Bool_Exp>>>;
  applicant_project_worker?: Maybe<Project_Worker_Bool_Exp>;
  applicant_project_worker_id?: Maybe<Uuid_Comparison_Exp>;
  communication_procedure?: Maybe<Text_Translation_Bool_Exp>;
  communication_procedure_id?: Maybe<Uuid_Comparison_Exp>;
  communication_procedure_text?: Maybe<String_Comparison_Exp>;
  confined_space_description?: Maybe<Text_Translation_Bool_Exp>;
  confined_space_description_id?: Maybe<Uuid_Comparison_Exp>;
  confined_space_description_text?: Maybe<String_Comparison_Exp>;
  confined_space_permit_readings?: Maybe<Confined_Space_Permit_Reading_Bool_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  emergency_contact_employee?: Maybe<General_Contractor_Employee_Bool_Exp>;
  emergency_contact_employee_uid?: Maybe<Uuid_Comparison_Exp>;
  entry_date?: Maybe<Timestamptz_Comparison_Exp>;
  equipment?: Maybe<Text_Translation_Bool_Exp>;
  equipment_id?: Maybe<Uuid_Comparison_Exp>;
  equipment_text?: Maybe<String_Comparison_Exp>;
  expiry_date?: Maybe<Timestamptz_Comparison_Exp>;
  hazards_description?: Maybe<Text_Translation_Bool_Exp>;
  hazards_description_id?: Maybe<Uuid_Comparison_Exp>;
  hazards_description_text?: Maybe<String_Comparison_Exp>;
  monitoring_equipment?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Bool_Exp>;
  permit?: Maybe<Permit_Bool_Exp>;
  permit_id?: Maybe<Uuid_Comparison_Exp>;
  rescue_plan?: Maybe<Text_Translation_Bool_Exp>;
  rescue_plan_id?: Maybe<Uuid_Comparison_Exp>;
  rescue_plan_text?: Maybe<String_Comparison_Exp>;
  type?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  work_description?: Maybe<Text_Translation_Bool_Exp>;
  work_description_id?: Maybe<Uuid_Comparison_Exp>;
  work_description_text?: Maybe<String_Comparison_Exp>;
  work_duration?: Maybe<Interval_Comparison_Exp>;
  work_location?: Maybe<Text_Translation_Bool_Exp>;
  work_location_id?: Maybe<Uuid_Comparison_Exp>;
  work_location_text?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "confined_space_permit" */
export enum Confined_Space_Permit_Constraint {
  /** unique or primary key constraint */
  ConfinedSpacePermitPkey = 'confined_space_permit_pkey'
}

/** input type for inserting data into table "confined_space_permit" */
export type Confined_Space_Permit_Insert_Input = {
  applicant_project_worker?: Maybe<Project_Worker_Obj_Rel_Insert_Input>;
  applicant_project_worker_id?: Maybe<Scalars['uuid']>;
  communication_procedure?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  communication_procedure_id?: Maybe<Scalars['uuid']>;
  communication_procedure_text?: Maybe<Scalars['String']>;
  confined_space_description?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  confined_space_description_id?: Maybe<Scalars['uuid']>;
  confined_space_description_text?: Maybe<Scalars['String']>;
  confined_space_permit_readings?: Maybe<Confined_Space_Permit_Reading_Arr_Rel_Insert_Input>;
  created_at?: Maybe<Scalars['timestamptz']>;
  emergency_contact_employee?: Maybe<General_Contractor_Employee_Obj_Rel_Insert_Input>;
  emergency_contact_employee_uid?: Maybe<Scalars['uuid']>;
  entry_date?: Maybe<Scalars['timestamptz']>;
  equipment?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  equipment_id?: Maybe<Scalars['uuid']>;
  equipment_text?: Maybe<Scalars['String']>;
  expiry_date?: Maybe<Scalars['timestamptz']>;
  hazards_description?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  hazards_description_id?: Maybe<Scalars['uuid']>;
  hazards_description_text?: Maybe<Scalars['String']>;
  monitoring_equipment?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Arr_Rel_Insert_Input>;
  permit?: Maybe<Permit_Obj_Rel_Insert_Input>;
  permit_id?: Maybe<Scalars['uuid']>;
  rescue_plan?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  rescue_plan_id?: Maybe<Scalars['uuid']>;
  rescue_plan_text?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  work_description?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  work_description_id?: Maybe<Scalars['uuid']>;
  work_description_text?: Maybe<Scalars['String']>;
  work_duration?: Maybe<Scalars['interval']>;
  work_location?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  work_location_id?: Maybe<Scalars['uuid']>;
  work_location_text?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Confined_Space_Permit_Max_Fields = {
   __typename?: 'confined_space_permit_max_fields';
  applicant_project_worker_id?: Maybe<Scalars['uuid']>;
  communication_procedure_id?: Maybe<Scalars['uuid']>;
  communication_procedure_text?: Maybe<Scalars['String']>;
  confined_space_description_id?: Maybe<Scalars['uuid']>;
  confined_space_description_text?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  emergency_contact_employee_uid?: Maybe<Scalars['uuid']>;
  entry_date?: Maybe<Scalars['timestamptz']>;
  equipment_id?: Maybe<Scalars['uuid']>;
  equipment_text?: Maybe<Scalars['String']>;
  expiry_date?: Maybe<Scalars['timestamptz']>;
  hazards_description_id?: Maybe<Scalars['uuid']>;
  hazards_description_text?: Maybe<Scalars['String']>;
  permit_id?: Maybe<Scalars['uuid']>;
  rescue_plan_id?: Maybe<Scalars['uuid']>;
  rescue_plan_text?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  work_description_id?: Maybe<Scalars['uuid']>;
  work_description_text?: Maybe<Scalars['String']>;
  work_location_id?: Maybe<Scalars['uuid']>;
  work_location_text?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "confined_space_permit" */
export type Confined_Space_Permit_Max_Order_By = {
  applicant_project_worker_id?: Maybe<Order_By>;
  communication_procedure_id?: Maybe<Order_By>;
  communication_procedure_text?: Maybe<Order_By>;
  confined_space_description_id?: Maybe<Order_By>;
  confined_space_description_text?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  emergency_contact_employee_uid?: Maybe<Order_By>;
  entry_date?: Maybe<Order_By>;
  equipment_id?: Maybe<Order_By>;
  equipment_text?: Maybe<Order_By>;
  expiry_date?: Maybe<Order_By>;
  hazards_description_id?: Maybe<Order_By>;
  hazards_description_text?: Maybe<Order_By>;
  permit_id?: Maybe<Order_By>;
  rescue_plan_id?: Maybe<Order_By>;
  rescue_plan_text?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  work_description_id?: Maybe<Order_By>;
  work_description_text?: Maybe<Order_By>;
  work_location_id?: Maybe<Order_By>;
  work_location_text?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Confined_Space_Permit_Min_Fields = {
   __typename?: 'confined_space_permit_min_fields';
  applicant_project_worker_id?: Maybe<Scalars['uuid']>;
  communication_procedure_id?: Maybe<Scalars['uuid']>;
  communication_procedure_text?: Maybe<Scalars['String']>;
  confined_space_description_id?: Maybe<Scalars['uuid']>;
  confined_space_description_text?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  emergency_contact_employee_uid?: Maybe<Scalars['uuid']>;
  entry_date?: Maybe<Scalars['timestamptz']>;
  equipment_id?: Maybe<Scalars['uuid']>;
  equipment_text?: Maybe<Scalars['String']>;
  expiry_date?: Maybe<Scalars['timestamptz']>;
  hazards_description_id?: Maybe<Scalars['uuid']>;
  hazards_description_text?: Maybe<Scalars['String']>;
  permit_id?: Maybe<Scalars['uuid']>;
  rescue_plan_id?: Maybe<Scalars['uuid']>;
  rescue_plan_text?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  work_description_id?: Maybe<Scalars['uuid']>;
  work_description_text?: Maybe<Scalars['String']>;
  work_location_id?: Maybe<Scalars['uuid']>;
  work_location_text?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "confined_space_permit" */
export type Confined_Space_Permit_Min_Order_By = {
  applicant_project_worker_id?: Maybe<Order_By>;
  communication_procedure_id?: Maybe<Order_By>;
  communication_procedure_text?: Maybe<Order_By>;
  confined_space_description_id?: Maybe<Order_By>;
  confined_space_description_text?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  emergency_contact_employee_uid?: Maybe<Order_By>;
  entry_date?: Maybe<Order_By>;
  equipment_id?: Maybe<Order_By>;
  equipment_text?: Maybe<Order_By>;
  expiry_date?: Maybe<Order_By>;
  hazards_description_id?: Maybe<Order_By>;
  hazards_description_text?: Maybe<Order_By>;
  permit_id?: Maybe<Order_By>;
  rescue_plan_id?: Maybe<Order_By>;
  rescue_plan_text?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  work_description_id?: Maybe<Order_By>;
  work_description_text?: Maybe<Order_By>;
  work_location_id?: Maybe<Order_By>;
  work_location_text?: Maybe<Order_By>;
};

/** columns and relationships of "confined_space_permit_monitoring_equipment" */
export type Confined_Space_Permit_Monitoring_Equipment = {
   __typename?: 'confined_space_permit_monitoring_equipment';
  calibrated_by?: Maybe<Scalars['String']>;
  /** An object relationship */
  confined_space_permit: Confined_Space_Permit;
  created_at: Scalars['timestamptz'];
  factory_calibration_date?: Maybe<Scalars['timestamptz']>;
  field_calibration_date?: Maybe<Scalars['timestamptz']>;
  id: Scalars['uuid'];
  make?: Maybe<Scalars['String']>;
  model?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  permit_id: Scalars['uuid'];
  serial_number?: Maybe<Scalars['String']>;
  sort_index: Scalars['numeric'];
};

/** aggregated selection of "confined_space_permit_monitoring_equipment" */
export type Confined_Space_Permit_Monitoring_Equipment_Aggregate = {
   __typename?: 'confined_space_permit_monitoring_equipment_aggregate';
  aggregate?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Aggregate_Fields>;
  nodes: Array<Confined_Space_Permit_Monitoring_Equipment>;
};

/** aggregate fields of "confined_space_permit_monitoring_equipment" */
export type Confined_Space_Permit_Monitoring_Equipment_Aggregate_Fields = {
   __typename?: 'confined_space_permit_monitoring_equipment_aggregate_fields';
  avg?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Max_Fields>;
  min?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Min_Fields>;
  stddev?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Stddev_Fields>;
  stddev_pop?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Stddev_Samp_Fields>;
  sum?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Sum_Fields>;
  var_pop?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Var_Pop_Fields>;
  var_samp?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Var_Samp_Fields>;
  variance?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Variance_Fields>;
};


/** aggregate fields of "confined_space_permit_monitoring_equipment" */
export type Confined_Space_Permit_Monitoring_Equipment_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Confined_Space_Permit_Monitoring_Equipment_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "confined_space_permit_monitoring_equipment" */
export type Confined_Space_Permit_Monitoring_Equipment_Aggregate_Order_By = {
  avg?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Max_Order_By>;
  min?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Min_Order_By>;
  stddev?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Stddev_Order_By>;
  stddev_pop?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Stddev_Samp_Order_By>;
  sum?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Sum_Order_By>;
  var_pop?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Var_Pop_Order_By>;
  var_samp?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Var_Samp_Order_By>;
  variance?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "confined_space_permit_monitoring_equipment" */
export type Confined_Space_Permit_Monitoring_Equipment_Arr_Rel_Insert_Input = {
  data: Array<Confined_Space_Permit_Monitoring_Equipment_Insert_Input>;
  on_conflict?: Maybe<Confined_Space_Permit_Monitoring_Equipment_On_Conflict>;
};

/** aggregate avg on columns */
export type Confined_Space_Permit_Monitoring_Equipment_Avg_Fields = {
   __typename?: 'confined_space_permit_monitoring_equipment_avg_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "confined_space_permit_monitoring_equipment" */
export type Confined_Space_Permit_Monitoring_Equipment_Avg_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/**
 * Boolean expression to filter rows from the table
 * "confined_space_permit_monitoring_equipment". All fields are combined with a logical 'AND'.
 */
export type Confined_Space_Permit_Monitoring_Equipment_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Confined_Space_Permit_Monitoring_Equipment_Bool_Exp>>>;
  _not?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Confined_Space_Permit_Monitoring_Equipment_Bool_Exp>>>;
  calibrated_by?: Maybe<String_Comparison_Exp>;
  confined_space_permit?: Maybe<Confined_Space_Permit_Bool_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  factory_calibration_date?: Maybe<Timestamptz_Comparison_Exp>;
  field_calibration_date?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  make?: Maybe<String_Comparison_Exp>;
  model?: Maybe<String_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  permit_id?: Maybe<Uuid_Comparison_Exp>;
  serial_number?: Maybe<String_Comparison_Exp>;
  sort_index?: Maybe<Numeric_Comparison_Exp>;
};

/** unique or primary key constraints on table "confined_space_permit_monitoring_equipment" */
export enum Confined_Space_Permit_Monitoring_Equipment_Constraint {
  /** unique or primary key constraint */
  ConfinedSpacePermitMonitoringEquipmentPkey = 'confined_space_permit_monitoring_equipment_pkey'
}

/** input type for incrementing integer column in table "confined_space_permit_monitoring_equipment" */
export type Confined_Space_Permit_Monitoring_Equipment_Inc_Input = {
  sort_index?: Maybe<Scalars['numeric']>;
};

/** input type for inserting data into table "confined_space_permit_monitoring_equipment" */
export type Confined_Space_Permit_Monitoring_Equipment_Insert_Input = {
  calibrated_by?: Maybe<Scalars['String']>;
  confined_space_permit?: Maybe<Confined_Space_Permit_Obj_Rel_Insert_Input>;
  created_at?: Maybe<Scalars['timestamptz']>;
  factory_calibration_date?: Maybe<Scalars['timestamptz']>;
  field_calibration_date?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  make?: Maybe<Scalars['String']>;
  model?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  permit_id?: Maybe<Scalars['uuid']>;
  serial_number?: Maybe<Scalars['String']>;
  sort_index?: Maybe<Scalars['numeric']>;
};

/** aggregate max on columns */
export type Confined_Space_Permit_Monitoring_Equipment_Max_Fields = {
   __typename?: 'confined_space_permit_monitoring_equipment_max_fields';
  calibrated_by?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  factory_calibration_date?: Maybe<Scalars['timestamptz']>;
  field_calibration_date?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  make?: Maybe<Scalars['String']>;
  model?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  permit_id?: Maybe<Scalars['uuid']>;
  serial_number?: Maybe<Scalars['String']>;
  sort_index?: Maybe<Scalars['numeric']>;
};

/** order by max() on columns of table "confined_space_permit_monitoring_equipment" */
export type Confined_Space_Permit_Monitoring_Equipment_Max_Order_By = {
  calibrated_by?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  factory_calibration_date?: Maybe<Order_By>;
  field_calibration_date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  make?: Maybe<Order_By>;
  model?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  permit_id?: Maybe<Order_By>;
  serial_number?: Maybe<Order_By>;
  sort_index?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Confined_Space_Permit_Monitoring_Equipment_Min_Fields = {
   __typename?: 'confined_space_permit_monitoring_equipment_min_fields';
  calibrated_by?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  factory_calibration_date?: Maybe<Scalars['timestamptz']>;
  field_calibration_date?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  make?: Maybe<Scalars['String']>;
  model?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  permit_id?: Maybe<Scalars['uuid']>;
  serial_number?: Maybe<Scalars['String']>;
  sort_index?: Maybe<Scalars['numeric']>;
};

/** order by min() on columns of table "confined_space_permit_monitoring_equipment" */
export type Confined_Space_Permit_Monitoring_Equipment_Min_Order_By = {
  calibrated_by?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  factory_calibration_date?: Maybe<Order_By>;
  field_calibration_date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  make?: Maybe<Order_By>;
  model?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  permit_id?: Maybe<Order_By>;
  serial_number?: Maybe<Order_By>;
  sort_index?: Maybe<Order_By>;
};

/** response of any mutation on the table "confined_space_permit_monitoring_equipment" */
export type Confined_Space_Permit_Monitoring_Equipment_Mutation_Response = {
   __typename?: 'confined_space_permit_monitoring_equipment_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Confined_Space_Permit_Monitoring_Equipment>;
};

/** input type for inserting object relation for remote table "confined_space_permit_monitoring_equipment" */
export type Confined_Space_Permit_Monitoring_Equipment_Obj_Rel_Insert_Input = {
  data: Confined_Space_Permit_Monitoring_Equipment_Insert_Input;
  on_conflict?: Maybe<Confined_Space_Permit_Monitoring_Equipment_On_Conflict>;
};

/** on conflict condition type for table "confined_space_permit_monitoring_equipment" */
export type Confined_Space_Permit_Monitoring_Equipment_On_Conflict = {
  constraint: Confined_Space_Permit_Monitoring_Equipment_Constraint;
  update_columns: Array<Confined_Space_Permit_Monitoring_Equipment_Update_Column>;
  where?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Bool_Exp>;
};

/** ordering options when selecting data from "confined_space_permit_monitoring_equipment" */
export type Confined_Space_Permit_Monitoring_Equipment_Order_By = {
  calibrated_by?: Maybe<Order_By>;
  confined_space_permit?: Maybe<Confined_Space_Permit_Order_By>;
  created_at?: Maybe<Order_By>;
  factory_calibration_date?: Maybe<Order_By>;
  field_calibration_date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  make?: Maybe<Order_By>;
  model?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  permit_id?: Maybe<Order_By>;
  serial_number?: Maybe<Order_By>;
  sort_index?: Maybe<Order_By>;
};

/** primary key columns input for table: "confined_space_permit_monitoring_equipment" */
export type Confined_Space_Permit_Monitoring_Equipment_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "confined_space_permit_monitoring_equipment" */
export enum Confined_Space_Permit_Monitoring_Equipment_Select_Column {
  /** column name */
  CalibratedBy = 'calibrated_by',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  FactoryCalibrationDate = 'factory_calibration_date',
  /** column name */
  FieldCalibrationDate = 'field_calibration_date',
  /** column name */
  Id = 'id',
  /** column name */
  Make = 'make',
  /** column name */
  Model = 'model',
  /** column name */
  Name = 'name',
  /** column name */
  PermitId = 'permit_id',
  /** column name */
  SerialNumber = 'serial_number',
  /** column name */
  SortIndex = 'sort_index'
}

/** input type for updating data in table "confined_space_permit_monitoring_equipment" */
export type Confined_Space_Permit_Monitoring_Equipment_Set_Input = {
  calibrated_by?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  factory_calibration_date?: Maybe<Scalars['timestamptz']>;
  field_calibration_date?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  make?: Maybe<Scalars['String']>;
  model?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  permit_id?: Maybe<Scalars['uuid']>;
  serial_number?: Maybe<Scalars['String']>;
  sort_index?: Maybe<Scalars['numeric']>;
};

/** aggregate stddev on columns */
export type Confined_Space_Permit_Monitoring_Equipment_Stddev_Fields = {
   __typename?: 'confined_space_permit_monitoring_equipment_stddev_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "confined_space_permit_monitoring_equipment" */
export type Confined_Space_Permit_Monitoring_Equipment_Stddev_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Confined_Space_Permit_Monitoring_Equipment_Stddev_Pop_Fields = {
   __typename?: 'confined_space_permit_monitoring_equipment_stddev_pop_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "confined_space_permit_monitoring_equipment" */
export type Confined_Space_Permit_Monitoring_Equipment_Stddev_Pop_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Confined_Space_Permit_Monitoring_Equipment_Stddev_Samp_Fields = {
   __typename?: 'confined_space_permit_monitoring_equipment_stddev_samp_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "confined_space_permit_monitoring_equipment" */
export type Confined_Space_Permit_Monitoring_Equipment_Stddev_Samp_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Confined_Space_Permit_Monitoring_Equipment_Sum_Fields = {
   __typename?: 'confined_space_permit_monitoring_equipment_sum_fields';
  sort_index?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "confined_space_permit_monitoring_equipment" */
export type Confined_Space_Permit_Monitoring_Equipment_Sum_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** update columns of table "confined_space_permit_monitoring_equipment" */
export enum Confined_Space_Permit_Monitoring_Equipment_Update_Column {
  /** column name */
  CalibratedBy = 'calibrated_by',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  FactoryCalibrationDate = 'factory_calibration_date',
  /** column name */
  FieldCalibrationDate = 'field_calibration_date',
  /** column name */
  Id = 'id',
  /** column name */
  Make = 'make',
  /** column name */
  Model = 'model',
  /** column name */
  Name = 'name',
  /** column name */
  PermitId = 'permit_id',
  /** column name */
  SerialNumber = 'serial_number',
  /** column name */
  SortIndex = 'sort_index'
}

/** aggregate var_pop on columns */
export type Confined_Space_Permit_Monitoring_Equipment_Var_Pop_Fields = {
   __typename?: 'confined_space_permit_monitoring_equipment_var_pop_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "confined_space_permit_monitoring_equipment" */
export type Confined_Space_Permit_Monitoring_Equipment_Var_Pop_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Confined_Space_Permit_Monitoring_Equipment_Var_Samp_Fields = {
   __typename?: 'confined_space_permit_monitoring_equipment_var_samp_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "confined_space_permit_monitoring_equipment" */
export type Confined_Space_Permit_Monitoring_Equipment_Var_Samp_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Confined_Space_Permit_Monitoring_Equipment_Variance_Fields = {
   __typename?: 'confined_space_permit_monitoring_equipment_variance_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "confined_space_permit_monitoring_equipment" */
export type Confined_Space_Permit_Monitoring_Equipment_Variance_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** response of any mutation on the table "confined_space_permit" */
export type Confined_Space_Permit_Mutation_Response = {
   __typename?: 'confined_space_permit_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Confined_Space_Permit>;
};

/** input type for inserting object relation for remote table "confined_space_permit" */
export type Confined_Space_Permit_Obj_Rel_Insert_Input = {
  data: Confined_Space_Permit_Insert_Input;
  on_conflict?: Maybe<Confined_Space_Permit_On_Conflict>;
};

/** on conflict condition type for table "confined_space_permit" */
export type Confined_Space_Permit_On_Conflict = {
  constraint: Confined_Space_Permit_Constraint;
  update_columns: Array<Confined_Space_Permit_Update_Column>;
  where?: Maybe<Confined_Space_Permit_Bool_Exp>;
};

/** ordering options when selecting data from "confined_space_permit" */
export type Confined_Space_Permit_Order_By = {
  applicant_project_worker?: Maybe<Project_Worker_Order_By>;
  applicant_project_worker_id?: Maybe<Order_By>;
  communication_procedure?: Maybe<Text_Translation_Order_By>;
  communication_procedure_id?: Maybe<Order_By>;
  communication_procedure_text?: Maybe<Order_By>;
  confined_space_description?: Maybe<Text_Translation_Order_By>;
  confined_space_description_id?: Maybe<Order_By>;
  confined_space_description_text?: Maybe<Order_By>;
  confined_space_permit_readings_aggregate?: Maybe<Confined_Space_Permit_Reading_Aggregate_Order_By>;
  created_at?: Maybe<Order_By>;
  emergency_contact_employee?: Maybe<General_Contractor_Employee_Order_By>;
  emergency_contact_employee_uid?: Maybe<Order_By>;
  entry_date?: Maybe<Order_By>;
  equipment?: Maybe<Text_Translation_Order_By>;
  equipment_id?: Maybe<Order_By>;
  equipment_text?: Maybe<Order_By>;
  expiry_date?: Maybe<Order_By>;
  hazards_description?: Maybe<Text_Translation_Order_By>;
  hazards_description_id?: Maybe<Order_By>;
  hazards_description_text?: Maybe<Order_By>;
  monitoring_equipment_aggregate?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Aggregate_Order_By>;
  permit?: Maybe<Permit_Order_By>;
  permit_id?: Maybe<Order_By>;
  rescue_plan?: Maybe<Text_Translation_Order_By>;
  rescue_plan_id?: Maybe<Order_By>;
  rescue_plan_text?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  work_description?: Maybe<Text_Translation_Order_By>;
  work_description_id?: Maybe<Order_By>;
  work_description_text?: Maybe<Order_By>;
  work_duration?: Maybe<Order_By>;
  work_location?: Maybe<Text_Translation_Order_By>;
  work_location_id?: Maybe<Order_By>;
  work_location_text?: Maybe<Order_By>;
};

/** primary key columns input for table: "confined_space_permit" */
export type Confined_Space_Permit_Pk_Columns_Input = {
  permit_id: Scalars['uuid'];
};

/** columns and relationships of "confined_space_permit_reading" */
export type Confined_Space_Permit_Reading = {
   __typename?: 'confined_space_permit_reading';
  co_ppm?: Maybe<Scalars['String']>;
  /** An object relationship */
  confined_space_permit: Confined_Space_Permit;
  created_at: Scalars['timestamptz'];
  /** An array relationship */
  custom_items: Array<Confined_Space_Permit_Reading_Custom_Item>;
  /** An aggregated array relationship */
  custom_items_aggregate: Confined_Space_Permit_Reading_Custom_Item_Aggregate;
  h2s_ppm?: Maybe<Scalars['String']>;
  id: Scalars['uuid'];
  /** An array relationship */
  images: Array<Image>;
  /** An aggregated array relationship */
  images_aggregate: Image_Aggregate;
  lower_explosive_limit?: Maybe<Scalars['String']>;
  o2_percent?: Maybe<Scalars['String']>;
  permit_id: Scalars['uuid'];
  /** An object relationship */
  sign_project_worker?: Maybe<Project_Worker>;
  sign_project_worker_id?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  signature_image?: Maybe<Image>;
  signature_image_id?: Maybe<Scalars['uuid']>;
  submitted_at?: Maybe<Scalars['timestamptz']>;
  taken_at?: Maybe<Scalars['timestamptz']>;
  /** An object relationship */
  taken_by_project_worker?: Maybe<Project_Worker>;
  taken_by_project_worker_id?: Maybe<Scalars['uuid']>;
  type: Scalars['String'];
};


/** columns and relationships of "confined_space_permit_reading" */
export type Confined_Space_Permit_ReadingCustom_ItemsArgs = {
  distinct_on?: Maybe<Array<Confined_Space_Permit_Reading_Custom_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Confined_Space_Permit_Reading_Custom_Item_Order_By>>;
  where?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Bool_Exp>;
};


/** columns and relationships of "confined_space_permit_reading" */
export type Confined_Space_Permit_ReadingCustom_Items_AggregateArgs = {
  distinct_on?: Maybe<Array<Confined_Space_Permit_Reading_Custom_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Confined_Space_Permit_Reading_Custom_Item_Order_By>>;
  where?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Bool_Exp>;
};


/** columns and relationships of "confined_space_permit_reading" */
export type Confined_Space_Permit_ReadingImagesArgs = {
  distinct_on?: Maybe<Array<Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Image_Order_By>>;
  where?: Maybe<Image_Bool_Exp>;
};


/** columns and relationships of "confined_space_permit_reading" */
export type Confined_Space_Permit_ReadingImages_AggregateArgs = {
  distinct_on?: Maybe<Array<Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Image_Order_By>>;
  where?: Maybe<Image_Bool_Exp>;
};

/** aggregated selection of "confined_space_permit_reading" */
export type Confined_Space_Permit_Reading_Aggregate = {
   __typename?: 'confined_space_permit_reading_aggregate';
  aggregate?: Maybe<Confined_Space_Permit_Reading_Aggregate_Fields>;
  nodes: Array<Confined_Space_Permit_Reading>;
};

/** aggregate fields of "confined_space_permit_reading" */
export type Confined_Space_Permit_Reading_Aggregate_Fields = {
   __typename?: 'confined_space_permit_reading_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Confined_Space_Permit_Reading_Max_Fields>;
  min?: Maybe<Confined_Space_Permit_Reading_Min_Fields>;
};


/** aggregate fields of "confined_space_permit_reading" */
export type Confined_Space_Permit_Reading_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Confined_Space_Permit_Reading_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "confined_space_permit_reading" */
export type Confined_Space_Permit_Reading_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Confined_Space_Permit_Reading_Max_Order_By>;
  min?: Maybe<Confined_Space_Permit_Reading_Min_Order_By>;
};

/** input type for inserting array relation for remote table "confined_space_permit_reading" */
export type Confined_Space_Permit_Reading_Arr_Rel_Insert_Input = {
  data: Array<Confined_Space_Permit_Reading_Insert_Input>;
  on_conflict?: Maybe<Confined_Space_Permit_Reading_On_Conflict>;
};

/**
 * Boolean expression to filter rows from the table
 * "confined_space_permit_reading". All fields are combined with a logical 'AND'.
 */
export type Confined_Space_Permit_Reading_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Confined_Space_Permit_Reading_Bool_Exp>>>;
  _not?: Maybe<Confined_Space_Permit_Reading_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Confined_Space_Permit_Reading_Bool_Exp>>>;
  co_ppm?: Maybe<String_Comparison_Exp>;
  confined_space_permit?: Maybe<Confined_Space_Permit_Bool_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  custom_items?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Bool_Exp>;
  h2s_ppm?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  images?: Maybe<Image_Bool_Exp>;
  lower_explosive_limit?: Maybe<String_Comparison_Exp>;
  o2_percent?: Maybe<String_Comparison_Exp>;
  permit_id?: Maybe<Uuid_Comparison_Exp>;
  sign_project_worker?: Maybe<Project_Worker_Bool_Exp>;
  sign_project_worker_id?: Maybe<Uuid_Comparison_Exp>;
  signature_image?: Maybe<Image_Bool_Exp>;
  signature_image_id?: Maybe<Uuid_Comparison_Exp>;
  submitted_at?: Maybe<Timestamptz_Comparison_Exp>;
  taken_at?: Maybe<Timestamptz_Comparison_Exp>;
  taken_by_project_worker?: Maybe<Project_Worker_Bool_Exp>;
  taken_by_project_worker_id?: Maybe<Uuid_Comparison_Exp>;
  type?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "confined_space_permit_reading" */
export enum Confined_Space_Permit_Reading_Constraint {
  /** unique or primary key constraint */
  ConfinedSpacePermitReadingPkey = 'confined_space_permit_reading_pkey'
}

/** columns and relationships of "confined_space_permit_reading_custom_item" */
export type Confined_Space_Permit_Reading_Custom_Item = {
   __typename?: 'confined_space_permit_reading_custom_item';
  /** An object relationship */
  confined_space_permit_reading: Confined_Space_Permit_Reading;
  id: Scalars['uuid'];
  is_new: Scalars['Boolean'];
  name?: Maybe<Scalars['String']>;
  reading_id: Scalars['uuid'];
  sort_index: Scalars['numeric'];
  type_id: Scalars['uuid'];
  unit_type?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** aggregated selection of "confined_space_permit_reading_custom_item" */
export type Confined_Space_Permit_Reading_Custom_Item_Aggregate = {
   __typename?: 'confined_space_permit_reading_custom_item_aggregate';
  aggregate?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Aggregate_Fields>;
  nodes: Array<Confined_Space_Permit_Reading_Custom_Item>;
};

/** aggregate fields of "confined_space_permit_reading_custom_item" */
export type Confined_Space_Permit_Reading_Custom_Item_Aggregate_Fields = {
   __typename?: 'confined_space_permit_reading_custom_item_aggregate_fields';
  avg?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Max_Fields>;
  min?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Min_Fields>;
  stddev?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Stddev_Fields>;
  stddev_pop?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Stddev_Samp_Fields>;
  sum?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Sum_Fields>;
  var_pop?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Var_Pop_Fields>;
  var_samp?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Var_Samp_Fields>;
  variance?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Variance_Fields>;
};


/** aggregate fields of "confined_space_permit_reading_custom_item" */
export type Confined_Space_Permit_Reading_Custom_Item_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Confined_Space_Permit_Reading_Custom_Item_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "confined_space_permit_reading_custom_item" */
export type Confined_Space_Permit_Reading_Custom_Item_Aggregate_Order_By = {
  avg?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Max_Order_By>;
  min?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Min_Order_By>;
  stddev?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Stddev_Order_By>;
  stddev_pop?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Stddev_Samp_Order_By>;
  sum?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Sum_Order_By>;
  var_pop?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Var_Pop_Order_By>;
  var_samp?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Var_Samp_Order_By>;
  variance?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "confined_space_permit_reading_custom_item" */
export type Confined_Space_Permit_Reading_Custom_Item_Arr_Rel_Insert_Input = {
  data: Array<Confined_Space_Permit_Reading_Custom_Item_Insert_Input>;
  on_conflict?: Maybe<Confined_Space_Permit_Reading_Custom_Item_On_Conflict>;
};

/** aggregate avg on columns */
export type Confined_Space_Permit_Reading_Custom_Item_Avg_Fields = {
   __typename?: 'confined_space_permit_reading_custom_item_avg_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "confined_space_permit_reading_custom_item" */
export type Confined_Space_Permit_Reading_Custom_Item_Avg_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/**
 * Boolean expression to filter rows from the table
 * "confined_space_permit_reading_custom_item". All fields are combined with a logical 'AND'.
 */
export type Confined_Space_Permit_Reading_Custom_Item_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Confined_Space_Permit_Reading_Custom_Item_Bool_Exp>>>;
  _not?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Confined_Space_Permit_Reading_Custom_Item_Bool_Exp>>>;
  confined_space_permit_reading?: Maybe<Confined_Space_Permit_Reading_Bool_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  is_new?: Maybe<Boolean_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  reading_id?: Maybe<Uuid_Comparison_Exp>;
  sort_index?: Maybe<Numeric_Comparison_Exp>;
  type_id?: Maybe<Uuid_Comparison_Exp>;
  unit_type?: Maybe<String_Comparison_Exp>;
  value?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "confined_space_permit_reading_custom_item" */
export enum Confined_Space_Permit_Reading_Custom_Item_Constraint {
  /** unique or primary key constraint */
  ConfinedSpacePermitReadingCustomItemPkey = 'confined_space_permit_reading_custom_item_pkey',
  /** unique or primary key constraint */
  ConfinedSpacePermitReadingCustomItemTypeIdReadingIdKe = 'confined_space_permit_reading_custom_item_type_id_reading_id_ke'
}

/** input type for incrementing integer column in table "confined_space_permit_reading_custom_item" */
export type Confined_Space_Permit_Reading_Custom_Item_Inc_Input = {
  sort_index?: Maybe<Scalars['numeric']>;
};

/** input type for inserting data into table "confined_space_permit_reading_custom_item" */
export type Confined_Space_Permit_Reading_Custom_Item_Insert_Input = {
  confined_space_permit_reading?: Maybe<Confined_Space_Permit_Reading_Obj_Rel_Insert_Input>;
  id?: Maybe<Scalars['uuid']>;
  is_new?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  reading_id?: Maybe<Scalars['uuid']>;
  sort_index?: Maybe<Scalars['numeric']>;
  type_id?: Maybe<Scalars['uuid']>;
  unit_type?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Confined_Space_Permit_Reading_Custom_Item_Max_Fields = {
   __typename?: 'confined_space_permit_reading_custom_item_max_fields';
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  reading_id?: Maybe<Scalars['uuid']>;
  sort_index?: Maybe<Scalars['numeric']>;
  type_id?: Maybe<Scalars['uuid']>;
  unit_type?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "confined_space_permit_reading_custom_item" */
export type Confined_Space_Permit_Reading_Custom_Item_Max_Order_By = {
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  reading_id?: Maybe<Order_By>;
  sort_index?: Maybe<Order_By>;
  type_id?: Maybe<Order_By>;
  unit_type?: Maybe<Order_By>;
  value?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Confined_Space_Permit_Reading_Custom_Item_Min_Fields = {
   __typename?: 'confined_space_permit_reading_custom_item_min_fields';
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  reading_id?: Maybe<Scalars['uuid']>;
  sort_index?: Maybe<Scalars['numeric']>;
  type_id?: Maybe<Scalars['uuid']>;
  unit_type?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "confined_space_permit_reading_custom_item" */
export type Confined_Space_Permit_Reading_Custom_Item_Min_Order_By = {
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  reading_id?: Maybe<Order_By>;
  sort_index?: Maybe<Order_By>;
  type_id?: Maybe<Order_By>;
  unit_type?: Maybe<Order_By>;
  value?: Maybe<Order_By>;
};

/** response of any mutation on the table "confined_space_permit_reading_custom_item" */
export type Confined_Space_Permit_Reading_Custom_Item_Mutation_Response = {
   __typename?: 'confined_space_permit_reading_custom_item_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Confined_Space_Permit_Reading_Custom_Item>;
};

/** input type for inserting object relation for remote table "confined_space_permit_reading_custom_item" */
export type Confined_Space_Permit_Reading_Custom_Item_Obj_Rel_Insert_Input = {
  data: Confined_Space_Permit_Reading_Custom_Item_Insert_Input;
  on_conflict?: Maybe<Confined_Space_Permit_Reading_Custom_Item_On_Conflict>;
};

/** on conflict condition type for table "confined_space_permit_reading_custom_item" */
export type Confined_Space_Permit_Reading_Custom_Item_On_Conflict = {
  constraint: Confined_Space_Permit_Reading_Custom_Item_Constraint;
  update_columns: Array<Confined_Space_Permit_Reading_Custom_Item_Update_Column>;
  where?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Bool_Exp>;
};

/** ordering options when selecting data from "confined_space_permit_reading_custom_item" */
export type Confined_Space_Permit_Reading_Custom_Item_Order_By = {
  confined_space_permit_reading?: Maybe<Confined_Space_Permit_Reading_Order_By>;
  id?: Maybe<Order_By>;
  is_new?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  reading_id?: Maybe<Order_By>;
  sort_index?: Maybe<Order_By>;
  type_id?: Maybe<Order_By>;
  unit_type?: Maybe<Order_By>;
  value?: Maybe<Order_By>;
};

/** primary key columns input for table: "confined_space_permit_reading_custom_item" */
export type Confined_Space_Permit_Reading_Custom_Item_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "confined_space_permit_reading_custom_item" */
export enum Confined_Space_Permit_Reading_Custom_Item_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  IsNew = 'is_new',
  /** column name */
  Name = 'name',
  /** column name */
  ReadingId = 'reading_id',
  /** column name */
  SortIndex = 'sort_index',
  /** column name */
  TypeId = 'type_id',
  /** column name */
  UnitType = 'unit_type',
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "confined_space_permit_reading_custom_item" */
export type Confined_Space_Permit_Reading_Custom_Item_Set_Input = {
  id?: Maybe<Scalars['uuid']>;
  is_new?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  reading_id?: Maybe<Scalars['uuid']>;
  sort_index?: Maybe<Scalars['numeric']>;
  type_id?: Maybe<Scalars['uuid']>;
  unit_type?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Confined_Space_Permit_Reading_Custom_Item_Stddev_Fields = {
   __typename?: 'confined_space_permit_reading_custom_item_stddev_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "confined_space_permit_reading_custom_item" */
export type Confined_Space_Permit_Reading_Custom_Item_Stddev_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Confined_Space_Permit_Reading_Custom_Item_Stddev_Pop_Fields = {
   __typename?: 'confined_space_permit_reading_custom_item_stddev_pop_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "confined_space_permit_reading_custom_item" */
export type Confined_Space_Permit_Reading_Custom_Item_Stddev_Pop_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Confined_Space_Permit_Reading_Custom_Item_Stddev_Samp_Fields = {
   __typename?: 'confined_space_permit_reading_custom_item_stddev_samp_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "confined_space_permit_reading_custom_item" */
export type Confined_Space_Permit_Reading_Custom_Item_Stddev_Samp_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Confined_Space_Permit_Reading_Custom_Item_Sum_Fields = {
   __typename?: 'confined_space_permit_reading_custom_item_sum_fields';
  sort_index?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "confined_space_permit_reading_custom_item" */
export type Confined_Space_Permit_Reading_Custom_Item_Sum_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** update columns of table "confined_space_permit_reading_custom_item" */
export enum Confined_Space_Permit_Reading_Custom_Item_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  IsNew = 'is_new',
  /** column name */
  Name = 'name',
  /** column name */
  ReadingId = 'reading_id',
  /** column name */
  SortIndex = 'sort_index',
  /** column name */
  TypeId = 'type_id',
  /** column name */
  UnitType = 'unit_type',
  /** column name */
  Value = 'value'
}

/** aggregate var_pop on columns */
export type Confined_Space_Permit_Reading_Custom_Item_Var_Pop_Fields = {
   __typename?: 'confined_space_permit_reading_custom_item_var_pop_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "confined_space_permit_reading_custom_item" */
export type Confined_Space_Permit_Reading_Custom_Item_Var_Pop_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Confined_Space_Permit_Reading_Custom_Item_Var_Samp_Fields = {
   __typename?: 'confined_space_permit_reading_custom_item_var_samp_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "confined_space_permit_reading_custom_item" */
export type Confined_Space_Permit_Reading_Custom_Item_Var_Samp_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Confined_Space_Permit_Reading_Custom_Item_Variance_Fields = {
   __typename?: 'confined_space_permit_reading_custom_item_variance_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "confined_space_permit_reading_custom_item" */
export type Confined_Space_Permit_Reading_Custom_Item_Variance_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** input type for inserting data into table "confined_space_permit_reading" */
export type Confined_Space_Permit_Reading_Insert_Input = {
  co_ppm?: Maybe<Scalars['String']>;
  confined_space_permit?: Maybe<Confined_Space_Permit_Obj_Rel_Insert_Input>;
  created_at?: Maybe<Scalars['timestamptz']>;
  custom_items?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Arr_Rel_Insert_Input>;
  h2s_ppm?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  images?: Maybe<Image_Arr_Rel_Insert_Input>;
  lower_explosive_limit?: Maybe<Scalars['String']>;
  o2_percent?: Maybe<Scalars['String']>;
  permit_id?: Maybe<Scalars['uuid']>;
  sign_project_worker?: Maybe<Project_Worker_Obj_Rel_Insert_Input>;
  sign_project_worker_id?: Maybe<Scalars['uuid']>;
  signature_image?: Maybe<Image_Obj_Rel_Insert_Input>;
  signature_image_id?: Maybe<Scalars['uuid']>;
  submitted_at?: Maybe<Scalars['timestamptz']>;
  taken_at?: Maybe<Scalars['timestamptz']>;
  taken_by_project_worker?: Maybe<Project_Worker_Obj_Rel_Insert_Input>;
  taken_by_project_worker_id?: Maybe<Scalars['uuid']>;
  type?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Confined_Space_Permit_Reading_Max_Fields = {
   __typename?: 'confined_space_permit_reading_max_fields';
  co_ppm?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  h2s_ppm?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  lower_explosive_limit?: Maybe<Scalars['String']>;
  o2_percent?: Maybe<Scalars['String']>;
  permit_id?: Maybe<Scalars['uuid']>;
  sign_project_worker_id?: Maybe<Scalars['uuid']>;
  signature_image_id?: Maybe<Scalars['uuid']>;
  submitted_at?: Maybe<Scalars['timestamptz']>;
  taken_at?: Maybe<Scalars['timestamptz']>;
  taken_by_project_worker_id?: Maybe<Scalars['uuid']>;
  type?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "confined_space_permit_reading" */
export type Confined_Space_Permit_Reading_Max_Order_By = {
  co_ppm?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  h2s_ppm?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  lower_explosive_limit?: Maybe<Order_By>;
  o2_percent?: Maybe<Order_By>;
  permit_id?: Maybe<Order_By>;
  sign_project_worker_id?: Maybe<Order_By>;
  signature_image_id?: Maybe<Order_By>;
  submitted_at?: Maybe<Order_By>;
  taken_at?: Maybe<Order_By>;
  taken_by_project_worker_id?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Confined_Space_Permit_Reading_Min_Fields = {
   __typename?: 'confined_space_permit_reading_min_fields';
  co_ppm?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  h2s_ppm?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  lower_explosive_limit?: Maybe<Scalars['String']>;
  o2_percent?: Maybe<Scalars['String']>;
  permit_id?: Maybe<Scalars['uuid']>;
  sign_project_worker_id?: Maybe<Scalars['uuid']>;
  signature_image_id?: Maybe<Scalars['uuid']>;
  submitted_at?: Maybe<Scalars['timestamptz']>;
  taken_at?: Maybe<Scalars['timestamptz']>;
  taken_by_project_worker_id?: Maybe<Scalars['uuid']>;
  type?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "confined_space_permit_reading" */
export type Confined_Space_Permit_Reading_Min_Order_By = {
  co_ppm?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  h2s_ppm?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  lower_explosive_limit?: Maybe<Order_By>;
  o2_percent?: Maybe<Order_By>;
  permit_id?: Maybe<Order_By>;
  sign_project_worker_id?: Maybe<Order_By>;
  signature_image_id?: Maybe<Order_By>;
  submitted_at?: Maybe<Order_By>;
  taken_at?: Maybe<Order_By>;
  taken_by_project_worker_id?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
};

/** response of any mutation on the table "confined_space_permit_reading" */
export type Confined_Space_Permit_Reading_Mutation_Response = {
   __typename?: 'confined_space_permit_reading_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Confined_Space_Permit_Reading>;
};

/** input type for inserting object relation for remote table "confined_space_permit_reading" */
export type Confined_Space_Permit_Reading_Obj_Rel_Insert_Input = {
  data: Confined_Space_Permit_Reading_Insert_Input;
  on_conflict?: Maybe<Confined_Space_Permit_Reading_On_Conflict>;
};

/** on conflict condition type for table "confined_space_permit_reading" */
export type Confined_Space_Permit_Reading_On_Conflict = {
  constraint: Confined_Space_Permit_Reading_Constraint;
  update_columns: Array<Confined_Space_Permit_Reading_Update_Column>;
  where?: Maybe<Confined_Space_Permit_Reading_Bool_Exp>;
};

/** ordering options when selecting data from "confined_space_permit_reading" */
export type Confined_Space_Permit_Reading_Order_By = {
  co_ppm?: Maybe<Order_By>;
  confined_space_permit?: Maybe<Confined_Space_Permit_Order_By>;
  created_at?: Maybe<Order_By>;
  custom_items_aggregate?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Aggregate_Order_By>;
  h2s_ppm?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  images_aggregate?: Maybe<Image_Aggregate_Order_By>;
  lower_explosive_limit?: Maybe<Order_By>;
  o2_percent?: Maybe<Order_By>;
  permit_id?: Maybe<Order_By>;
  sign_project_worker?: Maybe<Project_Worker_Order_By>;
  sign_project_worker_id?: Maybe<Order_By>;
  signature_image?: Maybe<Image_Order_By>;
  signature_image_id?: Maybe<Order_By>;
  submitted_at?: Maybe<Order_By>;
  taken_at?: Maybe<Order_By>;
  taken_by_project_worker?: Maybe<Project_Worker_Order_By>;
  taken_by_project_worker_id?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
};

/** primary key columns input for table: "confined_space_permit_reading" */
export type Confined_Space_Permit_Reading_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "confined_space_permit_reading" */
export enum Confined_Space_Permit_Reading_Select_Column {
  /** column name */
  CoPpm = 'co_ppm',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  H2sPpm = 'h2s_ppm',
  /** column name */
  Id = 'id',
  /** column name */
  LowerExplosiveLimit = 'lower_explosive_limit',
  /** column name */
  O2Percent = 'o2_percent',
  /** column name */
  PermitId = 'permit_id',
  /** column name */
  SignProjectWorkerId = 'sign_project_worker_id',
  /** column name */
  SignatureImageId = 'signature_image_id',
  /** column name */
  SubmittedAt = 'submitted_at',
  /** column name */
  TakenAt = 'taken_at',
  /** column name */
  TakenByProjectWorkerId = 'taken_by_project_worker_id',
  /** column name */
  Type = 'type'
}

/** input type for updating data in table "confined_space_permit_reading" */
export type Confined_Space_Permit_Reading_Set_Input = {
  co_ppm?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  h2s_ppm?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  lower_explosive_limit?: Maybe<Scalars['String']>;
  o2_percent?: Maybe<Scalars['String']>;
  permit_id?: Maybe<Scalars['uuid']>;
  sign_project_worker_id?: Maybe<Scalars['uuid']>;
  signature_image_id?: Maybe<Scalars['uuid']>;
  submitted_at?: Maybe<Scalars['timestamptz']>;
  taken_at?: Maybe<Scalars['timestamptz']>;
  taken_by_project_worker_id?: Maybe<Scalars['uuid']>;
  type?: Maybe<Scalars['String']>;
};

/** update columns of table "confined_space_permit_reading" */
export enum Confined_Space_Permit_Reading_Update_Column {
  /** column name */
  CoPpm = 'co_ppm',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  H2sPpm = 'h2s_ppm',
  /** column name */
  Id = 'id',
  /** column name */
  LowerExplosiveLimit = 'lower_explosive_limit',
  /** column name */
  O2Percent = 'o2_percent',
  /** column name */
  PermitId = 'permit_id',
  /** column name */
  SignProjectWorkerId = 'sign_project_worker_id',
  /** column name */
  SignatureImageId = 'signature_image_id',
  /** column name */
  SubmittedAt = 'submitted_at',
  /** column name */
  TakenAt = 'taken_at',
  /** column name */
  TakenByProjectWorkerId = 'taken_by_project_worker_id',
  /** column name */
  Type = 'type'
}

/** select columns of table "confined_space_permit" */
export enum Confined_Space_Permit_Select_Column {
  /** column name */
  ApplicantProjectWorkerId = 'applicant_project_worker_id',
  /** column name */
  CommunicationProcedureId = 'communication_procedure_id',
  /** column name */
  CommunicationProcedureText = 'communication_procedure_text',
  /** column name */
  ConfinedSpaceDescriptionId = 'confined_space_description_id',
  /** column name */
  ConfinedSpaceDescriptionText = 'confined_space_description_text',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  EmergencyContactEmployeeUid = 'emergency_contact_employee_uid',
  /** column name */
  EntryDate = 'entry_date',
  /** column name */
  EquipmentId = 'equipment_id',
  /** column name */
  EquipmentText = 'equipment_text',
  /** column name */
  ExpiryDate = 'expiry_date',
  /** column name */
  HazardsDescriptionId = 'hazards_description_id',
  /** column name */
  HazardsDescriptionText = 'hazards_description_text',
  /** column name */
  PermitId = 'permit_id',
  /** column name */
  RescuePlanId = 'rescue_plan_id',
  /** column name */
  RescuePlanText = 'rescue_plan_text',
  /** column name */
  Type = 'type',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  WorkDescriptionId = 'work_description_id',
  /** column name */
  WorkDescriptionText = 'work_description_text',
  /** column name */
  WorkDuration = 'work_duration',
  /** column name */
  WorkLocationId = 'work_location_id',
  /** column name */
  WorkLocationText = 'work_location_text'
}

/** input type for updating data in table "confined_space_permit" */
export type Confined_Space_Permit_Set_Input = {
  applicant_project_worker_id?: Maybe<Scalars['uuid']>;
  communication_procedure_id?: Maybe<Scalars['uuid']>;
  communication_procedure_text?: Maybe<Scalars['String']>;
  confined_space_description_id?: Maybe<Scalars['uuid']>;
  confined_space_description_text?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  emergency_contact_employee_uid?: Maybe<Scalars['uuid']>;
  entry_date?: Maybe<Scalars['timestamptz']>;
  equipment_id?: Maybe<Scalars['uuid']>;
  equipment_text?: Maybe<Scalars['String']>;
  expiry_date?: Maybe<Scalars['timestamptz']>;
  hazards_description_id?: Maybe<Scalars['uuid']>;
  hazards_description_text?: Maybe<Scalars['String']>;
  permit_id?: Maybe<Scalars['uuid']>;
  rescue_plan_id?: Maybe<Scalars['uuid']>;
  rescue_plan_text?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  work_description_id?: Maybe<Scalars['uuid']>;
  work_description_text?: Maybe<Scalars['String']>;
  work_duration?: Maybe<Scalars['interval']>;
  work_location_id?: Maybe<Scalars['uuid']>;
  work_location_text?: Maybe<Scalars['String']>;
};

/** update columns of table "confined_space_permit" */
export enum Confined_Space_Permit_Update_Column {
  /** column name */
  ApplicantProjectWorkerId = 'applicant_project_worker_id',
  /** column name */
  CommunicationProcedureId = 'communication_procedure_id',
  /** column name */
  CommunicationProcedureText = 'communication_procedure_text',
  /** column name */
  ConfinedSpaceDescriptionId = 'confined_space_description_id',
  /** column name */
  ConfinedSpaceDescriptionText = 'confined_space_description_text',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  EmergencyContactEmployeeUid = 'emergency_contact_employee_uid',
  /** column name */
  EntryDate = 'entry_date',
  /** column name */
  EquipmentId = 'equipment_id',
  /** column name */
  EquipmentText = 'equipment_text',
  /** column name */
  ExpiryDate = 'expiry_date',
  /** column name */
  HazardsDescriptionId = 'hazards_description_id',
  /** column name */
  HazardsDescriptionText = 'hazards_description_text',
  /** column name */
  PermitId = 'permit_id',
  /** column name */
  RescuePlanId = 'rescue_plan_id',
  /** column name */
  RescuePlanText = 'rescue_plan_text',
  /** column name */
  Type = 'type',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  WorkDescriptionId = 'work_description_id',
  /** column name */
  WorkDescriptionText = 'work_description_text',
  /** column name */
  WorkDuration = 'work_duration',
  /** column name */
  WorkLocationId = 'work_location_id',
  /** column name */
  WorkLocationText = 'work_location_text'
}

export type ConfinedSpacePermitForm = {
   __typename?: 'ConfinedSpacePermitForm';
  selectedIsPermitted?: Maybe<Scalars['Boolean']>;
};

export type CovidFailedWorker = {
   __typename?: 'CovidFailedWorker';
  projectWorkerId: Scalars['String'];
  failedQuestionId: Scalars['String'];
};

export type CreateInviteDataObject = {
  automaticSend?: Maybe<Scalars['Boolean']>;
  claimingAccount?: Maybe<Scalars['Boolean']>;
  inviteId: Scalars['String'];
  joinGeneralContractorId?: Maybe<Scalars['String']>;
  joinProjectId?: Maybe<Scalars['String']>;
  joinRole?: Maybe<Scalars['String']>;
  joinSubcontractorId?: Maybe<Scalars['String']>;
  serverContact?: Maybe<Scalars['Boolean']>;
  toEmail?: Maybe<Scalars['String']>;
  toPhoneNumber?: Maybe<Scalars['String']>;
  toUid?: Maybe<Scalars['String']>;
};

export type CreateSubcontractorEmployeeInput = {
  email: Scalars['String'];
  employeeTitleId: Scalars['String'];
  name: Scalars['String'];
  phone?: Maybe<Scalars['String']>;
  subcontractorId: Scalars['String'];
};

export type CrewSelfCertifyForm = {
   __typename?: 'CrewSelfCertifyForm';
  passedWorkerIds: Array<Scalars['String']>;
  failedWorkers: Array<CovidFailedWorker>;
};

/** columns and relationships of "daily_copy" */
export type Daily_Copy = {
   __typename?: 'daily_copy';
  created_at: Scalars['timestamptz'];
  /** An object relationship */
  created_by_project_user: Project_User;
  created_by_project_user_id: Scalars['uuid'];
  /** An array relationship */
  daily_copy_sections: Array<Daily_Copy_Section>;
  /** An aggregated array relationship */
  daily_copy_sections_aggregate: Daily_Copy_Section_Aggregate;
  from_date: Scalars['date'];
  id: Scalars['uuid'];
  /** An object relationship */
  project: Project;
  project_id: Scalars['uuid'];
  to_date: Scalars['date'];
};


/** columns and relationships of "daily_copy" */
export type Daily_CopyDaily_Copy_SectionsArgs = {
  distinct_on?: Maybe<Array<Daily_Copy_Section_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Copy_Section_Order_By>>;
  where?: Maybe<Daily_Copy_Section_Bool_Exp>;
};


/** columns and relationships of "daily_copy" */
export type Daily_CopyDaily_Copy_Sections_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Copy_Section_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Copy_Section_Order_By>>;
  where?: Maybe<Daily_Copy_Section_Bool_Exp>;
};

/** aggregated selection of "daily_copy" */
export type Daily_Copy_Aggregate = {
   __typename?: 'daily_copy_aggregate';
  aggregate?: Maybe<Daily_Copy_Aggregate_Fields>;
  nodes: Array<Daily_Copy>;
};

/** aggregate fields of "daily_copy" */
export type Daily_Copy_Aggregate_Fields = {
   __typename?: 'daily_copy_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Daily_Copy_Max_Fields>;
  min?: Maybe<Daily_Copy_Min_Fields>;
};


/** aggregate fields of "daily_copy" */
export type Daily_Copy_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Daily_Copy_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "daily_copy" */
export type Daily_Copy_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Daily_Copy_Max_Order_By>;
  min?: Maybe<Daily_Copy_Min_Order_By>;
};

/** input type for inserting array relation for remote table "daily_copy" */
export type Daily_Copy_Arr_Rel_Insert_Input = {
  data: Array<Daily_Copy_Insert_Input>;
  on_conflict?: Maybe<Daily_Copy_On_Conflict>;
};

/** Boolean expression to filter rows from the table "daily_copy". All fields are combined with a logical 'AND'. */
export type Daily_Copy_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Daily_Copy_Bool_Exp>>>;
  _not?: Maybe<Daily_Copy_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Daily_Copy_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  created_by_project_user?: Maybe<Project_User_Bool_Exp>;
  created_by_project_user_id?: Maybe<Uuid_Comparison_Exp>;
  daily_copy_sections?: Maybe<Daily_Copy_Section_Bool_Exp>;
  from_date?: Maybe<Date_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  to_date?: Maybe<Date_Comparison_Exp>;
};

/** unique or primary key constraints on table "daily_copy" */
export enum Daily_Copy_Constraint {
  /** unique or primary key constraint */
  DailyCopyPkey = 'daily_copy_pkey'
}

/** input type for inserting data into table "daily_copy" */
export type Daily_Copy_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_project_user?: Maybe<Project_User_Obj_Rel_Insert_Input>;
  created_by_project_user_id?: Maybe<Scalars['uuid']>;
  daily_copy_sections?: Maybe<Daily_Copy_Section_Arr_Rel_Insert_Input>;
  from_date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_id?: Maybe<Scalars['uuid']>;
  to_date?: Maybe<Scalars['date']>;
};

/** aggregate max on columns */
export type Daily_Copy_Max_Fields = {
   __typename?: 'daily_copy_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_project_user_id?: Maybe<Scalars['uuid']>;
  from_date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  to_date?: Maybe<Scalars['date']>;
};

/** order by max() on columns of table "daily_copy" */
export type Daily_Copy_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  created_by_project_user_id?: Maybe<Order_By>;
  from_date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  to_date?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Daily_Copy_Min_Fields = {
   __typename?: 'daily_copy_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_project_user_id?: Maybe<Scalars['uuid']>;
  from_date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  to_date?: Maybe<Scalars['date']>;
};

/** order by min() on columns of table "daily_copy" */
export type Daily_Copy_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  created_by_project_user_id?: Maybe<Order_By>;
  from_date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  to_date?: Maybe<Order_By>;
};

/** response of any mutation on the table "daily_copy" */
export type Daily_Copy_Mutation_Response = {
   __typename?: 'daily_copy_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Daily_Copy>;
};

/** input type for inserting object relation for remote table "daily_copy" */
export type Daily_Copy_Obj_Rel_Insert_Input = {
  data: Daily_Copy_Insert_Input;
  on_conflict?: Maybe<Daily_Copy_On_Conflict>;
};

/** on conflict condition type for table "daily_copy" */
export type Daily_Copy_On_Conflict = {
  constraint: Daily_Copy_Constraint;
  update_columns: Array<Daily_Copy_Update_Column>;
  where?: Maybe<Daily_Copy_Bool_Exp>;
};

/** ordering options when selecting data from "daily_copy" */
export type Daily_Copy_Order_By = {
  created_at?: Maybe<Order_By>;
  created_by_project_user?: Maybe<Project_User_Order_By>;
  created_by_project_user_id?: Maybe<Order_By>;
  daily_copy_sections_aggregate?: Maybe<Daily_Copy_Section_Aggregate_Order_By>;
  from_date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project?: Maybe<Project_Order_By>;
  project_id?: Maybe<Order_By>;
  to_date?: Maybe<Order_By>;
};

/** primary key columns input for table: "daily_copy" */
export type Daily_Copy_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** columns and relationships of "daily_copy_section" */
export type Daily_Copy_Section = {
   __typename?: 'daily_copy_section';
  created_at: Scalars['timestamptz'];
  /** An object relationship */
  daily_copy: Daily_Copy;
  daily_copy_id: Scalars['uuid'];
  id: Scalars['uuid'];
  section: Scalars['String'];
};

/** aggregated selection of "daily_copy_section" */
export type Daily_Copy_Section_Aggregate = {
   __typename?: 'daily_copy_section_aggregate';
  aggregate?: Maybe<Daily_Copy_Section_Aggregate_Fields>;
  nodes: Array<Daily_Copy_Section>;
};

/** aggregate fields of "daily_copy_section" */
export type Daily_Copy_Section_Aggregate_Fields = {
   __typename?: 'daily_copy_section_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Daily_Copy_Section_Max_Fields>;
  min?: Maybe<Daily_Copy_Section_Min_Fields>;
};


/** aggregate fields of "daily_copy_section" */
export type Daily_Copy_Section_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Daily_Copy_Section_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "daily_copy_section" */
export type Daily_Copy_Section_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Daily_Copy_Section_Max_Order_By>;
  min?: Maybe<Daily_Copy_Section_Min_Order_By>;
};

/** input type for inserting array relation for remote table "daily_copy_section" */
export type Daily_Copy_Section_Arr_Rel_Insert_Input = {
  data: Array<Daily_Copy_Section_Insert_Input>;
  on_conflict?: Maybe<Daily_Copy_Section_On_Conflict>;
};

/** Boolean expression to filter rows from the table "daily_copy_section". All fields are combined with a logical 'AND'. */
export type Daily_Copy_Section_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Daily_Copy_Section_Bool_Exp>>>;
  _not?: Maybe<Daily_Copy_Section_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Daily_Copy_Section_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  daily_copy?: Maybe<Daily_Copy_Bool_Exp>;
  daily_copy_id?: Maybe<Uuid_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  section?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "daily_copy_section" */
export enum Daily_Copy_Section_Constraint {
  /** unique or primary key constraint */
  DailyCopySectionDailyCopyIdSectionKey = 'daily_copy_section_daily_copy_id_section_key',
  /** unique or primary key constraint */
  DailyCopySectionPkey = 'daily_copy_section_pkey'
}

/** input type for inserting data into table "daily_copy_section" */
export type Daily_Copy_Section_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_copy?: Maybe<Daily_Copy_Obj_Rel_Insert_Input>;
  daily_copy_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  section?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Daily_Copy_Section_Max_Fields = {
   __typename?: 'daily_copy_section_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_copy_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  section?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "daily_copy_section" */
export type Daily_Copy_Section_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  daily_copy_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  section?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Daily_Copy_Section_Min_Fields = {
   __typename?: 'daily_copy_section_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_copy_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  section?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "daily_copy_section" */
export type Daily_Copy_Section_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  daily_copy_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  section?: Maybe<Order_By>;
};

/** response of any mutation on the table "daily_copy_section" */
export type Daily_Copy_Section_Mutation_Response = {
   __typename?: 'daily_copy_section_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Daily_Copy_Section>;
};

/** input type for inserting object relation for remote table "daily_copy_section" */
export type Daily_Copy_Section_Obj_Rel_Insert_Input = {
  data: Daily_Copy_Section_Insert_Input;
  on_conflict?: Maybe<Daily_Copy_Section_On_Conflict>;
};

/** on conflict condition type for table "daily_copy_section" */
export type Daily_Copy_Section_On_Conflict = {
  constraint: Daily_Copy_Section_Constraint;
  update_columns: Array<Daily_Copy_Section_Update_Column>;
  where?: Maybe<Daily_Copy_Section_Bool_Exp>;
};

/** ordering options when selecting data from "daily_copy_section" */
export type Daily_Copy_Section_Order_By = {
  created_at?: Maybe<Order_By>;
  daily_copy?: Maybe<Daily_Copy_Order_By>;
  daily_copy_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  section?: Maybe<Order_By>;
};

/** primary key columns input for table: "daily_copy_section" */
export type Daily_Copy_Section_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "daily_copy_section" */
export enum Daily_Copy_Section_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DailyCopyId = 'daily_copy_id',
  /** column name */
  Id = 'id',
  /** column name */
  Section = 'section'
}

/** input type for updating data in table "daily_copy_section" */
export type Daily_Copy_Section_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_copy_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  section?: Maybe<Scalars['String']>;
};

/** update columns of table "daily_copy_section" */
export enum Daily_Copy_Section_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DailyCopyId = 'daily_copy_id',
  /** column name */
  Id = 'id',
  /** column name */
  Section = 'section'
}

/** select columns of table "daily_copy" */
export enum Daily_Copy_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CreatedByProjectUserId = 'created_by_project_user_id',
  /** column name */
  FromDate = 'from_date',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  ToDate = 'to_date'
}

/** input type for updating data in table "daily_copy" */
export type Daily_Copy_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_project_user_id?: Maybe<Scalars['uuid']>;
  from_date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  to_date?: Maybe<Scalars['date']>;
};

/** update columns of table "daily_copy" */
export enum Daily_Copy_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CreatedByProjectUserId = 'created_by_project_user_id',
  /** column name */
  FromDate = 'from_date',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  ToDate = 'to_date'
}

export type Daily_Hours_To_Date_Args = {
  projectid?: Maybe<Scalars['uuid']>;
  to_date?: Maybe<Scalars['date']>;
};

/** columns and relationships of "daily_note" */
export type Daily_Note = {
   __typename?: 'daily_note';
  created_at: Scalars['timestamptz'];
  /** An object relationship */
  created_by_employee: General_Contractor_Employee;
  created_by_user_id: Scalars['uuid'];
  /** An array relationship */
  daily_note_subs: Array<Daily_Note_Sub>;
  /** An aggregated array relationship */
  daily_note_subs_aggregate: Daily_Note_Sub_Aggregate;
  /** An array relationship */
  daily_note_tags: Array<Daily_Note_Tag>;
  /** An aggregated array relationship */
  daily_note_tags_aggregate: Daily_Note_Tag_Aggregate;
  date: Scalars['date'];
  id: Scalars['uuid'];
  /** An array relationship */
  images: Array<Image>;
  /** An aggregated array relationship */
  images_aggregate: Image_Aggregate;
  procore_note_id?: Maybe<Scalars['String']>;
  /** An object relationship */
  project: Project;
  project_id: Scalars['uuid'];
  /** An object relationship */
  text: Text_Translation;
  text_id: Scalars['uuid'];
};


/** columns and relationships of "daily_note" */
export type Daily_NoteDaily_Note_SubsArgs = {
  distinct_on?: Maybe<Array<Daily_Note_Sub_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Note_Sub_Order_By>>;
  where?: Maybe<Daily_Note_Sub_Bool_Exp>;
};


/** columns and relationships of "daily_note" */
export type Daily_NoteDaily_Note_Subs_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Note_Sub_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Note_Sub_Order_By>>;
  where?: Maybe<Daily_Note_Sub_Bool_Exp>;
};


/** columns and relationships of "daily_note" */
export type Daily_NoteDaily_Note_TagsArgs = {
  distinct_on?: Maybe<Array<Daily_Note_Tag_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Note_Tag_Order_By>>;
  where?: Maybe<Daily_Note_Tag_Bool_Exp>;
};


/** columns and relationships of "daily_note" */
export type Daily_NoteDaily_Note_Tags_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Note_Tag_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Note_Tag_Order_By>>;
  where?: Maybe<Daily_Note_Tag_Bool_Exp>;
};


/** columns and relationships of "daily_note" */
export type Daily_NoteImagesArgs = {
  distinct_on?: Maybe<Array<Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Image_Order_By>>;
  where?: Maybe<Image_Bool_Exp>;
};


/** columns and relationships of "daily_note" */
export type Daily_NoteImages_AggregateArgs = {
  distinct_on?: Maybe<Array<Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Image_Order_By>>;
  where?: Maybe<Image_Bool_Exp>;
};

/** aggregated selection of "daily_note" */
export type Daily_Note_Aggregate = {
   __typename?: 'daily_note_aggregate';
  aggregate?: Maybe<Daily_Note_Aggregate_Fields>;
  nodes: Array<Daily_Note>;
};

/** aggregate fields of "daily_note" */
export type Daily_Note_Aggregate_Fields = {
   __typename?: 'daily_note_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Daily_Note_Max_Fields>;
  min?: Maybe<Daily_Note_Min_Fields>;
};


/** aggregate fields of "daily_note" */
export type Daily_Note_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Daily_Note_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "daily_note" */
export type Daily_Note_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Daily_Note_Max_Order_By>;
  min?: Maybe<Daily_Note_Min_Order_By>;
};

/** input type for inserting array relation for remote table "daily_note" */
export type Daily_Note_Arr_Rel_Insert_Input = {
  data: Array<Daily_Note_Insert_Input>;
  on_conflict?: Maybe<Daily_Note_On_Conflict>;
};

/** Boolean expression to filter rows from the table "daily_note". All fields are combined with a logical 'AND'. */
export type Daily_Note_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Daily_Note_Bool_Exp>>>;
  _not?: Maybe<Daily_Note_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Daily_Note_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  created_by_employee?: Maybe<General_Contractor_Employee_Bool_Exp>;
  created_by_user_id?: Maybe<Uuid_Comparison_Exp>;
  daily_note_subs?: Maybe<Daily_Note_Sub_Bool_Exp>;
  daily_note_tags?: Maybe<Daily_Note_Tag_Bool_Exp>;
  date?: Maybe<Date_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  images?: Maybe<Image_Bool_Exp>;
  procore_note_id?: Maybe<String_Comparison_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  text?: Maybe<Text_Translation_Bool_Exp>;
  text_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "daily_note" */
export enum Daily_Note_Constraint {
  /** unique or primary key constraint */
  DailyNotePkey = 'daily_note_pkey'
}

/** input type for inserting data into table "daily_note" */
export type Daily_Note_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_employee?: Maybe<General_Contractor_Employee_Obj_Rel_Insert_Input>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  daily_note_subs?: Maybe<Daily_Note_Sub_Arr_Rel_Insert_Input>;
  daily_note_tags?: Maybe<Daily_Note_Tag_Arr_Rel_Insert_Input>;
  date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  images?: Maybe<Image_Arr_Rel_Insert_Input>;
  procore_note_id?: Maybe<Scalars['String']>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_id?: Maybe<Scalars['uuid']>;
  text?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  text_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Daily_Note_Max_Fields = {
   __typename?: 'daily_note_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  procore_note_id?: Maybe<Scalars['String']>;
  project_id?: Maybe<Scalars['uuid']>;
  text_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "daily_note" */
export type Daily_Note_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  created_by_user_id?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  procore_note_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  text_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Daily_Note_Min_Fields = {
   __typename?: 'daily_note_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  procore_note_id?: Maybe<Scalars['String']>;
  project_id?: Maybe<Scalars['uuid']>;
  text_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "daily_note" */
export type Daily_Note_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  created_by_user_id?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  procore_note_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  text_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "daily_note" */
export type Daily_Note_Mutation_Response = {
   __typename?: 'daily_note_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Daily_Note>;
};

/** input type for inserting object relation for remote table "daily_note" */
export type Daily_Note_Obj_Rel_Insert_Input = {
  data: Daily_Note_Insert_Input;
  on_conflict?: Maybe<Daily_Note_On_Conflict>;
};

/** on conflict condition type for table "daily_note" */
export type Daily_Note_On_Conflict = {
  constraint: Daily_Note_Constraint;
  update_columns: Array<Daily_Note_Update_Column>;
  where?: Maybe<Daily_Note_Bool_Exp>;
};

/** ordering options when selecting data from "daily_note" */
export type Daily_Note_Order_By = {
  created_at?: Maybe<Order_By>;
  created_by_employee?: Maybe<General_Contractor_Employee_Order_By>;
  created_by_user_id?: Maybe<Order_By>;
  daily_note_subs_aggregate?: Maybe<Daily_Note_Sub_Aggregate_Order_By>;
  daily_note_tags_aggregate?: Maybe<Daily_Note_Tag_Aggregate_Order_By>;
  date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  images_aggregate?: Maybe<Image_Aggregate_Order_By>;
  procore_note_id?: Maybe<Order_By>;
  project?: Maybe<Project_Order_By>;
  project_id?: Maybe<Order_By>;
  text?: Maybe<Text_Translation_Order_By>;
  text_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "daily_note" */
export type Daily_Note_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "daily_note" */
export enum Daily_Note_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CreatedByUserId = 'created_by_user_id',
  /** column name */
  Date = 'date',
  /** column name */
  Id = 'id',
  /** column name */
  ProcoreNoteId = 'procore_note_id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  TextId = 'text_id'
}

/** input type for updating data in table "daily_note" */
export type Daily_Note_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  procore_note_id?: Maybe<Scalars['String']>;
  project_id?: Maybe<Scalars['uuid']>;
  text_id?: Maybe<Scalars['uuid']>;
};

/** columns and relationships of "daily_note_sub" */
export type Daily_Note_Sub = {
   __typename?: 'daily_note_sub';
  created_at: Scalars['timestamptz'];
  /** An object relationship */
  daily_note: Daily_Note;
  daily_note_id: Scalars['uuid'];
  id: Scalars['uuid'];
  /** An object relationship */
  subcontractor: Subcontractor;
  subcontractor_id: Scalars['uuid'];
};

/** aggregated selection of "daily_note_sub" */
export type Daily_Note_Sub_Aggregate = {
   __typename?: 'daily_note_sub_aggregate';
  aggregate?: Maybe<Daily_Note_Sub_Aggregate_Fields>;
  nodes: Array<Daily_Note_Sub>;
};

/** aggregate fields of "daily_note_sub" */
export type Daily_Note_Sub_Aggregate_Fields = {
   __typename?: 'daily_note_sub_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Daily_Note_Sub_Max_Fields>;
  min?: Maybe<Daily_Note_Sub_Min_Fields>;
};


/** aggregate fields of "daily_note_sub" */
export type Daily_Note_Sub_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Daily_Note_Sub_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "daily_note_sub" */
export type Daily_Note_Sub_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Daily_Note_Sub_Max_Order_By>;
  min?: Maybe<Daily_Note_Sub_Min_Order_By>;
};

/** input type for inserting array relation for remote table "daily_note_sub" */
export type Daily_Note_Sub_Arr_Rel_Insert_Input = {
  data: Array<Daily_Note_Sub_Insert_Input>;
  on_conflict?: Maybe<Daily_Note_Sub_On_Conflict>;
};

/** Boolean expression to filter rows from the table "daily_note_sub". All fields are combined with a logical 'AND'. */
export type Daily_Note_Sub_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Daily_Note_Sub_Bool_Exp>>>;
  _not?: Maybe<Daily_Note_Sub_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Daily_Note_Sub_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  daily_note?: Maybe<Daily_Note_Bool_Exp>;
  daily_note_id?: Maybe<Uuid_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  subcontractor?: Maybe<Subcontractor_Bool_Exp>;
  subcontractor_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "daily_note_sub" */
export enum Daily_Note_Sub_Constraint {
  /** unique or primary key constraint */
  DailyNoteSubDailyNoteIdSubcontractorIdKey = 'daily_note_sub_daily_note_id_subcontractor_id_key',
  /** unique or primary key constraint */
  DailyNoteSubPkey = 'daily_note_sub_pkey'
}

/** input type for inserting data into table "daily_note_sub" */
export type Daily_Note_Sub_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_note?: Maybe<Daily_Note_Obj_Rel_Insert_Input>;
  daily_note_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  subcontractor?: Maybe<Subcontractor_Obj_Rel_Insert_Input>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Daily_Note_Sub_Max_Fields = {
   __typename?: 'daily_note_sub_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_note_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "daily_note_sub" */
export type Daily_Note_Sub_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  daily_note_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Daily_Note_Sub_Min_Fields = {
   __typename?: 'daily_note_sub_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_note_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "daily_note_sub" */
export type Daily_Note_Sub_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  daily_note_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "daily_note_sub" */
export type Daily_Note_Sub_Mutation_Response = {
   __typename?: 'daily_note_sub_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Daily_Note_Sub>;
};

/** input type for inserting object relation for remote table "daily_note_sub" */
export type Daily_Note_Sub_Obj_Rel_Insert_Input = {
  data: Daily_Note_Sub_Insert_Input;
  on_conflict?: Maybe<Daily_Note_Sub_On_Conflict>;
};

/** on conflict condition type for table "daily_note_sub" */
export type Daily_Note_Sub_On_Conflict = {
  constraint: Daily_Note_Sub_Constraint;
  update_columns: Array<Daily_Note_Sub_Update_Column>;
  where?: Maybe<Daily_Note_Sub_Bool_Exp>;
};

/** ordering options when selecting data from "daily_note_sub" */
export type Daily_Note_Sub_Order_By = {
  created_at?: Maybe<Order_By>;
  daily_note?: Maybe<Daily_Note_Order_By>;
  daily_note_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  subcontractor?: Maybe<Subcontractor_Order_By>;
  subcontractor_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "daily_note_sub" */
export type Daily_Note_Sub_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "daily_note_sub" */
export enum Daily_Note_Sub_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DailyNoteId = 'daily_note_id',
  /** column name */
  Id = 'id',
  /** column name */
  SubcontractorId = 'subcontractor_id'
}

/** input type for updating data in table "daily_note_sub" */
export type Daily_Note_Sub_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_note_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "daily_note_sub" */
export enum Daily_Note_Sub_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DailyNoteId = 'daily_note_id',
  /** column name */
  Id = 'id',
  /** column name */
  SubcontractorId = 'subcontractor_id'
}

/** columns and relationships of "daily_note_tag" */
export type Daily_Note_Tag = {
   __typename?: 'daily_note_tag';
  created_at: Scalars['timestamptz'];
  /** An object relationship */
  daily_note: Daily_Note;
  daily_note_id: Scalars['uuid'];
  id: Scalars['uuid'];
  /** An object relationship */
  tag: Tag;
  tag_id: Scalars['uuid'];
};

/** aggregated selection of "daily_note_tag" */
export type Daily_Note_Tag_Aggregate = {
   __typename?: 'daily_note_tag_aggregate';
  aggregate?: Maybe<Daily_Note_Tag_Aggregate_Fields>;
  nodes: Array<Daily_Note_Tag>;
};

/** aggregate fields of "daily_note_tag" */
export type Daily_Note_Tag_Aggregate_Fields = {
   __typename?: 'daily_note_tag_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Daily_Note_Tag_Max_Fields>;
  min?: Maybe<Daily_Note_Tag_Min_Fields>;
};


/** aggregate fields of "daily_note_tag" */
export type Daily_Note_Tag_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Daily_Note_Tag_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "daily_note_tag" */
export type Daily_Note_Tag_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Daily_Note_Tag_Max_Order_By>;
  min?: Maybe<Daily_Note_Tag_Min_Order_By>;
};

/** input type for inserting array relation for remote table "daily_note_tag" */
export type Daily_Note_Tag_Arr_Rel_Insert_Input = {
  data: Array<Daily_Note_Tag_Insert_Input>;
  on_conflict?: Maybe<Daily_Note_Tag_On_Conflict>;
};

/** Boolean expression to filter rows from the table "daily_note_tag". All fields are combined with a logical 'AND'. */
export type Daily_Note_Tag_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Daily_Note_Tag_Bool_Exp>>>;
  _not?: Maybe<Daily_Note_Tag_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Daily_Note_Tag_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  daily_note?: Maybe<Daily_Note_Bool_Exp>;
  daily_note_id?: Maybe<Uuid_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  tag?: Maybe<Tag_Bool_Exp>;
  tag_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "daily_note_tag" */
export enum Daily_Note_Tag_Constraint {
  /** unique or primary key constraint */
  DailyNoteTagDailyNoteIdTagIdKey = 'daily_note_tag_daily_note_id_tag_id_key',
  /** unique or primary key constraint */
  DailyNoteTagPkey = 'daily_note_tag_pkey'
}

/** input type for inserting data into table "daily_note_tag" */
export type Daily_Note_Tag_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_note?: Maybe<Daily_Note_Obj_Rel_Insert_Input>;
  daily_note_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  tag?: Maybe<Tag_Obj_Rel_Insert_Input>;
  tag_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Daily_Note_Tag_Max_Fields = {
   __typename?: 'daily_note_tag_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_note_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  tag_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "daily_note_tag" */
export type Daily_Note_Tag_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  daily_note_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  tag_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Daily_Note_Tag_Min_Fields = {
   __typename?: 'daily_note_tag_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_note_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  tag_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "daily_note_tag" */
export type Daily_Note_Tag_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  daily_note_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  tag_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "daily_note_tag" */
export type Daily_Note_Tag_Mutation_Response = {
   __typename?: 'daily_note_tag_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Daily_Note_Tag>;
};

/** input type for inserting object relation for remote table "daily_note_tag" */
export type Daily_Note_Tag_Obj_Rel_Insert_Input = {
  data: Daily_Note_Tag_Insert_Input;
  on_conflict?: Maybe<Daily_Note_Tag_On_Conflict>;
};

/** on conflict condition type for table "daily_note_tag" */
export type Daily_Note_Tag_On_Conflict = {
  constraint: Daily_Note_Tag_Constraint;
  update_columns: Array<Daily_Note_Tag_Update_Column>;
  where?: Maybe<Daily_Note_Tag_Bool_Exp>;
};

/** ordering options when selecting data from "daily_note_tag" */
export type Daily_Note_Tag_Order_By = {
  created_at?: Maybe<Order_By>;
  daily_note?: Maybe<Daily_Note_Order_By>;
  daily_note_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  tag?: Maybe<Tag_Order_By>;
  tag_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "daily_note_tag" */
export type Daily_Note_Tag_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "daily_note_tag" */
export enum Daily_Note_Tag_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DailyNoteId = 'daily_note_id',
  /** column name */
  Id = 'id',
  /** column name */
  TagId = 'tag_id'
}

/** input type for updating data in table "daily_note_tag" */
export type Daily_Note_Tag_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_note_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  tag_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "daily_note_tag" */
export enum Daily_Note_Tag_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DailyNoteId = 'daily_note_id',
  /** column name */
  Id = 'id',
  /** column name */
  TagId = 'tag_id'
}

/** update columns of table "daily_note" */
export enum Daily_Note_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CreatedByUserId = 'created_by_user_id',
  /** column name */
  Date = 'date',
  /** column name */
  Id = 'id',
  /** column name */
  ProcoreNoteId = 'procore_note_id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  TextId = 'text_id'
}

/** columns and relationships of "daily_report" */
export type Daily_Report = {
   __typename?: 'daily_report';
  created_at: Scalars['timestamptz'];
  /** An array relationship */
  daily_report_project_workers: Array<Daily_Report_Project_Worker>;
  /** An aggregated array relationship */
  daily_report_project_workers_aggregate: Daily_Report_Project_Worker_Aggregate;
  /** An object relationship */
  description: Text_Translation;
  description_id: Scalars['uuid'];
  description_text: Scalars['String'];
  id: Scalars['uuid'];
  /** An object relationship */
  project: Project;
  /** An object relationship */
  project_crew?: Maybe<Project_Crew>;
  project_crew_id?: Maybe<Scalars['uuid']>;
  project_id: Scalars['uuid'];
  /** An array relationship */
  project_workers: Array<Project_Worker>;
  /** An aggregated array relationship */
  project_workers_aggregate: Project_Worker_Aggregate;
  /** An object relationship */
  subcontractor: Subcontractor;
  subcontractor_id: Scalars['uuid'];
  submitted_language_code: Scalars['String'];
  /** An object relationship */
  submitter_project_worker: Project_Worker;
  submitter_project_worker_id: Scalars['uuid'];
};


/** columns and relationships of "daily_report" */
export type Daily_ReportDaily_Report_Project_WorkersArgs = {
  distinct_on?: Maybe<Array<Daily_Report_Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Report_Project_Worker_Order_By>>;
  where?: Maybe<Daily_Report_Project_Worker_Bool_Exp>;
};


/** columns and relationships of "daily_report" */
export type Daily_ReportDaily_Report_Project_Workers_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Report_Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Report_Project_Worker_Order_By>>;
  where?: Maybe<Daily_Report_Project_Worker_Bool_Exp>;
};


/** columns and relationships of "daily_report" */
export type Daily_ReportProject_WorkersArgs = {
  distinct_on?: Maybe<Array<Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Worker_Order_By>>;
  where?: Maybe<Project_Worker_Bool_Exp>;
};


/** columns and relationships of "daily_report" */
export type Daily_ReportProject_Workers_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Worker_Order_By>>;
  where?: Maybe<Project_Worker_Bool_Exp>;
};

/** aggregated selection of "daily_report" */
export type Daily_Report_Aggregate = {
   __typename?: 'daily_report_aggregate';
  aggregate?: Maybe<Daily_Report_Aggregate_Fields>;
  nodes: Array<Daily_Report>;
};

/** aggregate fields of "daily_report" */
export type Daily_Report_Aggregate_Fields = {
   __typename?: 'daily_report_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Daily_Report_Max_Fields>;
  min?: Maybe<Daily_Report_Min_Fields>;
};


/** aggregate fields of "daily_report" */
export type Daily_Report_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Daily_Report_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "daily_report" */
export type Daily_Report_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Daily_Report_Max_Order_By>;
  min?: Maybe<Daily_Report_Min_Order_By>;
};

/** input type for inserting array relation for remote table "daily_report" */
export type Daily_Report_Arr_Rel_Insert_Input = {
  data: Array<Daily_Report_Insert_Input>;
  on_conflict?: Maybe<Daily_Report_On_Conflict>;
};

/** Boolean expression to filter rows from the table "daily_report". All fields are combined with a logical 'AND'. */
export type Daily_Report_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Daily_Report_Bool_Exp>>>;
  _not?: Maybe<Daily_Report_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Daily_Report_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  daily_report_project_workers?: Maybe<Daily_Report_Project_Worker_Bool_Exp>;
  description?: Maybe<Text_Translation_Bool_Exp>;
  description_id?: Maybe<Uuid_Comparison_Exp>;
  description_text?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_crew?: Maybe<Project_Crew_Bool_Exp>;
  project_crew_id?: Maybe<Uuid_Comparison_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  project_workers?: Maybe<Project_Worker_Bool_Exp>;
  subcontractor?: Maybe<Subcontractor_Bool_Exp>;
  subcontractor_id?: Maybe<Uuid_Comparison_Exp>;
  submitted_language_code?: Maybe<String_Comparison_Exp>;
  submitter_project_worker?: Maybe<Project_Worker_Bool_Exp>;
  submitter_project_worker_id?: Maybe<Uuid_Comparison_Exp>;
};

/** columns and relationships of "daily_report_completed" */
export type Daily_Report_Completed = {
   __typename?: 'daily_report_completed';
  /** An object relationship */
  completed_by_employee: General_Contractor_Employee;
  completed_user_id: Scalars['uuid'];
  created_at: Scalars['timestamptz'];
  date: Scalars['date'];
  id: Scalars['uuid'];
  /** An object relationship */
  project: Project;
  project_id: Scalars['uuid'];
};

/** aggregated selection of "daily_report_completed" */
export type Daily_Report_Completed_Aggregate = {
   __typename?: 'daily_report_completed_aggregate';
  aggregate?: Maybe<Daily_Report_Completed_Aggregate_Fields>;
  nodes: Array<Daily_Report_Completed>;
};

/** aggregate fields of "daily_report_completed" */
export type Daily_Report_Completed_Aggregate_Fields = {
   __typename?: 'daily_report_completed_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Daily_Report_Completed_Max_Fields>;
  min?: Maybe<Daily_Report_Completed_Min_Fields>;
};


/** aggregate fields of "daily_report_completed" */
export type Daily_Report_Completed_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Daily_Report_Completed_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "daily_report_completed" */
export type Daily_Report_Completed_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Daily_Report_Completed_Max_Order_By>;
  min?: Maybe<Daily_Report_Completed_Min_Order_By>;
};

/** input type for inserting array relation for remote table "daily_report_completed" */
export type Daily_Report_Completed_Arr_Rel_Insert_Input = {
  data: Array<Daily_Report_Completed_Insert_Input>;
  on_conflict?: Maybe<Daily_Report_Completed_On_Conflict>;
};

/** Boolean expression to filter rows from the table "daily_report_completed". All fields are combined with a logical 'AND'. */
export type Daily_Report_Completed_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Daily_Report_Completed_Bool_Exp>>>;
  _not?: Maybe<Daily_Report_Completed_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Daily_Report_Completed_Bool_Exp>>>;
  completed_by_employee?: Maybe<General_Contractor_Employee_Bool_Exp>;
  completed_user_id?: Maybe<Uuid_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  date?: Maybe<Date_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "daily_report_completed" */
export enum Daily_Report_Completed_Constraint {
  /** unique or primary key constraint */
  DailyReportCompletedPkey = 'daily_report_completed_pkey'
}

/** input type for inserting data into table "daily_report_completed" */
export type Daily_Report_Completed_Insert_Input = {
  completed_by_employee?: Maybe<General_Contractor_Employee_Obj_Rel_Insert_Input>;
  completed_user_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Daily_Report_Completed_Max_Fields = {
   __typename?: 'daily_report_completed_max_fields';
  completed_user_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "daily_report_completed" */
export type Daily_Report_Completed_Max_Order_By = {
  completed_user_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Daily_Report_Completed_Min_Fields = {
   __typename?: 'daily_report_completed_min_fields';
  completed_user_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "daily_report_completed" */
export type Daily_Report_Completed_Min_Order_By = {
  completed_user_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "daily_report_completed" */
export type Daily_Report_Completed_Mutation_Response = {
   __typename?: 'daily_report_completed_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Daily_Report_Completed>;
};

/** input type for inserting object relation for remote table "daily_report_completed" */
export type Daily_Report_Completed_Obj_Rel_Insert_Input = {
  data: Daily_Report_Completed_Insert_Input;
  on_conflict?: Maybe<Daily_Report_Completed_On_Conflict>;
};

/** on conflict condition type for table "daily_report_completed" */
export type Daily_Report_Completed_On_Conflict = {
  constraint: Daily_Report_Completed_Constraint;
  update_columns: Array<Daily_Report_Completed_Update_Column>;
  where?: Maybe<Daily_Report_Completed_Bool_Exp>;
};

/** ordering options when selecting data from "daily_report_completed" */
export type Daily_Report_Completed_Order_By = {
  completed_by_employee?: Maybe<General_Contractor_Employee_Order_By>;
  completed_user_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project?: Maybe<Project_Order_By>;
  project_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "daily_report_completed" */
export type Daily_Report_Completed_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "daily_report_completed" */
export enum Daily_Report_Completed_Select_Column {
  /** column name */
  CompletedUserId = 'completed_user_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Date = 'date',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectId = 'project_id'
}

/** input type for updating data in table "daily_report_completed" */
export type Daily_Report_Completed_Set_Input = {
  completed_user_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "daily_report_completed" */
export enum Daily_Report_Completed_Update_Column {
  /** column name */
  CompletedUserId = 'completed_user_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Date = 'date',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectId = 'project_id'
}

/** unique or primary key constraints on table "daily_report" */
export enum Daily_Report_Constraint {
  /** unique or primary key constraint */
  DailyReportPkey = 'daily_report_pkey'
}

/** columns and relationships of "daily_report_event" */
export type Daily_Report_Event = {
   __typename?: 'daily_report_event';
  created_at: Scalars['timestamptz'];
  date: Scalars['date'];
  /** An object relationship */
  description: Text_Translation;
  description_id: Scalars['uuid'];
  id: Scalars['uuid'];
  /** An object relationship */
  project: Project;
  project_id: Scalars['uuid'];
  /** An object relationship */
  project_user: Project_User;
  project_user_id: Scalars['uuid'];
  type: Daily_Report_Event_Type_Enum;
};

/** aggregated selection of "daily_report_event" */
export type Daily_Report_Event_Aggregate = {
   __typename?: 'daily_report_event_aggregate';
  aggregate?: Maybe<Daily_Report_Event_Aggregate_Fields>;
  nodes: Array<Daily_Report_Event>;
};

/** aggregate fields of "daily_report_event" */
export type Daily_Report_Event_Aggregate_Fields = {
   __typename?: 'daily_report_event_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Daily_Report_Event_Max_Fields>;
  min?: Maybe<Daily_Report_Event_Min_Fields>;
};


/** aggregate fields of "daily_report_event" */
export type Daily_Report_Event_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Daily_Report_Event_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "daily_report_event" */
export type Daily_Report_Event_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Daily_Report_Event_Max_Order_By>;
  min?: Maybe<Daily_Report_Event_Min_Order_By>;
};

/** input type for inserting array relation for remote table "daily_report_event" */
export type Daily_Report_Event_Arr_Rel_Insert_Input = {
  data: Array<Daily_Report_Event_Insert_Input>;
  on_conflict?: Maybe<Daily_Report_Event_On_Conflict>;
};

/** Boolean expression to filter rows from the table "daily_report_event". All fields are combined with a logical 'AND'. */
export type Daily_Report_Event_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Daily_Report_Event_Bool_Exp>>>;
  _not?: Maybe<Daily_Report_Event_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Daily_Report_Event_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  date?: Maybe<Date_Comparison_Exp>;
  description?: Maybe<Text_Translation_Bool_Exp>;
  description_id?: Maybe<Uuid_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  project_user?: Maybe<Project_User_Bool_Exp>;
  project_user_id?: Maybe<Uuid_Comparison_Exp>;
  type?: Maybe<Daily_Report_Event_Type_Enum_Comparison_Exp>;
};

/** unique or primary key constraints on table "daily_report_event" */
export enum Daily_Report_Event_Constraint {
  /** unique or primary key constraint */
  DailyReportEventPkey = 'daily_report_event_pkey'
}

/** input type for inserting data into table "daily_report_event" */
export type Daily_Report_Event_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  date?: Maybe<Scalars['date']>;
  description?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  description_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_id?: Maybe<Scalars['uuid']>;
  project_user?: Maybe<Project_User_Obj_Rel_Insert_Input>;
  project_user_id?: Maybe<Scalars['uuid']>;
  type?: Maybe<Daily_Report_Event_Type_Enum>;
};

/** aggregate max on columns */
export type Daily_Report_Event_Max_Fields = {
   __typename?: 'daily_report_event_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  date?: Maybe<Scalars['date']>;
  description_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  project_user_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "daily_report_event" */
export type Daily_Report_Event_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  description_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  project_user_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Daily_Report_Event_Min_Fields = {
   __typename?: 'daily_report_event_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  date?: Maybe<Scalars['date']>;
  description_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  project_user_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "daily_report_event" */
export type Daily_Report_Event_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  description_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  project_user_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "daily_report_event" */
export type Daily_Report_Event_Mutation_Response = {
   __typename?: 'daily_report_event_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Daily_Report_Event>;
};

/** input type for inserting object relation for remote table "daily_report_event" */
export type Daily_Report_Event_Obj_Rel_Insert_Input = {
  data: Daily_Report_Event_Insert_Input;
  on_conflict?: Maybe<Daily_Report_Event_On_Conflict>;
};

/** on conflict condition type for table "daily_report_event" */
export type Daily_Report_Event_On_Conflict = {
  constraint: Daily_Report_Event_Constraint;
  update_columns: Array<Daily_Report_Event_Update_Column>;
  where?: Maybe<Daily_Report_Event_Bool_Exp>;
};

/** ordering options when selecting data from "daily_report_event" */
export type Daily_Report_Event_Order_By = {
  created_at?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  description?: Maybe<Text_Translation_Order_By>;
  description_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project?: Maybe<Project_Order_By>;
  project_id?: Maybe<Order_By>;
  project_user?: Maybe<Project_User_Order_By>;
  project_user_id?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
};

/** primary key columns input for table: "daily_report_event" */
export type Daily_Report_Event_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "daily_report_event" */
export enum Daily_Report_Event_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Date = 'date',
  /** column name */
  DescriptionId = 'description_id',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  ProjectUserId = 'project_user_id',
  /** column name */
  Type = 'type'
}

/** input type for updating data in table "daily_report_event" */
export type Daily_Report_Event_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  date?: Maybe<Scalars['date']>;
  description_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  project_user_id?: Maybe<Scalars['uuid']>;
  type?: Maybe<Daily_Report_Event_Type_Enum>;
};

/** columns and relationships of "daily_report_event_type" */
export type Daily_Report_Event_Type = {
   __typename?: 'daily_report_event_type';
  value: Scalars['String'];
};

/** aggregated selection of "daily_report_event_type" */
export type Daily_Report_Event_Type_Aggregate = {
   __typename?: 'daily_report_event_type_aggregate';
  aggregate?: Maybe<Daily_Report_Event_Type_Aggregate_Fields>;
  nodes: Array<Daily_Report_Event_Type>;
};

/** aggregate fields of "daily_report_event_type" */
export type Daily_Report_Event_Type_Aggregate_Fields = {
   __typename?: 'daily_report_event_type_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Daily_Report_Event_Type_Max_Fields>;
  min?: Maybe<Daily_Report_Event_Type_Min_Fields>;
};


/** aggregate fields of "daily_report_event_type" */
export type Daily_Report_Event_Type_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Daily_Report_Event_Type_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "daily_report_event_type" */
export type Daily_Report_Event_Type_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Daily_Report_Event_Type_Max_Order_By>;
  min?: Maybe<Daily_Report_Event_Type_Min_Order_By>;
};

/** input type for inserting array relation for remote table "daily_report_event_type" */
export type Daily_Report_Event_Type_Arr_Rel_Insert_Input = {
  data: Array<Daily_Report_Event_Type_Insert_Input>;
  on_conflict?: Maybe<Daily_Report_Event_Type_On_Conflict>;
};

/** Boolean expression to filter rows from the table "daily_report_event_type". All fields are combined with a logical 'AND'. */
export type Daily_Report_Event_Type_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Daily_Report_Event_Type_Bool_Exp>>>;
  _not?: Maybe<Daily_Report_Event_Type_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Daily_Report_Event_Type_Bool_Exp>>>;
  value?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "daily_report_event_type" */
export enum Daily_Report_Event_Type_Constraint {
  /** unique or primary key constraint */
  DailyReportEventTypePkey = 'daily_report_event_type_pkey'
}

export enum Daily_Report_Event_Type_Enum {
  GcInsertWorkLog = 'gc_insert_work_log',
  GcMarkedDayComplete = 'gc_marked_day_complete',
  SubSubmitWorkLog = 'sub_submit_work_log'
}

/** expression to compare columns of type daily_report_event_type_enum. All fields are combined with logical 'AND'. */
export type Daily_Report_Event_Type_Enum_Comparison_Exp = {
  _eq?: Maybe<Daily_Report_Event_Type_Enum>;
  _in?: Maybe<Array<Daily_Report_Event_Type_Enum>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _neq?: Maybe<Daily_Report_Event_Type_Enum>;
  _nin?: Maybe<Array<Daily_Report_Event_Type_Enum>>;
};

/** input type for inserting data into table "daily_report_event_type" */
export type Daily_Report_Event_Type_Insert_Input = {
  value?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Daily_Report_Event_Type_Max_Fields = {
   __typename?: 'daily_report_event_type_max_fields';
  value?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "daily_report_event_type" */
export type Daily_Report_Event_Type_Max_Order_By = {
  value?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Daily_Report_Event_Type_Min_Fields = {
   __typename?: 'daily_report_event_type_min_fields';
  value?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "daily_report_event_type" */
export type Daily_Report_Event_Type_Min_Order_By = {
  value?: Maybe<Order_By>;
};

/** response of any mutation on the table "daily_report_event_type" */
export type Daily_Report_Event_Type_Mutation_Response = {
   __typename?: 'daily_report_event_type_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Daily_Report_Event_Type>;
};

/** input type for inserting object relation for remote table "daily_report_event_type" */
export type Daily_Report_Event_Type_Obj_Rel_Insert_Input = {
  data: Daily_Report_Event_Type_Insert_Input;
  on_conflict?: Maybe<Daily_Report_Event_Type_On_Conflict>;
};

/** on conflict condition type for table "daily_report_event_type" */
export type Daily_Report_Event_Type_On_Conflict = {
  constraint: Daily_Report_Event_Type_Constraint;
  update_columns: Array<Daily_Report_Event_Type_Update_Column>;
  where?: Maybe<Daily_Report_Event_Type_Bool_Exp>;
};

/** ordering options when selecting data from "daily_report_event_type" */
export type Daily_Report_Event_Type_Order_By = {
  value?: Maybe<Order_By>;
};

/** primary key columns input for table: "daily_report_event_type" */
export type Daily_Report_Event_Type_Pk_Columns_Input = {
  value: Scalars['String'];
};

/** select columns of table "daily_report_event_type" */
export enum Daily_Report_Event_Type_Select_Column {
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "daily_report_event_type" */
export type Daily_Report_Event_Type_Set_Input = {
  value?: Maybe<Scalars['String']>;
};

/** update columns of table "daily_report_event_type" */
export enum Daily_Report_Event_Type_Update_Column {
  /** column name */
  Value = 'value'
}

/** update columns of table "daily_report_event" */
export enum Daily_Report_Event_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Date = 'date',
  /** column name */
  DescriptionId = 'description_id',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  ProjectUserId = 'project_user_id',
  /** column name */
  Type = 'type'
}

/** input type for inserting data into table "daily_report" */
export type Daily_Report_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_report_project_workers?: Maybe<Daily_Report_Project_Worker_Arr_Rel_Insert_Input>;
  description?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  description_id?: Maybe<Scalars['uuid']>;
  description_text?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_crew?: Maybe<Project_Crew_Obj_Rel_Insert_Input>;
  project_crew_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  project_workers?: Maybe<Project_Worker_Arr_Rel_Insert_Input>;
  subcontractor?: Maybe<Subcontractor_Obj_Rel_Insert_Input>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  submitted_language_code?: Maybe<Scalars['String']>;
  submitter_project_worker?: Maybe<Project_Worker_Obj_Rel_Insert_Input>;
  submitter_project_worker_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Daily_Report_Max_Fields = {
   __typename?: 'daily_report_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  description_id?: Maybe<Scalars['uuid']>;
  description_text?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  project_crew_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  submitted_language_code?: Maybe<Scalars['String']>;
  submitter_project_worker_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "daily_report" */
export type Daily_Report_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  description_id?: Maybe<Order_By>;
  description_text?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_crew_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  submitted_language_code?: Maybe<Order_By>;
  submitter_project_worker_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Daily_Report_Min_Fields = {
   __typename?: 'daily_report_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  description_id?: Maybe<Scalars['uuid']>;
  description_text?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  project_crew_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  submitted_language_code?: Maybe<Scalars['String']>;
  submitter_project_worker_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "daily_report" */
export type Daily_Report_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  description_id?: Maybe<Order_By>;
  description_text?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_crew_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  submitted_language_code?: Maybe<Order_By>;
  submitter_project_worker_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "daily_report" */
export type Daily_Report_Mutation_Response = {
   __typename?: 'daily_report_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Daily_Report>;
};

/** input type for inserting object relation for remote table "daily_report" */
export type Daily_Report_Obj_Rel_Insert_Input = {
  data: Daily_Report_Insert_Input;
  on_conflict?: Maybe<Daily_Report_On_Conflict>;
};

/** on conflict condition type for table "daily_report" */
export type Daily_Report_On_Conflict = {
  constraint: Daily_Report_Constraint;
  update_columns: Array<Daily_Report_Update_Column>;
  where?: Maybe<Daily_Report_Bool_Exp>;
};

/** ordering options when selecting data from "daily_report" */
export type Daily_Report_Order_By = {
  created_at?: Maybe<Order_By>;
  daily_report_project_workers_aggregate?: Maybe<Daily_Report_Project_Worker_Aggregate_Order_By>;
  description?: Maybe<Text_Translation_Order_By>;
  description_id?: Maybe<Order_By>;
  description_text?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project?: Maybe<Project_Order_By>;
  project_crew?: Maybe<Project_Crew_Order_By>;
  project_crew_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  project_workers_aggregate?: Maybe<Project_Worker_Aggregate_Order_By>;
  subcontractor?: Maybe<Subcontractor_Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  submitted_language_code?: Maybe<Order_By>;
  submitter_project_worker?: Maybe<Project_Worker_Order_By>;
  submitter_project_worker_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "daily_report" */
export type Daily_Report_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** columns and relationships of "daily_report_project_worker" */
export type Daily_Report_Project_Worker = {
   __typename?: 'daily_report_project_worker';
  /** An object relationship */
  daily_report: Daily_Report;
  daily_report_id: Scalars['uuid'];
  /** An object relationship */
  project_worker: Project_Worker;
  project_worker_id: Scalars['uuid'];
};

/** aggregated selection of "daily_report_project_worker" */
export type Daily_Report_Project_Worker_Aggregate = {
   __typename?: 'daily_report_project_worker_aggregate';
  aggregate?: Maybe<Daily_Report_Project_Worker_Aggregate_Fields>;
  nodes: Array<Daily_Report_Project_Worker>;
};

/** aggregate fields of "daily_report_project_worker" */
export type Daily_Report_Project_Worker_Aggregate_Fields = {
   __typename?: 'daily_report_project_worker_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Daily_Report_Project_Worker_Max_Fields>;
  min?: Maybe<Daily_Report_Project_Worker_Min_Fields>;
};


/** aggregate fields of "daily_report_project_worker" */
export type Daily_Report_Project_Worker_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Daily_Report_Project_Worker_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "daily_report_project_worker" */
export type Daily_Report_Project_Worker_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Daily_Report_Project_Worker_Max_Order_By>;
  min?: Maybe<Daily_Report_Project_Worker_Min_Order_By>;
};

/** input type for inserting array relation for remote table "daily_report_project_worker" */
export type Daily_Report_Project_Worker_Arr_Rel_Insert_Input = {
  data: Array<Daily_Report_Project_Worker_Insert_Input>;
  on_conflict?: Maybe<Daily_Report_Project_Worker_On_Conflict>;
};

/**
 * Boolean expression to filter rows from the table "daily_report_project_worker".
 * All fields are combined with a logical 'AND'.
 */
export type Daily_Report_Project_Worker_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Daily_Report_Project_Worker_Bool_Exp>>>;
  _not?: Maybe<Daily_Report_Project_Worker_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Daily_Report_Project_Worker_Bool_Exp>>>;
  daily_report?: Maybe<Daily_Report_Bool_Exp>;
  daily_report_id?: Maybe<Uuid_Comparison_Exp>;
  project_worker?: Maybe<Project_Worker_Bool_Exp>;
  project_worker_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "daily_report_project_worker" */
export enum Daily_Report_Project_Worker_Constraint {
  /** unique or primary key constraint */
  DailyReportProjectWorkerDailyReportIdProjectWorkerKey = 'daily_report_project_worker_daily_report_id_project_worker__key',
  /** unique or primary key constraint */
  DailyReportProjectWorkerPkey = 'daily_report_project_worker_pkey'
}

/** input type for inserting data into table "daily_report_project_worker" */
export type Daily_Report_Project_Worker_Insert_Input = {
  daily_report?: Maybe<Daily_Report_Obj_Rel_Insert_Input>;
  daily_report_id?: Maybe<Scalars['uuid']>;
  project_worker?: Maybe<Project_Worker_Obj_Rel_Insert_Input>;
  project_worker_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Daily_Report_Project_Worker_Max_Fields = {
   __typename?: 'daily_report_project_worker_max_fields';
  daily_report_id?: Maybe<Scalars['uuid']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "daily_report_project_worker" */
export type Daily_Report_Project_Worker_Max_Order_By = {
  daily_report_id?: Maybe<Order_By>;
  project_worker_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Daily_Report_Project_Worker_Min_Fields = {
   __typename?: 'daily_report_project_worker_min_fields';
  daily_report_id?: Maybe<Scalars['uuid']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "daily_report_project_worker" */
export type Daily_Report_Project_Worker_Min_Order_By = {
  daily_report_id?: Maybe<Order_By>;
  project_worker_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "daily_report_project_worker" */
export type Daily_Report_Project_Worker_Mutation_Response = {
   __typename?: 'daily_report_project_worker_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Daily_Report_Project_Worker>;
};

/** input type for inserting object relation for remote table "daily_report_project_worker" */
export type Daily_Report_Project_Worker_Obj_Rel_Insert_Input = {
  data: Daily_Report_Project_Worker_Insert_Input;
  on_conflict?: Maybe<Daily_Report_Project_Worker_On_Conflict>;
};

/** on conflict condition type for table "daily_report_project_worker" */
export type Daily_Report_Project_Worker_On_Conflict = {
  constraint: Daily_Report_Project_Worker_Constraint;
  update_columns: Array<Daily_Report_Project_Worker_Update_Column>;
  where?: Maybe<Daily_Report_Project_Worker_Bool_Exp>;
};

/** ordering options when selecting data from "daily_report_project_worker" */
export type Daily_Report_Project_Worker_Order_By = {
  daily_report?: Maybe<Daily_Report_Order_By>;
  daily_report_id?: Maybe<Order_By>;
  project_worker?: Maybe<Project_Worker_Order_By>;
  project_worker_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "daily_report_project_worker" */
export type Daily_Report_Project_Worker_Pk_Columns_Input = {
  daily_report_id: Scalars['uuid'];
  project_worker_id: Scalars['uuid'];
};

/** select columns of table "daily_report_project_worker" */
export enum Daily_Report_Project_Worker_Select_Column {
  /** column name */
  DailyReportId = 'daily_report_id',
  /** column name */
  ProjectWorkerId = 'project_worker_id'
}

/** input type for updating data in table "daily_report_project_worker" */
export type Daily_Report_Project_Worker_Set_Input = {
  daily_report_id?: Maybe<Scalars['uuid']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "daily_report_project_worker" */
export enum Daily_Report_Project_Worker_Update_Column {
  /** column name */
  DailyReportId = 'daily_report_id',
  /** column name */
  ProjectWorkerId = 'project_worker_id'
}

/** select columns of table "daily_report" */
export enum Daily_Report_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DescriptionId = 'description_id',
  /** column name */
  DescriptionText = 'description_text',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectCrewId = 'project_crew_id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  SubmittedLanguageCode = 'submitted_language_code',
  /** column name */
  SubmitterProjectWorkerId = 'submitter_project_worker_id'
}

/** input type for updating data in table "daily_report" */
export type Daily_Report_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  description_id?: Maybe<Scalars['uuid']>;
  description_text?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  project_crew_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  submitted_language_code?: Maybe<Scalars['String']>;
  submitter_project_worker_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "daily_report" */
export enum Daily_Report_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DescriptionId = 'description_id',
  /** column name */
  DescriptionText = 'description_text',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectCrewId = 'project_crew_id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  SubmittedLanguageCode = 'submitted_language_code',
  /** column name */
  SubmitterProjectWorkerId = 'submitter_project_worker_id'
}

/** columns and relationships of "daily_schedule_event" */
export type Daily_Schedule_Event = {
   __typename?: 'daily_schedule_event';
  created_at: Scalars['timestamptz'];
  /** An object relationship */
  created_by_employee: General_Contractor_Employee;
  created_by_user_id: Scalars['uuid'];
  /** An array relationship */
  daily_schedule_event_subs: Array<Daily_Schedule_Event_Sub>;
  /** An aggregated array relationship */
  daily_schedule_event_subs_aggregate: Daily_Schedule_Event_Sub_Aggregate;
  date: Scalars['date'];
  /** An object relationship */
  delay_type_text: Text_Translation;
  delay_type_text_id: Scalars['uuid'];
  /** An object relationship */
  description: Text_Translation;
  description_id: Scalars['uuid'];
  end_at?: Maybe<Scalars['timestamptz']>;
  id: Scalars['uuid'];
  /** An object relationship */
  project: Project;
  project_id: Scalars['uuid'];
  start_at?: Maybe<Scalars['timestamptz']>;
  type: Scalars['String'];
};


/** columns and relationships of "daily_schedule_event" */
export type Daily_Schedule_EventDaily_Schedule_Event_SubsArgs = {
  distinct_on?: Maybe<Array<Daily_Schedule_Event_Sub_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Schedule_Event_Sub_Order_By>>;
  where?: Maybe<Daily_Schedule_Event_Sub_Bool_Exp>;
};


/** columns and relationships of "daily_schedule_event" */
export type Daily_Schedule_EventDaily_Schedule_Event_Subs_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Schedule_Event_Sub_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Schedule_Event_Sub_Order_By>>;
  where?: Maybe<Daily_Schedule_Event_Sub_Bool_Exp>;
};

/** aggregated selection of "daily_schedule_event" */
export type Daily_Schedule_Event_Aggregate = {
   __typename?: 'daily_schedule_event_aggregate';
  aggregate?: Maybe<Daily_Schedule_Event_Aggregate_Fields>;
  nodes: Array<Daily_Schedule_Event>;
};

/** aggregate fields of "daily_schedule_event" */
export type Daily_Schedule_Event_Aggregate_Fields = {
   __typename?: 'daily_schedule_event_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Daily_Schedule_Event_Max_Fields>;
  min?: Maybe<Daily_Schedule_Event_Min_Fields>;
};


/** aggregate fields of "daily_schedule_event" */
export type Daily_Schedule_Event_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Daily_Schedule_Event_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "daily_schedule_event" */
export type Daily_Schedule_Event_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Daily_Schedule_Event_Max_Order_By>;
  min?: Maybe<Daily_Schedule_Event_Min_Order_By>;
};

/** input type for inserting array relation for remote table "daily_schedule_event" */
export type Daily_Schedule_Event_Arr_Rel_Insert_Input = {
  data: Array<Daily_Schedule_Event_Insert_Input>;
  on_conflict?: Maybe<Daily_Schedule_Event_On_Conflict>;
};

/** Boolean expression to filter rows from the table "daily_schedule_event". All fields are combined with a logical 'AND'. */
export type Daily_Schedule_Event_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Daily_Schedule_Event_Bool_Exp>>>;
  _not?: Maybe<Daily_Schedule_Event_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Daily_Schedule_Event_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  created_by_employee?: Maybe<General_Contractor_Employee_Bool_Exp>;
  created_by_user_id?: Maybe<Uuid_Comparison_Exp>;
  daily_schedule_event_subs?: Maybe<Daily_Schedule_Event_Sub_Bool_Exp>;
  date?: Maybe<Date_Comparison_Exp>;
  delay_type_text?: Maybe<Text_Translation_Bool_Exp>;
  delay_type_text_id?: Maybe<Uuid_Comparison_Exp>;
  description?: Maybe<Text_Translation_Bool_Exp>;
  description_id?: Maybe<Uuid_Comparison_Exp>;
  end_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  start_at?: Maybe<Timestamptz_Comparison_Exp>;
  type?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "daily_schedule_event" */
export enum Daily_Schedule_Event_Constraint {
  /** unique or primary key constraint */
  DailyScheduleEventPkey = 'daily_schedule_event_pkey'
}

/** input type for inserting data into table "daily_schedule_event" */
export type Daily_Schedule_Event_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_employee?: Maybe<General_Contractor_Employee_Obj_Rel_Insert_Input>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  daily_schedule_event_subs?: Maybe<Daily_Schedule_Event_Sub_Arr_Rel_Insert_Input>;
  date?: Maybe<Scalars['date']>;
  delay_type_text?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  delay_type_text_id?: Maybe<Scalars['uuid']>;
  description?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  description_id?: Maybe<Scalars['uuid']>;
  end_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_id?: Maybe<Scalars['uuid']>;
  start_at?: Maybe<Scalars['timestamptz']>;
  type?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Daily_Schedule_Event_Max_Fields = {
   __typename?: 'daily_schedule_event_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  date?: Maybe<Scalars['date']>;
  delay_type_text_id?: Maybe<Scalars['uuid']>;
  description_id?: Maybe<Scalars['uuid']>;
  end_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  start_at?: Maybe<Scalars['timestamptz']>;
  type?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "daily_schedule_event" */
export type Daily_Schedule_Event_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  created_by_user_id?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  delay_type_text_id?: Maybe<Order_By>;
  description_id?: Maybe<Order_By>;
  end_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  start_at?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Daily_Schedule_Event_Min_Fields = {
   __typename?: 'daily_schedule_event_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  date?: Maybe<Scalars['date']>;
  delay_type_text_id?: Maybe<Scalars['uuid']>;
  description_id?: Maybe<Scalars['uuid']>;
  end_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  start_at?: Maybe<Scalars['timestamptz']>;
  type?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "daily_schedule_event" */
export type Daily_Schedule_Event_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  created_by_user_id?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  delay_type_text_id?: Maybe<Order_By>;
  description_id?: Maybe<Order_By>;
  end_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  start_at?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
};

/** response of any mutation on the table "daily_schedule_event" */
export type Daily_Schedule_Event_Mutation_Response = {
   __typename?: 'daily_schedule_event_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Daily_Schedule_Event>;
};

/** input type for inserting object relation for remote table "daily_schedule_event" */
export type Daily_Schedule_Event_Obj_Rel_Insert_Input = {
  data: Daily_Schedule_Event_Insert_Input;
  on_conflict?: Maybe<Daily_Schedule_Event_On_Conflict>;
};

/** on conflict condition type for table "daily_schedule_event" */
export type Daily_Schedule_Event_On_Conflict = {
  constraint: Daily_Schedule_Event_Constraint;
  update_columns: Array<Daily_Schedule_Event_Update_Column>;
  where?: Maybe<Daily_Schedule_Event_Bool_Exp>;
};

/** ordering options when selecting data from "daily_schedule_event" */
export type Daily_Schedule_Event_Order_By = {
  created_at?: Maybe<Order_By>;
  created_by_employee?: Maybe<General_Contractor_Employee_Order_By>;
  created_by_user_id?: Maybe<Order_By>;
  daily_schedule_event_subs_aggregate?: Maybe<Daily_Schedule_Event_Sub_Aggregate_Order_By>;
  date?: Maybe<Order_By>;
  delay_type_text?: Maybe<Text_Translation_Order_By>;
  delay_type_text_id?: Maybe<Order_By>;
  description?: Maybe<Text_Translation_Order_By>;
  description_id?: Maybe<Order_By>;
  end_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project?: Maybe<Project_Order_By>;
  project_id?: Maybe<Order_By>;
  start_at?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
};

/** primary key columns input for table: "daily_schedule_event" */
export type Daily_Schedule_Event_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "daily_schedule_event" */
export enum Daily_Schedule_Event_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CreatedByUserId = 'created_by_user_id',
  /** column name */
  Date = 'date',
  /** column name */
  DelayTypeTextId = 'delay_type_text_id',
  /** column name */
  DescriptionId = 'description_id',
  /** column name */
  EndAt = 'end_at',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  StartAt = 'start_at',
  /** column name */
  Type = 'type'
}

/** input type for updating data in table "daily_schedule_event" */
export type Daily_Schedule_Event_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  date?: Maybe<Scalars['date']>;
  delay_type_text_id?: Maybe<Scalars['uuid']>;
  description_id?: Maybe<Scalars['uuid']>;
  end_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  start_at?: Maybe<Scalars['timestamptz']>;
  type?: Maybe<Scalars['String']>;
};

/** columns and relationships of "daily_schedule_event_sub" */
export type Daily_Schedule_Event_Sub = {
   __typename?: 'daily_schedule_event_sub';
  created_at: Scalars['timestamptz'];
  /** An object relationship */
  daily_schedule_event: Daily_Schedule_Event;
  daily_schedule_event_id: Scalars['uuid'];
  id: Scalars['uuid'];
  /** An object relationship */
  subcontractor: Subcontractor;
  subcontractor_id: Scalars['uuid'];
};

/** aggregated selection of "daily_schedule_event_sub" */
export type Daily_Schedule_Event_Sub_Aggregate = {
   __typename?: 'daily_schedule_event_sub_aggregate';
  aggregate?: Maybe<Daily_Schedule_Event_Sub_Aggregate_Fields>;
  nodes: Array<Daily_Schedule_Event_Sub>;
};

/** aggregate fields of "daily_schedule_event_sub" */
export type Daily_Schedule_Event_Sub_Aggregate_Fields = {
   __typename?: 'daily_schedule_event_sub_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Daily_Schedule_Event_Sub_Max_Fields>;
  min?: Maybe<Daily_Schedule_Event_Sub_Min_Fields>;
};


/** aggregate fields of "daily_schedule_event_sub" */
export type Daily_Schedule_Event_Sub_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Daily_Schedule_Event_Sub_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "daily_schedule_event_sub" */
export type Daily_Schedule_Event_Sub_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Daily_Schedule_Event_Sub_Max_Order_By>;
  min?: Maybe<Daily_Schedule_Event_Sub_Min_Order_By>;
};

/** input type for inserting array relation for remote table "daily_schedule_event_sub" */
export type Daily_Schedule_Event_Sub_Arr_Rel_Insert_Input = {
  data: Array<Daily_Schedule_Event_Sub_Insert_Input>;
  on_conflict?: Maybe<Daily_Schedule_Event_Sub_On_Conflict>;
};

/** Boolean expression to filter rows from the table "daily_schedule_event_sub". All fields are combined with a logical 'AND'. */
export type Daily_Schedule_Event_Sub_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Daily_Schedule_Event_Sub_Bool_Exp>>>;
  _not?: Maybe<Daily_Schedule_Event_Sub_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Daily_Schedule_Event_Sub_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  daily_schedule_event?: Maybe<Daily_Schedule_Event_Bool_Exp>;
  daily_schedule_event_id?: Maybe<Uuid_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  subcontractor?: Maybe<Subcontractor_Bool_Exp>;
  subcontractor_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "daily_schedule_event_sub" */
export enum Daily_Schedule_Event_Sub_Constraint {
  /** unique or primary key constraint */
  DailyScheduleEventSubDailyScheduleEventIdSubcontracKey = 'daily_schedule_event_sub_daily_schedule_event_id_subcontrac_key',
  /** unique or primary key constraint */
  DailyScheduleEventSubPkey = 'daily_schedule_event_sub_pkey'
}

/** input type for inserting data into table "daily_schedule_event_sub" */
export type Daily_Schedule_Event_Sub_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_schedule_event?: Maybe<Daily_Schedule_Event_Obj_Rel_Insert_Input>;
  daily_schedule_event_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  subcontractor?: Maybe<Subcontractor_Obj_Rel_Insert_Input>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Daily_Schedule_Event_Sub_Max_Fields = {
   __typename?: 'daily_schedule_event_sub_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_schedule_event_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "daily_schedule_event_sub" */
export type Daily_Schedule_Event_Sub_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  daily_schedule_event_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Daily_Schedule_Event_Sub_Min_Fields = {
   __typename?: 'daily_schedule_event_sub_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_schedule_event_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "daily_schedule_event_sub" */
export type Daily_Schedule_Event_Sub_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  daily_schedule_event_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "daily_schedule_event_sub" */
export type Daily_Schedule_Event_Sub_Mutation_Response = {
   __typename?: 'daily_schedule_event_sub_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Daily_Schedule_Event_Sub>;
};

/** input type for inserting object relation for remote table "daily_schedule_event_sub" */
export type Daily_Schedule_Event_Sub_Obj_Rel_Insert_Input = {
  data: Daily_Schedule_Event_Sub_Insert_Input;
  on_conflict?: Maybe<Daily_Schedule_Event_Sub_On_Conflict>;
};

/** on conflict condition type for table "daily_schedule_event_sub" */
export type Daily_Schedule_Event_Sub_On_Conflict = {
  constraint: Daily_Schedule_Event_Sub_Constraint;
  update_columns: Array<Daily_Schedule_Event_Sub_Update_Column>;
  where?: Maybe<Daily_Schedule_Event_Sub_Bool_Exp>;
};

/** ordering options when selecting data from "daily_schedule_event_sub" */
export type Daily_Schedule_Event_Sub_Order_By = {
  created_at?: Maybe<Order_By>;
  daily_schedule_event?: Maybe<Daily_Schedule_Event_Order_By>;
  daily_schedule_event_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  subcontractor?: Maybe<Subcontractor_Order_By>;
  subcontractor_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "daily_schedule_event_sub" */
export type Daily_Schedule_Event_Sub_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "daily_schedule_event_sub" */
export enum Daily_Schedule_Event_Sub_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DailyScheduleEventId = 'daily_schedule_event_id',
  /** column name */
  Id = 'id',
  /** column name */
  SubcontractorId = 'subcontractor_id'
}

/** input type for updating data in table "daily_schedule_event_sub" */
export type Daily_Schedule_Event_Sub_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_schedule_event_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "daily_schedule_event_sub" */
export enum Daily_Schedule_Event_Sub_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DailyScheduleEventId = 'daily_schedule_event_id',
  /** column name */
  Id = 'id',
  /** column name */
  SubcontractorId = 'subcontractor_id'
}

/** columns and relationships of "daily_schedule_event_type" */
export type Daily_Schedule_Event_Type = {
   __typename?: 'daily_schedule_event_type';
  value: Scalars['String'];
};

/** aggregated selection of "daily_schedule_event_type" */
export type Daily_Schedule_Event_Type_Aggregate = {
   __typename?: 'daily_schedule_event_type_aggregate';
  aggregate?: Maybe<Daily_Schedule_Event_Type_Aggregate_Fields>;
  nodes: Array<Daily_Schedule_Event_Type>;
};

/** aggregate fields of "daily_schedule_event_type" */
export type Daily_Schedule_Event_Type_Aggregate_Fields = {
   __typename?: 'daily_schedule_event_type_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Daily_Schedule_Event_Type_Max_Fields>;
  min?: Maybe<Daily_Schedule_Event_Type_Min_Fields>;
};


/** aggregate fields of "daily_schedule_event_type" */
export type Daily_Schedule_Event_Type_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Daily_Schedule_Event_Type_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "daily_schedule_event_type" */
export type Daily_Schedule_Event_Type_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Daily_Schedule_Event_Type_Max_Order_By>;
  min?: Maybe<Daily_Schedule_Event_Type_Min_Order_By>;
};

/** input type for inserting array relation for remote table "daily_schedule_event_type" */
export type Daily_Schedule_Event_Type_Arr_Rel_Insert_Input = {
  data: Array<Daily_Schedule_Event_Type_Insert_Input>;
  on_conflict?: Maybe<Daily_Schedule_Event_Type_On_Conflict>;
};

/** Boolean expression to filter rows from the table "daily_schedule_event_type". All fields are combined with a logical 'AND'. */
export type Daily_Schedule_Event_Type_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Daily_Schedule_Event_Type_Bool_Exp>>>;
  _not?: Maybe<Daily_Schedule_Event_Type_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Daily_Schedule_Event_Type_Bool_Exp>>>;
  value?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "daily_schedule_event_type" */
export enum Daily_Schedule_Event_Type_Constraint {
  /** unique or primary key constraint */
  DailyScheduleEventTypePkey = 'daily_schedule_event_type_pkey'
}

/** input type for inserting data into table "daily_schedule_event_type" */
export type Daily_Schedule_Event_Type_Insert_Input = {
  value?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Daily_Schedule_Event_Type_Max_Fields = {
   __typename?: 'daily_schedule_event_type_max_fields';
  value?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "daily_schedule_event_type" */
export type Daily_Schedule_Event_Type_Max_Order_By = {
  value?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Daily_Schedule_Event_Type_Min_Fields = {
   __typename?: 'daily_schedule_event_type_min_fields';
  value?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "daily_schedule_event_type" */
export type Daily_Schedule_Event_Type_Min_Order_By = {
  value?: Maybe<Order_By>;
};

/** response of any mutation on the table "daily_schedule_event_type" */
export type Daily_Schedule_Event_Type_Mutation_Response = {
   __typename?: 'daily_schedule_event_type_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Daily_Schedule_Event_Type>;
};

/** input type for inserting object relation for remote table "daily_schedule_event_type" */
export type Daily_Schedule_Event_Type_Obj_Rel_Insert_Input = {
  data: Daily_Schedule_Event_Type_Insert_Input;
  on_conflict?: Maybe<Daily_Schedule_Event_Type_On_Conflict>;
};

/** on conflict condition type for table "daily_schedule_event_type" */
export type Daily_Schedule_Event_Type_On_Conflict = {
  constraint: Daily_Schedule_Event_Type_Constraint;
  update_columns: Array<Daily_Schedule_Event_Type_Update_Column>;
  where?: Maybe<Daily_Schedule_Event_Type_Bool_Exp>;
};

/** ordering options when selecting data from "daily_schedule_event_type" */
export type Daily_Schedule_Event_Type_Order_By = {
  value?: Maybe<Order_By>;
};

/** primary key columns input for table: "daily_schedule_event_type" */
export type Daily_Schedule_Event_Type_Pk_Columns_Input = {
  value: Scalars['String'];
};

/** select columns of table "daily_schedule_event_type" */
export enum Daily_Schedule_Event_Type_Select_Column {
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "daily_schedule_event_type" */
export type Daily_Schedule_Event_Type_Set_Input = {
  value?: Maybe<Scalars['String']>;
};

/** update columns of table "daily_schedule_event_type" */
export enum Daily_Schedule_Event_Type_Update_Column {
  /** column name */
  Value = 'value'
}

/** update columns of table "daily_schedule_event" */
export enum Daily_Schedule_Event_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CreatedByUserId = 'created_by_user_id',
  /** column name */
  Date = 'date',
  /** column name */
  DelayTypeTextId = 'delay_type_text_id',
  /** column name */
  DescriptionId = 'description_id',
  /** column name */
  EndAt = 'end_at',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  StartAt = 'start_at',
  /** column name */
  Type = 'type'
}

/** columns and relationships of "daily_weather_observation" */
export type Daily_Weather_Observation = {
   __typename?: 'daily_weather_observation';
  /** An object relationship */
  calamity?: Maybe<Select_Option>;
  calamity_id?: Maybe<Scalars['uuid']>;
  created_at: Scalars['timestamptz'];
  /** An object relationship */
  created_by_project_user: Project_User;
  created_by_project_user_id: Scalars['uuid'];
  /** An array relationship */
  daily_weather_observation_subs: Array<Daily_Weather_Observation_Sub>;
  /** An aggregated array relationship */
  daily_weather_observation_subs_aggregate: Daily_Weather_Observation_Sub_Aggregate;
  /** An object relationship */
  daily_work_log?: Maybe<Daily_Work_Log>;
  date: Scalars['date'];
  /** An object relationship */
  description: Text_Translation;
  description_id: Scalars['uuid'];
  /** An object relationship */
  ground?: Maybe<Select_Option>;
  ground_id?: Maybe<Scalars['uuid']>;
  id: Scalars['uuid'];
  is_delay: Scalars['Boolean'];
  more_fourth_in_rain: Scalars['Boolean'];
  precipitation?: Maybe<Scalars['String']>;
  procore_weather_observation_id?: Maybe<Scalars['String']>;
  /** An object relationship */
  project: Project;
  project_id: Scalars['uuid'];
  /** An object relationship */
  sky?: Maybe<Select_Option>;
  sky_id?: Maybe<Scalars['uuid']>;
  temp?: Maybe<Scalars['String']>;
  time_observed: Scalars['timestamptz'];
  /** An object relationship */
  wind?: Maybe<Select_Option>;
  wind_id?: Maybe<Scalars['uuid']>;
  work_log_id?: Maybe<Scalars['uuid']>;
};


/** columns and relationships of "daily_weather_observation" */
export type Daily_Weather_ObservationDaily_Weather_Observation_SubsArgs = {
  distinct_on?: Maybe<Array<Daily_Weather_Observation_Sub_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Weather_Observation_Sub_Order_By>>;
  where?: Maybe<Daily_Weather_Observation_Sub_Bool_Exp>;
};


/** columns and relationships of "daily_weather_observation" */
export type Daily_Weather_ObservationDaily_Weather_Observation_Subs_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Weather_Observation_Sub_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Weather_Observation_Sub_Order_By>>;
  where?: Maybe<Daily_Weather_Observation_Sub_Bool_Exp>;
};

/** aggregated selection of "daily_weather_observation" */
export type Daily_Weather_Observation_Aggregate = {
   __typename?: 'daily_weather_observation_aggregate';
  aggregate?: Maybe<Daily_Weather_Observation_Aggregate_Fields>;
  nodes: Array<Daily_Weather_Observation>;
};

/** aggregate fields of "daily_weather_observation" */
export type Daily_Weather_Observation_Aggregate_Fields = {
   __typename?: 'daily_weather_observation_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Daily_Weather_Observation_Max_Fields>;
  min?: Maybe<Daily_Weather_Observation_Min_Fields>;
};


/** aggregate fields of "daily_weather_observation" */
export type Daily_Weather_Observation_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Daily_Weather_Observation_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "daily_weather_observation" */
export type Daily_Weather_Observation_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Daily_Weather_Observation_Max_Order_By>;
  min?: Maybe<Daily_Weather_Observation_Min_Order_By>;
};

/** input type for inserting array relation for remote table "daily_weather_observation" */
export type Daily_Weather_Observation_Arr_Rel_Insert_Input = {
  data: Array<Daily_Weather_Observation_Insert_Input>;
  on_conflict?: Maybe<Daily_Weather_Observation_On_Conflict>;
};

/** Boolean expression to filter rows from the table "daily_weather_observation". All fields are combined with a logical 'AND'. */
export type Daily_Weather_Observation_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Daily_Weather_Observation_Bool_Exp>>>;
  _not?: Maybe<Daily_Weather_Observation_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Daily_Weather_Observation_Bool_Exp>>>;
  calamity?: Maybe<Select_Option_Bool_Exp>;
  calamity_id?: Maybe<Uuid_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  created_by_project_user?: Maybe<Project_User_Bool_Exp>;
  created_by_project_user_id?: Maybe<Uuid_Comparison_Exp>;
  daily_weather_observation_subs?: Maybe<Daily_Weather_Observation_Sub_Bool_Exp>;
  daily_work_log?: Maybe<Daily_Work_Log_Bool_Exp>;
  date?: Maybe<Date_Comparison_Exp>;
  description?: Maybe<Text_Translation_Bool_Exp>;
  description_id?: Maybe<Uuid_Comparison_Exp>;
  ground?: Maybe<Select_Option_Bool_Exp>;
  ground_id?: Maybe<Uuid_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  is_delay?: Maybe<Boolean_Comparison_Exp>;
  more_fourth_in_rain?: Maybe<Boolean_Comparison_Exp>;
  precipitation?: Maybe<String_Comparison_Exp>;
  procore_weather_observation_id?: Maybe<String_Comparison_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  sky?: Maybe<Select_Option_Bool_Exp>;
  sky_id?: Maybe<Uuid_Comparison_Exp>;
  temp?: Maybe<String_Comparison_Exp>;
  time_observed?: Maybe<Timestamptz_Comparison_Exp>;
  wind?: Maybe<Select_Option_Bool_Exp>;
  wind_id?: Maybe<Uuid_Comparison_Exp>;
  work_log_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "daily_weather_observation" */
export enum Daily_Weather_Observation_Constraint {
  /** unique or primary key constraint */
  DailyWeatherObservationPkey = 'daily_weather_observation_pkey'
}

/** input type for inserting data into table "daily_weather_observation" */
export type Daily_Weather_Observation_Insert_Input = {
  calamity?: Maybe<Select_Option_Obj_Rel_Insert_Input>;
  calamity_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_project_user?: Maybe<Project_User_Obj_Rel_Insert_Input>;
  created_by_project_user_id?: Maybe<Scalars['uuid']>;
  daily_weather_observation_subs?: Maybe<Daily_Weather_Observation_Sub_Arr_Rel_Insert_Input>;
  daily_work_log?: Maybe<Daily_Work_Log_Obj_Rel_Insert_Input>;
  date?: Maybe<Scalars['date']>;
  description?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  description_id?: Maybe<Scalars['uuid']>;
  ground?: Maybe<Select_Option_Obj_Rel_Insert_Input>;
  ground_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  is_delay?: Maybe<Scalars['Boolean']>;
  more_fourth_in_rain?: Maybe<Scalars['Boolean']>;
  precipitation?: Maybe<Scalars['String']>;
  procore_weather_observation_id?: Maybe<Scalars['String']>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_id?: Maybe<Scalars['uuid']>;
  sky?: Maybe<Select_Option_Obj_Rel_Insert_Input>;
  sky_id?: Maybe<Scalars['uuid']>;
  temp?: Maybe<Scalars['String']>;
  time_observed?: Maybe<Scalars['timestamptz']>;
  wind?: Maybe<Select_Option_Obj_Rel_Insert_Input>;
  wind_id?: Maybe<Scalars['uuid']>;
  work_log_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Daily_Weather_Observation_Max_Fields = {
   __typename?: 'daily_weather_observation_max_fields';
  calamity_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_project_user_id?: Maybe<Scalars['uuid']>;
  date?: Maybe<Scalars['date']>;
  description_id?: Maybe<Scalars['uuid']>;
  ground_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  precipitation?: Maybe<Scalars['String']>;
  procore_weather_observation_id?: Maybe<Scalars['String']>;
  project_id?: Maybe<Scalars['uuid']>;
  sky_id?: Maybe<Scalars['uuid']>;
  temp?: Maybe<Scalars['String']>;
  time_observed?: Maybe<Scalars['timestamptz']>;
  wind_id?: Maybe<Scalars['uuid']>;
  work_log_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "daily_weather_observation" */
export type Daily_Weather_Observation_Max_Order_By = {
  calamity_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  created_by_project_user_id?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  description_id?: Maybe<Order_By>;
  ground_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  precipitation?: Maybe<Order_By>;
  procore_weather_observation_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  sky_id?: Maybe<Order_By>;
  temp?: Maybe<Order_By>;
  time_observed?: Maybe<Order_By>;
  wind_id?: Maybe<Order_By>;
  work_log_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Daily_Weather_Observation_Min_Fields = {
   __typename?: 'daily_weather_observation_min_fields';
  calamity_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_project_user_id?: Maybe<Scalars['uuid']>;
  date?: Maybe<Scalars['date']>;
  description_id?: Maybe<Scalars['uuid']>;
  ground_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  precipitation?: Maybe<Scalars['String']>;
  procore_weather_observation_id?: Maybe<Scalars['String']>;
  project_id?: Maybe<Scalars['uuid']>;
  sky_id?: Maybe<Scalars['uuid']>;
  temp?: Maybe<Scalars['String']>;
  time_observed?: Maybe<Scalars['timestamptz']>;
  wind_id?: Maybe<Scalars['uuid']>;
  work_log_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "daily_weather_observation" */
export type Daily_Weather_Observation_Min_Order_By = {
  calamity_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  created_by_project_user_id?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  description_id?: Maybe<Order_By>;
  ground_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  precipitation?: Maybe<Order_By>;
  procore_weather_observation_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  sky_id?: Maybe<Order_By>;
  temp?: Maybe<Order_By>;
  time_observed?: Maybe<Order_By>;
  wind_id?: Maybe<Order_By>;
  work_log_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "daily_weather_observation" */
export type Daily_Weather_Observation_Mutation_Response = {
   __typename?: 'daily_weather_observation_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Daily_Weather_Observation>;
};

/** input type for inserting object relation for remote table "daily_weather_observation" */
export type Daily_Weather_Observation_Obj_Rel_Insert_Input = {
  data: Daily_Weather_Observation_Insert_Input;
  on_conflict?: Maybe<Daily_Weather_Observation_On_Conflict>;
};

/** on conflict condition type for table "daily_weather_observation" */
export type Daily_Weather_Observation_On_Conflict = {
  constraint: Daily_Weather_Observation_Constraint;
  update_columns: Array<Daily_Weather_Observation_Update_Column>;
  where?: Maybe<Daily_Weather_Observation_Bool_Exp>;
};

/** ordering options when selecting data from "daily_weather_observation" */
export type Daily_Weather_Observation_Order_By = {
  calamity?: Maybe<Select_Option_Order_By>;
  calamity_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  created_by_project_user?: Maybe<Project_User_Order_By>;
  created_by_project_user_id?: Maybe<Order_By>;
  daily_weather_observation_subs_aggregate?: Maybe<Daily_Weather_Observation_Sub_Aggregate_Order_By>;
  daily_work_log?: Maybe<Daily_Work_Log_Order_By>;
  date?: Maybe<Order_By>;
  description?: Maybe<Text_Translation_Order_By>;
  description_id?: Maybe<Order_By>;
  ground?: Maybe<Select_Option_Order_By>;
  ground_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  is_delay?: Maybe<Order_By>;
  more_fourth_in_rain?: Maybe<Order_By>;
  precipitation?: Maybe<Order_By>;
  procore_weather_observation_id?: Maybe<Order_By>;
  project?: Maybe<Project_Order_By>;
  project_id?: Maybe<Order_By>;
  sky?: Maybe<Select_Option_Order_By>;
  sky_id?: Maybe<Order_By>;
  temp?: Maybe<Order_By>;
  time_observed?: Maybe<Order_By>;
  wind?: Maybe<Select_Option_Order_By>;
  wind_id?: Maybe<Order_By>;
  work_log_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "daily_weather_observation" */
export type Daily_Weather_Observation_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "daily_weather_observation" */
export enum Daily_Weather_Observation_Select_Column {
  /** column name */
  CalamityId = 'calamity_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CreatedByProjectUserId = 'created_by_project_user_id',
  /** column name */
  Date = 'date',
  /** column name */
  DescriptionId = 'description_id',
  /** column name */
  GroundId = 'ground_id',
  /** column name */
  Id = 'id',
  /** column name */
  IsDelay = 'is_delay',
  /** column name */
  MoreFourthInRain = 'more_fourth_in_rain',
  /** column name */
  Precipitation = 'precipitation',
  /** column name */
  ProcoreWeatherObservationId = 'procore_weather_observation_id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  SkyId = 'sky_id',
  /** column name */
  Temp = 'temp',
  /** column name */
  TimeObserved = 'time_observed',
  /** column name */
  WindId = 'wind_id',
  /** column name */
  WorkLogId = 'work_log_id'
}

/** input type for updating data in table "daily_weather_observation" */
export type Daily_Weather_Observation_Set_Input = {
  calamity_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_project_user_id?: Maybe<Scalars['uuid']>;
  date?: Maybe<Scalars['date']>;
  description_id?: Maybe<Scalars['uuid']>;
  ground_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  is_delay?: Maybe<Scalars['Boolean']>;
  more_fourth_in_rain?: Maybe<Scalars['Boolean']>;
  precipitation?: Maybe<Scalars['String']>;
  procore_weather_observation_id?: Maybe<Scalars['String']>;
  project_id?: Maybe<Scalars['uuid']>;
  sky_id?: Maybe<Scalars['uuid']>;
  temp?: Maybe<Scalars['String']>;
  time_observed?: Maybe<Scalars['timestamptz']>;
  wind_id?: Maybe<Scalars['uuid']>;
  work_log_id?: Maybe<Scalars['uuid']>;
};

/** columns and relationships of "daily_weather_observation_sub" */
export type Daily_Weather_Observation_Sub = {
   __typename?: 'daily_weather_observation_sub';
  created_at: Scalars['timestamptz'];
  /** An object relationship */
  daily_weather_observation: Daily_Weather_Observation;
  daily_weather_observation_id: Scalars['uuid'];
  id: Scalars['uuid'];
  /** An object relationship */
  subcontractor: Subcontractor;
  subcontractor_id: Scalars['uuid'];
};

/** aggregated selection of "daily_weather_observation_sub" */
export type Daily_Weather_Observation_Sub_Aggregate = {
   __typename?: 'daily_weather_observation_sub_aggregate';
  aggregate?: Maybe<Daily_Weather_Observation_Sub_Aggregate_Fields>;
  nodes: Array<Daily_Weather_Observation_Sub>;
};

/** aggregate fields of "daily_weather_observation_sub" */
export type Daily_Weather_Observation_Sub_Aggregate_Fields = {
   __typename?: 'daily_weather_observation_sub_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Daily_Weather_Observation_Sub_Max_Fields>;
  min?: Maybe<Daily_Weather_Observation_Sub_Min_Fields>;
};


/** aggregate fields of "daily_weather_observation_sub" */
export type Daily_Weather_Observation_Sub_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Daily_Weather_Observation_Sub_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "daily_weather_observation_sub" */
export type Daily_Weather_Observation_Sub_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Daily_Weather_Observation_Sub_Max_Order_By>;
  min?: Maybe<Daily_Weather_Observation_Sub_Min_Order_By>;
};

/** input type for inserting array relation for remote table "daily_weather_observation_sub" */
export type Daily_Weather_Observation_Sub_Arr_Rel_Insert_Input = {
  data: Array<Daily_Weather_Observation_Sub_Insert_Input>;
  on_conflict?: Maybe<Daily_Weather_Observation_Sub_On_Conflict>;
};

/**
 * Boolean expression to filter rows from the table
 * "daily_weather_observation_sub". All fields are combined with a logical 'AND'.
 */
export type Daily_Weather_Observation_Sub_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Daily_Weather_Observation_Sub_Bool_Exp>>>;
  _not?: Maybe<Daily_Weather_Observation_Sub_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Daily_Weather_Observation_Sub_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  daily_weather_observation?: Maybe<Daily_Weather_Observation_Bool_Exp>;
  daily_weather_observation_id?: Maybe<Uuid_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  subcontractor?: Maybe<Subcontractor_Bool_Exp>;
  subcontractor_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "daily_weather_observation_sub" */
export enum Daily_Weather_Observation_Sub_Constraint {
  /** unique or primary key constraint */
  DailyWeatherObservationSubPkey = 'daily_weather_observation_sub_pkey'
}

/** input type for inserting data into table "daily_weather_observation_sub" */
export type Daily_Weather_Observation_Sub_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_weather_observation?: Maybe<Daily_Weather_Observation_Obj_Rel_Insert_Input>;
  daily_weather_observation_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  subcontractor?: Maybe<Subcontractor_Obj_Rel_Insert_Input>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Daily_Weather_Observation_Sub_Max_Fields = {
   __typename?: 'daily_weather_observation_sub_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_weather_observation_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "daily_weather_observation_sub" */
export type Daily_Weather_Observation_Sub_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  daily_weather_observation_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Daily_Weather_Observation_Sub_Min_Fields = {
   __typename?: 'daily_weather_observation_sub_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_weather_observation_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "daily_weather_observation_sub" */
export type Daily_Weather_Observation_Sub_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  daily_weather_observation_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "daily_weather_observation_sub" */
export type Daily_Weather_Observation_Sub_Mutation_Response = {
   __typename?: 'daily_weather_observation_sub_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Daily_Weather_Observation_Sub>;
};

/** input type for inserting object relation for remote table "daily_weather_observation_sub" */
export type Daily_Weather_Observation_Sub_Obj_Rel_Insert_Input = {
  data: Daily_Weather_Observation_Sub_Insert_Input;
  on_conflict?: Maybe<Daily_Weather_Observation_Sub_On_Conflict>;
};

/** on conflict condition type for table "daily_weather_observation_sub" */
export type Daily_Weather_Observation_Sub_On_Conflict = {
  constraint: Daily_Weather_Observation_Sub_Constraint;
  update_columns: Array<Daily_Weather_Observation_Sub_Update_Column>;
  where?: Maybe<Daily_Weather_Observation_Sub_Bool_Exp>;
};

/** ordering options when selecting data from "daily_weather_observation_sub" */
export type Daily_Weather_Observation_Sub_Order_By = {
  created_at?: Maybe<Order_By>;
  daily_weather_observation?: Maybe<Daily_Weather_Observation_Order_By>;
  daily_weather_observation_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  subcontractor?: Maybe<Subcontractor_Order_By>;
  subcontractor_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "daily_weather_observation_sub" */
export type Daily_Weather_Observation_Sub_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "daily_weather_observation_sub" */
export enum Daily_Weather_Observation_Sub_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DailyWeatherObservationId = 'daily_weather_observation_id',
  /** column name */
  Id = 'id',
  /** column name */
  SubcontractorId = 'subcontractor_id'
}

/** input type for updating data in table "daily_weather_observation_sub" */
export type Daily_Weather_Observation_Sub_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_weather_observation_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "daily_weather_observation_sub" */
export enum Daily_Weather_Observation_Sub_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DailyWeatherObservationId = 'daily_weather_observation_id',
  /** column name */
  Id = 'id',
  /** column name */
  SubcontractorId = 'subcontractor_id'
}

/** update columns of table "daily_weather_observation" */
export enum Daily_Weather_Observation_Update_Column {
  /** column name */
  CalamityId = 'calamity_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CreatedByProjectUserId = 'created_by_project_user_id',
  /** column name */
  Date = 'date',
  /** column name */
  DescriptionId = 'description_id',
  /** column name */
  GroundId = 'ground_id',
  /** column name */
  Id = 'id',
  /** column name */
  IsDelay = 'is_delay',
  /** column name */
  MoreFourthInRain = 'more_fourth_in_rain',
  /** column name */
  Precipitation = 'precipitation',
  /** column name */
  ProcoreWeatherObservationId = 'procore_weather_observation_id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  SkyId = 'sky_id',
  /** column name */
  Temp = 'temp',
  /** column name */
  TimeObserved = 'time_observed',
  /** column name */
  WindId = 'wind_id',
  /** column name */
  WorkLogId = 'work_log_id'
}

/** columns and relationships of "daily_work_log" */
export type Daily_Work_Log = {
   __typename?: 'daily_work_log';
  /** An array relationship */
  checklist_items: Array<Checklist_Item>;
  /** An aggregated array relationship */
  checklist_items_aggregate: Checklist_Item_Aggregate;
  created_at: Scalars['timestamptz'];
  /** An object relationship */
  created_by_project_user: Project_User;
  created_by_project_user_id: Scalars['uuid'];
  /** An array relationship */
  daily_weather_observations: Array<Daily_Weather_Observation>;
  /** An aggregated array relationship */
  daily_weather_observations_aggregate: Daily_Weather_Observation_Aggregate;
  /** An array relationship */
  daily_work_log_comments: Array<Daily_Work_Log_Comment>;
  /** An aggregated array relationship */
  daily_work_log_comments_aggregate: Daily_Work_Log_Comment_Aggregate;
  /** An array relationship */
  daily_work_log_tags: Array<Daily_Work_Log_Tag>;
  /** An aggregated array relationship */
  daily_work_log_tags_aggregate: Daily_Work_Log_Tag_Aggregate;
  /** An array relationship */
  daily_work_log_workers: Array<Daily_Work_Log_Worker>;
  /** An aggregated array relationship */
  daily_work_log_workers_aggregate: Daily_Work_Log_Worker_Aggregate;
  date: Scalars['date'];
  /** An object relationship */
  description: Text_Translation;
  description_id: Scalars['uuid'];
  edited_workers: Scalars['Boolean'];
  id: Scalars['uuid'];
  /** An array relationship */
  images: Array<Image>;
  /** An aggregated array relationship */
  images_aggregate: Image_Aggregate;
  procore_file_id?: Maybe<Scalars['String']>;
  procore_manpower_id?: Maybe<Scalars['String']>;
  /** An object relationship */
  project: Project;
  project_id: Scalars['uuid'];
  started_at?: Maybe<Scalars['timestamptz']>;
  /** An object relationship */
  subcontractor: Subcontractor;
  subcontractor_id: Scalars['uuid'];
  submitted_at?: Maybe<Scalars['timestamptz']>;
  worker_count?: Maybe<Scalars['Int']>;
  worker_hours?: Maybe<Scalars['Int']>;
};


/** columns and relationships of "daily_work_log" */
export type Daily_Work_LogChecklist_ItemsArgs = {
  distinct_on?: Maybe<Array<Checklist_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Checklist_Item_Order_By>>;
  where?: Maybe<Checklist_Item_Bool_Exp>;
};


/** columns and relationships of "daily_work_log" */
export type Daily_Work_LogChecklist_Items_AggregateArgs = {
  distinct_on?: Maybe<Array<Checklist_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Checklist_Item_Order_By>>;
  where?: Maybe<Checklist_Item_Bool_Exp>;
};


/** columns and relationships of "daily_work_log" */
export type Daily_Work_LogDaily_Weather_ObservationsArgs = {
  distinct_on?: Maybe<Array<Daily_Weather_Observation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Weather_Observation_Order_By>>;
  where?: Maybe<Daily_Weather_Observation_Bool_Exp>;
};


/** columns and relationships of "daily_work_log" */
export type Daily_Work_LogDaily_Weather_Observations_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Weather_Observation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Weather_Observation_Order_By>>;
  where?: Maybe<Daily_Weather_Observation_Bool_Exp>;
};


/** columns and relationships of "daily_work_log" */
export type Daily_Work_LogDaily_Work_Log_CommentsArgs = {
  distinct_on?: Maybe<Array<Daily_Work_Log_Comment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Work_Log_Comment_Order_By>>;
  where?: Maybe<Daily_Work_Log_Comment_Bool_Exp>;
};


/** columns and relationships of "daily_work_log" */
export type Daily_Work_LogDaily_Work_Log_Comments_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Work_Log_Comment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Work_Log_Comment_Order_By>>;
  where?: Maybe<Daily_Work_Log_Comment_Bool_Exp>;
};


/** columns and relationships of "daily_work_log" */
export type Daily_Work_LogDaily_Work_Log_TagsArgs = {
  distinct_on?: Maybe<Array<Daily_Work_Log_Tag_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Work_Log_Tag_Order_By>>;
  where?: Maybe<Daily_Work_Log_Tag_Bool_Exp>;
};


/** columns and relationships of "daily_work_log" */
export type Daily_Work_LogDaily_Work_Log_Tags_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Work_Log_Tag_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Work_Log_Tag_Order_By>>;
  where?: Maybe<Daily_Work_Log_Tag_Bool_Exp>;
};


/** columns and relationships of "daily_work_log" */
export type Daily_Work_LogDaily_Work_Log_WorkersArgs = {
  distinct_on?: Maybe<Array<Daily_Work_Log_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Work_Log_Worker_Order_By>>;
  where?: Maybe<Daily_Work_Log_Worker_Bool_Exp>;
};


/** columns and relationships of "daily_work_log" */
export type Daily_Work_LogDaily_Work_Log_Workers_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Work_Log_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Work_Log_Worker_Order_By>>;
  where?: Maybe<Daily_Work_Log_Worker_Bool_Exp>;
};


/** columns and relationships of "daily_work_log" */
export type Daily_Work_LogImagesArgs = {
  distinct_on?: Maybe<Array<Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Image_Order_By>>;
  where?: Maybe<Image_Bool_Exp>;
};


/** columns and relationships of "daily_work_log" */
export type Daily_Work_LogImages_AggregateArgs = {
  distinct_on?: Maybe<Array<Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Image_Order_By>>;
  where?: Maybe<Image_Bool_Exp>;
};

/** aggregated selection of "daily_work_log" */
export type Daily_Work_Log_Aggregate = {
   __typename?: 'daily_work_log_aggregate';
  aggregate?: Maybe<Daily_Work_Log_Aggregate_Fields>;
  nodes: Array<Daily_Work_Log>;
};

/** aggregate fields of "daily_work_log" */
export type Daily_Work_Log_Aggregate_Fields = {
   __typename?: 'daily_work_log_aggregate_fields';
  avg?: Maybe<Daily_Work_Log_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Daily_Work_Log_Max_Fields>;
  min?: Maybe<Daily_Work_Log_Min_Fields>;
  stddev?: Maybe<Daily_Work_Log_Stddev_Fields>;
  stddev_pop?: Maybe<Daily_Work_Log_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Daily_Work_Log_Stddev_Samp_Fields>;
  sum?: Maybe<Daily_Work_Log_Sum_Fields>;
  var_pop?: Maybe<Daily_Work_Log_Var_Pop_Fields>;
  var_samp?: Maybe<Daily_Work_Log_Var_Samp_Fields>;
  variance?: Maybe<Daily_Work_Log_Variance_Fields>;
};


/** aggregate fields of "daily_work_log" */
export type Daily_Work_Log_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Daily_Work_Log_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "daily_work_log" */
export type Daily_Work_Log_Aggregate_Order_By = {
  avg?: Maybe<Daily_Work_Log_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Daily_Work_Log_Max_Order_By>;
  min?: Maybe<Daily_Work_Log_Min_Order_By>;
  stddev?: Maybe<Daily_Work_Log_Stddev_Order_By>;
  stddev_pop?: Maybe<Daily_Work_Log_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Daily_Work_Log_Stddev_Samp_Order_By>;
  sum?: Maybe<Daily_Work_Log_Sum_Order_By>;
  var_pop?: Maybe<Daily_Work_Log_Var_Pop_Order_By>;
  var_samp?: Maybe<Daily_Work_Log_Var_Samp_Order_By>;
  variance?: Maybe<Daily_Work_Log_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "daily_work_log" */
export type Daily_Work_Log_Arr_Rel_Insert_Input = {
  data: Array<Daily_Work_Log_Insert_Input>;
  on_conflict?: Maybe<Daily_Work_Log_On_Conflict>;
};

/** aggregate avg on columns */
export type Daily_Work_Log_Avg_Fields = {
   __typename?: 'daily_work_log_avg_fields';
  worker_count?: Maybe<Scalars['Float']>;
  worker_hours?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "daily_work_log" */
export type Daily_Work_Log_Avg_Order_By = {
  worker_count?: Maybe<Order_By>;
  worker_hours?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "daily_work_log". All fields are combined with a logical 'AND'. */
export type Daily_Work_Log_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Daily_Work_Log_Bool_Exp>>>;
  _not?: Maybe<Daily_Work_Log_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Daily_Work_Log_Bool_Exp>>>;
  checklist_items?: Maybe<Checklist_Item_Bool_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  created_by_project_user?: Maybe<Project_User_Bool_Exp>;
  created_by_project_user_id?: Maybe<Uuid_Comparison_Exp>;
  daily_weather_observations?: Maybe<Daily_Weather_Observation_Bool_Exp>;
  daily_work_log_comments?: Maybe<Daily_Work_Log_Comment_Bool_Exp>;
  daily_work_log_tags?: Maybe<Daily_Work_Log_Tag_Bool_Exp>;
  daily_work_log_workers?: Maybe<Daily_Work_Log_Worker_Bool_Exp>;
  date?: Maybe<Date_Comparison_Exp>;
  description?: Maybe<Text_Translation_Bool_Exp>;
  description_id?: Maybe<Uuid_Comparison_Exp>;
  edited_workers?: Maybe<Boolean_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  images?: Maybe<Image_Bool_Exp>;
  procore_file_id?: Maybe<String_Comparison_Exp>;
  procore_manpower_id?: Maybe<String_Comparison_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  started_at?: Maybe<Timestamptz_Comparison_Exp>;
  subcontractor?: Maybe<Subcontractor_Bool_Exp>;
  subcontractor_id?: Maybe<Uuid_Comparison_Exp>;
  submitted_at?: Maybe<Timestamptz_Comparison_Exp>;
  worker_count?: Maybe<Int_Comparison_Exp>;
  worker_hours?: Maybe<Int_Comparison_Exp>;
};

/** columns and relationships of "daily_work_log_comment" */
export type Daily_Work_Log_Comment = {
   __typename?: 'daily_work_log_comment';
  created_at: Scalars['timestamptz'];
  /** An object relationship */
  created_by_employee?: Maybe<General_Contractor_Employee>;
  created_by_user_id: Scalars['uuid'];
  /** An object relationship */
  daily_work_log: Daily_Work_Log;
  /** An array relationship */
  daily_work_log_comment_emails: Array<Daily_Work_Log_Comment_Email>;
  /** An aggregated array relationship */
  daily_work_log_comment_emails_aggregate: Daily_Work_Log_Comment_Email_Aggregate;
  daily_work_log_id: Scalars['uuid'];
  id: Scalars['uuid'];
  /** An object relationship */
  text: Text_Translation;
  text_id: Scalars['uuid'];
  /** An object relationship */
  user: User;
};


/** columns and relationships of "daily_work_log_comment" */
export type Daily_Work_Log_CommentDaily_Work_Log_Comment_EmailsArgs = {
  distinct_on?: Maybe<Array<Daily_Work_Log_Comment_Email_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Work_Log_Comment_Email_Order_By>>;
  where?: Maybe<Daily_Work_Log_Comment_Email_Bool_Exp>;
};


/** columns and relationships of "daily_work_log_comment" */
export type Daily_Work_Log_CommentDaily_Work_Log_Comment_Emails_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Work_Log_Comment_Email_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Work_Log_Comment_Email_Order_By>>;
  where?: Maybe<Daily_Work_Log_Comment_Email_Bool_Exp>;
};

/** aggregated selection of "daily_work_log_comment" */
export type Daily_Work_Log_Comment_Aggregate = {
   __typename?: 'daily_work_log_comment_aggregate';
  aggregate?: Maybe<Daily_Work_Log_Comment_Aggregate_Fields>;
  nodes: Array<Daily_Work_Log_Comment>;
};

/** aggregate fields of "daily_work_log_comment" */
export type Daily_Work_Log_Comment_Aggregate_Fields = {
   __typename?: 'daily_work_log_comment_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Daily_Work_Log_Comment_Max_Fields>;
  min?: Maybe<Daily_Work_Log_Comment_Min_Fields>;
};


/** aggregate fields of "daily_work_log_comment" */
export type Daily_Work_Log_Comment_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Daily_Work_Log_Comment_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "daily_work_log_comment" */
export type Daily_Work_Log_Comment_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Daily_Work_Log_Comment_Max_Order_By>;
  min?: Maybe<Daily_Work_Log_Comment_Min_Order_By>;
};

/** input type for inserting array relation for remote table "daily_work_log_comment" */
export type Daily_Work_Log_Comment_Arr_Rel_Insert_Input = {
  data: Array<Daily_Work_Log_Comment_Insert_Input>;
  on_conflict?: Maybe<Daily_Work_Log_Comment_On_Conflict>;
};

/** Boolean expression to filter rows from the table "daily_work_log_comment". All fields are combined with a logical 'AND'. */
export type Daily_Work_Log_Comment_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Daily_Work_Log_Comment_Bool_Exp>>>;
  _not?: Maybe<Daily_Work_Log_Comment_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Daily_Work_Log_Comment_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  created_by_employee?: Maybe<General_Contractor_Employee_Bool_Exp>;
  created_by_user_id?: Maybe<Uuid_Comparison_Exp>;
  daily_work_log?: Maybe<Daily_Work_Log_Bool_Exp>;
  daily_work_log_comment_emails?: Maybe<Daily_Work_Log_Comment_Email_Bool_Exp>;
  daily_work_log_id?: Maybe<Uuid_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  text?: Maybe<Text_Translation_Bool_Exp>;
  text_id?: Maybe<Uuid_Comparison_Exp>;
  user?: Maybe<User_Bool_Exp>;
};

/** unique or primary key constraints on table "daily_work_log_comment" */
export enum Daily_Work_Log_Comment_Constraint {
  /** unique or primary key constraint */
  DailyWorkLogCommentPkey = 'daily_work_log_comment_pkey'
}

/** columns and relationships of "daily_work_log_comment_email" */
export type Daily_Work_Log_Comment_Email = {
   __typename?: 'daily_work_log_comment_email';
  created_at: Scalars['timestamptz'];
  /** An object relationship */
  daily_work_log_comment: Daily_Work_Log_Comment;
  daily_work_log_comment_id: Scalars['uuid'];
  email: Scalars['String'];
  id: Scalars['uuid'];
};

/** aggregated selection of "daily_work_log_comment_email" */
export type Daily_Work_Log_Comment_Email_Aggregate = {
   __typename?: 'daily_work_log_comment_email_aggregate';
  aggregate?: Maybe<Daily_Work_Log_Comment_Email_Aggregate_Fields>;
  nodes: Array<Daily_Work_Log_Comment_Email>;
};

/** aggregate fields of "daily_work_log_comment_email" */
export type Daily_Work_Log_Comment_Email_Aggregate_Fields = {
   __typename?: 'daily_work_log_comment_email_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Daily_Work_Log_Comment_Email_Max_Fields>;
  min?: Maybe<Daily_Work_Log_Comment_Email_Min_Fields>;
};


/** aggregate fields of "daily_work_log_comment_email" */
export type Daily_Work_Log_Comment_Email_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Daily_Work_Log_Comment_Email_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "daily_work_log_comment_email" */
export type Daily_Work_Log_Comment_Email_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Daily_Work_Log_Comment_Email_Max_Order_By>;
  min?: Maybe<Daily_Work_Log_Comment_Email_Min_Order_By>;
};

/** input type for inserting array relation for remote table "daily_work_log_comment_email" */
export type Daily_Work_Log_Comment_Email_Arr_Rel_Insert_Input = {
  data: Array<Daily_Work_Log_Comment_Email_Insert_Input>;
  on_conflict?: Maybe<Daily_Work_Log_Comment_Email_On_Conflict>;
};

/**
 * Boolean expression to filter rows from the table "daily_work_log_comment_email".
 * All fields are combined with a logical 'AND'.
 */
export type Daily_Work_Log_Comment_Email_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Daily_Work_Log_Comment_Email_Bool_Exp>>>;
  _not?: Maybe<Daily_Work_Log_Comment_Email_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Daily_Work_Log_Comment_Email_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  daily_work_log_comment?: Maybe<Daily_Work_Log_Comment_Bool_Exp>;
  daily_work_log_comment_id?: Maybe<Uuid_Comparison_Exp>;
  email?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "daily_work_log_comment_email" */
export enum Daily_Work_Log_Comment_Email_Constraint {
  /** unique or primary key constraint */
  DailyWorkLogCommentEmailPkey = 'daily_work_log_comment_email_pkey'
}

/** input type for inserting data into table "daily_work_log_comment_email" */
export type Daily_Work_Log_Comment_Email_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_work_log_comment?: Maybe<Daily_Work_Log_Comment_Obj_Rel_Insert_Input>;
  daily_work_log_comment_id?: Maybe<Scalars['uuid']>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Daily_Work_Log_Comment_Email_Max_Fields = {
   __typename?: 'daily_work_log_comment_email_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_work_log_comment_id?: Maybe<Scalars['uuid']>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "daily_work_log_comment_email" */
export type Daily_Work_Log_Comment_Email_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  daily_work_log_comment_id?: Maybe<Order_By>;
  email?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Daily_Work_Log_Comment_Email_Min_Fields = {
   __typename?: 'daily_work_log_comment_email_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_work_log_comment_id?: Maybe<Scalars['uuid']>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "daily_work_log_comment_email" */
export type Daily_Work_Log_Comment_Email_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  daily_work_log_comment_id?: Maybe<Order_By>;
  email?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
};

/** response of any mutation on the table "daily_work_log_comment_email" */
export type Daily_Work_Log_Comment_Email_Mutation_Response = {
   __typename?: 'daily_work_log_comment_email_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Daily_Work_Log_Comment_Email>;
};

/** input type for inserting object relation for remote table "daily_work_log_comment_email" */
export type Daily_Work_Log_Comment_Email_Obj_Rel_Insert_Input = {
  data: Daily_Work_Log_Comment_Email_Insert_Input;
  on_conflict?: Maybe<Daily_Work_Log_Comment_Email_On_Conflict>;
};

/** on conflict condition type for table "daily_work_log_comment_email" */
export type Daily_Work_Log_Comment_Email_On_Conflict = {
  constraint: Daily_Work_Log_Comment_Email_Constraint;
  update_columns: Array<Daily_Work_Log_Comment_Email_Update_Column>;
  where?: Maybe<Daily_Work_Log_Comment_Email_Bool_Exp>;
};

/** ordering options when selecting data from "daily_work_log_comment_email" */
export type Daily_Work_Log_Comment_Email_Order_By = {
  created_at?: Maybe<Order_By>;
  daily_work_log_comment?: Maybe<Daily_Work_Log_Comment_Order_By>;
  daily_work_log_comment_id?: Maybe<Order_By>;
  email?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
};

/** primary key columns input for table: "daily_work_log_comment_email" */
export type Daily_Work_Log_Comment_Email_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "daily_work_log_comment_email" */
export enum Daily_Work_Log_Comment_Email_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DailyWorkLogCommentId = 'daily_work_log_comment_id',
  /** column name */
  Email = 'email',
  /** column name */
  Id = 'id'
}

/** input type for updating data in table "daily_work_log_comment_email" */
export type Daily_Work_Log_Comment_Email_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_work_log_comment_id?: Maybe<Scalars['uuid']>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "daily_work_log_comment_email" */
export enum Daily_Work_Log_Comment_Email_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DailyWorkLogCommentId = 'daily_work_log_comment_id',
  /** column name */
  Email = 'email',
  /** column name */
  Id = 'id'
}

/** input type for inserting data into table "daily_work_log_comment" */
export type Daily_Work_Log_Comment_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_employee?: Maybe<General_Contractor_Employee_Obj_Rel_Insert_Input>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  daily_work_log?: Maybe<Daily_Work_Log_Obj_Rel_Insert_Input>;
  daily_work_log_comment_emails?: Maybe<Daily_Work_Log_Comment_Email_Arr_Rel_Insert_Input>;
  daily_work_log_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  text?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  text_id?: Maybe<Scalars['uuid']>;
  user?: Maybe<User_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Daily_Work_Log_Comment_Max_Fields = {
   __typename?: 'daily_work_log_comment_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  daily_work_log_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  text_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "daily_work_log_comment" */
export type Daily_Work_Log_Comment_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  created_by_user_id?: Maybe<Order_By>;
  daily_work_log_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  text_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Daily_Work_Log_Comment_Min_Fields = {
   __typename?: 'daily_work_log_comment_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  daily_work_log_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  text_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "daily_work_log_comment" */
export type Daily_Work_Log_Comment_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  created_by_user_id?: Maybe<Order_By>;
  daily_work_log_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  text_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "daily_work_log_comment" */
export type Daily_Work_Log_Comment_Mutation_Response = {
   __typename?: 'daily_work_log_comment_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Daily_Work_Log_Comment>;
};

/** input type for inserting object relation for remote table "daily_work_log_comment" */
export type Daily_Work_Log_Comment_Obj_Rel_Insert_Input = {
  data: Daily_Work_Log_Comment_Insert_Input;
  on_conflict?: Maybe<Daily_Work_Log_Comment_On_Conflict>;
};

/** on conflict condition type for table "daily_work_log_comment" */
export type Daily_Work_Log_Comment_On_Conflict = {
  constraint: Daily_Work_Log_Comment_Constraint;
  update_columns: Array<Daily_Work_Log_Comment_Update_Column>;
  where?: Maybe<Daily_Work_Log_Comment_Bool_Exp>;
};

/** ordering options when selecting data from "daily_work_log_comment" */
export type Daily_Work_Log_Comment_Order_By = {
  created_at?: Maybe<Order_By>;
  created_by_employee?: Maybe<General_Contractor_Employee_Order_By>;
  created_by_user_id?: Maybe<Order_By>;
  daily_work_log?: Maybe<Daily_Work_Log_Order_By>;
  daily_work_log_comment_emails_aggregate?: Maybe<Daily_Work_Log_Comment_Email_Aggregate_Order_By>;
  daily_work_log_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  text?: Maybe<Text_Translation_Order_By>;
  text_id?: Maybe<Order_By>;
  user?: Maybe<User_Order_By>;
};

/** primary key columns input for table: "daily_work_log_comment" */
export type Daily_Work_Log_Comment_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "daily_work_log_comment" */
export enum Daily_Work_Log_Comment_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CreatedByUserId = 'created_by_user_id',
  /** column name */
  DailyWorkLogId = 'daily_work_log_id',
  /** column name */
  Id = 'id',
  /** column name */
  TextId = 'text_id'
}

/** input type for updating data in table "daily_work_log_comment" */
export type Daily_Work_Log_Comment_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  daily_work_log_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  text_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "daily_work_log_comment" */
export enum Daily_Work_Log_Comment_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CreatedByUserId = 'created_by_user_id',
  /** column name */
  DailyWorkLogId = 'daily_work_log_id',
  /** column name */
  Id = 'id',
  /** column name */
  TextId = 'text_id'
}

/** unique or primary key constraints on table "daily_work_log" */
export enum Daily_Work_Log_Constraint {
  /** unique or primary key constraint */
  DailyWorkLogPkey = 'daily_work_log_pkey',
  /** unique or primary key constraint */
  DailyWorkLogProcoreFileIdKey = 'daily_work_log_procore_file_id_key'
}

/** input type for incrementing integer column in table "daily_work_log" */
export type Daily_Work_Log_Inc_Input = {
  worker_count?: Maybe<Scalars['Int']>;
  worker_hours?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "daily_work_log" */
export type Daily_Work_Log_Insert_Input = {
  checklist_items?: Maybe<Checklist_Item_Arr_Rel_Insert_Input>;
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_project_user?: Maybe<Project_User_Obj_Rel_Insert_Input>;
  created_by_project_user_id?: Maybe<Scalars['uuid']>;
  daily_weather_observations?: Maybe<Daily_Weather_Observation_Arr_Rel_Insert_Input>;
  daily_work_log_comments?: Maybe<Daily_Work_Log_Comment_Arr_Rel_Insert_Input>;
  daily_work_log_tags?: Maybe<Daily_Work_Log_Tag_Arr_Rel_Insert_Input>;
  daily_work_log_workers?: Maybe<Daily_Work_Log_Worker_Arr_Rel_Insert_Input>;
  date?: Maybe<Scalars['date']>;
  description?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  description_id?: Maybe<Scalars['uuid']>;
  edited_workers?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['uuid']>;
  images?: Maybe<Image_Arr_Rel_Insert_Input>;
  procore_file_id?: Maybe<Scalars['String']>;
  procore_manpower_id?: Maybe<Scalars['String']>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_id?: Maybe<Scalars['uuid']>;
  started_at?: Maybe<Scalars['timestamptz']>;
  subcontractor?: Maybe<Subcontractor_Obj_Rel_Insert_Input>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  submitted_at?: Maybe<Scalars['timestamptz']>;
  worker_count?: Maybe<Scalars['Int']>;
  worker_hours?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type Daily_Work_Log_Max_Fields = {
   __typename?: 'daily_work_log_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_project_user_id?: Maybe<Scalars['uuid']>;
  date?: Maybe<Scalars['date']>;
  description_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  procore_file_id?: Maybe<Scalars['String']>;
  procore_manpower_id?: Maybe<Scalars['String']>;
  project_id?: Maybe<Scalars['uuid']>;
  started_at?: Maybe<Scalars['timestamptz']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  submitted_at?: Maybe<Scalars['timestamptz']>;
  worker_count?: Maybe<Scalars['Int']>;
  worker_hours?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "daily_work_log" */
export type Daily_Work_Log_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  created_by_project_user_id?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  description_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  procore_file_id?: Maybe<Order_By>;
  procore_manpower_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  started_at?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  submitted_at?: Maybe<Order_By>;
  worker_count?: Maybe<Order_By>;
  worker_hours?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Daily_Work_Log_Min_Fields = {
   __typename?: 'daily_work_log_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_project_user_id?: Maybe<Scalars['uuid']>;
  date?: Maybe<Scalars['date']>;
  description_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  procore_file_id?: Maybe<Scalars['String']>;
  procore_manpower_id?: Maybe<Scalars['String']>;
  project_id?: Maybe<Scalars['uuid']>;
  started_at?: Maybe<Scalars['timestamptz']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  submitted_at?: Maybe<Scalars['timestamptz']>;
  worker_count?: Maybe<Scalars['Int']>;
  worker_hours?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "daily_work_log" */
export type Daily_Work_Log_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  created_by_project_user_id?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  description_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  procore_file_id?: Maybe<Order_By>;
  procore_manpower_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  started_at?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  submitted_at?: Maybe<Order_By>;
  worker_count?: Maybe<Order_By>;
  worker_hours?: Maybe<Order_By>;
};

/** response of any mutation on the table "daily_work_log" */
export type Daily_Work_Log_Mutation_Response = {
   __typename?: 'daily_work_log_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Daily_Work_Log>;
};

/** input type for inserting object relation for remote table "daily_work_log" */
export type Daily_Work_Log_Obj_Rel_Insert_Input = {
  data: Daily_Work_Log_Insert_Input;
  on_conflict?: Maybe<Daily_Work_Log_On_Conflict>;
};

/** on conflict condition type for table "daily_work_log" */
export type Daily_Work_Log_On_Conflict = {
  constraint: Daily_Work_Log_Constraint;
  update_columns: Array<Daily_Work_Log_Update_Column>;
  where?: Maybe<Daily_Work_Log_Bool_Exp>;
};

/** ordering options when selecting data from "daily_work_log" */
export type Daily_Work_Log_Order_By = {
  checklist_items_aggregate?: Maybe<Checklist_Item_Aggregate_Order_By>;
  created_at?: Maybe<Order_By>;
  created_by_project_user?: Maybe<Project_User_Order_By>;
  created_by_project_user_id?: Maybe<Order_By>;
  daily_weather_observations_aggregate?: Maybe<Daily_Weather_Observation_Aggregate_Order_By>;
  daily_work_log_comments_aggregate?: Maybe<Daily_Work_Log_Comment_Aggregate_Order_By>;
  daily_work_log_tags_aggregate?: Maybe<Daily_Work_Log_Tag_Aggregate_Order_By>;
  daily_work_log_workers_aggregate?: Maybe<Daily_Work_Log_Worker_Aggregate_Order_By>;
  date?: Maybe<Order_By>;
  description?: Maybe<Text_Translation_Order_By>;
  description_id?: Maybe<Order_By>;
  edited_workers?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  images_aggregate?: Maybe<Image_Aggregate_Order_By>;
  procore_file_id?: Maybe<Order_By>;
  procore_manpower_id?: Maybe<Order_By>;
  project?: Maybe<Project_Order_By>;
  project_id?: Maybe<Order_By>;
  started_at?: Maybe<Order_By>;
  subcontractor?: Maybe<Subcontractor_Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  submitted_at?: Maybe<Order_By>;
  worker_count?: Maybe<Order_By>;
  worker_hours?: Maybe<Order_By>;
};

/** primary key columns input for table: "daily_work_log" */
export type Daily_Work_Log_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "daily_work_log" */
export enum Daily_Work_Log_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CreatedByProjectUserId = 'created_by_project_user_id',
  /** column name */
  Date = 'date',
  /** column name */
  DescriptionId = 'description_id',
  /** column name */
  EditedWorkers = 'edited_workers',
  /** column name */
  Id = 'id',
  /** column name */
  ProcoreFileId = 'procore_file_id',
  /** column name */
  ProcoreManpowerId = 'procore_manpower_id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  StartedAt = 'started_at',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  SubmittedAt = 'submitted_at',
  /** column name */
  WorkerCount = 'worker_count',
  /** column name */
  WorkerHours = 'worker_hours'
}

/** input type for updating data in table "daily_work_log" */
export type Daily_Work_Log_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_project_user_id?: Maybe<Scalars['uuid']>;
  date?: Maybe<Scalars['date']>;
  description_id?: Maybe<Scalars['uuid']>;
  edited_workers?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['uuid']>;
  procore_file_id?: Maybe<Scalars['String']>;
  procore_manpower_id?: Maybe<Scalars['String']>;
  project_id?: Maybe<Scalars['uuid']>;
  started_at?: Maybe<Scalars['timestamptz']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  submitted_at?: Maybe<Scalars['timestamptz']>;
  worker_count?: Maybe<Scalars['Int']>;
  worker_hours?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type Daily_Work_Log_Stddev_Fields = {
   __typename?: 'daily_work_log_stddev_fields';
  worker_count?: Maybe<Scalars['Float']>;
  worker_hours?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "daily_work_log" */
export type Daily_Work_Log_Stddev_Order_By = {
  worker_count?: Maybe<Order_By>;
  worker_hours?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Daily_Work_Log_Stddev_Pop_Fields = {
   __typename?: 'daily_work_log_stddev_pop_fields';
  worker_count?: Maybe<Scalars['Float']>;
  worker_hours?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "daily_work_log" */
export type Daily_Work_Log_Stddev_Pop_Order_By = {
  worker_count?: Maybe<Order_By>;
  worker_hours?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Daily_Work_Log_Stddev_Samp_Fields = {
   __typename?: 'daily_work_log_stddev_samp_fields';
  worker_count?: Maybe<Scalars['Float']>;
  worker_hours?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "daily_work_log" */
export type Daily_Work_Log_Stddev_Samp_Order_By = {
  worker_count?: Maybe<Order_By>;
  worker_hours?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Daily_Work_Log_Sum_Fields = {
   __typename?: 'daily_work_log_sum_fields';
  worker_count?: Maybe<Scalars['Int']>;
  worker_hours?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "daily_work_log" */
export type Daily_Work_Log_Sum_Order_By = {
  worker_count?: Maybe<Order_By>;
  worker_hours?: Maybe<Order_By>;
};

/** columns and relationships of "daily_work_log_tag" */
export type Daily_Work_Log_Tag = {
   __typename?: 'daily_work_log_tag';
  created_at: Scalars['timestamptz'];
  /** An object relationship */
  daily_work_log: Daily_Work_Log;
  daily_work_log_id: Scalars['uuid'];
  id: Scalars['uuid'];
  /** An object relationship */
  tag: Tag;
  tag_id: Scalars['uuid'];
};

/** aggregated selection of "daily_work_log_tag" */
export type Daily_Work_Log_Tag_Aggregate = {
   __typename?: 'daily_work_log_tag_aggregate';
  aggregate?: Maybe<Daily_Work_Log_Tag_Aggregate_Fields>;
  nodes: Array<Daily_Work_Log_Tag>;
};

/** aggregate fields of "daily_work_log_tag" */
export type Daily_Work_Log_Tag_Aggregate_Fields = {
   __typename?: 'daily_work_log_tag_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Daily_Work_Log_Tag_Max_Fields>;
  min?: Maybe<Daily_Work_Log_Tag_Min_Fields>;
};


/** aggregate fields of "daily_work_log_tag" */
export type Daily_Work_Log_Tag_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Daily_Work_Log_Tag_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "daily_work_log_tag" */
export type Daily_Work_Log_Tag_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Daily_Work_Log_Tag_Max_Order_By>;
  min?: Maybe<Daily_Work_Log_Tag_Min_Order_By>;
};

/** input type for inserting array relation for remote table "daily_work_log_tag" */
export type Daily_Work_Log_Tag_Arr_Rel_Insert_Input = {
  data: Array<Daily_Work_Log_Tag_Insert_Input>;
  on_conflict?: Maybe<Daily_Work_Log_Tag_On_Conflict>;
};

/** Boolean expression to filter rows from the table "daily_work_log_tag". All fields are combined with a logical 'AND'. */
export type Daily_Work_Log_Tag_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Daily_Work_Log_Tag_Bool_Exp>>>;
  _not?: Maybe<Daily_Work_Log_Tag_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Daily_Work_Log_Tag_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  daily_work_log?: Maybe<Daily_Work_Log_Bool_Exp>;
  daily_work_log_id?: Maybe<Uuid_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  tag?: Maybe<Tag_Bool_Exp>;
  tag_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "daily_work_log_tag" */
export enum Daily_Work_Log_Tag_Constraint {
  /** unique or primary key constraint */
  DailyWorkLogTagDailyWorkLogIdTagIdKey = 'daily_work_log_tag_daily_work_log_id_tag_id_key',
  /** unique or primary key constraint */
  DailyWorkLogTagPkey = 'daily_work_log_tag_pkey'
}

/** input type for inserting data into table "daily_work_log_tag" */
export type Daily_Work_Log_Tag_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_work_log?: Maybe<Daily_Work_Log_Obj_Rel_Insert_Input>;
  daily_work_log_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  tag?: Maybe<Tag_Obj_Rel_Insert_Input>;
  tag_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Daily_Work_Log_Tag_Max_Fields = {
   __typename?: 'daily_work_log_tag_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_work_log_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  tag_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "daily_work_log_tag" */
export type Daily_Work_Log_Tag_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  daily_work_log_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  tag_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Daily_Work_Log_Tag_Min_Fields = {
   __typename?: 'daily_work_log_tag_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_work_log_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  tag_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "daily_work_log_tag" */
export type Daily_Work_Log_Tag_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  daily_work_log_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  tag_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "daily_work_log_tag" */
export type Daily_Work_Log_Tag_Mutation_Response = {
   __typename?: 'daily_work_log_tag_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Daily_Work_Log_Tag>;
};

/** input type for inserting object relation for remote table "daily_work_log_tag" */
export type Daily_Work_Log_Tag_Obj_Rel_Insert_Input = {
  data: Daily_Work_Log_Tag_Insert_Input;
  on_conflict?: Maybe<Daily_Work_Log_Tag_On_Conflict>;
};

/** on conflict condition type for table "daily_work_log_tag" */
export type Daily_Work_Log_Tag_On_Conflict = {
  constraint: Daily_Work_Log_Tag_Constraint;
  update_columns: Array<Daily_Work_Log_Tag_Update_Column>;
  where?: Maybe<Daily_Work_Log_Tag_Bool_Exp>;
};

/** ordering options when selecting data from "daily_work_log_tag" */
export type Daily_Work_Log_Tag_Order_By = {
  created_at?: Maybe<Order_By>;
  daily_work_log?: Maybe<Daily_Work_Log_Order_By>;
  daily_work_log_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  tag?: Maybe<Tag_Order_By>;
  tag_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "daily_work_log_tag" */
export type Daily_Work_Log_Tag_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "daily_work_log_tag" */
export enum Daily_Work_Log_Tag_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DailyWorkLogId = 'daily_work_log_id',
  /** column name */
  Id = 'id',
  /** column name */
  TagId = 'tag_id'
}

/** input type for updating data in table "daily_work_log_tag" */
export type Daily_Work_Log_Tag_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_work_log_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  tag_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "daily_work_log_tag" */
export enum Daily_Work_Log_Tag_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DailyWorkLogId = 'daily_work_log_id',
  /** column name */
  Id = 'id',
  /** column name */
  TagId = 'tag_id'
}

/** update columns of table "daily_work_log" */
export enum Daily_Work_Log_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CreatedByProjectUserId = 'created_by_project_user_id',
  /** column name */
  Date = 'date',
  /** column name */
  DescriptionId = 'description_id',
  /** column name */
  EditedWorkers = 'edited_workers',
  /** column name */
  Id = 'id',
  /** column name */
  ProcoreFileId = 'procore_file_id',
  /** column name */
  ProcoreManpowerId = 'procore_manpower_id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  StartedAt = 'started_at',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  SubmittedAt = 'submitted_at',
  /** column name */
  WorkerCount = 'worker_count',
  /** column name */
  WorkerHours = 'worker_hours'
}

/** aggregate var_pop on columns */
export type Daily_Work_Log_Var_Pop_Fields = {
   __typename?: 'daily_work_log_var_pop_fields';
  worker_count?: Maybe<Scalars['Float']>;
  worker_hours?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "daily_work_log" */
export type Daily_Work_Log_Var_Pop_Order_By = {
  worker_count?: Maybe<Order_By>;
  worker_hours?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Daily_Work_Log_Var_Samp_Fields = {
   __typename?: 'daily_work_log_var_samp_fields';
  worker_count?: Maybe<Scalars['Float']>;
  worker_hours?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "daily_work_log" */
export type Daily_Work_Log_Var_Samp_Order_By = {
  worker_count?: Maybe<Order_By>;
  worker_hours?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Daily_Work_Log_Variance_Fields = {
   __typename?: 'daily_work_log_variance_fields';
  worker_count?: Maybe<Scalars['Float']>;
  worker_hours?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "daily_work_log" */
export type Daily_Work_Log_Variance_Order_By = {
  worker_count?: Maybe<Order_By>;
  worker_hours?: Maybe<Order_By>;
};

/** columns and relationships of "daily_work_log_worker" */
export type Daily_Work_Log_Worker = {
   __typename?: 'daily_work_log_worker';
  created_at: Scalars['timestamptz'];
  /** An object relationship */
  daily_work_log: Daily_Work_Log;
  daily_work_log_id: Scalars['uuid'];
  hours: Scalars['Int'];
  id: Scalars['uuid'];
  /** An object relationship */
  project_worker: Project_Worker;
  project_worker_id: Scalars['uuid'];
};

/** aggregated selection of "daily_work_log_worker" */
export type Daily_Work_Log_Worker_Aggregate = {
   __typename?: 'daily_work_log_worker_aggregate';
  aggregate?: Maybe<Daily_Work_Log_Worker_Aggregate_Fields>;
  nodes: Array<Daily_Work_Log_Worker>;
};

/** aggregate fields of "daily_work_log_worker" */
export type Daily_Work_Log_Worker_Aggregate_Fields = {
   __typename?: 'daily_work_log_worker_aggregate_fields';
  avg?: Maybe<Daily_Work_Log_Worker_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Daily_Work_Log_Worker_Max_Fields>;
  min?: Maybe<Daily_Work_Log_Worker_Min_Fields>;
  stddev?: Maybe<Daily_Work_Log_Worker_Stddev_Fields>;
  stddev_pop?: Maybe<Daily_Work_Log_Worker_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Daily_Work_Log_Worker_Stddev_Samp_Fields>;
  sum?: Maybe<Daily_Work_Log_Worker_Sum_Fields>;
  var_pop?: Maybe<Daily_Work_Log_Worker_Var_Pop_Fields>;
  var_samp?: Maybe<Daily_Work_Log_Worker_Var_Samp_Fields>;
  variance?: Maybe<Daily_Work_Log_Worker_Variance_Fields>;
};


/** aggregate fields of "daily_work_log_worker" */
export type Daily_Work_Log_Worker_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Daily_Work_Log_Worker_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "daily_work_log_worker" */
export type Daily_Work_Log_Worker_Aggregate_Order_By = {
  avg?: Maybe<Daily_Work_Log_Worker_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Daily_Work_Log_Worker_Max_Order_By>;
  min?: Maybe<Daily_Work_Log_Worker_Min_Order_By>;
  stddev?: Maybe<Daily_Work_Log_Worker_Stddev_Order_By>;
  stddev_pop?: Maybe<Daily_Work_Log_Worker_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Daily_Work_Log_Worker_Stddev_Samp_Order_By>;
  sum?: Maybe<Daily_Work_Log_Worker_Sum_Order_By>;
  var_pop?: Maybe<Daily_Work_Log_Worker_Var_Pop_Order_By>;
  var_samp?: Maybe<Daily_Work_Log_Worker_Var_Samp_Order_By>;
  variance?: Maybe<Daily_Work_Log_Worker_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "daily_work_log_worker" */
export type Daily_Work_Log_Worker_Arr_Rel_Insert_Input = {
  data: Array<Daily_Work_Log_Worker_Insert_Input>;
  on_conflict?: Maybe<Daily_Work_Log_Worker_On_Conflict>;
};

/** aggregate avg on columns */
export type Daily_Work_Log_Worker_Avg_Fields = {
   __typename?: 'daily_work_log_worker_avg_fields';
  hours?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "daily_work_log_worker" */
export type Daily_Work_Log_Worker_Avg_Order_By = {
  hours?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "daily_work_log_worker". All fields are combined with a logical 'AND'. */
export type Daily_Work_Log_Worker_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Daily_Work_Log_Worker_Bool_Exp>>>;
  _not?: Maybe<Daily_Work_Log_Worker_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Daily_Work_Log_Worker_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  daily_work_log?: Maybe<Daily_Work_Log_Bool_Exp>;
  daily_work_log_id?: Maybe<Uuid_Comparison_Exp>;
  hours?: Maybe<Int_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  project_worker?: Maybe<Project_Worker_Bool_Exp>;
  project_worker_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "daily_work_log_worker" */
export enum Daily_Work_Log_Worker_Constraint {
  /** unique or primary key constraint */
  DailyWorkLogWorkerDailyWorkLogIdProjectWorkerIdKey = 'daily_work_log_worker_daily_work_log_id_project_worker_id_key',
  /** unique or primary key constraint */
  DailyWorkLogWorkerPkey = 'daily_work_log_worker_pkey'
}

/** input type for incrementing integer column in table "daily_work_log_worker" */
export type Daily_Work_Log_Worker_Inc_Input = {
  hours?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "daily_work_log_worker" */
export type Daily_Work_Log_Worker_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_work_log?: Maybe<Daily_Work_Log_Obj_Rel_Insert_Input>;
  daily_work_log_id?: Maybe<Scalars['uuid']>;
  hours?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['uuid']>;
  project_worker?: Maybe<Project_Worker_Obj_Rel_Insert_Input>;
  project_worker_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Daily_Work_Log_Worker_Max_Fields = {
   __typename?: 'daily_work_log_worker_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_work_log_id?: Maybe<Scalars['uuid']>;
  hours?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['uuid']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "daily_work_log_worker" */
export type Daily_Work_Log_Worker_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  daily_work_log_id?: Maybe<Order_By>;
  hours?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_worker_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Daily_Work_Log_Worker_Min_Fields = {
   __typename?: 'daily_work_log_worker_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_work_log_id?: Maybe<Scalars['uuid']>;
  hours?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['uuid']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "daily_work_log_worker" */
export type Daily_Work_Log_Worker_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  daily_work_log_id?: Maybe<Order_By>;
  hours?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_worker_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "daily_work_log_worker" */
export type Daily_Work_Log_Worker_Mutation_Response = {
   __typename?: 'daily_work_log_worker_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Daily_Work_Log_Worker>;
};

/** input type for inserting object relation for remote table "daily_work_log_worker" */
export type Daily_Work_Log_Worker_Obj_Rel_Insert_Input = {
  data: Daily_Work_Log_Worker_Insert_Input;
  on_conflict?: Maybe<Daily_Work_Log_Worker_On_Conflict>;
};

/** on conflict condition type for table "daily_work_log_worker" */
export type Daily_Work_Log_Worker_On_Conflict = {
  constraint: Daily_Work_Log_Worker_Constraint;
  update_columns: Array<Daily_Work_Log_Worker_Update_Column>;
  where?: Maybe<Daily_Work_Log_Worker_Bool_Exp>;
};

/** ordering options when selecting data from "daily_work_log_worker" */
export type Daily_Work_Log_Worker_Order_By = {
  created_at?: Maybe<Order_By>;
  daily_work_log?: Maybe<Daily_Work_Log_Order_By>;
  daily_work_log_id?: Maybe<Order_By>;
  hours?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_worker?: Maybe<Project_Worker_Order_By>;
  project_worker_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "daily_work_log_worker" */
export type Daily_Work_Log_Worker_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "daily_work_log_worker" */
export enum Daily_Work_Log_Worker_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DailyWorkLogId = 'daily_work_log_id',
  /** column name */
  Hours = 'hours',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectWorkerId = 'project_worker_id'
}

/** input type for updating data in table "daily_work_log_worker" */
export type Daily_Work_Log_Worker_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_work_log_id?: Maybe<Scalars['uuid']>;
  hours?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['uuid']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
};

/** aggregate stddev on columns */
export type Daily_Work_Log_Worker_Stddev_Fields = {
   __typename?: 'daily_work_log_worker_stddev_fields';
  hours?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "daily_work_log_worker" */
export type Daily_Work_Log_Worker_Stddev_Order_By = {
  hours?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Daily_Work_Log_Worker_Stddev_Pop_Fields = {
   __typename?: 'daily_work_log_worker_stddev_pop_fields';
  hours?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "daily_work_log_worker" */
export type Daily_Work_Log_Worker_Stddev_Pop_Order_By = {
  hours?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Daily_Work_Log_Worker_Stddev_Samp_Fields = {
   __typename?: 'daily_work_log_worker_stddev_samp_fields';
  hours?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "daily_work_log_worker" */
export type Daily_Work_Log_Worker_Stddev_Samp_Order_By = {
  hours?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Daily_Work_Log_Worker_Sum_Fields = {
   __typename?: 'daily_work_log_worker_sum_fields';
  hours?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "daily_work_log_worker" */
export type Daily_Work_Log_Worker_Sum_Order_By = {
  hours?: Maybe<Order_By>;
};

/** update columns of table "daily_work_log_worker" */
export enum Daily_Work_Log_Worker_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DailyWorkLogId = 'daily_work_log_id',
  /** column name */
  Hours = 'hours',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectWorkerId = 'project_worker_id'
}

/** aggregate var_pop on columns */
export type Daily_Work_Log_Worker_Var_Pop_Fields = {
   __typename?: 'daily_work_log_worker_var_pop_fields';
  hours?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "daily_work_log_worker" */
export type Daily_Work_Log_Worker_Var_Pop_Order_By = {
  hours?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Daily_Work_Log_Worker_Var_Samp_Fields = {
   __typename?: 'daily_work_log_worker_var_samp_fields';
  hours?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "daily_work_log_worker" */
export type Daily_Work_Log_Worker_Var_Samp_Order_By = {
  hours?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Daily_Work_Log_Worker_Variance_Fields = {
   __typename?: 'daily_work_log_worker_variance_fields';
  hours?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "daily_work_log_worker" */
export type Daily_Work_Log_Worker_Variance_Order_By = {
  hours?: Maybe<Order_By>;
};

export type DailyReportForm = {
   __typename?: 'DailyReportForm';
  description: Scalars['String'];
  projectWorkerIds: Array<Scalars['String']>;
};


/** expression to compare columns of type date. All fields are combined with logical 'AND'. */
export type Date_Comparison_Exp = {
  _eq?: Maybe<Scalars['date']>;
  _gt?: Maybe<Scalars['date']>;
  _gte?: Maybe<Scalars['date']>;
  _in?: Maybe<Array<Scalars['date']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['date']>;
  _lte?: Maybe<Scalars['date']>;
  _neq?: Maybe<Scalars['date']>;
  _nin?: Maybe<Array<Scalars['date']>>;
};

export type Date_Daily_Log_Submittals_Args = {
  log_date?: Maybe<Scalars['date']>;
  projectid?: Maybe<Scalars['uuid']>;
};

/** columns and relationships of "delivery" */
export type Delivery = {
   __typename?: 'delivery';
  /** An array relationship */
  calendars: Array<Delivery_Calendar>;
  /** An aggregated array relationship */
  calendars_aggregate: Delivery_Calendar_Aggregate;
  created_at: Scalars['timestamptz'];
  created_by_user_id?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  detail?: Maybe<Text_Translation>;
  detail_id?: Maybe<Scalars['uuid']>;
  duration?: Maybe<Scalars['float8']>;
  id: Scalars['uuid'];
  /** An object relationship */
  name?: Maybe<Text_Translation>;
  name_id?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  project?: Maybe<Project>;
  project_id?: Maybe<Scalars['uuid']>;
  start_at: Scalars['timestamptz'];
  /** An object relationship */
  storage_location?: Maybe<Text_Translation>;
  storage_location_id?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  user?: Maybe<User>;
};


/** columns and relationships of "delivery" */
export type DeliveryCalendarsArgs = {
  distinct_on?: Maybe<Array<Delivery_Calendar_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Delivery_Calendar_Order_By>>;
  where?: Maybe<Delivery_Calendar_Bool_Exp>;
};


/** columns and relationships of "delivery" */
export type DeliveryCalendars_AggregateArgs = {
  distinct_on?: Maybe<Array<Delivery_Calendar_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Delivery_Calendar_Order_By>>;
  where?: Maybe<Delivery_Calendar_Bool_Exp>;
};

/** aggregated selection of "delivery" */
export type Delivery_Aggregate = {
   __typename?: 'delivery_aggregate';
  aggregate?: Maybe<Delivery_Aggregate_Fields>;
  nodes: Array<Delivery>;
};

/** aggregate fields of "delivery" */
export type Delivery_Aggregate_Fields = {
   __typename?: 'delivery_aggregate_fields';
  avg?: Maybe<Delivery_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Delivery_Max_Fields>;
  min?: Maybe<Delivery_Min_Fields>;
  stddev?: Maybe<Delivery_Stddev_Fields>;
  stddev_pop?: Maybe<Delivery_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Delivery_Stddev_Samp_Fields>;
  sum?: Maybe<Delivery_Sum_Fields>;
  var_pop?: Maybe<Delivery_Var_Pop_Fields>;
  var_samp?: Maybe<Delivery_Var_Samp_Fields>;
  variance?: Maybe<Delivery_Variance_Fields>;
};


/** aggregate fields of "delivery" */
export type Delivery_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Delivery_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "delivery" */
export type Delivery_Aggregate_Order_By = {
  avg?: Maybe<Delivery_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Delivery_Max_Order_By>;
  min?: Maybe<Delivery_Min_Order_By>;
  stddev?: Maybe<Delivery_Stddev_Order_By>;
  stddev_pop?: Maybe<Delivery_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Delivery_Stddev_Samp_Order_By>;
  sum?: Maybe<Delivery_Sum_Order_By>;
  var_pop?: Maybe<Delivery_Var_Pop_Order_By>;
  var_samp?: Maybe<Delivery_Var_Samp_Order_By>;
  variance?: Maybe<Delivery_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "delivery" */
export type Delivery_Arr_Rel_Insert_Input = {
  data: Array<Delivery_Insert_Input>;
  on_conflict?: Maybe<Delivery_On_Conflict>;
};

/** aggregate avg on columns */
export type Delivery_Avg_Fields = {
   __typename?: 'delivery_avg_fields';
  duration?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "delivery" */
export type Delivery_Avg_Order_By = {
  duration?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "delivery". All fields are combined with a logical 'AND'. */
export type Delivery_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Delivery_Bool_Exp>>>;
  _not?: Maybe<Delivery_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Delivery_Bool_Exp>>>;
  calendars?: Maybe<Delivery_Calendar_Bool_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  created_by_user_id?: Maybe<Uuid_Comparison_Exp>;
  detail?: Maybe<Text_Translation_Bool_Exp>;
  detail_id?: Maybe<Uuid_Comparison_Exp>;
  duration?: Maybe<Float8_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  name?: Maybe<Text_Translation_Bool_Exp>;
  name_id?: Maybe<Uuid_Comparison_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  start_at?: Maybe<Timestamptz_Comparison_Exp>;
  storage_location?: Maybe<Text_Translation_Bool_Exp>;
  storage_location_id?: Maybe<Uuid_Comparison_Exp>;
  user?: Maybe<User_Bool_Exp>;
};

/** columns and relationships of "delivery_calendar" */
export type Delivery_Calendar = {
   __typename?: 'delivery_calendar';
  /** An object relationship */
  calendar?: Maybe<Calendar>;
  calendar_id?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  delivery?: Maybe<Delivery>;
  delivery_id?: Maybe<Scalars['uuid']>;
  id: Scalars['uuid'];
};

/** aggregated selection of "delivery_calendar" */
export type Delivery_Calendar_Aggregate = {
   __typename?: 'delivery_calendar_aggregate';
  aggregate?: Maybe<Delivery_Calendar_Aggregate_Fields>;
  nodes: Array<Delivery_Calendar>;
};

/** aggregate fields of "delivery_calendar" */
export type Delivery_Calendar_Aggregate_Fields = {
   __typename?: 'delivery_calendar_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Delivery_Calendar_Max_Fields>;
  min?: Maybe<Delivery_Calendar_Min_Fields>;
};


/** aggregate fields of "delivery_calendar" */
export type Delivery_Calendar_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Delivery_Calendar_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "delivery_calendar" */
export type Delivery_Calendar_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Delivery_Calendar_Max_Order_By>;
  min?: Maybe<Delivery_Calendar_Min_Order_By>;
};

/** input type for inserting array relation for remote table "delivery_calendar" */
export type Delivery_Calendar_Arr_Rel_Insert_Input = {
  data: Array<Delivery_Calendar_Insert_Input>;
  on_conflict?: Maybe<Delivery_Calendar_On_Conflict>;
};

/** Boolean expression to filter rows from the table "delivery_calendar". All fields are combined with a logical 'AND'. */
export type Delivery_Calendar_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Delivery_Calendar_Bool_Exp>>>;
  _not?: Maybe<Delivery_Calendar_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Delivery_Calendar_Bool_Exp>>>;
  calendar?: Maybe<Calendar_Bool_Exp>;
  calendar_id?: Maybe<Uuid_Comparison_Exp>;
  delivery?: Maybe<Delivery_Bool_Exp>;
  delivery_id?: Maybe<Uuid_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "delivery_calendar" */
export enum Delivery_Calendar_Constraint {
  /** unique or primary key constraint */
  DeliveryCalendarPkey = 'delivery_calendar_pkey'
}

/** input type for inserting data into table "delivery_calendar" */
export type Delivery_Calendar_Insert_Input = {
  calendar?: Maybe<Calendar_Obj_Rel_Insert_Input>;
  calendar_id?: Maybe<Scalars['uuid']>;
  delivery?: Maybe<Delivery_Obj_Rel_Insert_Input>;
  delivery_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Delivery_Calendar_Max_Fields = {
   __typename?: 'delivery_calendar_max_fields';
  calendar_id?: Maybe<Scalars['uuid']>;
  delivery_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "delivery_calendar" */
export type Delivery_Calendar_Max_Order_By = {
  calendar_id?: Maybe<Order_By>;
  delivery_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Delivery_Calendar_Min_Fields = {
   __typename?: 'delivery_calendar_min_fields';
  calendar_id?: Maybe<Scalars['uuid']>;
  delivery_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "delivery_calendar" */
export type Delivery_Calendar_Min_Order_By = {
  calendar_id?: Maybe<Order_By>;
  delivery_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
};

/** response of any mutation on the table "delivery_calendar" */
export type Delivery_Calendar_Mutation_Response = {
   __typename?: 'delivery_calendar_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Delivery_Calendar>;
};

/** input type for inserting object relation for remote table "delivery_calendar" */
export type Delivery_Calendar_Obj_Rel_Insert_Input = {
  data: Delivery_Calendar_Insert_Input;
  on_conflict?: Maybe<Delivery_Calendar_On_Conflict>;
};

/** on conflict condition type for table "delivery_calendar" */
export type Delivery_Calendar_On_Conflict = {
  constraint: Delivery_Calendar_Constraint;
  update_columns: Array<Delivery_Calendar_Update_Column>;
  where?: Maybe<Delivery_Calendar_Bool_Exp>;
};

/** ordering options when selecting data from "delivery_calendar" */
export type Delivery_Calendar_Order_By = {
  calendar?: Maybe<Calendar_Order_By>;
  calendar_id?: Maybe<Order_By>;
  delivery?: Maybe<Delivery_Order_By>;
  delivery_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
};

/** primary key columns input for table: "delivery_calendar" */
export type Delivery_Calendar_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "delivery_calendar" */
export enum Delivery_Calendar_Select_Column {
  /** column name */
  CalendarId = 'calendar_id',
  /** column name */
  DeliveryId = 'delivery_id',
  /** column name */
  Id = 'id'
}

/** input type for updating data in table "delivery_calendar" */
export type Delivery_Calendar_Set_Input = {
  calendar_id?: Maybe<Scalars['uuid']>;
  delivery_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "delivery_calendar" */
export enum Delivery_Calendar_Update_Column {
  /** column name */
  CalendarId = 'calendar_id',
  /** column name */
  DeliveryId = 'delivery_id',
  /** column name */
  Id = 'id'
}

/** unique or primary key constraints on table "delivery" */
export enum Delivery_Constraint {
  /** unique or primary key constraint */
  DeliveryPkey = 'delivery_pkey'
}

/** input type for incrementing integer column in table "delivery" */
export type Delivery_Inc_Input = {
  duration?: Maybe<Scalars['float8']>;
};

/** input type for inserting data into table "delivery" */
export type Delivery_Insert_Input = {
  calendars?: Maybe<Delivery_Calendar_Arr_Rel_Insert_Input>;
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  detail?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  detail_id?: Maybe<Scalars['uuid']>;
  duration?: Maybe<Scalars['float8']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  name_id?: Maybe<Scalars['uuid']>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_id?: Maybe<Scalars['uuid']>;
  start_at?: Maybe<Scalars['timestamptz']>;
  storage_location?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  storage_location_id?: Maybe<Scalars['uuid']>;
  user?: Maybe<User_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Delivery_Max_Fields = {
   __typename?: 'delivery_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  detail_id?: Maybe<Scalars['uuid']>;
  duration?: Maybe<Scalars['float8']>;
  id?: Maybe<Scalars['uuid']>;
  name_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  start_at?: Maybe<Scalars['timestamptz']>;
  storage_location_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "delivery" */
export type Delivery_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  created_by_user_id?: Maybe<Order_By>;
  detail_id?: Maybe<Order_By>;
  duration?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  start_at?: Maybe<Order_By>;
  storage_location_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Delivery_Min_Fields = {
   __typename?: 'delivery_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  detail_id?: Maybe<Scalars['uuid']>;
  duration?: Maybe<Scalars['float8']>;
  id?: Maybe<Scalars['uuid']>;
  name_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  start_at?: Maybe<Scalars['timestamptz']>;
  storage_location_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "delivery" */
export type Delivery_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  created_by_user_id?: Maybe<Order_By>;
  detail_id?: Maybe<Order_By>;
  duration?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  start_at?: Maybe<Order_By>;
  storage_location_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "delivery" */
export type Delivery_Mutation_Response = {
   __typename?: 'delivery_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Delivery>;
};

/** input type for inserting object relation for remote table "delivery" */
export type Delivery_Obj_Rel_Insert_Input = {
  data: Delivery_Insert_Input;
  on_conflict?: Maybe<Delivery_On_Conflict>;
};

/** on conflict condition type for table "delivery" */
export type Delivery_On_Conflict = {
  constraint: Delivery_Constraint;
  update_columns: Array<Delivery_Update_Column>;
  where?: Maybe<Delivery_Bool_Exp>;
};

/** ordering options when selecting data from "delivery" */
export type Delivery_Order_By = {
  calendars_aggregate?: Maybe<Delivery_Calendar_Aggregate_Order_By>;
  created_at?: Maybe<Order_By>;
  created_by_user_id?: Maybe<Order_By>;
  detail?: Maybe<Text_Translation_Order_By>;
  detail_id?: Maybe<Order_By>;
  duration?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Text_Translation_Order_By>;
  name_id?: Maybe<Order_By>;
  project?: Maybe<Project_Order_By>;
  project_id?: Maybe<Order_By>;
  start_at?: Maybe<Order_By>;
  storage_location?: Maybe<Text_Translation_Order_By>;
  storage_location_id?: Maybe<Order_By>;
  user?: Maybe<User_Order_By>;
};

/** primary key columns input for table: "delivery" */
export type Delivery_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "delivery" */
export enum Delivery_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CreatedByUserId = 'created_by_user_id',
  /** column name */
  DetailId = 'detail_id',
  /** column name */
  Duration = 'duration',
  /** column name */
  Id = 'id',
  /** column name */
  NameId = 'name_id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  StartAt = 'start_at',
  /** column name */
  StorageLocationId = 'storage_location_id'
}

/** input type for updating data in table "delivery" */
export type Delivery_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  detail_id?: Maybe<Scalars['uuid']>;
  duration?: Maybe<Scalars['float8']>;
  id?: Maybe<Scalars['uuid']>;
  name_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  start_at?: Maybe<Scalars['timestamptz']>;
  storage_location_id?: Maybe<Scalars['uuid']>;
};

/** aggregate stddev on columns */
export type Delivery_Stddev_Fields = {
   __typename?: 'delivery_stddev_fields';
  duration?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "delivery" */
export type Delivery_Stddev_Order_By = {
  duration?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Delivery_Stddev_Pop_Fields = {
   __typename?: 'delivery_stddev_pop_fields';
  duration?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "delivery" */
export type Delivery_Stddev_Pop_Order_By = {
  duration?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Delivery_Stddev_Samp_Fields = {
   __typename?: 'delivery_stddev_samp_fields';
  duration?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "delivery" */
export type Delivery_Stddev_Samp_Order_By = {
  duration?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Delivery_Sum_Fields = {
   __typename?: 'delivery_sum_fields';
  duration?: Maybe<Scalars['float8']>;
};

/** order by sum() on columns of table "delivery" */
export type Delivery_Sum_Order_By = {
  duration?: Maybe<Order_By>;
};

/** update columns of table "delivery" */
export enum Delivery_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CreatedByUserId = 'created_by_user_id',
  /** column name */
  DetailId = 'detail_id',
  /** column name */
  Duration = 'duration',
  /** column name */
  Id = 'id',
  /** column name */
  NameId = 'name_id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  StartAt = 'start_at',
  /** column name */
  StorageLocationId = 'storage_location_id'
}

/** aggregate var_pop on columns */
export type Delivery_Var_Pop_Fields = {
   __typename?: 'delivery_var_pop_fields';
  duration?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "delivery" */
export type Delivery_Var_Pop_Order_By = {
  duration?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Delivery_Var_Samp_Fields = {
   __typename?: 'delivery_var_samp_fields';
  duration?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "delivery" */
export type Delivery_Var_Samp_Order_By = {
  duration?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Delivery_Variance_Fields = {
   __typename?: 'delivery_variance_fields';
  duration?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "delivery" */
export type Delivery_Variance_Order_By = {
  duration?: Maybe<Order_By>;
};

/** columns and relationships of "dig_permit" */
export type Dig_Permit = {
   __typename?: 'dig_permit';
  /** An object relationship */
  applicant_project_worker: Project_Worker;
  applicant_project_worker_id: Scalars['uuid'];
  created_at?: Maybe<Scalars['timestamptz']>;
  did_utility_locates?: Maybe<Scalars['Boolean']>;
  /** An array relationship */
  dig_permit_select_options: Array<Dig_Permit_Select_Option>;
  /** An aggregated array relationship */
  dig_permit_select_options_aggregate: Dig_Permit_Select_Option_Aggregate;
  /** An array relationship */
  dig_permit_tickets: Array<Dig_Permit_Ticket>;
  /** An aggregated array relationship */
  dig_permit_tickets_aggregate: Dig_Permit_Ticket_Aggregate;
  excavation_deeper_20_feet?: Maybe<Scalars['Boolean']>;
  /** An array relationship */
  images: Array<Image>;
  /** An aggregated array relationship */
  images_aggregate: Image_Aggregate;
  /** An object relationship */
  permit: Permit;
  permit_id: Scalars['uuid'];
  /** An object relationship */
  soil_type?: Maybe<Select_Option>;
  soil_type_id?: Maybe<Scalars['uuid']>;
  updated_at: Scalars['timestamptz'];
  used_protection_system?: Maybe<Scalars['Boolean']>;
  utilities_identified?: Maybe<Scalars['Boolean']>;
  /** An object relationship */
  work_description: Text_Translation;
  work_description_id: Scalars['uuid'];
  work_description_text?: Maybe<Scalars['String']>;
  work_duration?: Maybe<Scalars['interval']>;
  /** An object relationship */
  work_location: Text_Translation;
  work_location_id: Scalars['uuid'];
  work_location_text?: Maybe<Scalars['String']>;
  work_start_at?: Maybe<Scalars['timestamptz']>;
};


/** columns and relationships of "dig_permit" */
export type Dig_PermitDig_Permit_Select_OptionsArgs = {
  distinct_on?: Maybe<Array<Dig_Permit_Select_Option_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Dig_Permit_Select_Option_Order_By>>;
  where?: Maybe<Dig_Permit_Select_Option_Bool_Exp>;
};


/** columns and relationships of "dig_permit" */
export type Dig_PermitDig_Permit_Select_Options_AggregateArgs = {
  distinct_on?: Maybe<Array<Dig_Permit_Select_Option_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Dig_Permit_Select_Option_Order_By>>;
  where?: Maybe<Dig_Permit_Select_Option_Bool_Exp>;
};


/** columns and relationships of "dig_permit" */
export type Dig_PermitDig_Permit_TicketsArgs = {
  distinct_on?: Maybe<Array<Dig_Permit_Ticket_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Dig_Permit_Ticket_Order_By>>;
  where?: Maybe<Dig_Permit_Ticket_Bool_Exp>;
};


/** columns and relationships of "dig_permit" */
export type Dig_PermitDig_Permit_Tickets_AggregateArgs = {
  distinct_on?: Maybe<Array<Dig_Permit_Ticket_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Dig_Permit_Ticket_Order_By>>;
  where?: Maybe<Dig_Permit_Ticket_Bool_Exp>;
};


/** columns and relationships of "dig_permit" */
export type Dig_PermitImagesArgs = {
  distinct_on?: Maybe<Array<Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Image_Order_By>>;
  where?: Maybe<Image_Bool_Exp>;
};


/** columns and relationships of "dig_permit" */
export type Dig_PermitImages_AggregateArgs = {
  distinct_on?: Maybe<Array<Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Image_Order_By>>;
  where?: Maybe<Image_Bool_Exp>;
};

/** aggregated selection of "dig_permit" */
export type Dig_Permit_Aggregate = {
   __typename?: 'dig_permit_aggregate';
  aggregate?: Maybe<Dig_Permit_Aggregate_Fields>;
  nodes: Array<Dig_Permit>;
};

/** aggregate fields of "dig_permit" */
export type Dig_Permit_Aggregate_Fields = {
   __typename?: 'dig_permit_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Dig_Permit_Max_Fields>;
  min?: Maybe<Dig_Permit_Min_Fields>;
};


/** aggregate fields of "dig_permit" */
export type Dig_Permit_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Dig_Permit_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "dig_permit" */
export type Dig_Permit_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Dig_Permit_Max_Order_By>;
  min?: Maybe<Dig_Permit_Min_Order_By>;
};

/** input type for inserting array relation for remote table "dig_permit" */
export type Dig_Permit_Arr_Rel_Insert_Input = {
  data: Array<Dig_Permit_Insert_Input>;
  on_conflict?: Maybe<Dig_Permit_On_Conflict>;
};

/** Boolean expression to filter rows from the table "dig_permit". All fields are combined with a logical 'AND'. */
export type Dig_Permit_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Dig_Permit_Bool_Exp>>>;
  _not?: Maybe<Dig_Permit_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Dig_Permit_Bool_Exp>>>;
  applicant_project_worker?: Maybe<Project_Worker_Bool_Exp>;
  applicant_project_worker_id?: Maybe<Uuid_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  did_utility_locates?: Maybe<Boolean_Comparison_Exp>;
  dig_permit_select_options?: Maybe<Dig_Permit_Select_Option_Bool_Exp>;
  dig_permit_tickets?: Maybe<Dig_Permit_Ticket_Bool_Exp>;
  excavation_deeper_20_feet?: Maybe<Boolean_Comparison_Exp>;
  images?: Maybe<Image_Bool_Exp>;
  permit?: Maybe<Permit_Bool_Exp>;
  permit_id?: Maybe<Uuid_Comparison_Exp>;
  soil_type?: Maybe<Select_Option_Bool_Exp>;
  soil_type_id?: Maybe<Uuid_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  used_protection_system?: Maybe<Boolean_Comparison_Exp>;
  utilities_identified?: Maybe<Boolean_Comparison_Exp>;
  work_description?: Maybe<Text_Translation_Bool_Exp>;
  work_description_id?: Maybe<Uuid_Comparison_Exp>;
  work_description_text?: Maybe<String_Comparison_Exp>;
  work_duration?: Maybe<Interval_Comparison_Exp>;
  work_location?: Maybe<Text_Translation_Bool_Exp>;
  work_location_id?: Maybe<Uuid_Comparison_Exp>;
  work_location_text?: Maybe<String_Comparison_Exp>;
  work_start_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "dig_permit" */
export enum Dig_Permit_Constraint {
  /** unique or primary key constraint */
  DigPermitPkey = 'dig_permit_pkey'
}

/** input type for inserting data into table "dig_permit" */
export type Dig_Permit_Insert_Input = {
  applicant_project_worker?: Maybe<Project_Worker_Obj_Rel_Insert_Input>;
  applicant_project_worker_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  did_utility_locates?: Maybe<Scalars['Boolean']>;
  dig_permit_select_options?: Maybe<Dig_Permit_Select_Option_Arr_Rel_Insert_Input>;
  dig_permit_tickets?: Maybe<Dig_Permit_Ticket_Arr_Rel_Insert_Input>;
  excavation_deeper_20_feet?: Maybe<Scalars['Boolean']>;
  images?: Maybe<Image_Arr_Rel_Insert_Input>;
  permit?: Maybe<Permit_Obj_Rel_Insert_Input>;
  permit_id?: Maybe<Scalars['uuid']>;
  soil_type?: Maybe<Select_Option_Obj_Rel_Insert_Input>;
  soil_type_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  used_protection_system?: Maybe<Scalars['Boolean']>;
  utilities_identified?: Maybe<Scalars['Boolean']>;
  work_description?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  work_description_id?: Maybe<Scalars['uuid']>;
  work_description_text?: Maybe<Scalars['String']>;
  work_duration?: Maybe<Scalars['interval']>;
  work_location?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  work_location_id?: Maybe<Scalars['uuid']>;
  work_location_text?: Maybe<Scalars['String']>;
  work_start_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate max on columns */
export type Dig_Permit_Max_Fields = {
   __typename?: 'dig_permit_max_fields';
  applicant_project_worker_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  permit_id?: Maybe<Scalars['uuid']>;
  soil_type_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  work_description_id?: Maybe<Scalars['uuid']>;
  work_description_text?: Maybe<Scalars['String']>;
  work_location_id?: Maybe<Scalars['uuid']>;
  work_location_text?: Maybe<Scalars['String']>;
  work_start_at?: Maybe<Scalars['timestamptz']>;
};

/** order by max() on columns of table "dig_permit" */
export type Dig_Permit_Max_Order_By = {
  applicant_project_worker_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  permit_id?: Maybe<Order_By>;
  soil_type_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  work_description_id?: Maybe<Order_By>;
  work_description_text?: Maybe<Order_By>;
  work_location_id?: Maybe<Order_By>;
  work_location_text?: Maybe<Order_By>;
  work_start_at?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Dig_Permit_Min_Fields = {
   __typename?: 'dig_permit_min_fields';
  applicant_project_worker_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  permit_id?: Maybe<Scalars['uuid']>;
  soil_type_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  work_description_id?: Maybe<Scalars['uuid']>;
  work_description_text?: Maybe<Scalars['String']>;
  work_location_id?: Maybe<Scalars['uuid']>;
  work_location_text?: Maybe<Scalars['String']>;
  work_start_at?: Maybe<Scalars['timestamptz']>;
};

/** order by min() on columns of table "dig_permit" */
export type Dig_Permit_Min_Order_By = {
  applicant_project_worker_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  permit_id?: Maybe<Order_By>;
  soil_type_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  work_description_id?: Maybe<Order_By>;
  work_description_text?: Maybe<Order_By>;
  work_location_id?: Maybe<Order_By>;
  work_location_text?: Maybe<Order_By>;
  work_start_at?: Maybe<Order_By>;
};

/** response of any mutation on the table "dig_permit" */
export type Dig_Permit_Mutation_Response = {
   __typename?: 'dig_permit_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Dig_Permit>;
};

/** input type for inserting object relation for remote table "dig_permit" */
export type Dig_Permit_Obj_Rel_Insert_Input = {
  data: Dig_Permit_Insert_Input;
  on_conflict?: Maybe<Dig_Permit_On_Conflict>;
};

/** on conflict condition type for table "dig_permit" */
export type Dig_Permit_On_Conflict = {
  constraint: Dig_Permit_Constraint;
  update_columns: Array<Dig_Permit_Update_Column>;
  where?: Maybe<Dig_Permit_Bool_Exp>;
};

/** ordering options when selecting data from "dig_permit" */
export type Dig_Permit_Order_By = {
  applicant_project_worker?: Maybe<Project_Worker_Order_By>;
  applicant_project_worker_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  did_utility_locates?: Maybe<Order_By>;
  dig_permit_select_options_aggregate?: Maybe<Dig_Permit_Select_Option_Aggregate_Order_By>;
  dig_permit_tickets_aggregate?: Maybe<Dig_Permit_Ticket_Aggregate_Order_By>;
  excavation_deeper_20_feet?: Maybe<Order_By>;
  images_aggregate?: Maybe<Image_Aggregate_Order_By>;
  permit?: Maybe<Permit_Order_By>;
  permit_id?: Maybe<Order_By>;
  soil_type?: Maybe<Select_Option_Order_By>;
  soil_type_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  used_protection_system?: Maybe<Order_By>;
  utilities_identified?: Maybe<Order_By>;
  work_description?: Maybe<Text_Translation_Order_By>;
  work_description_id?: Maybe<Order_By>;
  work_description_text?: Maybe<Order_By>;
  work_duration?: Maybe<Order_By>;
  work_location?: Maybe<Text_Translation_Order_By>;
  work_location_id?: Maybe<Order_By>;
  work_location_text?: Maybe<Order_By>;
  work_start_at?: Maybe<Order_By>;
};

/** primary key columns input for table: "dig_permit" */
export type Dig_Permit_Pk_Columns_Input = {
  permit_id: Scalars['uuid'];
};

/** select columns of table "dig_permit" */
export enum Dig_Permit_Select_Column {
  /** column name */
  ApplicantProjectWorkerId = 'applicant_project_worker_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DidUtilityLocates = 'did_utility_locates',
  /** column name */
  ExcavationDeeper_20Feet = 'excavation_deeper_20_feet',
  /** column name */
  PermitId = 'permit_id',
  /** column name */
  SoilTypeId = 'soil_type_id',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UsedProtectionSystem = 'used_protection_system',
  /** column name */
  UtilitiesIdentified = 'utilities_identified',
  /** column name */
  WorkDescriptionId = 'work_description_id',
  /** column name */
  WorkDescriptionText = 'work_description_text',
  /** column name */
  WorkDuration = 'work_duration',
  /** column name */
  WorkLocationId = 'work_location_id',
  /** column name */
  WorkLocationText = 'work_location_text',
  /** column name */
  WorkStartAt = 'work_start_at'
}

/** columns and relationships of "dig_permit_select_option" */
export type Dig_Permit_Select_Option = {
   __typename?: 'dig_permit_select_option';
  created_at: Scalars['timestamptz'];
  /** An object relationship */
  dig_permit: Dig_Permit;
  id: Scalars['uuid'];
  permit_id: Scalars['uuid'];
  /** An object relationship */
  select_option: Select_Option;
  select_option_id: Scalars['uuid'];
};

/** aggregated selection of "dig_permit_select_option" */
export type Dig_Permit_Select_Option_Aggregate = {
   __typename?: 'dig_permit_select_option_aggregate';
  aggregate?: Maybe<Dig_Permit_Select_Option_Aggregate_Fields>;
  nodes: Array<Dig_Permit_Select_Option>;
};

/** aggregate fields of "dig_permit_select_option" */
export type Dig_Permit_Select_Option_Aggregate_Fields = {
   __typename?: 'dig_permit_select_option_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Dig_Permit_Select_Option_Max_Fields>;
  min?: Maybe<Dig_Permit_Select_Option_Min_Fields>;
};


/** aggregate fields of "dig_permit_select_option" */
export type Dig_Permit_Select_Option_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Dig_Permit_Select_Option_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "dig_permit_select_option" */
export type Dig_Permit_Select_Option_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Dig_Permit_Select_Option_Max_Order_By>;
  min?: Maybe<Dig_Permit_Select_Option_Min_Order_By>;
};

/** input type for inserting array relation for remote table "dig_permit_select_option" */
export type Dig_Permit_Select_Option_Arr_Rel_Insert_Input = {
  data: Array<Dig_Permit_Select_Option_Insert_Input>;
  on_conflict?: Maybe<Dig_Permit_Select_Option_On_Conflict>;
};

/** Boolean expression to filter rows from the table "dig_permit_select_option". All fields are combined with a logical 'AND'. */
export type Dig_Permit_Select_Option_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Dig_Permit_Select_Option_Bool_Exp>>>;
  _not?: Maybe<Dig_Permit_Select_Option_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Dig_Permit_Select_Option_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  dig_permit?: Maybe<Dig_Permit_Bool_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  permit_id?: Maybe<Uuid_Comparison_Exp>;
  select_option?: Maybe<Select_Option_Bool_Exp>;
  select_option_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "dig_permit_select_option" */
export enum Dig_Permit_Select_Option_Constraint {
  /** unique or primary key constraint */
  DigPermitSelectOptionPkey = 'dig_permit_select_option_pkey'
}

/** input type for inserting data into table "dig_permit_select_option" */
export type Dig_Permit_Select_Option_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  dig_permit?: Maybe<Dig_Permit_Obj_Rel_Insert_Input>;
  id?: Maybe<Scalars['uuid']>;
  permit_id?: Maybe<Scalars['uuid']>;
  select_option?: Maybe<Select_Option_Obj_Rel_Insert_Input>;
  select_option_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Dig_Permit_Select_Option_Max_Fields = {
   __typename?: 'dig_permit_select_option_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  permit_id?: Maybe<Scalars['uuid']>;
  select_option_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "dig_permit_select_option" */
export type Dig_Permit_Select_Option_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  permit_id?: Maybe<Order_By>;
  select_option_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Dig_Permit_Select_Option_Min_Fields = {
   __typename?: 'dig_permit_select_option_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  permit_id?: Maybe<Scalars['uuid']>;
  select_option_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "dig_permit_select_option" */
export type Dig_Permit_Select_Option_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  permit_id?: Maybe<Order_By>;
  select_option_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "dig_permit_select_option" */
export type Dig_Permit_Select_Option_Mutation_Response = {
   __typename?: 'dig_permit_select_option_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Dig_Permit_Select_Option>;
};

/** input type for inserting object relation for remote table "dig_permit_select_option" */
export type Dig_Permit_Select_Option_Obj_Rel_Insert_Input = {
  data: Dig_Permit_Select_Option_Insert_Input;
  on_conflict?: Maybe<Dig_Permit_Select_Option_On_Conflict>;
};

/** on conflict condition type for table "dig_permit_select_option" */
export type Dig_Permit_Select_Option_On_Conflict = {
  constraint: Dig_Permit_Select_Option_Constraint;
  update_columns: Array<Dig_Permit_Select_Option_Update_Column>;
  where?: Maybe<Dig_Permit_Select_Option_Bool_Exp>;
};

/** ordering options when selecting data from "dig_permit_select_option" */
export type Dig_Permit_Select_Option_Order_By = {
  created_at?: Maybe<Order_By>;
  dig_permit?: Maybe<Dig_Permit_Order_By>;
  id?: Maybe<Order_By>;
  permit_id?: Maybe<Order_By>;
  select_option?: Maybe<Select_Option_Order_By>;
  select_option_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "dig_permit_select_option" */
export type Dig_Permit_Select_Option_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "dig_permit_select_option" */
export enum Dig_Permit_Select_Option_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  PermitId = 'permit_id',
  /** column name */
  SelectOptionId = 'select_option_id'
}

/** input type for updating data in table "dig_permit_select_option" */
export type Dig_Permit_Select_Option_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  permit_id?: Maybe<Scalars['uuid']>;
  select_option_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "dig_permit_select_option" */
export enum Dig_Permit_Select_Option_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  PermitId = 'permit_id',
  /** column name */
  SelectOptionId = 'select_option_id'
}

/** input type for updating data in table "dig_permit" */
export type Dig_Permit_Set_Input = {
  applicant_project_worker_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  did_utility_locates?: Maybe<Scalars['Boolean']>;
  excavation_deeper_20_feet?: Maybe<Scalars['Boolean']>;
  permit_id?: Maybe<Scalars['uuid']>;
  soil_type_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  used_protection_system?: Maybe<Scalars['Boolean']>;
  utilities_identified?: Maybe<Scalars['Boolean']>;
  work_description_id?: Maybe<Scalars['uuid']>;
  work_description_text?: Maybe<Scalars['String']>;
  work_duration?: Maybe<Scalars['interval']>;
  work_location_id?: Maybe<Scalars['uuid']>;
  work_location_text?: Maybe<Scalars['String']>;
  work_start_at?: Maybe<Scalars['timestamptz']>;
};

/** columns and relationships of "dig_permit_ticket" */
export type Dig_Permit_Ticket = {
   __typename?: 'dig_permit_ticket';
  company_name?: Maybe<Scalars['String']>;
  created_at: Scalars['timestamptz'];
  date_locate_performed?: Maybe<Scalars['timestamptz']>;
  id: Scalars['uuid'];
  permit_id: Scalars['uuid'];
  public_or_private?: Maybe<Scalars['String']>;
  sort_index: Scalars['numeric'];
  ticket_number?: Maybe<Scalars['String']>;
};

/** aggregated selection of "dig_permit_ticket" */
export type Dig_Permit_Ticket_Aggregate = {
   __typename?: 'dig_permit_ticket_aggregate';
  aggregate?: Maybe<Dig_Permit_Ticket_Aggregate_Fields>;
  nodes: Array<Dig_Permit_Ticket>;
};

/** aggregate fields of "dig_permit_ticket" */
export type Dig_Permit_Ticket_Aggregate_Fields = {
   __typename?: 'dig_permit_ticket_aggregate_fields';
  avg?: Maybe<Dig_Permit_Ticket_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Dig_Permit_Ticket_Max_Fields>;
  min?: Maybe<Dig_Permit_Ticket_Min_Fields>;
  stddev?: Maybe<Dig_Permit_Ticket_Stddev_Fields>;
  stddev_pop?: Maybe<Dig_Permit_Ticket_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Dig_Permit_Ticket_Stddev_Samp_Fields>;
  sum?: Maybe<Dig_Permit_Ticket_Sum_Fields>;
  var_pop?: Maybe<Dig_Permit_Ticket_Var_Pop_Fields>;
  var_samp?: Maybe<Dig_Permit_Ticket_Var_Samp_Fields>;
  variance?: Maybe<Dig_Permit_Ticket_Variance_Fields>;
};


/** aggregate fields of "dig_permit_ticket" */
export type Dig_Permit_Ticket_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Dig_Permit_Ticket_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "dig_permit_ticket" */
export type Dig_Permit_Ticket_Aggregate_Order_By = {
  avg?: Maybe<Dig_Permit_Ticket_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Dig_Permit_Ticket_Max_Order_By>;
  min?: Maybe<Dig_Permit_Ticket_Min_Order_By>;
  stddev?: Maybe<Dig_Permit_Ticket_Stddev_Order_By>;
  stddev_pop?: Maybe<Dig_Permit_Ticket_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Dig_Permit_Ticket_Stddev_Samp_Order_By>;
  sum?: Maybe<Dig_Permit_Ticket_Sum_Order_By>;
  var_pop?: Maybe<Dig_Permit_Ticket_Var_Pop_Order_By>;
  var_samp?: Maybe<Dig_Permit_Ticket_Var_Samp_Order_By>;
  variance?: Maybe<Dig_Permit_Ticket_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "dig_permit_ticket" */
export type Dig_Permit_Ticket_Arr_Rel_Insert_Input = {
  data: Array<Dig_Permit_Ticket_Insert_Input>;
  on_conflict?: Maybe<Dig_Permit_Ticket_On_Conflict>;
};

/** aggregate avg on columns */
export type Dig_Permit_Ticket_Avg_Fields = {
   __typename?: 'dig_permit_ticket_avg_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "dig_permit_ticket" */
export type Dig_Permit_Ticket_Avg_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "dig_permit_ticket". All fields are combined with a logical 'AND'. */
export type Dig_Permit_Ticket_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Dig_Permit_Ticket_Bool_Exp>>>;
  _not?: Maybe<Dig_Permit_Ticket_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Dig_Permit_Ticket_Bool_Exp>>>;
  company_name?: Maybe<String_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  date_locate_performed?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  permit_id?: Maybe<Uuid_Comparison_Exp>;
  public_or_private?: Maybe<String_Comparison_Exp>;
  sort_index?: Maybe<Numeric_Comparison_Exp>;
  ticket_number?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "dig_permit_ticket" */
export enum Dig_Permit_Ticket_Constraint {
  /** unique or primary key constraint */
  DigPermitTicketPkey = 'dig_permit_ticket_pkey'
}

/** input type for incrementing integer column in table "dig_permit_ticket" */
export type Dig_Permit_Ticket_Inc_Input = {
  sort_index?: Maybe<Scalars['numeric']>;
};

/** input type for inserting data into table "dig_permit_ticket" */
export type Dig_Permit_Ticket_Insert_Input = {
  company_name?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  date_locate_performed?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  permit_id?: Maybe<Scalars['uuid']>;
  public_or_private?: Maybe<Scalars['String']>;
  sort_index?: Maybe<Scalars['numeric']>;
  ticket_number?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Dig_Permit_Ticket_Max_Fields = {
   __typename?: 'dig_permit_ticket_max_fields';
  company_name?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  date_locate_performed?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  permit_id?: Maybe<Scalars['uuid']>;
  public_or_private?: Maybe<Scalars['String']>;
  sort_index?: Maybe<Scalars['numeric']>;
  ticket_number?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "dig_permit_ticket" */
export type Dig_Permit_Ticket_Max_Order_By = {
  company_name?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  date_locate_performed?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  permit_id?: Maybe<Order_By>;
  public_or_private?: Maybe<Order_By>;
  sort_index?: Maybe<Order_By>;
  ticket_number?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Dig_Permit_Ticket_Min_Fields = {
   __typename?: 'dig_permit_ticket_min_fields';
  company_name?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  date_locate_performed?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  permit_id?: Maybe<Scalars['uuid']>;
  public_or_private?: Maybe<Scalars['String']>;
  sort_index?: Maybe<Scalars['numeric']>;
  ticket_number?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "dig_permit_ticket" */
export type Dig_Permit_Ticket_Min_Order_By = {
  company_name?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  date_locate_performed?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  permit_id?: Maybe<Order_By>;
  public_or_private?: Maybe<Order_By>;
  sort_index?: Maybe<Order_By>;
  ticket_number?: Maybe<Order_By>;
};

/** response of any mutation on the table "dig_permit_ticket" */
export type Dig_Permit_Ticket_Mutation_Response = {
   __typename?: 'dig_permit_ticket_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Dig_Permit_Ticket>;
};

/** input type for inserting object relation for remote table "dig_permit_ticket" */
export type Dig_Permit_Ticket_Obj_Rel_Insert_Input = {
  data: Dig_Permit_Ticket_Insert_Input;
  on_conflict?: Maybe<Dig_Permit_Ticket_On_Conflict>;
};

/** on conflict condition type for table "dig_permit_ticket" */
export type Dig_Permit_Ticket_On_Conflict = {
  constraint: Dig_Permit_Ticket_Constraint;
  update_columns: Array<Dig_Permit_Ticket_Update_Column>;
  where?: Maybe<Dig_Permit_Ticket_Bool_Exp>;
};

/** ordering options when selecting data from "dig_permit_ticket" */
export type Dig_Permit_Ticket_Order_By = {
  company_name?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  date_locate_performed?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  permit_id?: Maybe<Order_By>;
  public_or_private?: Maybe<Order_By>;
  sort_index?: Maybe<Order_By>;
  ticket_number?: Maybe<Order_By>;
};

/** primary key columns input for table: "dig_permit_ticket" */
export type Dig_Permit_Ticket_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "dig_permit_ticket" */
export enum Dig_Permit_Ticket_Select_Column {
  /** column name */
  CompanyName = 'company_name',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DateLocatePerformed = 'date_locate_performed',
  /** column name */
  Id = 'id',
  /** column name */
  PermitId = 'permit_id',
  /** column name */
  PublicOrPrivate = 'public_or_private',
  /** column name */
  SortIndex = 'sort_index',
  /** column name */
  TicketNumber = 'ticket_number'
}

/** input type for updating data in table "dig_permit_ticket" */
export type Dig_Permit_Ticket_Set_Input = {
  company_name?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  date_locate_performed?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  permit_id?: Maybe<Scalars['uuid']>;
  public_or_private?: Maybe<Scalars['String']>;
  sort_index?: Maybe<Scalars['numeric']>;
  ticket_number?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Dig_Permit_Ticket_Stddev_Fields = {
   __typename?: 'dig_permit_ticket_stddev_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "dig_permit_ticket" */
export type Dig_Permit_Ticket_Stddev_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Dig_Permit_Ticket_Stddev_Pop_Fields = {
   __typename?: 'dig_permit_ticket_stddev_pop_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "dig_permit_ticket" */
export type Dig_Permit_Ticket_Stddev_Pop_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Dig_Permit_Ticket_Stddev_Samp_Fields = {
   __typename?: 'dig_permit_ticket_stddev_samp_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "dig_permit_ticket" */
export type Dig_Permit_Ticket_Stddev_Samp_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Dig_Permit_Ticket_Sum_Fields = {
   __typename?: 'dig_permit_ticket_sum_fields';
  sort_index?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "dig_permit_ticket" */
export type Dig_Permit_Ticket_Sum_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** update columns of table "dig_permit_ticket" */
export enum Dig_Permit_Ticket_Update_Column {
  /** column name */
  CompanyName = 'company_name',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DateLocatePerformed = 'date_locate_performed',
  /** column name */
  Id = 'id',
  /** column name */
  PermitId = 'permit_id',
  /** column name */
  PublicOrPrivate = 'public_or_private',
  /** column name */
  SortIndex = 'sort_index',
  /** column name */
  TicketNumber = 'ticket_number'
}

/** aggregate var_pop on columns */
export type Dig_Permit_Ticket_Var_Pop_Fields = {
   __typename?: 'dig_permit_ticket_var_pop_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "dig_permit_ticket" */
export type Dig_Permit_Ticket_Var_Pop_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Dig_Permit_Ticket_Var_Samp_Fields = {
   __typename?: 'dig_permit_ticket_var_samp_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "dig_permit_ticket" */
export type Dig_Permit_Ticket_Var_Samp_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Dig_Permit_Ticket_Variance_Fields = {
   __typename?: 'dig_permit_ticket_variance_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "dig_permit_ticket" */
export type Dig_Permit_Ticket_Variance_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** update columns of table "dig_permit" */
export enum Dig_Permit_Update_Column {
  /** column name */
  ApplicantProjectWorkerId = 'applicant_project_worker_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DidUtilityLocates = 'did_utility_locates',
  /** column name */
  ExcavationDeeper_20Feet = 'excavation_deeper_20_feet',
  /** column name */
  PermitId = 'permit_id',
  /** column name */
  SoilTypeId = 'soil_type_id',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UsedProtectionSystem = 'used_protection_system',
  /** column name */
  UtilitiesIdentified = 'utilities_identified',
  /** column name */
  WorkDescriptionId = 'work_description_id',
  /** column name */
  WorkDescriptionText = 'work_description_text',
  /** column name */
  WorkDuration = 'work_duration',
  /** column name */
  WorkLocationId = 'work_location_id',
  /** column name */
  WorkLocationText = 'work_location_text',
  /** column name */
  WorkStartAt = 'work_start_at'
}

export type EmailChecklistNotifyeesInput = {
  checklistItemId: Scalars['String'];
  projectId: Scalars['String'];
  submitterUserId: Scalars['String'];
};

export type EmailCovidSpreadsheetInput = {
  endAt: Scalars['String'];
  projectId: Scalars['String'];
  restrictedSinceDate: Scalars['String'];
  startAt: Scalars['String'];
};

export type EmailCovidTestedPositiveInput = {
  projectCovidTestedPositiveWorkerId: Scalars['String'];
};

export type EmailCovidWorkerAuditSpreadsheetInput = {
  end: Scalars['String'];
  projectId: Scalars['String'];
  start: Scalars['String'];
};

export type EmailDailyLogCommentInput = {
  dailyLogCommentId: Scalars['String'];
};

export type EmailDailyLogsPdfInput = {
  date: Scalars['String'];
  emailRecipients: Array<Scalars['String']>;
  projectId: Scalars['String'];
  subcontractorId?: Maybe<Scalars['String']>;
  type: Scalars['String'];
};

export type EmailDailyReportPdfInput = {
  dailyReportId: Scalars['String'];
  emailRecipients: Array<Scalars['String']>;
};

export type EmailDashboardSpreadsheetInput = {
  endAt: Scalars['String'];
  projectId: Scalars['String'];
  startAt: Scalars['String'];
  timezone?: Maybe<Scalars['String']>;
};

export type EmailFailedCovidCertificationInput = {
  projectId: Scalars['String'];
  userName?: Maybe<Scalars['String']>;
};

export type EmailPermitPdfInput = {
  emailRecipients?: Maybe<Array<Scalars['String']>>;
  permitId: Scalars['String'];
  permitType: Scalars['String'];
};

export type EmailSafetyReportPdfInput = {
  emailRecipients: Array<Scalars['String']>;
  safetyReportId: Scalars['String'];
};

export type EmailToolboxTalkPdfInput = {
  emailRecipients: Array<Scalars['String']>;
  toolboxTalkId: Scalars['String'];
};

/** columns and relationships of "employee_title" */
export type Employee_Title = {
   __typename?: 'employee_title';
  created_at: Scalars['timestamptz'];
  /** An array relationship */
  employees: Array<General_Contractor_Employee>;
  /** An aggregated array relationship */
  employees_aggregate: General_Contractor_Employee_Aggregate;
  id: Scalars['uuid'];
  /** An object relationship */
  name: Text_Translation;
  name_id: Scalars['uuid'];
  name_text: Scalars['String'];
};


/** columns and relationships of "employee_title" */
export type Employee_TitleEmployeesArgs = {
  distinct_on?: Maybe<Array<General_Contractor_Employee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<General_Contractor_Employee_Order_By>>;
  where?: Maybe<General_Contractor_Employee_Bool_Exp>;
};


/** columns and relationships of "employee_title" */
export type Employee_TitleEmployees_AggregateArgs = {
  distinct_on?: Maybe<Array<General_Contractor_Employee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<General_Contractor_Employee_Order_By>>;
  where?: Maybe<General_Contractor_Employee_Bool_Exp>;
};

/** aggregated selection of "employee_title" */
export type Employee_Title_Aggregate = {
   __typename?: 'employee_title_aggregate';
  aggregate?: Maybe<Employee_Title_Aggregate_Fields>;
  nodes: Array<Employee_Title>;
};

/** aggregate fields of "employee_title" */
export type Employee_Title_Aggregate_Fields = {
   __typename?: 'employee_title_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Employee_Title_Max_Fields>;
  min?: Maybe<Employee_Title_Min_Fields>;
};


/** aggregate fields of "employee_title" */
export type Employee_Title_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Employee_Title_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "employee_title" */
export type Employee_Title_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Employee_Title_Max_Order_By>;
  min?: Maybe<Employee_Title_Min_Order_By>;
};

/** input type for inserting array relation for remote table "employee_title" */
export type Employee_Title_Arr_Rel_Insert_Input = {
  data: Array<Employee_Title_Insert_Input>;
  on_conflict?: Maybe<Employee_Title_On_Conflict>;
};

/** Boolean expression to filter rows from the table "employee_title". All fields are combined with a logical 'AND'. */
export type Employee_Title_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Employee_Title_Bool_Exp>>>;
  _not?: Maybe<Employee_Title_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Employee_Title_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  employees?: Maybe<General_Contractor_Employee_Bool_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  name?: Maybe<Text_Translation_Bool_Exp>;
  name_id?: Maybe<Uuid_Comparison_Exp>;
  name_text?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "employee_title" */
export enum Employee_Title_Constraint {
  /** unique or primary key constraint */
  EmployeeTitleIdKey = 'employee_title_id_key',
  /** unique or primary key constraint */
  EmployeeTitlePkey = 'employee_title_pkey',
  /** unique or primary key constraint */
  EmployeeTitleTitleKey = 'employee_title_title_key'
}

/** input type for inserting data into table "employee_title" */
export type Employee_Title_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  employees?: Maybe<General_Contractor_Employee_Arr_Rel_Insert_Input>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  name_id?: Maybe<Scalars['uuid']>;
  name_text?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Employee_Title_Max_Fields = {
   __typename?: 'employee_title_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  name_id?: Maybe<Scalars['uuid']>;
  name_text?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "employee_title" */
export type Employee_Title_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name_id?: Maybe<Order_By>;
  name_text?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Employee_Title_Min_Fields = {
   __typename?: 'employee_title_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  name_id?: Maybe<Scalars['uuid']>;
  name_text?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "employee_title" */
export type Employee_Title_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name_id?: Maybe<Order_By>;
  name_text?: Maybe<Order_By>;
};

/** response of any mutation on the table "employee_title" */
export type Employee_Title_Mutation_Response = {
   __typename?: 'employee_title_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Employee_Title>;
};

/** input type for inserting object relation for remote table "employee_title" */
export type Employee_Title_Obj_Rel_Insert_Input = {
  data: Employee_Title_Insert_Input;
  on_conflict?: Maybe<Employee_Title_On_Conflict>;
};

/** on conflict condition type for table "employee_title" */
export type Employee_Title_On_Conflict = {
  constraint: Employee_Title_Constraint;
  update_columns: Array<Employee_Title_Update_Column>;
  where?: Maybe<Employee_Title_Bool_Exp>;
};

/** ordering options when selecting data from "employee_title" */
export type Employee_Title_Order_By = {
  created_at?: Maybe<Order_By>;
  employees_aggregate?: Maybe<General_Contractor_Employee_Aggregate_Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Text_Translation_Order_By>;
  name_id?: Maybe<Order_By>;
  name_text?: Maybe<Order_By>;
};

/** primary key columns input for table: "employee_title" */
export type Employee_Title_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "employee_title" */
export enum Employee_Title_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  NameId = 'name_id',
  /** column name */
  NameText = 'name_text'
}

/** input type for updating data in table "employee_title" */
export type Employee_Title_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  name_id?: Maybe<Scalars['uuid']>;
  name_text?: Maybe<Scalars['String']>;
};

/** update columns of table "employee_title" */
export enum Employee_Title_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  NameId = 'name_id',
  /** column name */
  NameText = 'name_text'
}

export type EmployeeData = {
   __typename?: 'EmployeeData';
  user?: Maybe<User>;
  currentEmployeeProject?: Maybe<Project_Employee>;
};

/** columns and relationships of "expo_push_token" */
export type Expo_Push_Token = {
   __typename?: 'expo_push_token';
  created_at: Scalars['timestamptz'];
  id: Scalars['uuid'];
  token: Scalars['String'];
  /** An object relationship */
  user: User;
  user_id: Scalars['uuid'];
};

/** aggregated selection of "expo_push_token" */
export type Expo_Push_Token_Aggregate = {
   __typename?: 'expo_push_token_aggregate';
  aggregate?: Maybe<Expo_Push_Token_Aggregate_Fields>;
  nodes: Array<Expo_Push_Token>;
};

/** aggregate fields of "expo_push_token" */
export type Expo_Push_Token_Aggregate_Fields = {
   __typename?: 'expo_push_token_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Expo_Push_Token_Max_Fields>;
  min?: Maybe<Expo_Push_Token_Min_Fields>;
};


/** aggregate fields of "expo_push_token" */
export type Expo_Push_Token_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Expo_Push_Token_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "expo_push_token" */
export type Expo_Push_Token_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Expo_Push_Token_Max_Order_By>;
  min?: Maybe<Expo_Push_Token_Min_Order_By>;
};

/** input type for inserting array relation for remote table "expo_push_token" */
export type Expo_Push_Token_Arr_Rel_Insert_Input = {
  data: Array<Expo_Push_Token_Insert_Input>;
  on_conflict?: Maybe<Expo_Push_Token_On_Conflict>;
};

/** Boolean expression to filter rows from the table "expo_push_token". All fields are combined with a logical 'AND'. */
export type Expo_Push_Token_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Expo_Push_Token_Bool_Exp>>>;
  _not?: Maybe<Expo_Push_Token_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Expo_Push_Token_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  token?: Maybe<String_Comparison_Exp>;
  user?: Maybe<User_Bool_Exp>;
  user_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "expo_push_token" */
export enum Expo_Push_Token_Constraint {
  /** unique or primary key constraint */
  ExpoPushTokenPkey = 'expo_push_token_pkey',
  /** unique or primary key constraint */
  ExpoPushTokenTokenUserIdKey = 'expo_push_token_token_user_id_key'
}

/** input type for inserting data into table "expo_push_token" */
export type Expo_Push_Token_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  token?: Maybe<Scalars['String']>;
  user?: Maybe<User_Obj_Rel_Insert_Input>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Expo_Push_Token_Max_Fields = {
   __typename?: 'expo_push_token_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  token?: Maybe<Scalars['String']>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "expo_push_token" */
export type Expo_Push_Token_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  token?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Expo_Push_Token_Min_Fields = {
   __typename?: 'expo_push_token_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  token?: Maybe<Scalars['String']>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "expo_push_token" */
export type Expo_Push_Token_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  token?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "expo_push_token" */
export type Expo_Push_Token_Mutation_Response = {
   __typename?: 'expo_push_token_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Expo_Push_Token>;
};

/** input type for inserting object relation for remote table "expo_push_token" */
export type Expo_Push_Token_Obj_Rel_Insert_Input = {
  data: Expo_Push_Token_Insert_Input;
  on_conflict?: Maybe<Expo_Push_Token_On_Conflict>;
};

/** on conflict condition type for table "expo_push_token" */
export type Expo_Push_Token_On_Conflict = {
  constraint: Expo_Push_Token_Constraint;
  update_columns: Array<Expo_Push_Token_Update_Column>;
  where?: Maybe<Expo_Push_Token_Bool_Exp>;
};

/** ordering options when selecting data from "expo_push_token" */
export type Expo_Push_Token_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  token?: Maybe<Order_By>;
  user?: Maybe<User_Order_By>;
  user_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "expo_push_token" */
export type Expo_Push_Token_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "expo_push_token" */
export enum Expo_Push_Token_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Token = 'token',
  /** column name */
  UserId = 'user_id'
}

/** input type for updating data in table "expo_push_token" */
export type Expo_Push_Token_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  token?: Maybe<Scalars['String']>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "expo_push_token" */
export enum Expo_Push_Token_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Token = 'token',
  /** column name */
  UserId = 'user_id'
}

/** columns and relationships of "feedback" */
export type Feedback = {
   __typename?: 'feedback';
  created_at: Scalars['timestamptz'];
  feedback: Scalars['String'];
  id: Scalars['uuid'];
  uid: Scalars['uuid'];
};

/** aggregated selection of "feedback" */
export type Feedback_Aggregate = {
   __typename?: 'feedback_aggregate';
  aggregate?: Maybe<Feedback_Aggregate_Fields>;
  nodes: Array<Feedback>;
};

/** aggregate fields of "feedback" */
export type Feedback_Aggregate_Fields = {
   __typename?: 'feedback_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Feedback_Max_Fields>;
  min?: Maybe<Feedback_Min_Fields>;
};


/** aggregate fields of "feedback" */
export type Feedback_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Feedback_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "feedback" */
export type Feedback_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Feedback_Max_Order_By>;
  min?: Maybe<Feedback_Min_Order_By>;
};

/** input type for inserting array relation for remote table "feedback" */
export type Feedback_Arr_Rel_Insert_Input = {
  data: Array<Feedback_Insert_Input>;
  on_conflict?: Maybe<Feedback_On_Conflict>;
};

/** Boolean expression to filter rows from the table "feedback". All fields are combined with a logical 'AND'. */
export type Feedback_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Feedback_Bool_Exp>>>;
  _not?: Maybe<Feedback_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Feedback_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  feedback?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  uid?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "feedback" */
export enum Feedback_Constraint {
  /** unique or primary key constraint */
  FeedbackPkey = 'feedback_pkey'
}

/** input type for inserting data into table "feedback" */
export type Feedback_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  feedback?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  uid?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Feedback_Max_Fields = {
   __typename?: 'feedback_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  feedback?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  uid?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "feedback" */
export type Feedback_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  feedback?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  uid?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Feedback_Min_Fields = {
   __typename?: 'feedback_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  feedback?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  uid?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "feedback" */
export type Feedback_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  feedback?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  uid?: Maybe<Order_By>;
};

/** response of any mutation on the table "feedback" */
export type Feedback_Mutation_Response = {
   __typename?: 'feedback_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Feedback>;
};

/** input type for inserting object relation for remote table "feedback" */
export type Feedback_Obj_Rel_Insert_Input = {
  data: Feedback_Insert_Input;
  on_conflict?: Maybe<Feedback_On_Conflict>;
};

/** on conflict condition type for table "feedback" */
export type Feedback_On_Conflict = {
  constraint: Feedback_Constraint;
  update_columns: Array<Feedback_Update_Column>;
  where?: Maybe<Feedback_Bool_Exp>;
};

/** ordering options when selecting data from "feedback" */
export type Feedback_Order_By = {
  created_at?: Maybe<Order_By>;
  feedback?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  uid?: Maybe<Order_By>;
};

/** primary key columns input for table: "feedback" */
export type Feedback_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "feedback" */
export enum Feedback_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Feedback = 'feedback',
  /** column name */
  Id = 'id',
  /** column name */
  Uid = 'uid'
}

/** input type for updating data in table "feedback" */
export type Feedback_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  feedback?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  uid?: Maybe<Scalars['uuid']>;
};

/** update columns of table "feedback" */
export enum Feedback_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Feedback = 'feedback',
  /** column name */
  Id = 'id',
  /** column name */
  Uid = 'uid'
}


/** expression to compare columns of type float8. All fields are combined with logical 'AND'. */
export type Float8_Comparison_Exp = {
  _eq?: Maybe<Scalars['float8']>;
  _gt?: Maybe<Scalars['float8']>;
  _gte?: Maybe<Scalars['float8']>;
  _in?: Maybe<Array<Scalars['float8']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['float8']>;
  _lte?: Maybe<Scalars['float8']>;
  _neq?: Maybe<Scalars['float8']>;
  _nin?: Maybe<Array<Scalars['float8']>>;
};

/** columns and relationships of "forgot_password_key" */
export type Forgot_Password_Key = {
   __typename?: 'forgot_password_key';
  created_at: Scalars['timestamptz'];
  expires_on: Scalars['timestamptz'];
  key: Scalars['uuid'];
  /** An object relationship */
  user: User;
  user_id: Scalars['uuid'];
};

/** aggregated selection of "forgot_password_key" */
export type Forgot_Password_Key_Aggregate = {
   __typename?: 'forgot_password_key_aggregate';
  aggregate?: Maybe<Forgot_Password_Key_Aggregate_Fields>;
  nodes: Array<Forgot_Password_Key>;
};

/** aggregate fields of "forgot_password_key" */
export type Forgot_Password_Key_Aggregate_Fields = {
   __typename?: 'forgot_password_key_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Forgot_Password_Key_Max_Fields>;
  min?: Maybe<Forgot_Password_Key_Min_Fields>;
};


/** aggregate fields of "forgot_password_key" */
export type Forgot_Password_Key_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Forgot_Password_Key_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "forgot_password_key" */
export type Forgot_Password_Key_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Forgot_Password_Key_Max_Order_By>;
  min?: Maybe<Forgot_Password_Key_Min_Order_By>;
};

/** input type for inserting array relation for remote table "forgot_password_key" */
export type Forgot_Password_Key_Arr_Rel_Insert_Input = {
  data: Array<Forgot_Password_Key_Insert_Input>;
  on_conflict?: Maybe<Forgot_Password_Key_On_Conflict>;
};

/** Boolean expression to filter rows from the table "forgot_password_key". All fields are combined with a logical 'AND'. */
export type Forgot_Password_Key_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Forgot_Password_Key_Bool_Exp>>>;
  _not?: Maybe<Forgot_Password_Key_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Forgot_Password_Key_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  expires_on?: Maybe<Timestamptz_Comparison_Exp>;
  key?: Maybe<Uuid_Comparison_Exp>;
  user?: Maybe<User_Bool_Exp>;
  user_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "forgot_password_key" */
export enum Forgot_Password_Key_Constraint {
  /** unique or primary key constraint */
  ForgotPasswordKeyPkey = 'forgot_password_key_pkey'
}

/** input type for inserting data into table "forgot_password_key" */
export type Forgot_Password_Key_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  expires_on?: Maybe<Scalars['timestamptz']>;
  key?: Maybe<Scalars['uuid']>;
  user?: Maybe<User_Obj_Rel_Insert_Input>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Forgot_Password_Key_Max_Fields = {
   __typename?: 'forgot_password_key_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  expires_on?: Maybe<Scalars['timestamptz']>;
  key?: Maybe<Scalars['uuid']>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "forgot_password_key" */
export type Forgot_Password_Key_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  expires_on?: Maybe<Order_By>;
  key?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Forgot_Password_Key_Min_Fields = {
   __typename?: 'forgot_password_key_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  expires_on?: Maybe<Scalars['timestamptz']>;
  key?: Maybe<Scalars['uuid']>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "forgot_password_key" */
export type Forgot_Password_Key_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  expires_on?: Maybe<Order_By>;
  key?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "forgot_password_key" */
export type Forgot_Password_Key_Mutation_Response = {
   __typename?: 'forgot_password_key_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Forgot_Password_Key>;
};

/** input type for inserting object relation for remote table "forgot_password_key" */
export type Forgot_Password_Key_Obj_Rel_Insert_Input = {
  data: Forgot_Password_Key_Insert_Input;
  on_conflict?: Maybe<Forgot_Password_Key_On_Conflict>;
};

/** on conflict condition type for table "forgot_password_key" */
export type Forgot_Password_Key_On_Conflict = {
  constraint: Forgot_Password_Key_Constraint;
  update_columns: Array<Forgot_Password_Key_Update_Column>;
  where?: Maybe<Forgot_Password_Key_Bool_Exp>;
};

/** ordering options when selecting data from "forgot_password_key" */
export type Forgot_Password_Key_Order_By = {
  created_at?: Maybe<Order_By>;
  expires_on?: Maybe<Order_By>;
  key?: Maybe<Order_By>;
  user?: Maybe<User_Order_By>;
  user_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "forgot_password_key" */
export type Forgot_Password_Key_Pk_Columns_Input = {
  key: Scalars['uuid'];
};

/** select columns of table "forgot_password_key" */
export enum Forgot_Password_Key_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  ExpiresOn = 'expires_on',
  /** column name */
  Key = 'key',
  /** column name */
  UserId = 'user_id'
}

/** input type for updating data in table "forgot_password_key" */
export type Forgot_Password_Key_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  expires_on?: Maybe<Scalars['timestamptz']>;
  key?: Maybe<Scalars['uuid']>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "forgot_password_key" */
export enum Forgot_Password_Key_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  ExpiresOn = 'expires_on',
  /** column name */
  Key = 'key',
  /** column name */
  UserId = 'user_id'
}

export type ForgotPasswordInput = {
  loginIdentifier: Scalars['String'];
};

/** columns and relationships of "gc_daily_checklist_item" */
export type Gc_Daily_Checklist_Item = {
   __typename?: 'gc_daily_checklist_item';
  /** An object relationship */
  checklist_item: Checklist_Item;
  checklist_item_id: Scalars['uuid'];
  created_at: Scalars['timestamptz'];
  date: Scalars['date'];
  /** An object relationship */
  employee: General_Contractor_Employee;
  id: Scalars['uuid'];
  /** An object relationship */
  project: Project;
  project_id: Scalars['uuid'];
  user_id: Scalars['uuid'];
};

/** aggregated selection of "gc_daily_checklist_item" */
export type Gc_Daily_Checklist_Item_Aggregate = {
   __typename?: 'gc_daily_checklist_item_aggregate';
  aggregate?: Maybe<Gc_Daily_Checklist_Item_Aggregate_Fields>;
  nodes: Array<Gc_Daily_Checklist_Item>;
};

/** aggregate fields of "gc_daily_checklist_item" */
export type Gc_Daily_Checklist_Item_Aggregate_Fields = {
   __typename?: 'gc_daily_checklist_item_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Gc_Daily_Checklist_Item_Max_Fields>;
  min?: Maybe<Gc_Daily_Checklist_Item_Min_Fields>;
};


/** aggregate fields of "gc_daily_checklist_item" */
export type Gc_Daily_Checklist_Item_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Gc_Daily_Checklist_Item_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "gc_daily_checklist_item" */
export type Gc_Daily_Checklist_Item_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Gc_Daily_Checklist_Item_Max_Order_By>;
  min?: Maybe<Gc_Daily_Checklist_Item_Min_Order_By>;
};

/** input type for inserting array relation for remote table "gc_daily_checklist_item" */
export type Gc_Daily_Checklist_Item_Arr_Rel_Insert_Input = {
  data: Array<Gc_Daily_Checklist_Item_Insert_Input>;
  on_conflict?: Maybe<Gc_Daily_Checklist_Item_On_Conflict>;
};

/** Boolean expression to filter rows from the table "gc_daily_checklist_item". All fields are combined with a logical 'AND'. */
export type Gc_Daily_Checklist_Item_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Gc_Daily_Checklist_Item_Bool_Exp>>>;
  _not?: Maybe<Gc_Daily_Checklist_Item_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Gc_Daily_Checklist_Item_Bool_Exp>>>;
  checklist_item?: Maybe<Checklist_Item_Bool_Exp>;
  checklist_item_id?: Maybe<Uuid_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  date?: Maybe<Date_Comparison_Exp>;
  employee?: Maybe<General_Contractor_Employee_Bool_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  user_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "gc_daily_checklist_item" */
export enum Gc_Daily_Checklist_Item_Constraint {
  /** unique or primary key constraint */
  GcDailyChecklistItemChecklistItemIdDateUserIdProject = 'gc_daily_checklist_item_checklist_item_id_date_user_id_project_',
  /** unique or primary key constraint */
  GcDailyChecklistItemPkey = 'gc_daily_checklist_item_pkey'
}

/** input type for inserting data into table "gc_daily_checklist_item" */
export type Gc_Daily_Checklist_Item_Insert_Input = {
  checklist_item?: Maybe<Checklist_Item_Obj_Rel_Insert_Input>;
  checklist_item_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  date?: Maybe<Scalars['date']>;
  employee?: Maybe<General_Contractor_Employee_Obj_Rel_Insert_Input>;
  id?: Maybe<Scalars['uuid']>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_id?: Maybe<Scalars['uuid']>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Gc_Daily_Checklist_Item_Max_Fields = {
   __typename?: 'gc_daily_checklist_item_max_fields';
  checklist_item_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "gc_daily_checklist_item" */
export type Gc_Daily_Checklist_Item_Max_Order_By = {
  checklist_item_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Gc_Daily_Checklist_Item_Min_Fields = {
   __typename?: 'gc_daily_checklist_item_min_fields';
  checklist_item_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "gc_daily_checklist_item" */
export type Gc_Daily_Checklist_Item_Min_Order_By = {
  checklist_item_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "gc_daily_checklist_item" */
export type Gc_Daily_Checklist_Item_Mutation_Response = {
   __typename?: 'gc_daily_checklist_item_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Gc_Daily_Checklist_Item>;
};

/** input type for inserting object relation for remote table "gc_daily_checklist_item" */
export type Gc_Daily_Checklist_Item_Obj_Rel_Insert_Input = {
  data: Gc_Daily_Checklist_Item_Insert_Input;
  on_conflict?: Maybe<Gc_Daily_Checklist_Item_On_Conflict>;
};

/** on conflict condition type for table "gc_daily_checklist_item" */
export type Gc_Daily_Checklist_Item_On_Conflict = {
  constraint: Gc_Daily_Checklist_Item_Constraint;
  update_columns: Array<Gc_Daily_Checklist_Item_Update_Column>;
  where?: Maybe<Gc_Daily_Checklist_Item_Bool_Exp>;
};

/** ordering options when selecting data from "gc_daily_checklist_item" */
export type Gc_Daily_Checklist_Item_Order_By = {
  checklist_item?: Maybe<Checklist_Item_Order_By>;
  checklist_item_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  employee?: Maybe<General_Contractor_Employee_Order_By>;
  id?: Maybe<Order_By>;
  project?: Maybe<Project_Order_By>;
  project_id?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "gc_daily_checklist_item" */
export type Gc_Daily_Checklist_Item_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "gc_daily_checklist_item" */
export enum Gc_Daily_Checklist_Item_Select_Column {
  /** column name */
  ChecklistItemId = 'checklist_item_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Date = 'date',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  UserId = 'user_id'
}

/** input type for updating data in table "gc_daily_checklist_item" */
export type Gc_Daily_Checklist_Item_Set_Input = {
  checklist_item_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "gc_daily_checklist_item" */
export enum Gc_Daily_Checklist_Item_Update_Column {
  /** column name */
  ChecklistItemId = 'checklist_item_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Date = 'date',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  UserId = 'user_id'
}

/** columns and relationships of "gc_disabled_project_subcontractor" */
export type Gc_Disabled_Project_Subcontractor = {
   __typename?: 'gc_disabled_project_subcontractor';
  created_at: Scalars['timestamptz'];
  created_by_user_id: Scalars['uuid'];
  id: Scalars['uuid'];
  /** An object relationship */
  project_subcontractor: Project_Subcontractor;
  project_subcontractor_id: Scalars['uuid'];
  /** An object relationship */
  user: User;
};

/** aggregated selection of "gc_disabled_project_subcontractor" */
export type Gc_Disabled_Project_Subcontractor_Aggregate = {
   __typename?: 'gc_disabled_project_subcontractor_aggregate';
  aggregate?: Maybe<Gc_Disabled_Project_Subcontractor_Aggregate_Fields>;
  nodes: Array<Gc_Disabled_Project_Subcontractor>;
};

/** aggregate fields of "gc_disabled_project_subcontractor" */
export type Gc_Disabled_Project_Subcontractor_Aggregate_Fields = {
   __typename?: 'gc_disabled_project_subcontractor_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Gc_Disabled_Project_Subcontractor_Max_Fields>;
  min?: Maybe<Gc_Disabled_Project_Subcontractor_Min_Fields>;
};


/** aggregate fields of "gc_disabled_project_subcontractor" */
export type Gc_Disabled_Project_Subcontractor_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Gc_Disabled_Project_Subcontractor_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "gc_disabled_project_subcontractor" */
export type Gc_Disabled_Project_Subcontractor_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Gc_Disabled_Project_Subcontractor_Max_Order_By>;
  min?: Maybe<Gc_Disabled_Project_Subcontractor_Min_Order_By>;
};

/** input type for inserting array relation for remote table "gc_disabled_project_subcontractor" */
export type Gc_Disabled_Project_Subcontractor_Arr_Rel_Insert_Input = {
  data: Array<Gc_Disabled_Project_Subcontractor_Insert_Input>;
  on_conflict?: Maybe<Gc_Disabled_Project_Subcontractor_On_Conflict>;
};

/**
 * Boolean expression to filter rows from the table
 * "gc_disabled_project_subcontractor". All fields are combined with a logical 'AND'.
 */
export type Gc_Disabled_Project_Subcontractor_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Gc_Disabled_Project_Subcontractor_Bool_Exp>>>;
  _not?: Maybe<Gc_Disabled_Project_Subcontractor_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Gc_Disabled_Project_Subcontractor_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  created_by_user_id?: Maybe<Uuid_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  project_subcontractor?: Maybe<Project_Subcontractor_Bool_Exp>;
  project_subcontractor_id?: Maybe<Uuid_Comparison_Exp>;
  user?: Maybe<User_Bool_Exp>;
};

/** unique or primary key constraints on table "gc_disabled_project_subcontractor" */
export enum Gc_Disabled_Project_Subcontractor_Constraint {
  /** unique or primary key constraint */
  DisabledProjectSubcontractorPkey = 'disabled_project_subcontractor_pkey',
  /** unique or primary key constraint */
  DisabledProjectSubcontractorProjectSubcontractorIdKey = 'disabled_project_subcontractor_project_subcontractor_id_key'
}

/** input type for inserting data into table "gc_disabled_project_subcontractor" */
export type Gc_Disabled_Project_Subcontractor_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  project_subcontractor?: Maybe<Project_Subcontractor_Obj_Rel_Insert_Input>;
  project_subcontractor_id?: Maybe<Scalars['uuid']>;
  user?: Maybe<User_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Gc_Disabled_Project_Subcontractor_Max_Fields = {
   __typename?: 'gc_disabled_project_subcontractor_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  project_subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "gc_disabled_project_subcontractor" */
export type Gc_Disabled_Project_Subcontractor_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  created_by_user_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_subcontractor_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Gc_Disabled_Project_Subcontractor_Min_Fields = {
   __typename?: 'gc_disabled_project_subcontractor_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  project_subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "gc_disabled_project_subcontractor" */
export type Gc_Disabled_Project_Subcontractor_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  created_by_user_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_subcontractor_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "gc_disabled_project_subcontractor" */
export type Gc_Disabled_Project_Subcontractor_Mutation_Response = {
   __typename?: 'gc_disabled_project_subcontractor_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Gc_Disabled_Project_Subcontractor>;
};

/** input type for inserting object relation for remote table "gc_disabled_project_subcontractor" */
export type Gc_Disabled_Project_Subcontractor_Obj_Rel_Insert_Input = {
  data: Gc_Disabled_Project_Subcontractor_Insert_Input;
  on_conflict?: Maybe<Gc_Disabled_Project_Subcontractor_On_Conflict>;
};

/** on conflict condition type for table "gc_disabled_project_subcontractor" */
export type Gc_Disabled_Project_Subcontractor_On_Conflict = {
  constraint: Gc_Disabled_Project_Subcontractor_Constraint;
  update_columns: Array<Gc_Disabled_Project_Subcontractor_Update_Column>;
  where?: Maybe<Gc_Disabled_Project_Subcontractor_Bool_Exp>;
};

/** ordering options when selecting data from "gc_disabled_project_subcontractor" */
export type Gc_Disabled_Project_Subcontractor_Order_By = {
  created_at?: Maybe<Order_By>;
  created_by_user_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_subcontractor?: Maybe<Project_Subcontractor_Order_By>;
  project_subcontractor_id?: Maybe<Order_By>;
  user?: Maybe<User_Order_By>;
};

/** primary key columns input for table: "gc_disabled_project_subcontractor" */
export type Gc_Disabled_Project_Subcontractor_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "gc_disabled_project_subcontractor" */
export enum Gc_Disabled_Project_Subcontractor_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CreatedByUserId = 'created_by_user_id',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectSubcontractorId = 'project_subcontractor_id'
}

/** input type for updating data in table "gc_disabled_project_subcontractor" */
export type Gc_Disabled_Project_Subcontractor_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  project_subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "gc_disabled_project_subcontractor" */
export enum Gc_Disabled_Project_Subcontractor_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CreatedByUserId = 'created_by_user_id',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectSubcontractorId = 'project_subcontractor_id'
}

/** columns and relationships of "general_contractor" */
export type General_Contractor = {
   __typename?: 'general_contractor';
  allow_permit_activation_location_change: Scalars['Boolean'];
  /** An array relationship */
  employees: Array<General_Contractor_Employee>;
  /** An aggregated array relationship */
  employees_aggregate: General_Contractor_Employee_Aggregate;
  id: Scalars['uuid'];
  logo_url?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  /** An object relationship */
  procore_auth_data?: Maybe<Procore_Auth_Data>;
  /** An object relationship */
  procore_service_account?: Maybe<Procore_Service_Account>;
  /** An array relationship */
  projects: Array<Project>;
  /** An aggregated array relationship */
  projects_aggregate: Project_Aggregate;
};


/** columns and relationships of "general_contractor" */
export type General_ContractorEmployeesArgs = {
  distinct_on?: Maybe<Array<General_Contractor_Employee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<General_Contractor_Employee_Order_By>>;
  where?: Maybe<General_Contractor_Employee_Bool_Exp>;
};


/** columns and relationships of "general_contractor" */
export type General_ContractorEmployees_AggregateArgs = {
  distinct_on?: Maybe<Array<General_Contractor_Employee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<General_Contractor_Employee_Order_By>>;
  where?: Maybe<General_Contractor_Employee_Bool_Exp>;
};


/** columns and relationships of "general_contractor" */
export type General_ContractorProjectsArgs = {
  distinct_on?: Maybe<Array<Project_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Order_By>>;
  where?: Maybe<Project_Bool_Exp>;
};


/** columns and relationships of "general_contractor" */
export type General_ContractorProjects_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Order_By>>;
  where?: Maybe<Project_Bool_Exp>;
};

/** aggregated selection of "general_contractor" */
export type General_Contractor_Aggregate = {
   __typename?: 'general_contractor_aggregate';
  aggregate?: Maybe<General_Contractor_Aggregate_Fields>;
  nodes: Array<General_Contractor>;
};

/** aggregate fields of "general_contractor" */
export type General_Contractor_Aggregate_Fields = {
   __typename?: 'general_contractor_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<General_Contractor_Max_Fields>;
  min?: Maybe<General_Contractor_Min_Fields>;
};


/** aggregate fields of "general_contractor" */
export type General_Contractor_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<General_Contractor_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "general_contractor" */
export type General_Contractor_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<General_Contractor_Max_Order_By>;
  min?: Maybe<General_Contractor_Min_Order_By>;
};

/** input type for inserting array relation for remote table "general_contractor" */
export type General_Contractor_Arr_Rel_Insert_Input = {
  data: Array<General_Contractor_Insert_Input>;
  on_conflict?: Maybe<General_Contractor_On_Conflict>;
};

/** Boolean expression to filter rows from the table "general_contractor". All fields are combined with a logical 'AND'. */
export type General_Contractor_Bool_Exp = {
  _and?: Maybe<Array<Maybe<General_Contractor_Bool_Exp>>>;
  _not?: Maybe<General_Contractor_Bool_Exp>;
  _or?: Maybe<Array<Maybe<General_Contractor_Bool_Exp>>>;
  allow_permit_activation_location_change?: Maybe<Boolean_Comparison_Exp>;
  employees?: Maybe<General_Contractor_Employee_Bool_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  logo_url?: Maybe<String_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  procore_auth_data?: Maybe<Procore_Auth_Data_Bool_Exp>;
  procore_service_account?: Maybe<Procore_Service_Account_Bool_Exp>;
  projects?: Maybe<Project_Bool_Exp>;
};

/** unique or primary key constraints on table "general_contractor" */
export enum General_Contractor_Constraint {
  /** unique or primary key constraint */
  GeneralContractorPkey = 'general_contractor_pkey'
}

/** columns and relationships of "general_contractor_employee" */
export type General_Contractor_Employee = {
   __typename?: 'general_contractor_employee';
  /** An array relationship */
  chat_members: Array<Chat_Member>;
  /** An aggregated array relationship */
  chat_members_aggregate: Chat_Member_Aggregate;
  created_at: Scalars['timestamptz'];
  /** An array relationship */
  created_chats: Array<Chat>;
  /** An aggregated array relationship */
  created_chats_aggregate: Chat_Aggregate;
  daily_submittal_summary_enabled: Scalars['Boolean'];
  /** An array relationship */
  employee_projects: Array<Project_Employee>;
  /** An aggregated array relationship */
  employee_projects_aggregate: Project_Employee_Aggregate;
  /** An object relationship */
  employee_title?: Maybe<Employee_Title>;
  /** An object relationship */
  general_contractor: General_Contractor;
  general_contractor_id: Scalars['uuid'];
  /** An array relationship */
  project_users: Array<Project_User>;
  /** An aggregated array relationship */
  project_users_aggregate: Project_User_Aggregate;
  title_id?: Maybe<Scalars['uuid']>;
  uid: Scalars['uuid'];
  updated_at: Scalars['timestamptz'];
  /** An object relationship */
  user: User;
};


/** columns and relationships of "general_contractor_employee" */
export type General_Contractor_EmployeeChat_MembersArgs = {
  distinct_on?: Maybe<Array<Chat_Member_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Member_Order_By>>;
  where?: Maybe<Chat_Member_Bool_Exp>;
};


/** columns and relationships of "general_contractor_employee" */
export type General_Contractor_EmployeeChat_Members_AggregateArgs = {
  distinct_on?: Maybe<Array<Chat_Member_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Member_Order_By>>;
  where?: Maybe<Chat_Member_Bool_Exp>;
};


/** columns and relationships of "general_contractor_employee" */
export type General_Contractor_EmployeeCreated_ChatsArgs = {
  distinct_on?: Maybe<Array<Chat_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Order_By>>;
  where?: Maybe<Chat_Bool_Exp>;
};


/** columns and relationships of "general_contractor_employee" */
export type General_Contractor_EmployeeCreated_Chats_AggregateArgs = {
  distinct_on?: Maybe<Array<Chat_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Order_By>>;
  where?: Maybe<Chat_Bool_Exp>;
};


/** columns and relationships of "general_contractor_employee" */
export type General_Contractor_EmployeeEmployee_ProjectsArgs = {
  distinct_on?: Maybe<Array<Project_Employee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Employee_Order_By>>;
  where?: Maybe<Project_Employee_Bool_Exp>;
};


/** columns and relationships of "general_contractor_employee" */
export type General_Contractor_EmployeeEmployee_Projects_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Employee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Employee_Order_By>>;
  where?: Maybe<Project_Employee_Bool_Exp>;
};


/** columns and relationships of "general_contractor_employee" */
export type General_Contractor_EmployeeProject_UsersArgs = {
  distinct_on?: Maybe<Array<Project_User_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_User_Order_By>>;
  where?: Maybe<Project_User_Bool_Exp>;
};


/** columns and relationships of "general_contractor_employee" */
export type General_Contractor_EmployeeProject_Users_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_User_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_User_Order_By>>;
  where?: Maybe<Project_User_Bool_Exp>;
};

/** aggregated selection of "general_contractor_employee" */
export type General_Contractor_Employee_Aggregate = {
   __typename?: 'general_contractor_employee_aggregate';
  aggregate?: Maybe<General_Contractor_Employee_Aggregate_Fields>;
  nodes: Array<General_Contractor_Employee>;
};

/** aggregate fields of "general_contractor_employee" */
export type General_Contractor_Employee_Aggregate_Fields = {
   __typename?: 'general_contractor_employee_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<General_Contractor_Employee_Max_Fields>;
  min?: Maybe<General_Contractor_Employee_Min_Fields>;
};


/** aggregate fields of "general_contractor_employee" */
export type General_Contractor_Employee_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<General_Contractor_Employee_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "general_contractor_employee" */
export type General_Contractor_Employee_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<General_Contractor_Employee_Max_Order_By>;
  min?: Maybe<General_Contractor_Employee_Min_Order_By>;
};

/** input type for inserting array relation for remote table "general_contractor_employee" */
export type General_Contractor_Employee_Arr_Rel_Insert_Input = {
  data: Array<General_Contractor_Employee_Insert_Input>;
  on_conflict?: Maybe<General_Contractor_Employee_On_Conflict>;
};

/**
 * Boolean expression to filter rows from the table "general_contractor_employee".
 * All fields are combined with a logical 'AND'.
 */
export type General_Contractor_Employee_Bool_Exp = {
  _and?: Maybe<Array<Maybe<General_Contractor_Employee_Bool_Exp>>>;
  _not?: Maybe<General_Contractor_Employee_Bool_Exp>;
  _or?: Maybe<Array<Maybe<General_Contractor_Employee_Bool_Exp>>>;
  chat_members?: Maybe<Chat_Member_Bool_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  created_chats?: Maybe<Chat_Bool_Exp>;
  daily_submittal_summary_enabled?: Maybe<Boolean_Comparison_Exp>;
  employee_projects?: Maybe<Project_Employee_Bool_Exp>;
  employee_title?: Maybe<Employee_Title_Bool_Exp>;
  general_contractor?: Maybe<General_Contractor_Bool_Exp>;
  general_contractor_id?: Maybe<Uuid_Comparison_Exp>;
  project_users?: Maybe<Project_User_Bool_Exp>;
  title_id?: Maybe<Uuid_Comparison_Exp>;
  uid?: Maybe<Uuid_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  user?: Maybe<User_Bool_Exp>;
};

/** unique or primary key constraints on table "general_contractor_employee" */
export enum General_Contractor_Employee_Constraint {
  /** unique or primary key constraint */
  EmployeeIdKey = 'employee_id_key',
  /** unique or primary key constraint */
  GeneralContractorEmployeePkey = 'general_contractor_employee_pkey'
}

/** input type for inserting data into table "general_contractor_employee" */
export type General_Contractor_Employee_Insert_Input = {
  chat_members?: Maybe<Chat_Member_Arr_Rel_Insert_Input>;
  created_at?: Maybe<Scalars['timestamptz']>;
  created_chats?: Maybe<Chat_Arr_Rel_Insert_Input>;
  daily_submittal_summary_enabled?: Maybe<Scalars['Boolean']>;
  employee_projects?: Maybe<Project_Employee_Arr_Rel_Insert_Input>;
  employee_title?: Maybe<Employee_Title_Obj_Rel_Insert_Input>;
  general_contractor?: Maybe<General_Contractor_Obj_Rel_Insert_Input>;
  general_contractor_id?: Maybe<Scalars['uuid']>;
  project_users?: Maybe<Project_User_Arr_Rel_Insert_Input>;
  title_id?: Maybe<Scalars['uuid']>;
  uid?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  user?: Maybe<User_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type General_Contractor_Employee_Max_Fields = {
   __typename?: 'general_contractor_employee_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  general_contractor_id?: Maybe<Scalars['uuid']>;
  title_id?: Maybe<Scalars['uuid']>;
  uid?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** order by max() on columns of table "general_contractor_employee" */
export type General_Contractor_Employee_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  general_contractor_id?: Maybe<Order_By>;
  title_id?: Maybe<Order_By>;
  uid?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type General_Contractor_Employee_Min_Fields = {
   __typename?: 'general_contractor_employee_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  general_contractor_id?: Maybe<Scalars['uuid']>;
  title_id?: Maybe<Scalars['uuid']>;
  uid?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** order by min() on columns of table "general_contractor_employee" */
export type General_Contractor_Employee_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  general_contractor_id?: Maybe<Order_By>;
  title_id?: Maybe<Order_By>;
  uid?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** response of any mutation on the table "general_contractor_employee" */
export type General_Contractor_Employee_Mutation_Response = {
   __typename?: 'general_contractor_employee_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<General_Contractor_Employee>;
};

/** input type for inserting object relation for remote table "general_contractor_employee" */
export type General_Contractor_Employee_Obj_Rel_Insert_Input = {
  data: General_Contractor_Employee_Insert_Input;
  on_conflict?: Maybe<General_Contractor_Employee_On_Conflict>;
};

/** on conflict condition type for table "general_contractor_employee" */
export type General_Contractor_Employee_On_Conflict = {
  constraint: General_Contractor_Employee_Constraint;
  update_columns: Array<General_Contractor_Employee_Update_Column>;
  where?: Maybe<General_Contractor_Employee_Bool_Exp>;
};

/** ordering options when selecting data from "general_contractor_employee" */
export type General_Contractor_Employee_Order_By = {
  chat_members_aggregate?: Maybe<Chat_Member_Aggregate_Order_By>;
  created_at?: Maybe<Order_By>;
  created_chats_aggregate?: Maybe<Chat_Aggregate_Order_By>;
  daily_submittal_summary_enabled?: Maybe<Order_By>;
  employee_projects_aggregate?: Maybe<Project_Employee_Aggregate_Order_By>;
  employee_title?: Maybe<Employee_Title_Order_By>;
  general_contractor?: Maybe<General_Contractor_Order_By>;
  general_contractor_id?: Maybe<Order_By>;
  project_users_aggregate?: Maybe<Project_User_Aggregate_Order_By>;
  title_id?: Maybe<Order_By>;
  uid?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  user?: Maybe<User_Order_By>;
};

/** primary key columns input for table: "general_contractor_employee" */
export type General_Contractor_Employee_Pk_Columns_Input = {
  uid: Scalars['uuid'];
};

/** select columns of table "general_contractor_employee" */
export enum General_Contractor_Employee_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DailySubmittalSummaryEnabled = 'daily_submittal_summary_enabled',
  /** column name */
  GeneralContractorId = 'general_contractor_id',
  /** column name */
  TitleId = 'title_id',
  /** column name */
  Uid = 'uid',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** input type for updating data in table "general_contractor_employee" */
export type General_Contractor_Employee_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_submittal_summary_enabled?: Maybe<Scalars['Boolean']>;
  general_contractor_id?: Maybe<Scalars['uuid']>;
  title_id?: Maybe<Scalars['uuid']>;
  uid?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** update columns of table "general_contractor_employee" */
export enum General_Contractor_Employee_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DailySubmittalSummaryEnabled = 'daily_submittal_summary_enabled',
  /** column name */
  GeneralContractorId = 'general_contractor_id',
  /** column name */
  TitleId = 'title_id',
  /** column name */
  Uid = 'uid',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** input type for inserting data into table "general_contractor" */
export type General_Contractor_Insert_Input = {
  allow_permit_activation_location_change?: Maybe<Scalars['Boolean']>;
  employees?: Maybe<General_Contractor_Employee_Arr_Rel_Insert_Input>;
  id?: Maybe<Scalars['uuid']>;
  logo_url?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  procore_auth_data?: Maybe<Procore_Auth_Data_Obj_Rel_Insert_Input>;
  procore_service_account?: Maybe<Procore_Service_Account_Obj_Rel_Insert_Input>;
  projects?: Maybe<Project_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type General_Contractor_Max_Fields = {
   __typename?: 'general_contractor_max_fields';
  id?: Maybe<Scalars['uuid']>;
  logo_url?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "general_contractor" */
export type General_Contractor_Max_Order_By = {
  id?: Maybe<Order_By>;
  logo_url?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type General_Contractor_Min_Fields = {
   __typename?: 'general_contractor_min_fields';
  id?: Maybe<Scalars['uuid']>;
  logo_url?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "general_contractor" */
export type General_Contractor_Min_Order_By = {
  id?: Maybe<Order_By>;
  logo_url?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
};

/** response of any mutation on the table "general_contractor" */
export type General_Contractor_Mutation_Response = {
   __typename?: 'general_contractor_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<General_Contractor>;
};

/** input type for inserting object relation for remote table "general_contractor" */
export type General_Contractor_Obj_Rel_Insert_Input = {
  data: General_Contractor_Insert_Input;
  on_conflict?: Maybe<General_Contractor_On_Conflict>;
};

/** on conflict condition type for table "general_contractor" */
export type General_Contractor_On_Conflict = {
  constraint: General_Contractor_Constraint;
  update_columns: Array<General_Contractor_Update_Column>;
  where?: Maybe<General_Contractor_Bool_Exp>;
};

/** ordering options when selecting data from "general_contractor" */
export type General_Contractor_Order_By = {
  allow_permit_activation_location_change?: Maybe<Order_By>;
  employees_aggregate?: Maybe<General_Contractor_Employee_Aggregate_Order_By>;
  id?: Maybe<Order_By>;
  logo_url?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  procore_auth_data?: Maybe<Procore_Auth_Data_Order_By>;
  procore_service_account?: Maybe<Procore_Service_Account_Order_By>;
  projects_aggregate?: Maybe<Project_Aggregate_Order_By>;
};

/** primary key columns input for table: "general_contractor" */
export type General_Contractor_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "general_contractor" */
export enum General_Contractor_Select_Column {
  /** column name */
  AllowPermitActivationLocationChange = 'allow_permit_activation_location_change',
  /** column name */
  Id = 'id',
  /** column name */
  LogoUrl = 'logo_url',
  /** column name */
  Name = 'name'
}

/** input type for updating data in table "general_contractor" */
export type General_Contractor_Set_Input = {
  allow_permit_activation_location_change?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['uuid']>;
  logo_url?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

/** update columns of table "general_contractor" */
export enum General_Contractor_Update_Column {
  /** column name */
  AllowPermitActivationLocationChange = 'allow_permit_activation_location_change',
  /** column name */
  Id = 'id',
  /** column name */
  LogoUrl = 'logo_url',
  /** column name */
  Name = 'name'
}

export type GenerateDailyReportsSummaryInput = {
  date: Scalars['String'];
  projectId: Scalars['String'];
};

export type GenerateGcSpreadsheetInput = {
  projectId: Scalars['String'];
};

export type Get_Awareness_Question_Args = {
  num?: Maybe<Scalars['Int']>;
  sub_id?: Maybe<Scalars['uuid']>;
};

export type Get_Random_Incident_Example_Args = {
  num?: Maybe<Scalars['Int']>;
};

export type GetBlurhashInput = {
  imageBase64?: Maybe<Scalars['String']>;
  imageUrl?: Maybe<Scalars['String']>;
};

export type GetBlurhashOutput = {
   __typename?: 'GetBlurhashOutput';
  blurhash: Scalars['String'];
};

export type GetClientCreateDailyReportInformation = {
   __typename?: 'GetClientCreateDailyReportInformation';
  dailyReportForm: DailyReportForm;
  dummy_query: Array<State>;
  project_worker: Array<Project_Worker>;
};

export type GetClientCreateToolboxTalksData = {
   __typename?: 'GetClientCreateToolboxTalksData';
  project_worker: Array<Project_Worker>;
};

export type GetClientCurrentWorkerProject = {
   __typename?: 'GetClientCurrentWorkerProject';
  workerData: WorkerData;
};

export type GetCreateDailyReportForm = {
   __typename?: 'GetCreateDailyReportForm';
  dailyReportForm: DailyReportForm;
};

export type GetQrCodeInput = {
  data: Scalars['String'];
};

/** columns and relationships of "government_identification" */
export type Government_Identification = {
   __typename?: 'government_identification';
  /** An object relationship */
  back_image?: Maybe<Image>;
  back_image_id?: Maybe<Scalars['uuid']>;
  created_at: Scalars['timestamptz'];
  /** An object relationship */
  front_image?: Maybe<Image>;
  front_image_id?: Maybe<Scalars['uuid']>;
  updated_at: Scalars['timestamptz'];
  /** An object relationship */
  user: User;
  user_id: Scalars['uuid'];
};

/** aggregated selection of "government_identification" */
export type Government_Identification_Aggregate = {
   __typename?: 'government_identification_aggregate';
  aggregate?: Maybe<Government_Identification_Aggregate_Fields>;
  nodes: Array<Government_Identification>;
};

/** aggregate fields of "government_identification" */
export type Government_Identification_Aggregate_Fields = {
   __typename?: 'government_identification_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Government_Identification_Max_Fields>;
  min?: Maybe<Government_Identification_Min_Fields>;
};


/** aggregate fields of "government_identification" */
export type Government_Identification_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Government_Identification_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "government_identification" */
export type Government_Identification_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Government_Identification_Max_Order_By>;
  min?: Maybe<Government_Identification_Min_Order_By>;
};

/** input type for inserting array relation for remote table "government_identification" */
export type Government_Identification_Arr_Rel_Insert_Input = {
  data: Array<Government_Identification_Insert_Input>;
  on_conflict?: Maybe<Government_Identification_On_Conflict>;
};

/** Boolean expression to filter rows from the table "government_identification". All fields are combined with a logical 'AND'. */
export type Government_Identification_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Government_Identification_Bool_Exp>>>;
  _not?: Maybe<Government_Identification_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Government_Identification_Bool_Exp>>>;
  back_image?: Maybe<Image_Bool_Exp>;
  back_image_id?: Maybe<Uuid_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  front_image?: Maybe<Image_Bool_Exp>;
  front_image_id?: Maybe<Uuid_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  user?: Maybe<User_Bool_Exp>;
  user_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "government_identification" */
export enum Government_Identification_Constraint {
  /** unique or primary key constraint */
  GovernmentIdentificationBackImageIdKey = 'government_identification_back_image_id_key',
  /** unique or primary key constraint */
  GovernmentIdentificationFrontImageIdKey = 'government_identification_front_image_id_key',
  /** unique or primary key constraint */
  GovernmentIdentificationPkey = 'government_identification_pkey',
  /** unique or primary key constraint */
  GovernmentIdentificationUserIdKey = 'government_identification_user_id_key'
}

/** input type for inserting data into table "government_identification" */
export type Government_Identification_Insert_Input = {
  back_image?: Maybe<Image_Obj_Rel_Insert_Input>;
  back_image_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  front_image?: Maybe<Image_Obj_Rel_Insert_Input>;
  front_image_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  user?: Maybe<User_Obj_Rel_Insert_Input>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Government_Identification_Max_Fields = {
   __typename?: 'government_identification_max_fields';
  back_image_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  front_image_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "government_identification" */
export type Government_Identification_Max_Order_By = {
  back_image_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  front_image_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Government_Identification_Min_Fields = {
   __typename?: 'government_identification_min_fields';
  back_image_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  front_image_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "government_identification" */
export type Government_Identification_Min_Order_By = {
  back_image_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  front_image_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "government_identification" */
export type Government_Identification_Mutation_Response = {
   __typename?: 'government_identification_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Government_Identification>;
};

/** input type for inserting object relation for remote table "government_identification" */
export type Government_Identification_Obj_Rel_Insert_Input = {
  data: Government_Identification_Insert_Input;
  on_conflict?: Maybe<Government_Identification_On_Conflict>;
};

/** on conflict condition type for table "government_identification" */
export type Government_Identification_On_Conflict = {
  constraint: Government_Identification_Constraint;
  update_columns: Array<Government_Identification_Update_Column>;
  where?: Maybe<Government_Identification_Bool_Exp>;
};

/** ordering options when selecting data from "government_identification" */
export type Government_Identification_Order_By = {
  back_image?: Maybe<Image_Order_By>;
  back_image_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  front_image?: Maybe<Image_Order_By>;
  front_image_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  user?: Maybe<User_Order_By>;
  user_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "government_identification" */
export type Government_Identification_Pk_Columns_Input = {
  user_id: Scalars['uuid'];
};

/** select columns of table "government_identification" */
export enum Government_Identification_Select_Column {
  /** column name */
  BackImageId = 'back_image_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  FrontImageId = 'front_image_id',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UserId = 'user_id'
}

/** input type for updating data in table "government_identification" */
export type Government_Identification_Set_Input = {
  back_image_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  front_image_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "government_identification" */
export enum Government_Identification_Update_Column {
  /** column name */
  BackImageId = 'back_image_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  FrontImageId = 'front_image_id',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UserId = 'user_id'
}

/** columns and relationships of "hot_work_permit" */
export type Hot_Work_Permit = {
   __typename?: 'hot_work_permit';
  /** An object relationship */
  applicant_project_worker: Project_Worker;
  applicant_project_worker_id: Scalars['uuid'];
  created_at: Scalars['timestamptz'];
  has_special_precautions?: Maybe<Scalars['Boolean']>;
  /** An object relationship */
  permit: Permit;
  permit_id: Scalars['uuid'];
  /** An object relationship */
  special_precautions_description: Text_Translation;
  special_precautions_description_id: Scalars['uuid'];
  special_precautions_description_text?: Maybe<Scalars['String']>;
  updated_at: Scalars['timestamptz'];
  /** An object relationship */
  work_description: Text_Translation;
  work_description_id: Scalars['uuid'];
  work_description_text?: Maybe<Scalars['String']>;
  work_duration?: Maybe<Scalars['interval']>;
  /** An object relationship */
  work_location: Text_Translation;
  work_location_id: Scalars['uuid'];
  work_location_text?: Maybe<Scalars['String']>;
  work_start_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregated selection of "hot_work_permit" */
export type Hot_Work_Permit_Aggregate = {
   __typename?: 'hot_work_permit_aggregate';
  aggregate?: Maybe<Hot_Work_Permit_Aggregate_Fields>;
  nodes: Array<Hot_Work_Permit>;
};

/** aggregate fields of "hot_work_permit" */
export type Hot_Work_Permit_Aggregate_Fields = {
   __typename?: 'hot_work_permit_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Hot_Work_Permit_Max_Fields>;
  min?: Maybe<Hot_Work_Permit_Min_Fields>;
};


/** aggregate fields of "hot_work_permit" */
export type Hot_Work_Permit_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Hot_Work_Permit_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "hot_work_permit" */
export type Hot_Work_Permit_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Hot_Work_Permit_Max_Order_By>;
  min?: Maybe<Hot_Work_Permit_Min_Order_By>;
};

/** input type for inserting array relation for remote table "hot_work_permit" */
export type Hot_Work_Permit_Arr_Rel_Insert_Input = {
  data: Array<Hot_Work_Permit_Insert_Input>;
  on_conflict?: Maybe<Hot_Work_Permit_On_Conflict>;
};

/** Boolean expression to filter rows from the table "hot_work_permit". All fields are combined with a logical 'AND'. */
export type Hot_Work_Permit_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Hot_Work_Permit_Bool_Exp>>>;
  _not?: Maybe<Hot_Work_Permit_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Hot_Work_Permit_Bool_Exp>>>;
  applicant_project_worker?: Maybe<Project_Worker_Bool_Exp>;
  applicant_project_worker_id?: Maybe<Uuid_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  has_special_precautions?: Maybe<Boolean_Comparison_Exp>;
  permit?: Maybe<Permit_Bool_Exp>;
  permit_id?: Maybe<Uuid_Comparison_Exp>;
  special_precautions_description?: Maybe<Text_Translation_Bool_Exp>;
  special_precautions_description_id?: Maybe<Uuid_Comparison_Exp>;
  special_precautions_description_text?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  work_description?: Maybe<Text_Translation_Bool_Exp>;
  work_description_id?: Maybe<Uuid_Comparison_Exp>;
  work_description_text?: Maybe<String_Comparison_Exp>;
  work_duration?: Maybe<Interval_Comparison_Exp>;
  work_location?: Maybe<Text_Translation_Bool_Exp>;
  work_location_id?: Maybe<Uuid_Comparison_Exp>;
  work_location_text?: Maybe<String_Comparison_Exp>;
  work_start_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "hot_work_permit" */
export enum Hot_Work_Permit_Constraint {
  /** unique or primary key constraint */
  HotWorkPermitPermitIdKey = 'hot_work_permit_permit_id_key',
  /** unique or primary key constraint */
  HotWorkPermitPkey = 'hot_work_permit_pkey'
}

/** input type for inserting data into table "hot_work_permit" */
export type Hot_Work_Permit_Insert_Input = {
  applicant_project_worker?: Maybe<Project_Worker_Obj_Rel_Insert_Input>;
  applicant_project_worker_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  has_special_precautions?: Maybe<Scalars['Boolean']>;
  permit?: Maybe<Permit_Obj_Rel_Insert_Input>;
  permit_id?: Maybe<Scalars['uuid']>;
  special_precautions_description?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  special_precautions_description_id?: Maybe<Scalars['uuid']>;
  special_precautions_description_text?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  work_description?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  work_description_id?: Maybe<Scalars['uuid']>;
  work_description_text?: Maybe<Scalars['String']>;
  work_duration?: Maybe<Scalars['interval']>;
  work_location?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  work_location_id?: Maybe<Scalars['uuid']>;
  work_location_text?: Maybe<Scalars['String']>;
  work_start_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate max on columns */
export type Hot_Work_Permit_Max_Fields = {
   __typename?: 'hot_work_permit_max_fields';
  applicant_project_worker_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  permit_id?: Maybe<Scalars['uuid']>;
  special_precautions_description_id?: Maybe<Scalars['uuid']>;
  special_precautions_description_text?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  work_description_id?: Maybe<Scalars['uuid']>;
  work_description_text?: Maybe<Scalars['String']>;
  work_location_id?: Maybe<Scalars['uuid']>;
  work_location_text?: Maybe<Scalars['String']>;
  work_start_at?: Maybe<Scalars['timestamptz']>;
};

/** order by max() on columns of table "hot_work_permit" */
export type Hot_Work_Permit_Max_Order_By = {
  applicant_project_worker_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  permit_id?: Maybe<Order_By>;
  special_precautions_description_id?: Maybe<Order_By>;
  special_precautions_description_text?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  work_description_id?: Maybe<Order_By>;
  work_description_text?: Maybe<Order_By>;
  work_location_id?: Maybe<Order_By>;
  work_location_text?: Maybe<Order_By>;
  work_start_at?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Hot_Work_Permit_Min_Fields = {
   __typename?: 'hot_work_permit_min_fields';
  applicant_project_worker_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  permit_id?: Maybe<Scalars['uuid']>;
  special_precautions_description_id?: Maybe<Scalars['uuid']>;
  special_precautions_description_text?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  work_description_id?: Maybe<Scalars['uuid']>;
  work_description_text?: Maybe<Scalars['String']>;
  work_location_id?: Maybe<Scalars['uuid']>;
  work_location_text?: Maybe<Scalars['String']>;
  work_start_at?: Maybe<Scalars['timestamptz']>;
};

/** order by min() on columns of table "hot_work_permit" */
export type Hot_Work_Permit_Min_Order_By = {
  applicant_project_worker_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  permit_id?: Maybe<Order_By>;
  special_precautions_description_id?: Maybe<Order_By>;
  special_precautions_description_text?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  work_description_id?: Maybe<Order_By>;
  work_description_text?: Maybe<Order_By>;
  work_location_id?: Maybe<Order_By>;
  work_location_text?: Maybe<Order_By>;
  work_start_at?: Maybe<Order_By>;
};

/** response of any mutation on the table "hot_work_permit" */
export type Hot_Work_Permit_Mutation_Response = {
   __typename?: 'hot_work_permit_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Hot_Work_Permit>;
};

/** input type for inserting object relation for remote table "hot_work_permit" */
export type Hot_Work_Permit_Obj_Rel_Insert_Input = {
  data: Hot_Work_Permit_Insert_Input;
  on_conflict?: Maybe<Hot_Work_Permit_On_Conflict>;
};

/** on conflict condition type for table "hot_work_permit" */
export type Hot_Work_Permit_On_Conflict = {
  constraint: Hot_Work_Permit_Constraint;
  update_columns: Array<Hot_Work_Permit_Update_Column>;
  where?: Maybe<Hot_Work_Permit_Bool_Exp>;
};

/** ordering options when selecting data from "hot_work_permit" */
export type Hot_Work_Permit_Order_By = {
  applicant_project_worker?: Maybe<Project_Worker_Order_By>;
  applicant_project_worker_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  has_special_precautions?: Maybe<Order_By>;
  permit?: Maybe<Permit_Order_By>;
  permit_id?: Maybe<Order_By>;
  special_precautions_description?: Maybe<Text_Translation_Order_By>;
  special_precautions_description_id?: Maybe<Order_By>;
  special_precautions_description_text?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  work_description?: Maybe<Text_Translation_Order_By>;
  work_description_id?: Maybe<Order_By>;
  work_description_text?: Maybe<Order_By>;
  work_duration?: Maybe<Order_By>;
  work_location?: Maybe<Text_Translation_Order_By>;
  work_location_id?: Maybe<Order_By>;
  work_location_text?: Maybe<Order_By>;
  work_start_at?: Maybe<Order_By>;
};

/** primary key columns input for table: "hot_work_permit" */
export type Hot_Work_Permit_Pk_Columns_Input = {
  permit_id: Scalars['uuid'];
};

/** select columns of table "hot_work_permit" */
export enum Hot_Work_Permit_Select_Column {
  /** column name */
  ApplicantProjectWorkerId = 'applicant_project_worker_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  HasSpecialPrecautions = 'has_special_precautions',
  /** column name */
  PermitId = 'permit_id',
  /** column name */
  SpecialPrecautionsDescriptionId = 'special_precautions_description_id',
  /** column name */
  SpecialPrecautionsDescriptionText = 'special_precautions_description_text',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  WorkDescriptionId = 'work_description_id',
  /** column name */
  WorkDescriptionText = 'work_description_text',
  /** column name */
  WorkDuration = 'work_duration',
  /** column name */
  WorkLocationId = 'work_location_id',
  /** column name */
  WorkLocationText = 'work_location_text',
  /** column name */
  WorkStartAt = 'work_start_at'
}

/** input type for updating data in table "hot_work_permit" */
export type Hot_Work_Permit_Set_Input = {
  applicant_project_worker_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  has_special_precautions?: Maybe<Scalars['Boolean']>;
  permit_id?: Maybe<Scalars['uuid']>;
  special_precautions_description_id?: Maybe<Scalars['uuid']>;
  special_precautions_description_text?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  work_description_id?: Maybe<Scalars['uuid']>;
  work_description_text?: Maybe<Scalars['String']>;
  work_duration?: Maybe<Scalars['interval']>;
  work_location_id?: Maybe<Scalars['uuid']>;
  work_location_text?: Maybe<Scalars['String']>;
  work_start_at?: Maybe<Scalars['timestamptz']>;
};

/** update columns of table "hot_work_permit" */
export enum Hot_Work_Permit_Update_Column {
  /** column name */
  ApplicantProjectWorkerId = 'applicant_project_worker_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  HasSpecialPrecautions = 'has_special_precautions',
  /** column name */
  PermitId = 'permit_id',
  /** column name */
  SpecialPrecautionsDescriptionId = 'special_precautions_description_id',
  /** column name */
  SpecialPrecautionsDescriptionText = 'special_precautions_description_text',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  WorkDescriptionId = 'work_description_id',
  /** column name */
  WorkDescriptionText = 'work_description_text',
  /** column name */
  WorkDuration = 'work_duration',
  /** column name */
  WorkLocationId = 'work_location_id',
  /** column name */
  WorkLocationText = 'work_location_text',
  /** column name */
  WorkStartAt = 'work_start_at'
}

/** columns and relationships of "hourly_forecast" */
export type Hourly_Forecast = {
   __typename?: 'hourly_forecast';
  address_id: Scalars['uuid'];
  date: Scalars['date'];
  id: Scalars['uuid'];
  short_forecast?: Maybe<Scalars['String']>;
  temperature: Scalars['numeric'];
  temperature_unit: Scalars['String'];
  time: Scalars['time'];
  wind_speed: Scalars['String'];
};

/** aggregated selection of "hourly_forecast" */
export type Hourly_Forecast_Aggregate = {
   __typename?: 'hourly_forecast_aggregate';
  aggregate?: Maybe<Hourly_Forecast_Aggregate_Fields>;
  nodes: Array<Hourly_Forecast>;
};

/** aggregate fields of "hourly_forecast" */
export type Hourly_Forecast_Aggregate_Fields = {
   __typename?: 'hourly_forecast_aggregate_fields';
  avg?: Maybe<Hourly_Forecast_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Hourly_Forecast_Max_Fields>;
  min?: Maybe<Hourly_Forecast_Min_Fields>;
  stddev?: Maybe<Hourly_Forecast_Stddev_Fields>;
  stddev_pop?: Maybe<Hourly_Forecast_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Hourly_Forecast_Stddev_Samp_Fields>;
  sum?: Maybe<Hourly_Forecast_Sum_Fields>;
  var_pop?: Maybe<Hourly_Forecast_Var_Pop_Fields>;
  var_samp?: Maybe<Hourly_Forecast_Var_Samp_Fields>;
  variance?: Maybe<Hourly_Forecast_Variance_Fields>;
};


/** aggregate fields of "hourly_forecast" */
export type Hourly_Forecast_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Hourly_Forecast_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "hourly_forecast" */
export type Hourly_Forecast_Aggregate_Order_By = {
  avg?: Maybe<Hourly_Forecast_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Hourly_Forecast_Max_Order_By>;
  min?: Maybe<Hourly_Forecast_Min_Order_By>;
  stddev?: Maybe<Hourly_Forecast_Stddev_Order_By>;
  stddev_pop?: Maybe<Hourly_Forecast_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Hourly_Forecast_Stddev_Samp_Order_By>;
  sum?: Maybe<Hourly_Forecast_Sum_Order_By>;
  var_pop?: Maybe<Hourly_Forecast_Var_Pop_Order_By>;
  var_samp?: Maybe<Hourly_Forecast_Var_Samp_Order_By>;
  variance?: Maybe<Hourly_Forecast_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "hourly_forecast" */
export type Hourly_Forecast_Arr_Rel_Insert_Input = {
  data: Array<Hourly_Forecast_Insert_Input>;
  on_conflict?: Maybe<Hourly_Forecast_On_Conflict>;
};

/** aggregate avg on columns */
export type Hourly_Forecast_Avg_Fields = {
   __typename?: 'hourly_forecast_avg_fields';
  temperature?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "hourly_forecast" */
export type Hourly_Forecast_Avg_Order_By = {
  temperature?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "hourly_forecast". All fields are combined with a logical 'AND'. */
export type Hourly_Forecast_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Hourly_Forecast_Bool_Exp>>>;
  _not?: Maybe<Hourly_Forecast_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Hourly_Forecast_Bool_Exp>>>;
  address_id?: Maybe<Uuid_Comparison_Exp>;
  date?: Maybe<Date_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  short_forecast?: Maybe<String_Comparison_Exp>;
  temperature?: Maybe<Numeric_Comparison_Exp>;
  temperature_unit?: Maybe<String_Comparison_Exp>;
  time?: Maybe<Time_Comparison_Exp>;
  wind_speed?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "hourly_forecast" */
export enum Hourly_Forecast_Constraint {
  /** unique or primary key constraint */
  HourlyForecastAddressIdDateTimeKey = 'hourly_forecast_address_id_date_time_key',
  /** unique or primary key constraint */
  HourlyForecastsPkey = 'hourly_forecasts_pkey'
}

/** input type for incrementing integer column in table "hourly_forecast" */
export type Hourly_Forecast_Inc_Input = {
  temperature?: Maybe<Scalars['numeric']>;
};

/** input type for inserting data into table "hourly_forecast" */
export type Hourly_Forecast_Insert_Input = {
  address_id?: Maybe<Scalars['uuid']>;
  date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  short_forecast?: Maybe<Scalars['String']>;
  temperature?: Maybe<Scalars['numeric']>;
  temperature_unit?: Maybe<Scalars['String']>;
  time?: Maybe<Scalars['time']>;
  wind_speed?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Hourly_Forecast_Max_Fields = {
   __typename?: 'hourly_forecast_max_fields';
  address_id?: Maybe<Scalars['uuid']>;
  date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  short_forecast?: Maybe<Scalars['String']>;
  temperature?: Maybe<Scalars['numeric']>;
  temperature_unit?: Maybe<Scalars['String']>;
  wind_speed?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "hourly_forecast" */
export type Hourly_Forecast_Max_Order_By = {
  address_id?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  short_forecast?: Maybe<Order_By>;
  temperature?: Maybe<Order_By>;
  temperature_unit?: Maybe<Order_By>;
  wind_speed?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Hourly_Forecast_Min_Fields = {
   __typename?: 'hourly_forecast_min_fields';
  address_id?: Maybe<Scalars['uuid']>;
  date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  short_forecast?: Maybe<Scalars['String']>;
  temperature?: Maybe<Scalars['numeric']>;
  temperature_unit?: Maybe<Scalars['String']>;
  wind_speed?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "hourly_forecast" */
export type Hourly_Forecast_Min_Order_By = {
  address_id?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  short_forecast?: Maybe<Order_By>;
  temperature?: Maybe<Order_By>;
  temperature_unit?: Maybe<Order_By>;
  wind_speed?: Maybe<Order_By>;
};

/** response of any mutation on the table "hourly_forecast" */
export type Hourly_Forecast_Mutation_Response = {
   __typename?: 'hourly_forecast_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Hourly_Forecast>;
};

/** input type for inserting object relation for remote table "hourly_forecast" */
export type Hourly_Forecast_Obj_Rel_Insert_Input = {
  data: Hourly_Forecast_Insert_Input;
  on_conflict?: Maybe<Hourly_Forecast_On_Conflict>;
};

/** on conflict condition type for table "hourly_forecast" */
export type Hourly_Forecast_On_Conflict = {
  constraint: Hourly_Forecast_Constraint;
  update_columns: Array<Hourly_Forecast_Update_Column>;
  where?: Maybe<Hourly_Forecast_Bool_Exp>;
};

/** ordering options when selecting data from "hourly_forecast" */
export type Hourly_Forecast_Order_By = {
  address_id?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  short_forecast?: Maybe<Order_By>;
  temperature?: Maybe<Order_By>;
  temperature_unit?: Maybe<Order_By>;
  time?: Maybe<Order_By>;
  wind_speed?: Maybe<Order_By>;
};

/** primary key columns input for table: "hourly_forecast" */
export type Hourly_Forecast_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "hourly_forecast" */
export enum Hourly_Forecast_Select_Column {
  /** column name */
  AddressId = 'address_id',
  /** column name */
  Date = 'date',
  /** column name */
  Id = 'id',
  /** column name */
  ShortForecast = 'short_forecast',
  /** column name */
  Temperature = 'temperature',
  /** column name */
  TemperatureUnit = 'temperature_unit',
  /** column name */
  Time = 'time',
  /** column name */
  WindSpeed = 'wind_speed'
}

/** input type for updating data in table "hourly_forecast" */
export type Hourly_Forecast_Set_Input = {
  address_id?: Maybe<Scalars['uuid']>;
  date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  short_forecast?: Maybe<Scalars['String']>;
  temperature?: Maybe<Scalars['numeric']>;
  temperature_unit?: Maybe<Scalars['String']>;
  time?: Maybe<Scalars['time']>;
  wind_speed?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Hourly_Forecast_Stddev_Fields = {
   __typename?: 'hourly_forecast_stddev_fields';
  temperature?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "hourly_forecast" */
export type Hourly_Forecast_Stddev_Order_By = {
  temperature?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Hourly_Forecast_Stddev_Pop_Fields = {
   __typename?: 'hourly_forecast_stddev_pop_fields';
  temperature?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "hourly_forecast" */
export type Hourly_Forecast_Stddev_Pop_Order_By = {
  temperature?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Hourly_Forecast_Stddev_Samp_Fields = {
   __typename?: 'hourly_forecast_stddev_samp_fields';
  temperature?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "hourly_forecast" */
export type Hourly_Forecast_Stddev_Samp_Order_By = {
  temperature?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Hourly_Forecast_Sum_Fields = {
   __typename?: 'hourly_forecast_sum_fields';
  temperature?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "hourly_forecast" */
export type Hourly_Forecast_Sum_Order_By = {
  temperature?: Maybe<Order_By>;
};

/** update columns of table "hourly_forecast" */
export enum Hourly_Forecast_Update_Column {
  /** column name */
  AddressId = 'address_id',
  /** column name */
  Date = 'date',
  /** column name */
  Id = 'id',
  /** column name */
  ShortForecast = 'short_forecast',
  /** column name */
  Temperature = 'temperature',
  /** column name */
  TemperatureUnit = 'temperature_unit',
  /** column name */
  Time = 'time',
  /** column name */
  WindSpeed = 'wind_speed'
}

/** aggregate var_pop on columns */
export type Hourly_Forecast_Var_Pop_Fields = {
   __typename?: 'hourly_forecast_var_pop_fields';
  temperature?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "hourly_forecast" */
export type Hourly_Forecast_Var_Pop_Order_By = {
  temperature?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Hourly_Forecast_Var_Samp_Fields = {
   __typename?: 'hourly_forecast_var_samp_fields';
  temperature?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "hourly_forecast" */
export type Hourly_Forecast_Var_Samp_Order_By = {
  temperature?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Hourly_Forecast_Variance_Fields = {
   __typename?: 'hourly_forecast_variance_fields';
  temperature?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "hourly_forecast" */
export type Hourly_Forecast_Variance_Order_By = {
  temperature?: Maybe<Order_By>;
};

/** columns and relationships of "image" */
export type Image = {
   __typename?: 'image';
  blurhash?: Maybe<Scalars['String']>;
  created_at: Scalars['timestamptz'];
  created_by_user_id?: Maybe<Scalars['uuid']>;
  description?: Maybe<Scalars['String']>;
  /** An object relationship */
  government_identification?: Maybe<Government_Identification>;
  id: Scalars['uuid'];
  lg_url?: Maybe<Scalars['String']>;
  md_url?: Maybe<Scalars['String']>;
  parent_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  sm_url?: Maybe<Scalars['String']>;
  sort_index?: Maybe<Scalars['numeric']>;
  /** An object relationship */
  toolbox_talk?: Maybe<Toolbox_Talk>;
  type?: Maybe<Image_Type_Enum>;
  url: Scalars['String'];
};

/** aggregated selection of "image" */
export type Image_Aggregate = {
   __typename?: 'image_aggregate';
  aggregate?: Maybe<Image_Aggregate_Fields>;
  nodes: Array<Image>;
};

/** aggregate fields of "image" */
export type Image_Aggregate_Fields = {
   __typename?: 'image_aggregate_fields';
  avg?: Maybe<Image_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Image_Max_Fields>;
  min?: Maybe<Image_Min_Fields>;
  stddev?: Maybe<Image_Stddev_Fields>;
  stddev_pop?: Maybe<Image_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Image_Stddev_Samp_Fields>;
  sum?: Maybe<Image_Sum_Fields>;
  var_pop?: Maybe<Image_Var_Pop_Fields>;
  var_samp?: Maybe<Image_Var_Samp_Fields>;
  variance?: Maybe<Image_Variance_Fields>;
};


/** aggregate fields of "image" */
export type Image_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Image_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "image" */
export type Image_Aggregate_Order_By = {
  avg?: Maybe<Image_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Image_Max_Order_By>;
  min?: Maybe<Image_Min_Order_By>;
  stddev?: Maybe<Image_Stddev_Order_By>;
  stddev_pop?: Maybe<Image_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Image_Stddev_Samp_Order_By>;
  sum?: Maybe<Image_Sum_Order_By>;
  var_pop?: Maybe<Image_Var_Pop_Order_By>;
  var_samp?: Maybe<Image_Var_Samp_Order_By>;
  variance?: Maybe<Image_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "image" */
export type Image_Arr_Rel_Insert_Input = {
  data: Array<Image_Insert_Input>;
  on_conflict?: Maybe<Image_On_Conflict>;
};

/** aggregate avg on columns */
export type Image_Avg_Fields = {
   __typename?: 'image_avg_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "image" */
export type Image_Avg_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "image". All fields are combined with a logical 'AND'. */
export type Image_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Image_Bool_Exp>>>;
  _not?: Maybe<Image_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Image_Bool_Exp>>>;
  blurhash?: Maybe<String_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  created_by_user_id?: Maybe<Uuid_Comparison_Exp>;
  description?: Maybe<String_Comparison_Exp>;
  government_identification?: Maybe<Government_Identification_Bool_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  lg_url?: Maybe<String_Comparison_Exp>;
  md_url?: Maybe<String_Comparison_Exp>;
  parent_id?: Maybe<Uuid_Comparison_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  sm_url?: Maybe<String_Comparison_Exp>;
  sort_index?: Maybe<Numeric_Comparison_Exp>;
  toolbox_talk?: Maybe<Toolbox_Talk_Bool_Exp>;
  type?: Maybe<Image_Type_Enum_Comparison_Exp>;
  url?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "image" */
export enum Image_Constraint {
  /** unique or primary key constraint */
  ImagePkey = 'image_pkey'
}

/** input type for incrementing integer column in table "image" */
export type Image_Inc_Input = {
  sort_index?: Maybe<Scalars['numeric']>;
};

/** input type for inserting data into table "image" */
export type Image_Insert_Input = {
  blurhash?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  description?: Maybe<Scalars['String']>;
  government_identification?: Maybe<Government_Identification_Obj_Rel_Insert_Input>;
  id?: Maybe<Scalars['uuid']>;
  lg_url?: Maybe<Scalars['String']>;
  md_url?: Maybe<Scalars['String']>;
  parent_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  sm_url?: Maybe<Scalars['String']>;
  sort_index?: Maybe<Scalars['numeric']>;
  toolbox_talk?: Maybe<Toolbox_Talk_Obj_Rel_Insert_Input>;
  type?: Maybe<Image_Type_Enum>;
  url?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Image_Max_Fields = {
   __typename?: 'image_max_fields';
  blurhash?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  lg_url?: Maybe<Scalars['String']>;
  md_url?: Maybe<Scalars['String']>;
  parent_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  sm_url?: Maybe<Scalars['String']>;
  sort_index?: Maybe<Scalars['numeric']>;
  url?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "image" */
export type Image_Max_Order_By = {
  blurhash?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  created_by_user_id?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  lg_url?: Maybe<Order_By>;
  md_url?: Maybe<Order_By>;
  parent_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  sm_url?: Maybe<Order_By>;
  sort_index?: Maybe<Order_By>;
  url?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Image_Min_Fields = {
   __typename?: 'image_min_fields';
  blurhash?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  lg_url?: Maybe<Scalars['String']>;
  md_url?: Maybe<Scalars['String']>;
  parent_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  sm_url?: Maybe<Scalars['String']>;
  sort_index?: Maybe<Scalars['numeric']>;
  url?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "image" */
export type Image_Min_Order_By = {
  blurhash?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  created_by_user_id?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  lg_url?: Maybe<Order_By>;
  md_url?: Maybe<Order_By>;
  parent_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  sm_url?: Maybe<Order_By>;
  sort_index?: Maybe<Order_By>;
  url?: Maybe<Order_By>;
};

/** response of any mutation on the table "image" */
export type Image_Mutation_Response = {
   __typename?: 'image_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Image>;
};

/** input type for inserting object relation for remote table "image" */
export type Image_Obj_Rel_Insert_Input = {
  data: Image_Insert_Input;
  on_conflict?: Maybe<Image_On_Conflict>;
};

/** on conflict condition type for table "image" */
export type Image_On_Conflict = {
  constraint: Image_Constraint;
  update_columns: Array<Image_Update_Column>;
  where?: Maybe<Image_Bool_Exp>;
};

/** ordering options when selecting data from "image" */
export type Image_Order_By = {
  blurhash?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  created_by_user_id?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  government_identification?: Maybe<Government_Identification_Order_By>;
  id?: Maybe<Order_By>;
  lg_url?: Maybe<Order_By>;
  md_url?: Maybe<Order_By>;
  parent_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  sm_url?: Maybe<Order_By>;
  sort_index?: Maybe<Order_By>;
  toolbox_talk?: Maybe<Toolbox_Talk_Order_By>;
  type?: Maybe<Order_By>;
  url?: Maybe<Order_By>;
};

/** primary key columns input for table: "image" */
export type Image_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "image" */
export enum Image_Select_Column {
  /** column name */
  Blurhash = 'blurhash',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CreatedByUserId = 'created_by_user_id',
  /** column name */
  Description = 'description',
  /** column name */
  Id = 'id',
  /** column name */
  LgUrl = 'lg_url',
  /** column name */
  MdUrl = 'md_url',
  /** column name */
  ParentId = 'parent_id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  SmUrl = 'sm_url',
  /** column name */
  SortIndex = 'sort_index',
  /** column name */
  Type = 'type',
  /** column name */
  Url = 'url'
}

/** input type for updating data in table "image" */
export type Image_Set_Input = {
  blurhash?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  lg_url?: Maybe<Scalars['String']>;
  md_url?: Maybe<Scalars['String']>;
  parent_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  sm_url?: Maybe<Scalars['String']>;
  sort_index?: Maybe<Scalars['numeric']>;
  type?: Maybe<Image_Type_Enum>;
  url?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Image_Stddev_Fields = {
   __typename?: 'image_stddev_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "image" */
export type Image_Stddev_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Image_Stddev_Pop_Fields = {
   __typename?: 'image_stddev_pop_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "image" */
export type Image_Stddev_Pop_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Image_Stddev_Samp_Fields = {
   __typename?: 'image_stddev_samp_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "image" */
export type Image_Stddev_Samp_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Image_Sum_Fields = {
   __typename?: 'image_sum_fields';
  sort_index?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "image" */
export type Image_Sum_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** columns and relationships of "image_type" */
export type Image_Type = {
   __typename?: 'image_type';
  value: Scalars['String'];
};

/** aggregated selection of "image_type" */
export type Image_Type_Aggregate = {
   __typename?: 'image_type_aggregate';
  aggregate?: Maybe<Image_Type_Aggregate_Fields>;
  nodes: Array<Image_Type>;
};

/** aggregate fields of "image_type" */
export type Image_Type_Aggregate_Fields = {
   __typename?: 'image_type_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Image_Type_Max_Fields>;
  min?: Maybe<Image_Type_Min_Fields>;
};


/** aggregate fields of "image_type" */
export type Image_Type_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Image_Type_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "image_type" */
export type Image_Type_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Image_Type_Max_Order_By>;
  min?: Maybe<Image_Type_Min_Order_By>;
};

/** input type for inserting array relation for remote table "image_type" */
export type Image_Type_Arr_Rel_Insert_Input = {
  data: Array<Image_Type_Insert_Input>;
  on_conflict?: Maybe<Image_Type_On_Conflict>;
};

/** Boolean expression to filter rows from the table "image_type". All fields are combined with a logical 'AND'. */
export type Image_Type_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Image_Type_Bool_Exp>>>;
  _not?: Maybe<Image_Type_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Image_Type_Bool_Exp>>>;
  value?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "image_type" */
export enum Image_Type_Constraint {
  /** unique or primary key constraint */
  ImageTypePkey = 'image_type_pkey'
}

export enum Image_Type_Enum {
  DailyLog = 'daily_log',
  DailyNote = 'daily_note',
  DigEngineeredProtectionSystem = 'dig_engineered_protection_system'
}

/** expression to compare columns of type image_type_enum. All fields are combined with logical 'AND'. */
export type Image_Type_Enum_Comparison_Exp = {
  _eq?: Maybe<Image_Type_Enum>;
  _in?: Maybe<Array<Image_Type_Enum>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _neq?: Maybe<Image_Type_Enum>;
  _nin?: Maybe<Array<Image_Type_Enum>>;
};

/** input type for inserting data into table "image_type" */
export type Image_Type_Insert_Input = {
  value?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Image_Type_Max_Fields = {
   __typename?: 'image_type_max_fields';
  value?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "image_type" */
export type Image_Type_Max_Order_By = {
  value?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Image_Type_Min_Fields = {
   __typename?: 'image_type_min_fields';
  value?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "image_type" */
export type Image_Type_Min_Order_By = {
  value?: Maybe<Order_By>;
};

/** response of any mutation on the table "image_type" */
export type Image_Type_Mutation_Response = {
   __typename?: 'image_type_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Image_Type>;
};

/** input type for inserting object relation for remote table "image_type" */
export type Image_Type_Obj_Rel_Insert_Input = {
  data: Image_Type_Insert_Input;
  on_conflict?: Maybe<Image_Type_On_Conflict>;
};

/** on conflict condition type for table "image_type" */
export type Image_Type_On_Conflict = {
  constraint: Image_Type_Constraint;
  update_columns: Array<Image_Type_Update_Column>;
  where?: Maybe<Image_Type_Bool_Exp>;
};

/** ordering options when selecting data from "image_type" */
export type Image_Type_Order_By = {
  value?: Maybe<Order_By>;
};

/** primary key columns input for table: "image_type" */
export type Image_Type_Pk_Columns_Input = {
  value: Scalars['String'];
};

/** select columns of table "image_type" */
export enum Image_Type_Select_Column {
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "image_type" */
export type Image_Type_Set_Input = {
  value?: Maybe<Scalars['String']>;
};

/** update columns of table "image_type" */
export enum Image_Type_Update_Column {
  /** column name */
  Value = 'value'
}

/** update columns of table "image" */
export enum Image_Update_Column {
  /** column name */
  Blurhash = 'blurhash',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CreatedByUserId = 'created_by_user_id',
  /** column name */
  Description = 'description',
  /** column name */
  Id = 'id',
  /** column name */
  LgUrl = 'lg_url',
  /** column name */
  MdUrl = 'md_url',
  /** column name */
  ParentId = 'parent_id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  SmUrl = 'sm_url',
  /** column name */
  SortIndex = 'sort_index',
  /** column name */
  Type = 'type',
  /** column name */
  Url = 'url'
}

/** aggregate var_pop on columns */
export type Image_Var_Pop_Fields = {
   __typename?: 'image_var_pop_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "image" */
export type Image_Var_Pop_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Image_Var_Samp_Fields = {
   __typename?: 'image_var_samp_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "image" */
export type Image_Var_Samp_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Image_Variance_Fields = {
   __typename?: 'image_variance_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "image" */
export type Image_Variance_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** columns and relationships of "incident_example" */
export type Incident_Example = {
   __typename?: 'incident_example';
  /** An object relationship */
  address: Address;
  address_id: Scalars['uuid'];
  cause: Scalars['String'];
  created_at: Scalars['timestamptz'];
  description: Scalars['String'];
  id: Scalars['uuid'];
  question: Scalars['String'];
  repository_incident_id: Scalars['String'];
  result: Scalars['String'];
  /** An object relationship */
  subcontractor_trade: Subcontractor_Trade;
  subcontractor_trade_id: Scalars['uuid'];
  updated_at: Scalars['timestamptz'];
  worker_age: Scalars['Int'];
};

/** aggregated selection of "incident_example" */
export type Incident_Example_Aggregate = {
   __typename?: 'incident_example_aggregate';
  aggregate?: Maybe<Incident_Example_Aggregate_Fields>;
  nodes: Array<Incident_Example>;
};

/** aggregate fields of "incident_example" */
export type Incident_Example_Aggregate_Fields = {
   __typename?: 'incident_example_aggregate_fields';
  avg?: Maybe<Incident_Example_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Incident_Example_Max_Fields>;
  min?: Maybe<Incident_Example_Min_Fields>;
  stddev?: Maybe<Incident_Example_Stddev_Fields>;
  stddev_pop?: Maybe<Incident_Example_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Incident_Example_Stddev_Samp_Fields>;
  sum?: Maybe<Incident_Example_Sum_Fields>;
  var_pop?: Maybe<Incident_Example_Var_Pop_Fields>;
  var_samp?: Maybe<Incident_Example_Var_Samp_Fields>;
  variance?: Maybe<Incident_Example_Variance_Fields>;
};


/** aggregate fields of "incident_example" */
export type Incident_Example_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Incident_Example_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "incident_example" */
export type Incident_Example_Aggregate_Order_By = {
  avg?: Maybe<Incident_Example_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Incident_Example_Max_Order_By>;
  min?: Maybe<Incident_Example_Min_Order_By>;
  stddev?: Maybe<Incident_Example_Stddev_Order_By>;
  stddev_pop?: Maybe<Incident_Example_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Incident_Example_Stddev_Samp_Order_By>;
  sum?: Maybe<Incident_Example_Sum_Order_By>;
  var_pop?: Maybe<Incident_Example_Var_Pop_Order_By>;
  var_samp?: Maybe<Incident_Example_Var_Samp_Order_By>;
  variance?: Maybe<Incident_Example_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "incident_example" */
export type Incident_Example_Arr_Rel_Insert_Input = {
  data: Array<Incident_Example_Insert_Input>;
  on_conflict?: Maybe<Incident_Example_On_Conflict>;
};

/** aggregate avg on columns */
export type Incident_Example_Avg_Fields = {
   __typename?: 'incident_example_avg_fields';
  worker_age?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "incident_example" */
export type Incident_Example_Avg_Order_By = {
  worker_age?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "incident_example". All fields are combined with a logical 'AND'. */
export type Incident_Example_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Incident_Example_Bool_Exp>>>;
  _not?: Maybe<Incident_Example_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Incident_Example_Bool_Exp>>>;
  address?: Maybe<Address_Bool_Exp>;
  address_id?: Maybe<Uuid_Comparison_Exp>;
  cause?: Maybe<String_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  description?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  question?: Maybe<String_Comparison_Exp>;
  repository_incident_id?: Maybe<String_Comparison_Exp>;
  result?: Maybe<String_Comparison_Exp>;
  subcontractor_trade?: Maybe<Subcontractor_Trade_Bool_Exp>;
  subcontractor_trade_id?: Maybe<Uuid_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  worker_age?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "incident_example" */
export enum Incident_Example_Constraint {
  /** unique or primary key constraint */
  IncidentExampleDescriptionKey = 'incident_example_description_key',
  /** unique or primary key constraint */
  IncidentExamplePkey = 'incident_example_pkey',
  /** unique or primary key constraint */
  IncidentExampleRepositoryIncidentIdKey = 'incident_example_repository_incident_id_key'
}

/** input type for incrementing integer column in table "incident_example" */
export type Incident_Example_Inc_Input = {
  worker_age?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "incident_example" */
export type Incident_Example_Insert_Input = {
  address?: Maybe<Address_Obj_Rel_Insert_Input>;
  address_id?: Maybe<Scalars['uuid']>;
  cause?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  question?: Maybe<Scalars['String']>;
  repository_incident_id?: Maybe<Scalars['String']>;
  result?: Maybe<Scalars['String']>;
  subcontractor_trade?: Maybe<Subcontractor_Trade_Obj_Rel_Insert_Input>;
  subcontractor_trade_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  worker_age?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type Incident_Example_Max_Fields = {
   __typename?: 'incident_example_max_fields';
  address_id?: Maybe<Scalars['uuid']>;
  cause?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  question?: Maybe<Scalars['String']>;
  repository_incident_id?: Maybe<Scalars['String']>;
  result?: Maybe<Scalars['String']>;
  subcontractor_trade_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  worker_age?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "incident_example" */
export type Incident_Example_Max_Order_By = {
  address_id?: Maybe<Order_By>;
  cause?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  question?: Maybe<Order_By>;
  repository_incident_id?: Maybe<Order_By>;
  result?: Maybe<Order_By>;
  subcontractor_trade_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  worker_age?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Incident_Example_Min_Fields = {
   __typename?: 'incident_example_min_fields';
  address_id?: Maybe<Scalars['uuid']>;
  cause?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  question?: Maybe<Scalars['String']>;
  repository_incident_id?: Maybe<Scalars['String']>;
  result?: Maybe<Scalars['String']>;
  subcontractor_trade_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  worker_age?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "incident_example" */
export type Incident_Example_Min_Order_By = {
  address_id?: Maybe<Order_By>;
  cause?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  question?: Maybe<Order_By>;
  repository_incident_id?: Maybe<Order_By>;
  result?: Maybe<Order_By>;
  subcontractor_trade_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  worker_age?: Maybe<Order_By>;
};

/** response of any mutation on the table "incident_example" */
export type Incident_Example_Mutation_Response = {
   __typename?: 'incident_example_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Incident_Example>;
};

/** input type for inserting object relation for remote table "incident_example" */
export type Incident_Example_Obj_Rel_Insert_Input = {
  data: Incident_Example_Insert_Input;
  on_conflict?: Maybe<Incident_Example_On_Conflict>;
};

/** on conflict condition type for table "incident_example" */
export type Incident_Example_On_Conflict = {
  constraint: Incident_Example_Constraint;
  update_columns: Array<Incident_Example_Update_Column>;
  where?: Maybe<Incident_Example_Bool_Exp>;
};

/** ordering options when selecting data from "incident_example" */
export type Incident_Example_Order_By = {
  address?: Maybe<Address_Order_By>;
  address_id?: Maybe<Order_By>;
  cause?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  question?: Maybe<Order_By>;
  repository_incident_id?: Maybe<Order_By>;
  result?: Maybe<Order_By>;
  subcontractor_trade?: Maybe<Subcontractor_Trade_Order_By>;
  subcontractor_trade_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  worker_age?: Maybe<Order_By>;
};

/** primary key columns input for table: "incident_example" */
export type Incident_Example_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "incident_example" */
export enum Incident_Example_Select_Column {
  /** column name */
  AddressId = 'address_id',
  /** column name */
  Cause = 'cause',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Description = 'description',
  /** column name */
  Id = 'id',
  /** column name */
  Question = 'question',
  /** column name */
  RepositoryIncidentId = 'repository_incident_id',
  /** column name */
  Result = 'result',
  /** column name */
  SubcontractorTradeId = 'subcontractor_trade_id',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  WorkerAge = 'worker_age'
}

/** input type for updating data in table "incident_example" */
export type Incident_Example_Set_Input = {
  address_id?: Maybe<Scalars['uuid']>;
  cause?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  question?: Maybe<Scalars['String']>;
  repository_incident_id?: Maybe<Scalars['String']>;
  result?: Maybe<Scalars['String']>;
  subcontractor_trade_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  worker_age?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type Incident_Example_Stddev_Fields = {
   __typename?: 'incident_example_stddev_fields';
  worker_age?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "incident_example" */
export type Incident_Example_Stddev_Order_By = {
  worker_age?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Incident_Example_Stddev_Pop_Fields = {
   __typename?: 'incident_example_stddev_pop_fields';
  worker_age?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "incident_example" */
export type Incident_Example_Stddev_Pop_Order_By = {
  worker_age?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Incident_Example_Stddev_Samp_Fields = {
   __typename?: 'incident_example_stddev_samp_fields';
  worker_age?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "incident_example" */
export type Incident_Example_Stddev_Samp_Order_By = {
  worker_age?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Incident_Example_Sum_Fields = {
   __typename?: 'incident_example_sum_fields';
  worker_age?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "incident_example" */
export type Incident_Example_Sum_Order_By = {
  worker_age?: Maybe<Order_By>;
};

/** update columns of table "incident_example" */
export enum Incident_Example_Update_Column {
  /** column name */
  AddressId = 'address_id',
  /** column name */
  Cause = 'cause',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Description = 'description',
  /** column name */
  Id = 'id',
  /** column name */
  Question = 'question',
  /** column name */
  RepositoryIncidentId = 'repository_incident_id',
  /** column name */
  Result = 'result',
  /** column name */
  SubcontractorTradeId = 'subcontractor_trade_id',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  WorkerAge = 'worker_age'
}

/** aggregate var_pop on columns */
export type Incident_Example_Var_Pop_Fields = {
   __typename?: 'incident_example_var_pop_fields';
  worker_age?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "incident_example" */
export type Incident_Example_Var_Pop_Order_By = {
  worker_age?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Incident_Example_Var_Samp_Fields = {
   __typename?: 'incident_example_var_samp_fields';
  worker_age?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "incident_example" */
export type Incident_Example_Var_Samp_Order_By = {
  worker_age?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Incident_Example_Variance_Fields = {
   __typename?: 'incident_example_variance_fields';
  worker_age?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "incident_example" */
export type Incident_Example_Variance_Order_By = {
  worker_age?: Maybe<Order_By>;
};

/** expression to compare columns of type Int. All fields are combined with logical 'AND'. */
export type Int_Comparison_Exp = {
  _eq?: Maybe<Scalars['Int']>;
  _gt?: Maybe<Scalars['Int']>;
  _gte?: Maybe<Scalars['Int']>;
  _in?: Maybe<Array<Scalars['Int']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['Int']>;
  _lte?: Maybe<Scalars['Int']>;
  _neq?: Maybe<Scalars['Int']>;
  _nin?: Maybe<Array<Scalars['Int']>>;
};


/** expression to compare columns of type interval. All fields are combined with logical 'AND'. */
export type Interval_Comparison_Exp = {
  _eq?: Maybe<Scalars['interval']>;
  _gt?: Maybe<Scalars['interval']>;
  _gte?: Maybe<Scalars['interval']>;
  _in?: Maybe<Array<Scalars['interval']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['interval']>;
  _lte?: Maybe<Scalars['interval']>;
  _neq?: Maybe<Scalars['interval']>;
  _nin?: Maybe<Array<Scalars['interval']>>;
};

/** columns and relationships of "invite" */
export type Invite = {
   __typename?: 'invite';
  accepted_at?: Maybe<Scalars['timestamptz']>;
  automatic_sent?: Maybe<Scalars['Boolean']>;
  claiming_account?: Maybe<Scalars['Boolean']>;
  created_at: Scalars['timestamptz'];
  from_uid: Scalars['uuid'];
  /** An object relationship */
  from_user: User;
  /** An object relationship */
  general_contractor?: Maybe<General_Contractor>;
  id: Scalars['String'];
  join_general_contractor_id?: Maybe<Scalars['uuid']>;
  join_project_crew_id?: Maybe<Scalars['uuid']>;
  join_project_id?: Maybe<Scalars['uuid']>;
  join_role?: Maybe<Scalars['String']>;
  join_subcontractor_id?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  project?: Maybe<Project>;
  /** An object relationship */
  project_crew?: Maybe<Project_Crew>;
  /** An object relationship */
  subcontractor?: Maybe<Subcontractor>;
  to_email?: Maybe<Scalars['String']>;
  to_phone_number?: Maybe<Scalars['String']>;
  to_uid?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  to_user?: Maybe<User>;
};

/** aggregated selection of "invite" */
export type Invite_Aggregate = {
   __typename?: 'invite_aggregate';
  aggregate?: Maybe<Invite_Aggregate_Fields>;
  nodes: Array<Invite>;
};

/** aggregate fields of "invite" */
export type Invite_Aggregate_Fields = {
   __typename?: 'invite_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Invite_Max_Fields>;
  min?: Maybe<Invite_Min_Fields>;
};


/** aggregate fields of "invite" */
export type Invite_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Invite_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "invite" */
export type Invite_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Invite_Max_Order_By>;
  min?: Maybe<Invite_Min_Order_By>;
};

/** input type for inserting array relation for remote table "invite" */
export type Invite_Arr_Rel_Insert_Input = {
  data: Array<Invite_Insert_Input>;
  on_conflict?: Maybe<Invite_On_Conflict>;
};

/** Boolean expression to filter rows from the table "invite". All fields are combined with a logical 'AND'. */
export type Invite_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Invite_Bool_Exp>>>;
  _not?: Maybe<Invite_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Invite_Bool_Exp>>>;
  accepted_at?: Maybe<Timestamptz_Comparison_Exp>;
  automatic_sent?: Maybe<Boolean_Comparison_Exp>;
  claiming_account?: Maybe<Boolean_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  from_uid?: Maybe<Uuid_Comparison_Exp>;
  from_user?: Maybe<User_Bool_Exp>;
  general_contractor?: Maybe<General_Contractor_Bool_Exp>;
  id?: Maybe<String_Comparison_Exp>;
  join_general_contractor_id?: Maybe<Uuid_Comparison_Exp>;
  join_project_crew_id?: Maybe<Uuid_Comparison_Exp>;
  join_project_id?: Maybe<Uuid_Comparison_Exp>;
  join_role?: Maybe<String_Comparison_Exp>;
  join_subcontractor_id?: Maybe<Uuid_Comparison_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_crew?: Maybe<Project_Crew_Bool_Exp>;
  subcontractor?: Maybe<Subcontractor_Bool_Exp>;
  to_email?: Maybe<String_Comparison_Exp>;
  to_phone_number?: Maybe<String_Comparison_Exp>;
  to_uid?: Maybe<Uuid_Comparison_Exp>;
  to_user?: Maybe<User_Bool_Exp>;
};

/** unique or primary key constraints on table "invite" */
export enum Invite_Constraint {
  /** unique or primary key constraint */
  InviteIdKey = 'invite_id_key',
  /** unique or primary key constraint */
  InvitePkey = 'invite_pkey'
}

/** input type for inserting data into table "invite" */
export type Invite_Insert_Input = {
  accepted_at?: Maybe<Scalars['timestamptz']>;
  automatic_sent?: Maybe<Scalars['Boolean']>;
  claiming_account?: Maybe<Scalars['Boolean']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  from_uid?: Maybe<Scalars['uuid']>;
  from_user?: Maybe<User_Obj_Rel_Insert_Input>;
  general_contractor?: Maybe<General_Contractor_Obj_Rel_Insert_Input>;
  id?: Maybe<Scalars['String']>;
  join_general_contractor_id?: Maybe<Scalars['uuid']>;
  join_project_crew_id?: Maybe<Scalars['uuid']>;
  join_project_id?: Maybe<Scalars['uuid']>;
  join_role?: Maybe<Scalars['String']>;
  join_subcontractor_id?: Maybe<Scalars['uuid']>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_crew?: Maybe<Project_Crew_Obj_Rel_Insert_Input>;
  subcontractor?: Maybe<Subcontractor_Obj_Rel_Insert_Input>;
  to_email?: Maybe<Scalars['String']>;
  to_phone_number?: Maybe<Scalars['String']>;
  to_uid?: Maybe<Scalars['uuid']>;
  to_user?: Maybe<User_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Invite_Max_Fields = {
   __typename?: 'invite_max_fields';
  accepted_at?: Maybe<Scalars['timestamptz']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  from_uid?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['String']>;
  join_general_contractor_id?: Maybe<Scalars['uuid']>;
  join_project_crew_id?: Maybe<Scalars['uuid']>;
  join_project_id?: Maybe<Scalars['uuid']>;
  join_role?: Maybe<Scalars['String']>;
  join_subcontractor_id?: Maybe<Scalars['uuid']>;
  to_email?: Maybe<Scalars['String']>;
  to_phone_number?: Maybe<Scalars['String']>;
  to_uid?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "invite" */
export type Invite_Max_Order_By = {
  accepted_at?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  from_uid?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  join_general_contractor_id?: Maybe<Order_By>;
  join_project_crew_id?: Maybe<Order_By>;
  join_project_id?: Maybe<Order_By>;
  join_role?: Maybe<Order_By>;
  join_subcontractor_id?: Maybe<Order_By>;
  to_email?: Maybe<Order_By>;
  to_phone_number?: Maybe<Order_By>;
  to_uid?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Invite_Min_Fields = {
   __typename?: 'invite_min_fields';
  accepted_at?: Maybe<Scalars['timestamptz']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  from_uid?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['String']>;
  join_general_contractor_id?: Maybe<Scalars['uuid']>;
  join_project_crew_id?: Maybe<Scalars['uuid']>;
  join_project_id?: Maybe<Scalars['uuid']>;
  join_role?: Maybe<Scalars['String']>;
  join_subcontractor_id?: Maybe<Scalars['uuid']>;
  to_email?: Maybe<Scalars['String']>;
  to_phone_number?: Maybe<Scalars['String']>;
  to_uid?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "invite" */
export type Invite_Min_Order_By = {
  accepted_at?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  from_uid?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  join_general_contractor_id?: Maybe<Order_By>;
  join_project_crew_id?: Maybe<Order_By>;
  join_project_id?: Maybe<Order_By>;
  join_role?: Maybe<Order_By>;
  join_subcontractor_id?: Maybe<Order_By>;
  to_email?: Maybe<Order_By>;
  to_phone_number?: Maybe<Order_By>;
  to_uid?: Maybe<Order_By>;
};

/** response of any mutation on the table "invite" */
export type Invite_Mutation_Response = {
   __typename?: 'invite_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Invite>;
};

/** input type for inserting object relation for remote table "invite" */
export type Invite_Obj_Rel_Insert_Input = {
  data: Invite_Insert_Input;
  on_conflict?: Maybe<Invite_On_Conflict>;
};

/** on conflict condition type for table "invite" */
export type Invite_On_Conflict = {
  constraint: Invite_Constraint;
  update_columns: Array<Invite_Update_Column>;
  where?: Maybe<Invite_Bool_Exp>;
};

/** ordering options when selecting data from "invite" */
export type Invite_Order_By = {
  accepted_at?: Maybe<Order_By>;
  automatic_sent?: Maybe<Order_By>;
  claiming_account?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  from_uid?: Maybe<Order_By>;
  from_user?: Maybe<User_Order_By>;
  general_contractor?: Maybe<General_Contractor_Order_By>;
  id?: Maybe<Order_By>;
  join_general_contractor_id?: Maybe<Order_By>;
  join_project_crew_id?: Maybe<Order_By>;
  join_project_id?: Maybe<Order_By>;
  join_role?: Maybe<Order_By>;
  join_subcontractor_id?: Maybe<Order_By>;
  project?: Maybe<Project_Order_By>;
  project_crew?: Maybe<Project_Crew_Order_By>;
  subcontractor?: Maybe<Subcontractor_Order_By>;
  to_email?: Maybe<Order_By>;
  to_phone_number?: Maybe<Order_By>;
  to_uid?: Maybe<Order_By>;
  to_user?: Maybe<User_Order_By>;
};

/** primary key columns input for table: "invite" */
export type Invite_Pk_Columns_Input = {
  id: Scalars['String'];
};

/** select columns of table "invite" */
export enum Invite_Select_Column {
  /** column name */
  AcceptedAt = 'accepted_at',
  /** column name */
  AutomaticSent = 'automatic_sent',
  /** column name */
  ClaimingAccount = 'claiming_account',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  FromUid = 'from_uid',
  /** column name */
  Id = 'id',
  /** column name */
  JoinGeneralContractorId = 'join_general_contractor_id',
  /** column name */
  JoinProjectCrewId = 'join_project_crew_id',
  /** column name */
  JoinProjectId = 'join_project_id',
  /** column name */
  JoinRole = 'join_role',
  /** column name */
  JoinSubcontractorId = 'join_subcontractor_id',
  /** column name */
  ToEmail = 'to_email',
  /** column name */
  ToPhoneNumber = 'to_phone_number',
  /** column name */
  ToUid = 'to_uid'
}

/** input type for updating data in table "invite" */
export type Invite_Set_Input = {
  accepted_at?: Maybe<Scalars['timestamptz']>;
  automatic_sent?: Maybe<Scalars['Boolean']>;
  claiming_account?: Maybe<Scalars['Boolean']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  from_uid?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['String']>;
  join_general_contractor_id?: Maybe<Scalars['uuid']>;
  join_project_crew_id?: Maybe<Scalars['uuid']>;
  join_project_id?: Maybe<Scalars['uuid']>;
  join_role?: Maybe<Scalars['String']>;
  join_subcontractor_id?: Maybe<Scalars['uuid']>;
  to_email?: Maybe<Scalars['String']>;
  to_phone_number?: Maybe<Scalars['String']>;
  to_uid?: Maybe<Scalars['uuid']>;
};

/** update columns of table "invite" */
export enum Invite_Update_Column {
  /** column name */
  AcceptedAt = 'accepted_at',
  /** column name */
  AutomaticSent = 'automatic_sent',
  /** column name */
  ClaimingAccount = 'claiming_account',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  FromUid = 'from_uid',
  /** column name */
  Id = 'id',
  /** column name */
  JoinGeneralContractorId = 'join_general_contractor_id',
  /** column name */
  JoinProjectCrewId = 'join_project_crew_id',
  /** column name */
  JoinProjectId = 'join_project_id',
  /** column name */
  JoinRole = 'join_role',
  /** column name */
  JoinSubcontractorId = 'join_subcontractor_id',
  /** column name */
  ToEmail = 'to_email',
  /** column name */
  ToPhoneNumber = 'to_phone_number',
  /** column name */
  ToUid = 'to_uid'
}


/** expression to compare columns of type json. All fields are combined with logical 'AND'. */
export type Json_Comparison_Exp = {
  _eq?: Maybe<Scalars['json']>;
  _gt?: Maybe<Scalars['json']>;
  _gte?: Maybe<Scalars['json']>;
  _in?: Maybe<Array<Scalars['json']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['json']>;
  _lte?: Maybe<Scalars['json']>;
  _neq?: Maybe<Scalars['json']>;
  _nin?: Maybe<Array<Scalars['json']>>;
};

/** columns and relationships of "lang_code" */
export type Lang_Code = {
   __typename?: 'lang_code';
  value: Scalars['String'];
};

/** aggregated selection of "lang_code" */
export type Lang_Code_Aggregate = {
   __typename?: 'lang_code_aggregate';
  aggregate?: Maybe<Lang_Code_Aggregate_Fields>;
  nodes: Array<Lang_Code>;
};

/** aggregate fields of "lang_code" */
export type Lang_Code_Aggregate_Fields = {
   __typename?: 'lang_code_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Lang_Code_Max_Fields>;
  min?: Maybe<Lang_Code_Min_Fields>;
};


/** aggregate fields of "lang_code" */
export type Lang_Code_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Lang_Code_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "lang_code" */
export type Lang_Code_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Lang_Code_Max_Order_By>;
  min?: Maybe<Lang_Code_Min_Order_By>;
};

/** input type for inserting array relation for remote table "lang_code" */
export type Lang_Code_Arr_Rel_Insert_Input = {
  data: Array<Lang_Code_Insert_Input>;
  on_conflict?: Maybe<Lang_Code_On_Conflict>;
};

/** Boolean expression to filter rows from the table "lang_code". All fields are combined with a logical 'AND'. */
export type Lang_Code_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Lang_Code_Bool_Exp>>>;
  _not?: Maybe<Lang_Code_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Lang_Code_Bool_Exp>>>;
  value?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "lang_code" */
export enum Lang_Code_Constraint {
  /** unique or primary key constraint */
  LangCodePkey = 'lang_code_pkey'
}

export enum Lang_Code_Enum {
  En = 'en',
  Es = 'es',
  Pt = 'pt'
}

/** expression to compare columns of type lang_code_enum. All fields are combined with logical 'AND'. */
export type Lang_Code_Enum_Comparison_Exp = {
  _eq?: Maybe<Lang_Code_Enum>;
  _in?: Maybe<Array<Lang_Code_Enum>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _neq?: Maybe<Lang_Code_Enum>;
  _nin?: Maybe<Array<Lang_Code_Enum>>;
};

/** input type for inserting data into table "lang_code" */
export type Lang_Code_Insert_Input = {
  value?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Lang_Code_Max_Fields = {
   __typename?: 'lang_code_max_fields';
  value?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "lang_code" */
export type Lang_Code_Max_Order_By = {
  value?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Lang_Code_Min_Fields = {
   __typename?: 'lang_code_min_fields';
  value?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "lang_code" */
export type Lang_Code_Min_Order_By = {
  value?: Maybe<Order_By>;
};

/** response of any mutation on the table "lang_code" */
export type Lang_Code_Mutation_Response = {
   __typename?: 'lang_code_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Lang_Code>;
};

/** input type for inserting object relation for remote table "lang_code" */
export type Lang_Code_Obj_Rel_Insert_Input = {
  data: Lang_Code_Insert_Input;
  on_conflict?: Maybe<Lang_Code_On_Conflict>;
};

/** on conflict condition type for table "lang_code" */
export type Lang_Code_On_Conflict = {
  constraint: Lang_Code_Constraint;
  update_columns: Array<Lang_Code_Update_Column>;
  where?: Maybe<Lang_Code_Bool_Exp>;
};

/** ordering options when selecting data from "lang_code" */
export type Lang_Code_Order_By = {
  value?: Maybe<Order_By>;
};

/** primary key columns input for table: "lang_code" */
export type Lang_Code_Pk_Columns_Input = {
  value: Scalars['String'];
};

/** select columns of table "lang_code" */
export enum Lang_Code_Select_Column {
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "lang_code" */
export type Lang_Code_Set_Input = {
  value?: Maybe<Scalars['String']>;
};

/** update columns of table "lang_code" */
export enum Lang_Code_Update_Column {
  /** column name */
  Value = 'value'
}

export type MakeWorkerCrewLeadInput = {
  isLead?: Maybe<Scalars['Boolean']>;
  projectWorkerId: Scalars['String'];
};

export type Mutation = {
   __typename?: 'Mutation';
  acceptInvite?: Maybe<Scalars['String']>;
  createEmployee?: Maybe<Scalars['String']>;
  createInvite: Array<Scalars['String']>;
  createSubcontractorEmployee?: Maybe<Scalars['Int']>;
  createWorker?: Maybe<Scalars['String']>;
  emailChecklistNotifyees?: Maybe<Scalars['Boolean']>;
  emailCovidSpreadsheet?: Maybe<Scalars['String']>;
  emailCovidTestedPositive?: Maybe<Scalars['Boolean']>;
  emailCovidWorkerAuditSpreadsheet?: Maybe<Scalars['String']>;
  emailDailyLogComment?: Maybe<Scalars['Boolean']>;
  emailDailyLogsPdf?: Maybe<Scalars['Boolean']>;
  emailDailyReportPdf?: Maybe<Scalars['Boolean']>;
  emailDashboardSpreadsheet?: Maybe<Scalars['String']>;
  emailFailedCovidCertification?: Maybe<Scalars['Boolean']>;
  emailPermitPdf?: Maybe<Scalars['Boolean']>;
  emailSafetyReportPdf?: Maybe<Scalars['Boolean']>;
  emailToolboxTalkPdf?: Maybe<Scalars['Boolean']>;
  forgotPassword?: Maybe<Scalars['Boolean']>;
  generateDailyReportsSummary?: Maybe<Scalars['String']>;
  generateGCSpreadsheet?: Maybe<Scalars['String']>;
  getBlurhash?: Maybe<GetBlurhashOutput>;
  getQrCode?: Maybe<Scalars['String']>;
  makeWorkerCrewLead?: Maybe<Scalars['Boolean']>;
  procoreDailyLog?: Maybe<ProcoreDailyLogOutput>;
  procoreDailyNote?: Maybe<ProcoreDailyNoteOutput>;
  procoreDailyWeather?: Maybe<ProcoreDailyWeatherOutput>;
  procoreGenerateToken?: Maybe<Scalars['String']>;
  procoreProjectList?: Maybe<ProcoreProjectListOutput>;
  procoreSetUserAccount?: Maybe<ProcoreSetUserAccountOutput>;
  procoreSubcontractorList?: Maybe<ProcoreSubcontractorListOutput>;
  resetPassword?: Maybe<Scalars['Boolean']>;
  sendReadingNotPermissibleNotifications: Scalars['String'];
  sendSiteNotification?: Maybe<Scalars['Int']>;
  signIn?: Maybe<Scalars['String']>;
  updatePassword?: Maybe<Scalars['Boolean']>;
  updateWorkerCrew?: Maybe<Scalars['Boolean']>;
  uploadBase64File?: Maybe<Scalars['String']>;
  validateProjectReportSettings?: Maybe<Scalars['Boolean']>;
  workerCreatePassword?: Maybe<WorkerCreatePasswordResponse>;
};


export type MutationAcceptInviteArgs = {
  input: AcceptInviteInput;
};


export type MutationCreateEmployeeArgs = {
  email: Scalars['String'];
  generalContractorId: Scalars['String'];
  name: Scalars['String'];
  phoneNumber?: Maybe<Scalars['String']>;
  titleId: Scalars['String'];
  username: Scalars['String'];
};


export type MutationCreateInviteArgs = {
  objects: Array<CreateInviteDataObject>;
};


export type MutationCreateSubcontractorEmployeeArgs = {
  input: CreateSubcontractorEmployeeInput;
};


export type MutationCreateWorkerArgs = {
  email?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  password: Scalars['String'];
  phoneNumber?: Maybe<Scalars['String']>;
  username: Scalars['String'];
};


export type MutationEmailChecklistNotifyeesArgs = {
  input?: Maybe<EmailChecklistNotifyeesInput>;
};


export type MutationEmailCovidSpreadsheetArgs = {
  input: EmailCovidSpreadsheetInput;
};


export type MutationEmailCovidTestedPositiveArgs = {
  input: EmailCovidTestedPositiveInput;
};


export type MutationEmailCovidWorkerAuditSpreadsheetArgs = {
  input: EmailCovidWorkerAuditSpreadsheetInput;
};


export type MutationEmailDailyLogCommentArgs = {
  input: EmailDailyLogCommentInput;
};


export type MutationEmailDailyLogsPdfArgs = {
  input?: Maybe<EmailDailyLogsPdfInput>;
};


export type MutationEmailDailyReportPdfArgs = {
  input: EmailDailyReportPdfInput;
};


export type MutationEmailDashboardSpreadsheetArgs = {
  input: EmailDashboardSpreadsheetInput;
};


export type MutationEmailFailedCovidCertificationArgs = {
  input: EmailFailedCovidCertificationInput;
};


export type MutationEmailPermitPdfArgs = {
  input: EmailPermitPdfInput;
};


export type MutationEmailSafetyReportPdfArgs = {
  input: EmailSafetyReportPdfInput;
};


export type MutationEmailToolboxTalkPdfArgs = {
  input: EmailToolboxTalkPdfInput;
};


export type MutationForgotPasswordArgs = {
  input: ForgotPasswordInput;
};


export type MutationGenerateDailyReportsSummaryArgs = {
  input?: Maybe<GenerateDailyReportsSummaryInput>;
};


export type MutationGenerateGcSpreadsheetArgs = {
  input: GenerateGcSpreadsheetInput;
};


export type MutationGetBlurhashArgs = {
  input?: Maybe<GetBlurhashInput>;
};


export type MutationGetQrCodeArgs = {
  input: GetQrCodeInput;
};


export type MutationMakeWorkerCrewLeadArgs = {
  input: MakeWorkerCrewLeadInput;
};


export type MutationProcoreDailyLogArgs = {
  input?: Maybe<ProcoreDailyLogInput>;
};


export type MutationProcoreDailyNoteArgs = {
  input?: Maybe<ProcoreDailyNoteInput>;
};


export type MutationProcoreDailyWeatherArgs = {
  input?: Maybe<ProcoreDailyWeatherInput>;
};


export type MutationProcoreGenerateTokenArgs = {
  input?: Maybe<ProcoreGenerateTokenInput>;
};


export type MutationProcoreProjectListArgs = {
  input?: Maybe<ProcoreProjectListInput>;
};


export type MutationProcoreSetUserAccountArgs = {
  input?: Maybe<ProcoreSetUserAccountInput>;
};


export type MutationProcoreSubcontractorListArgs = {
  input?: Maybe<ProcoreSubcontractorListInput>;
};


export type MutationResetPasswordArgs = {
  input: ResetPasswordInput;
};


export type MutationSendReadingNotPermissibleNotificationsArgs = {
  input: SendReadingNotPermissibleNotificationsInput;
};


export type MutationSendSiteNotificationArgs = {
  input: SendSiteNotificationInput;
};


export type MutationSignInArgs = {
  loginCredential: Scalars['String'];
  password: Scalars['String'];
};


export type MutationUpdatePasswordArgs = {
  input: UpdatePasswordInput;
};


export type MutationUpdateWorkerCrewArgs = {
  input: UpdateWorkerCrewInput;
};


export type MutationUploadBase64FileArgs = {
  input?: Maybe<UploadBase64FileInput>;
};


export type MutationValidateProjectReportSettingsArgs = {
  projectId: Scalars['String'];
};


export type MutationWorkerCreatePasswordArgs = {
  input: WorkerCreatePasswordInput;
};

/** mutation root */
export type Mutation_Root = {
   __typename?: 'mutation_root';
  /** perform the action: "MyMutation" */
  MyMutation?: Maybe<MyMutationOutput>;
  acceptInvite?: Maybe<Scalars['String']>;
  /** perform the action: "actionName" */
  actionName: Scalars['uuid'];
  createEmployee?: Maybe<Scalars['String']>;
  createInvite: Array<Scalars['String']>;
  createSubcontractorEmployee?: Maybe<Scalars['Int']>;
  createWorker?: Maybe<Scalars['String']>;
  /** delete data from the table: "address" */
  delete_address?: Maybe<Address_Mutation_Response>;
  /** delete single row from the table: "address" */
  delete_address_by_pk?: Maybe<Address>;
  /** delete data from the table: "auto_email" */
  delete_auto_email?: Maybe<Auto_Email_Mutation_Response>;
  /** delete single row from the table: "auto_email" */
  delete_auto_email_by_pk?: Maybe<Auto_Email>;
  /** delete data from the table: "auto_email_event_type" */
  delete_auto_email_event_type?: Maybe<Auto_Email_Event_Type_Mutation_Response>;
  /** delete single row from the table: "auto_email_event_type" */
  delete_auto_email_event_type_by_pk?: Maybe<Auto_Email_Event_Type>;
  /** delete data from the table: "awareness_question" */
  delete_awareness_question?: Maybe<Awareness_Question_Mutation_Response>;
  /** delete single row from the table: "awareness_question" */
  delete_awareness_question_by_pk?: Maybe<Awareness_Question>;
  /** delete data from the table: "calendar" */
  delete_calendar?: Maybe<Calendar_Mutation_Response>;
  /** delete single row from the table: "calendar" */
  delete_calendar_by_pk?: Maybe<Calendar>;
  /** delete data from the table: "certification" */
  delete_certification?: Maybe<Certification_Mutation_Response>;
  /** delete single row from the table: "certification" */
  delete_certification_by_pk?: Maybe<Certification>;
  /** delete data from the table: "chat" */
  delete_chat?: Maybe<Chat_Mutation_Response>;
  /** delete single row from the table: "chat" */
  delete_chat_by_pk?: Maybe<Chat>;
  /** delete data from the table: "chat_employee_preview" */
  delete_chat_employee_preview?: Maybe<Chat_Employee_Preview_Mutation_Response>;
  /** delete single row from the table: "chat_employee_preview" */
  delete_chat_employee_preview_by_pk?: Maybe<Chat_Employee_Preview>;
  /** delete data from the table: "chat_item" */
  delete_chat_item?: Maybe<Chat_Item_Mutation_Response>;
  /** delete data from the table: "chat_item_attachment" */
  delete_chat_item_attachment?: Maybe<Chat_Item_Attachment_Mutation_Response>;
  /** delete single row from the table: "chat_item_attachment" */
  delete_chat_item_attachment_by_pk?: Maybe<Chat_Item_Attachment>;
  /** delete single row from the table: "chat_item" */
  delete_chat_item_by_pk?: Maybe<Chat_Item>;
  /** delete data from the table: "chat_item_type" */
  delete_chat_item_type?: Maybe<Chat_Item_Type_Mutation_Response>;
  /** delete single row from the table: "chat_item_type" */
  delete_chat_item_type_by_pk?: Maybe<Chat_Item_Type>;
  /** delete data from the table: "chat_member" */
  delete_chat_member?: Maybe<Chat_Member_Mutation_Response>;
  /** delete single row from the table: "chat_member" */
  delete_chat_member_by_pk?: Maybe<Chat_Member>;
  /** delete data from the table: "checklist_item" */
  delete_checklist_item?: Maybe<Checklist_Item_Mutation_Response>;
  /** delete single row from the table: "checklist_item" */
  delete_checklist_item_by_pk?: Maybe<Checklist_Item>;
  /** delete data from the table: "checklist_item_config" */
  delete_checklist_item_config?: Maybe<Checklist_Item_Config_Mutation_Response>;
  /** delete single row from the table: "checklist_item_config" */
  delete_checklist_item_config_by_pk?: Maybe<Checklist_Item_Config>;
  /** delete data from the table: "checklist_item_config_type" */
  delete_checklist_item_config_type?: Maybe<Checklist_Item_Config_Type_Mutation_Response>;
  /** delete single row from the table: "checklist_item_config_type" */
  delete_checklist_item_config_type_by_pk?: Maybe<Checklist_Item_Config_Type>;
  /** delete data from the table: "checklist_item_notify_email" */
  delete_checklist_item_notify_email?: Maybe<Checklist_Item_Notify_Email_Mutation_Response>;
  /** delete single row from the table: "checklist_item_notify_email" */
  delete_checklist_item_notify_email_by_pk?: Maybe<Checklist_Item_Notify_Email>;
  /** delete data from the table: "checklist_item_type" */
  delete_checklist_item_type?: Maybe<Checklist_Item_Type_Mutation_Response>;
  /** delete single row from the table: "checklist_item_type" */
  delete_checklist_item_type_by_pk?: Maybe<Checklist_Item_Type>;
  /** delete data from the table: "cleared_project_covid_certify_worker" */
  delete_cleared_project_covid_certify_worker?: Maybe<Cleared_Project_Covid_Certify_Worker_Mutation_Response>;
  /** delete single row from the table: "cleared_project_covid_certify_worker" */
  delete_cleared_project_covid_certify_worker_by_pk?: Maybe<Cleared_Project_Covid_Certify_Worker>;
  /** delete data from the table: "cleared_project_covid_tested_positive_worker" */
  delete_cleared_project_covid_tested_positive_worker?: Maybe<Cleared_Project_Covid_Tested_Positive_Worker_Mutation_Response>;
  /** delete single row from the table: "cleared_project_covid_tested_positive_worker" */
  delete_cleared_project_covid_tested_positive_worker_by_pk?: Maybe<Cleared_Project_Covid_Tested_Positive_Worker>;
  /** delete data from the table: "confined_space_permit" */
  delete_confined_space_permit?: Maybe<Confined_Space_Permit_Mutation_Response>;
  /** delete single row from the table: "confined_space_permit" */
  delete_confined_space_permit_by_pk?: Maybe<Confined_Space_Permit>;
  /** delete data from the table: "confined_space_permit_monitoring_equipment" */
  delete_confined_space_permit_monitoring_equipment?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Mutation_Response>;
  /** delete single row from the table: "confined_space_permit_monitoring_equipment" */
  delete_confined_space_permit_monitoring_equipment_by_pk?: Maybe<Confined_Space_Permit_Monitoring_Equipment>;
  /** delete data from the table: "confined_space_permit_reading" */
  delete_confined_space_permit_reading?: Maybe<Confined_Space_Permit_Reading_Mutation_Response>;
  /** delete single row from the table: "confined_space_permit_reading" */
  delete_confined_space_permit_reading_by_pk?: Maybe<Confined_Space_Permit_Reading>;
  /** delete data from the table: "confined_space_permit_reading_custom_item" */
  delete_confined_space_permit_reading_custom_item?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Mutation_Response>;
  /** delete single row from the table: "confined_space_permit_reading_custom_item" */
  delete_confined_space_permit_reading_custom_item_by_pk?: Maybe<Confined_Space_Permit_Reading_Custom_Item>;
  /** delete data from the table: "daily_copy" */
  delete_daily_copy?: Maybe<Daily_Copy_Mutation_Response>;
  /** delete single row from the table: "daily_copy" */
  delete_daily_copy_by_pk?: Maybe<Daily_Copy>;
  /** delete data from the table: "daily_copy_section" */
  delete_daily_copy_section?: Maybe<Daily_Copy_Section_Mutation_Response>;
  /** delete single row from the table: "daily_copy_section" */
  delete_daily_copy_section_by_pk?: Maybe<Daily_Copy_Section>;
  /** delete data from the table: "daily_note" */
  delete_daily_note?: Maybe<Daily_Note_Mutation_Response>;
  /** delete single row from the table: "daily_note" */
  delete_daily_note_by_pk?: Maybe<Daily_Note>;
  /** delete data from the table: "daily_note_sub" */
  delete_daily_note_sub?: Maybe<Daily_Note_Sub_Mutation_Response>;
  /** delete single row from the table: "daily_note_sub" */
  delete_daily_note_sub_by_pk?: Maybe<Daily_Note_Sub>;
  /** delete data from the table: "daily_note_tag" */
  delete_daily_note_tag?: Maybe<Daily_Note_Tag_Mutation_Response>;
  /** delete single row from the table: "daily_note_tag" */
  delete_daily_note_tag_by_pk?: Maybe<Daily_Note_Tag>;
  /** delete data from the table: "daily_report" */
  delete_daily_report?: Maybe<Daily_Report_Mutation_Response>;
  /** delete single row from the table: "daily_report" */
  delete_daily_report_by_pk?: Maybe<Daily_Report>;
  /** delete data from the table: "daily_report_completed" */
  delete_daily_report_completed?: Maybe<Daily_Report_Completed_Mutation_Response>;
  /** delete single row from the table: "daily_report_completed" */
  delete_daily_report_completed_by_pk?: Maybe<Daily_Report_Completed>;
  /** delete data from the table: "daily_report_event" */
  delete_daily_report_event?: Maybe<Daily_Report_Event_Mutation_Response>;
  /** delete single row from the table: "daily_report_event" */
  delete_daily_report_event_by_pk?: Maybe<Daily_Report_Event>;
  /** delete data from the table: "daily_report_event_type" */
  delete_daily_report_event_type?: Maybe<Daily_Report_Event_Type_Mutation_Response>;
  /** delete single row from the table: "daily_report_event_type" */
  delete_daily_report_event_type_by_pk?: Maybe<Daily_Report_Event_Type>;
  /** delete data from the table: "daily_report_project_worker" */
  delete_daily_report_project_worker?: Maybe<Daily_Report_Project_Worker_Mutation_Response>;
  /** delete single row from the table: "daily_report_project_worker" */
  delete_daily_report_project_worker_by_pk?: Maybe<Daily_Report_Project_Worker>;
  /** delete data from the table: "daily_schedule_event" */
  delete_daily_schedule_event?: Maybe<Daily_Schedule_Event_Mutation_Response>;
  /** delete single row from the table: "daily_schedule_event" */
  delete_daily_schedule_event_by_pk?: Maybe<Daily_Schedule_Event>;
  /** delete data from the table: "daily_schedule_event_sub" */
  delete_daily_schedule_event_sub?: Maybe<Daily_Schedule_Event_Sub_Mutation_Response>;
  /** delete single row from the table: "daily_schedule_event_sub" */
  delete_daily_schedule_event_sub_by_pk?: Maybe<Daily_Schedule_Event_Sub>;
  /** delete data from the table: "daily_schedule_event_type" */
  delete_daily_schedule_event_type?: Maybe<Daily_Schedule_Event_Type_Mutation_Response>;
  /** delete single row from the table: "daily_schedule_event_type" */
  delete_daily_schedule_event_type_by_pk?: Maybe<Daily_Schedule_Event_Type>;
  /** delete data from the table: "daily_weather_observation" */
  delete_daily_weather_observation?: Maybe<Daily_Weather_Observation_Mutation_Response>;
  /** delete single row from the table: "daily_weather_observation" */
  delete_daily_weather_observation_by_pk?: Maybe<Daily_Weather_Observation>;
  /** delete data from the table: "daily_weather_observation_sub" */
  delete_daily_weather_observation_sub?: Maybe<Daily_Weather_Observation_Sub_Mutation_Response>;
  /** delete single row from the table: "daily_weather_observation_sub" */
  delete_daily_weather_observation_sub_by_pk?: Maybe<Daily_Weather_Observation_Sub>;
  /** delete data from the table: "daily_work_log" */
  delete_daily_work_log?: Maybe<Daily_Work_Log_Mutation_Response>;
  /** delete single row from the table: "daily_work_log" */
  delete_daily_work_log_by_pk?: Maybe<Daily_Work_Log>;
  /** delete data from the table: "daily_work_log_comment" */
  delete_daily_work_log_comment?: Maybe<Daily_Work_Log_Comment_Mutation_Response>;
  /** delete single row from the table: "daily_work_log_comment" */
  delete_daily_work_log_comment_by_pk?: Maybe<Daily_Work_Log_Comment>;
  /** delete data from the table: "daily_work_log_comment_email" */
  delete_daily_work_log_comment_email?: Maybe<Daily_Work_Log_Comment_Email_Mutation_Response>;
  /** delete single row from the table: "daily_work_log_comment_email" */
  delete_daily_work_log_comment_email_by_pk?: Maybe<Daily_Work_Log_Comment_Email>;
  /** delete data from the table: "daily_work_log_tag" */
  delete_daily_work_log_tag?: Maybe<Daily_Work_Log_Tag_Mutation_Response>;
  /** delete single row from the table: "daily_work_log_tag" */
  delete_daily_work_log_tag_by_pk?: Maybe<Daily_Work_Log_Tag>;
  /** delete data from the table: "daily_work_log_worker" */
  delete_daily_work_log_worker?: Maybe<Daily_Work_Log_Worker_Mutation_Response>;
  /** delete single row from the table: "daily_work_log_worker" */
  delete_daily_work_log_worker_by_pk?: Maybe<Daily_Work_Log_Worker>;
  /** delete data from the table: "delivery" */
  delete_delivery?: Maybe<Delivery_Mutation_Response>;
  /** delete single row from the table: "delivery" */
  delete_delivery_by_pk?: Maybe<Delivery>;
  /** delete data from the table: "delivery_calendar" */
  delete_delivery_calendar?: Maybe<Delivery_Calendar_Mutation_Response>;
  /** delete single row from the table: "delivery_calendar" */
  delete_delivery_calendar_by_pk?: Maybe<Delivery_Calendar>;
  /** delete data from the table: "dig_permit" */
  delete_dig_permit?: Maybe<Dig_Permit_Mutation_Response>;
  /** delete single row from the table: "dig_permit" */
  delete_dig_permit_by_pk?: Maybe<Dig_Permit>;
  /** delete data from the table: "dig_permit_select_option" */
  delete_dig_permit_select_option?: Maybe<Dig_Permit_Select_Option_Mutation_Response>;
  /** delete single row from the table: "dig_permit_select_option" */
  delete_dig_permit_select_option_by_pk?: Maybe<Dig_Permit_Select_Option>;
  /** delete data from the table: "dig_permit_ticket" */
  delete_dig_permit_ticket?: Maybe<Dig_Permit_Ticket_Mutation_Response>;
  /** delete single row from the table: "dig_permit_ticket" */
  delete_dig_permit_ticket_by_pk?: Maybe<Dig_Permit_Ticket>;
  /** delete data from the table: "employee_title" */
  delete_employee_title?: Maybe<Employee_Title_Mutation_Response>;
  /** delete single row from the table: "employee_title" */
  delete_employee_title_by_pk?: Maybe<Employee_Title>;
  /** delete data from the table: "expo_push_token" */
  delete_expo_push_token?: Maybe<Expo_Push_Token_Mutation_Response>;
  /** delete single row from the table: "expo_push_token" */
  delete_expo_push_token_by_pk?: Maybe<Expo_Push_Token>;
  /** delete data from the table: "feedback" */
  delete_feedback?: Maybe<Feedback_Mutation_Response>;
  /** delete single row from the table: "feedback" */
  delete_feedback_by_pk?: Maybe<Feedback>;
  /** delete data from the table: "forgot_password_key" */
  delete_forgot_password_key?: Maybe<Forgot_Password_Key_Mutation_Response>;
  /** delete single row from the table: "forgot_password_key" */
  delete_forgot_password_key_by_pk?: Maybe<Forgot_Password_Key>;
  /** delete data from the table: "gc_daily_checklist_item" */
  delete_gc_daily_checklist_item?: Maybe<Gc_Daily_Checklist_Item_Mutation_Response>;
  /** delete single row from the table: "gc_daily_checklist_item" */
  delete_gc_daily_checklist_item_by_pk?: Maybe<Gc_Daily_Checklist_Item>;
  /** delete data from the table: "gc_disabled_project_subcontractor" */
  delete_gc_disabled_project_subcontractor?: Maybe<Gc_Disabled_Project_Subcontractor_Mutation_Response>;
  /** delete single row from the table: "gc_disabled_project_subcontractor" */
  delete_gc_disabled_project_subcontractor_by_pk?: Maybe<Gc_Disabled_Project_Subcontractor>;
  /** delete data from the table: "general_contractor" */
  delete_general_contractor?: Maybe<General_Contractor_Mutation_Response>;
  /** delete single row from the table: "general_contractor" */
  delete_general_contractor_by_pk?: Maybe<General_Contractor>;
  /** delete data from the table: "general_contractor_employee" */
  delete_general_contractor_employee?: Maybe<General_Contractor_Employee_Mutation_Response>;
  /** delete single row from the table: "general_contractor_employee" */
  delete_general_contractor_employee_by_pk?: Maybe<General_Contractor_Employee>;
  /** delete data from the table: "government_identification" */
  delete_government_identification?: Maybe<Government_Identification_Mutation_Response>;
  /** delete single row from the table: "government_identification" */
  delete_government_identification_by_pk?: Maybe<Government_Identification>;
  /** delete data from the table: "hot_work_permit" */
  delete_hot_work_permit?: Maybe<Hot_Work_Permit_Mutation_Response>;
  /** delete single row from the table: "hot_work_permit" */
  delete_hot_work_permit_by_pk?: Maybe<Hot_Work_Permit>;
  /** delete data from the table: "hourly_forecast" */
  delete_hourly_forecast?: Maybe<Hourly_Forecast_Mutation_Response>;
  /** delete single row from the table: "hourly_forecast" */
  delete_hourly_forecast_by_pk?: Maybe<Hourly_Forecast>;
  /** delete data from the table: "image" */
  delete_image?: Maybe<Image_Mutation_Response>;
  /** delete single row from the table: "image" */
  delete_image_by_pk?: Maybe<Image>;
  /** delete data from the table: "image_type" */
  delete_image_type?: Maybe<Image_Type_Mutation_Response>;
  /** delete single row from the table: "image_type" */
  delete_image_type_by_pk?: Maybe<Image_Type>;
  /** delete data from the table: "incident_example" */
  delete_incident_example?: Maybe<Incident_Example_Mutation_Response>;
  /** delete single row from the table: "incident_example" */
  delete_incident_example_by_pk?: Maybe<Incident_Example>;
  /** delete data from the table: "invite" */
  delete_invite?: Maybe<Invite_Mutation_Response>;
  /** delete single row from the table: "invite" */
  delete_invite_by_pk?: Maybe<Invite>;
  /** delete data from the table: "lang_code" */
  delete_lang_code?: Maybe<Lang_Code_Mutation_Response>;
  /** delete single row from the table: "lang_code" */
  delete_lang_code_by_pk?: Maybe<Lang_Code>;
  /** delete data from the table: "notification_badge_count" */
  delete_notification_badge_count?: Maybe<Notification_Badge_Count_Mutation_Response>;
  /** delete single row from the table: "notification_badge_count" */
  delete_notification_badge_count_by_pk?: Maybe<Notification_Badge_Count>;
  /** delete data from the table: "orientation" */
  delete_orientation?: Maybe<Orientation_Mutation_Response>;
  /** delete single row from the table: "orientation" */
  delete_orientation_by_pk?: Maybe<Orientation>;
  /** delete data from the table: "orientation_slide" */
  delete_orientation_slide?: Maybe<Orientation_Slide_Mutation_Response>;
  /** delete single row from the table: "orientation_slide" */
  delete_orientation_slide_by_pk?: Maybe<Orientation_Slide>;
  /** delete data from the table: "pdf" */
  delete_pdf?: Maybe<Pdf_Mutation_Response>;
  /** delete single row from the table: "pdf" */
  delete_pdf_by_pk?: Maybe<Pdf>;
  /** delete data from the table: "permit" */
  delete_permit?: Maybe<Permit_Mutation_Response>;
  /** delete single row from the table: "permit" */
  delete_permit_by_pk?: Maybe<Permit>;
  /** delete data from the table: "permit_checklist_item" */
  delete_permit_checklist_item?: Maybe<Permit_Checklist_Item_Mutation_Response>;
  /** delete single row from the table: "permit_checklist_item" */
  delete_permit_checklist_item_by_pk?: Maybe<Permit_Checklist_Item>;
  /** delete data from the table: "permit_history" */
  delete_permit_history?: Maybe<Permit_History_Mutation_Response>;
  /** delete single row from the table: "permit_history" */
  delete_permit_history_by_pk?: Maybe<Permit_History>;
  /** delete data from the table: "permit_project_worker" */
  delete_permit_project_worker?: Maybe<Permit_Project_Worker_Mutation_Response>;
  /** delete single row from the table: "permit_project_worker" */
  delete_permit_project_worker_by_pk?: Maybe<Permit_Project_Worker>;
  /** delete data from the table: "permit_sign_in_image" */
  delete_permit_sign_in_image?: Maybe<Permit_Sign_In_Image_Mutation_Response>;
  /** delete single row from the table: "permit_sign_in_image" */
  delete_permit_sign_in_image_by_pk?: Maybe<Permit_Sign_In_Image>;
  /** delete data from the table: "permit_type" */
  delete_permit_type?: Maybe<Permit_Type_Mutation_Response>;
  /** delete single row from the table: "permit_type" */
  delete_permit_type_by_pk?: Maybe<Permit_Type>;
  /** delete data from the table: "ppe_category" */
  delete_ppe_category?: Maybe<Ppe_Category_Mutation_Response>;
  /** delete single row from the table: "ppe_category" */
  delete_ppe_category_by_pk?: Maybe<Ppe_Category>;
  /** delete data from the table: "ppe_type" */
  delete_ppe_type?: Maybe<Ppe_Type_Mutation_Response>;
  /** delete single row from the table: "ppe_type" */
  delete_ppe_type_by_pk?: Maybe<Ppe_Type>;
  /** delete data from the table: "procore_auth_data" */
  delete_procore_auth_data?: Maybe<Procore_Auth_Data_Mutation_Response>;
  /** delete single row from the table: "procore_auth_data" */
  delete_procore_auth_data_by_pk?: Maybe<Procore_Auth_Data>;
  /** delete data from the table: "procore_project_data" */
  delete_procore_project_data?: Maybe<Procore_Project_Data_Mutation_Response>;
  /** delete single row from the table: "procore_project_data" */
  delete_procore_project_data_by_pk?: Maybe<Procore_Project_Data>;
  /** delete data from the table: "procore_service_account" */
  delete_procore_service_account?: Maybe<Procore_Service_Account_Mutation_Response>;
  /** delete single row from the table: "procore_service_account" */
  delete_procore_service_account_by_pk?: Maybe<Procore_Service_Account>;
  /** delete data from the table: "procore_subcontractor" */
  delete_procore_subcontractor?: Maybe<Procore_Subcontractor_Mutation_Response>;
  /** delete single row from the table: "procore_subcontractor" */
  delete_procore_subcontractor_by_pk?: Maybe<Procore_Subcontractor>;
  /** delete data from the table: "project" */
  delete_project?: Maybe<Project_Mutation_Response>;
  /** delete single row from the table: "project" */
  delete_project_by_pk?: Maybe<Project>;
  /** delete data from the table: "project_completion_automated_notification" */
  delete_project_completion_automated_notification?: Maybe<Project_Completion_Automated_Notification_Mutation_Response>;
  /** delete single row from the table: "project_completion_automated_notification" */
  delete_project_completion_automated_notification_by_pk?: Maybe<Project_Completion_Automated_Notification>;
  /** delete data from the table: "project_covid_certify_worker" */
  delete_project_covid_certify_worker?: Maybe<Project_Covid_Certify_Worker_Mutation_Response>;
  /** delete data from the table: "project_covid_certify_worker_answer" */
  delete_project_covid_certify_worker_answer?: Maybe<Project_Covid_Certify_Worker_Answer_Mutation_Response>;
  /** delete single row from the table: "project_covid_certify_worker_answer" */
  delete_project_covid_certify_worker_answer_by_pk?: Maybe<Project_Covid_Certify_Worker_Answer>;
  /** delete single row from the table: "project_covid_certify_worker" */
  delete_project_covid_certify_worker_by_pk?: Maybe<Project_Covid_Certify_Worker>;
  /** delete data from the table: "project_covid_config" */
  delete_project_covid_config?: Maybe<Project_Covid_Config_Mutation_Response>;
  /** delete single row from the table: "project_covid_config" */
  delete_project_covid_config_by_pk?: Maybe<Project_Covid_Config>;
  /** delete data from the table: "project_covid_crew_certify" */
  delete_project_covid_crew_certify?: Maybe<Project_Covid_Crew_Certify_Mutation_Response>;
  /** delete single row from the table: "project_covid_crew_certify" */
  delete_project_covid_crew_certify_by_pk?: Maybe<Project_Covid_Crew_Certify>;
  /** delete data from the table: "project_covid_guest_certification" */
  delete_project_covid_guest_certification?: Maybe<Project_Covid_Guest_Certification_Mutation_Response>;
  /** delete data from the table: "project_covid_guest_certification_answer" */
  delete_project_covid_guest_certification_answer?: Maybe<Project_Covid_Guest_Certification_Answer_Mutation_Response>;
  /** delete single row from the table: "project_covid_guest_certification_answer" */
  delete_project_covid_guest_certification_answer_by_pk?: Maybe<Project_Covid_Guest_Certification_Answer>;
  /** delete single row from the table: "project_covid_guest_certification" */
  delete_project_covid_guest_certification_by_pk?: Maybe<Project_Covid_Guest_Certification>;
  /** delete data from the table: "project_covid_notify_employee" */
  delete_project_covid_notify_employee?: Maybe<Project_Covid_Notify_Employee_Mutation_Response>;
  /** delete single row from the table: "project_covid_notify_employee" */
  delete_project_covid_notify_employee_by_pk?: Maybe<Project_Covid_Notify_Employee>;
  /** delete data from the table: "project_covid_tested_positive_answer" */
  delete_project_covid_tested_positive_answer?: Maybe<Project_Covid_Tested_Positive_Answer_Mutation_Response>;
  /** delete single row from the table: "project_covid_tested_positive_answer" */
  delete_project_covid_tested_positive_answer_by_pk?: Maybe<Project_Covid_Tested_Positive_Answer>;
  /** delete data from the table: "project_covid_tested_positive_question" */
  delete_project_covid_tested_positive_question?: Maybe<Project_Covid_Tested_Positive_Question_Mutation_Response>;
  /** delete single row from the table: "project_covid_tested_positive_question" */
  delete_project_covid_tested_positive_question_by_pk?: Maybe<Project_Covid_Tested_Positive_Question>;
  /** delete data from the table: "project_covid_tested_positive_worker" */
  delete_project_covid_tested_positive_worker?: Maybe<Project_Covid_Tested_Positive_Worker_Mutation_Response>;
  /** delete single row from the table: "project_covid_tested_positive_worker" */
  delete_project_covid_tested_positive_worker_by_pk?: Maybe<Project_Covid_Tested_Positive_Worker>;
  /** delete data from the table: "project_covid_yes_no_question" */
  delete_project_covid_yes_no_question?: Maybe<Project_Covid_Yes_No_Question_Mutation_Response>;
  /** delete single row from the table: "project_covid_yes_no_question" */
  delete_project_covid_yes_no_question_by_pk?: Maybe<Project_Covid_Yes_No_Question>;
  /** delete data from the table: "project_crew" */
  delete_project_crew?: Maybe<Project_Crew_Mutation_Response>;
  /** delete single row from the table: "project_crew" */
  delete_project_crew_by_pk?: Maybe<Project_Crew>;
  /** delete data from the table: "project_employee" */
  delete_project_employee?: Maybe<Project_Employee_Mutation_Response>;
  /** delete single row from the table: "project_employee" */
  delete_project_employee_by_pk?: Maybe<Project_Employee>;
  /** delete data from the table: "project_hazard" */
  delete_project_hazard?: Maybe<Project_Hazard_Mutation_Response>;
  /** delete single row from the table: "project_hazard" */
  delete_project_hazard_by_pk?: Maybe<Project_Hazard>;
  /** delete data from the table: "project_hazard_subcontractor" */
  delete_project_hazard_subcontractor?: Maybe<Project_Hazard_Subcontractor_Mutation_Response>;
  /** delete single row from the table: "project_hazard_subcontractor" */
  delete_project_hazard_subcontractor_by_pk?: Maybe<Project_Hazard_Subcontractor>;
  /** delete data from the table: "project_post" */
  delete_project_post?: Maybe<Project_Post_Mutation_Response>;
  /** delete data from the table: "project_post_GCs" */
  delete_project_post_GCs?: Maybe<Project_Post_GCs_Mutation_Response>;
  /** delete single row from the table: "project_post_GCs" */
  delete_project_post_GCs_by_pk?: Maybe<Project_Post_GCs>;
  /** delete single row from the table: "project_post" */
  delete_project_post_by_pk?: Maybe<Project_Post>;
  /** delete data from the table: "project_post_workers" */
  delete_project_post_workers?: Maybe<Project_Post_Workers_Mutation_Response>;
  /** delete single row from the table: "project_post_workers" */
  delete_project_post_workers_by_pk?: Maybe<Project_Post_Workers>;
  /** delete data from the table: "project_report_settings" */
  delete_project_report_settings?: Maybe<Project_Report_Settings_Mutation_Response>;
  /** delete single row from the table: "project_report_settings" */
  delete_project_report_settings_by_pk?: Maybe<Project_Report_Settings>;
  /** delete data from the table: "project_site_notification" */
  delete_project_site_notification?: Maybe<Project_Site_Notification_Mutation_Response>;
  /** delete single row from the table: "project_site_notification" */
  delete_project_site_notification_by_pk?: Maybe<Project_Site_Notification>;
  /** delete data from the table: "project_subcontractor" */
  delete_project_subcontractor?: Maybe<Project_Subcontractor_Mutation_Response>;
  /** delete single row from the table: "project_subcontractor" */
  delete_project_subcontractor_by_pk?: Maybe<Project_Subcontractor>;
  /** delete data from the table: "project_subcontractor_onsite_update" */
  delete_project_subcontractor_onsite_update?: Maybe<Project_Subcontractor_Onsite_Update_Mutation_Response>;
  /** delete single row from the table: "project_subcontractor_onsite_update" */
  delete_project_subcontractor_onsite_update_by_pk?: Maybe<Project_Subcontractor_Onsite_Update>;
  /** delete data from the table: "project_subcontractor_report_settings" */
  delete_project_subcontractor_report_settings?: Maybe<Project_Subcontractor_Report_Settings_Mutation_Response>;
  /** delete single row from the table: "project_subcontractor_report_settings" */
  delete_project_subcontractor_report_settings_by_pk?: Maybe<Project_Subcontractor_Report_Settings>;
  /** delete data from the table: "project_user" */
  delete_project_user?: Maybe<Project_User_Mutation_Response>;
  /** delete single row from the table: "project_user" */
  delete_project_user_by_pk?: Maybe<Project_User>;
  /** delete data from the table: "project_worker" */
  delete_project_worker?: Maybe<Project_Worker_Mutation_Response>;
  /** delete single row from the table: "project_worker" */
  delete_project_worker_by_pk?: Maybe<Project_Worker>;
  /** delete data from the table: "project_worker_competency" */
  delete_project_worker_competency?: Maybe<Project_Worker_Competency_Mutation_Response>;
  /** delete single row from the table: "project_worker_competency" */
  delete_project_worker_competency_by_pk?: Maybe<Project_Worker_Competency>;
  /** delete data from the table: "project_worker_onsite_ping" */
  delete_project_worker_onsite_ping?: Maybe<Project_Worker_Onsite_Ping_Mutation_Response>;
  /** delete single row from the table: "project_worker_onsite_ping" */
  delete_project_worker_onsite_ping_by_pk?: Maybe<Project_Worker_Onsite_Ping>;
  /** delete data from the table: "projects_to_posts" */
  delete_projects_to_posts?: Maybe<Projects_To_Posts_Mutation_Response>;
  /** delete single row from the table: "projects_to_posts" */
  delete_projects_to_posts_by_pk?: Maybe<Projects_To_Posts>;
  /** delete data from the table: "report" */
  delete_report?: Maybe<Report_Mutation_Response>;
  /** delete data from the table: "report_awareness_question" */
  delete_report_awareness_question?: Maybe<Report_Awareness_Question_Mutation_Response>;
  /** delete single row from the table: "report_awareness_question" */
  delete_report_awareness_question_by_pk?: Maybe<Report_Awareness_Question>;
  /** delete single row from the table: "report" */
  delete_report_by_pk?: Maybe<Report>;
  /** delete data from the table: "report_fatal_four" */
  delete_report_fatal_four?: Maybe<Report_Fatal_Four_Mutation_Response>;
  /** delete single row from the table: "report_fatal_four" */
  delete_report_fatal_four_by_pk?: Maybe<Report_Fatal_Four>;
  /** delete data from the table: "report_injury" */
  delete_report_injury?: Maybe<Report_Injury_Mutation_Response>;
  /** delete single row from the table: "report_injury" */
  delete_report_injury_by_pk?: Maybe<Report_Injury>;
  /** delete data from the table: "report_project_hazard" */
  delete_report_project_hazard?: Maybe<Report_Project_Hazard_Mutation_Response>;
  /** delete single row from the table: "report_project_hazard" */
  delete_report_project_hazard_by_pk?: Maybe<Report_Project_Hazard>;
  /** delete data from the table: "report_project_post" */
  delete_report_project_post?: Maybe<Report_Project_Post_Mutation_Response>;
  /** delete single row from the table: "report_project_post" */
  delete_report_project_post_by_pk?: Maybe<Report_Project_Post>;
  /** delete data from the table: "report_project_worker" */
  delete_report_project_worker?: Maybe<Report_Project_Worker_Mutation_Response>;
  /** delete single row from the table: "report_project_worker" */
  delete_report_project_worker_by_pk?: Maybe<Report_Project_Worker>;
  /** delete data from the table: "s_daily_hours_to_date" */
  delete_s_daily_hours_to_date?: Maybe<S_Daily_Hours_To_Date_Mutation_Response>;
  /** delete single row from the table: "s_daily_hours_to_date" */
  delete_s_daily_hours_to_date_by_pk?: Maybe<S_Daily_Hours_To_Date>;
  /** delete data from the table: "s_sub_daily_log_submittal" */
  delete_s_sub_daily_log_submittal?: Maybe<S_Sub_Daily_Log_Submittal_Mutation_Response>;
  /** delete single row from the table: "s_sub_daily_log_submittal" */
  delete_s_sub_daily_log_submittal_by_pk?: Maybe<S_Sub_Daily_Log_Submittal>;
  /** delete data from the table: "select_option" */
  delete_select_option?: Maybe<Select_Option_Mutation_Response>;
  /** delete single row from the table: "select_option" */
  delete_select_option_by_pk?: Maybe<Select_Option>;
  /** delete data from the table: "select_option_type" */
  delete_select_option_type?: Maybe<Select_Option_Type_Mutation_Response>;
  /** delete single row from the table: "select_option_type" */
  delete_select_option_type_by_pk?: Maybe<Select_Option_Type>;
  /** delete data from the table: "short_forecast_type" */
  delete_short_forecast_type?: Maybe<Short_Forecast_Type_Mutation_Response>;
  /** delete single row from the table: "short_forecast_type" */
  delete_short_forecast_type_by_pk?: Maybe<Short_Forecast_Type>;
  /** delete data from the table: "sign_in_type" */
  delete_sign_in_type?: Maybe<Sign_In_Type_Mutation_Response>;
  /** delete single row from the table: "sign_in_type" */
  delete_sign_in_type_by_pk?: Maybe<Sign_In_Type>;
  /** delete data from the table: "state" */
  delete_state?: Maybe<State_Mutation_Response>;
  /** delete single row from the table: "state" */
  delete_state_by_pk?: Maybe<State>;
  /** delete data from the table: "subcontractor" */
  delete_subcontractor?: Maybe<Subcontractor_Mutation_Response>;
  /** delete single row from the table: "subcontractor" */
  delete_subcontractor_by_pk?: Maybe<Subcontractor>;
  /** delete data from the table: "subcontractor_employee" */
  delete_subcontractor_employee?: Maybe<Subcontractor_Employee_Mutation_Response>;
  /** delete single row from the table: "subcontractor_employee" */
  delete_subcontractor_employee_by_pk?: Maybe<Subcontractor_Employee>;
  /** delete data from the table: "subcontractor_employee_title" */
  delete_subcontractor_employee_title?: Maybe<Subcontractor_Employee_Title_Mutation_Response>;
  /** delete single row from the table: "subcontractor_employee_title" */
  delete_subcontractor_employee_title_by_pk?: Maybe<Subcontractor_Employee_Title>;
  /** delete data from the table: "subcontractor_onsite_status_update" */
  delete_subcontractor_onsite_status_update?: Maybe<Subcontractor_Onsite_Status_Update_Mutation_Response>;
  /** delete single row from the table: "subcontractor_onsite_status_update" */
  delete_subcontractor_onsite_status_update_by_pk?: Maybe<Subcontractor_Onsite_Status_Update>;
  /** delete data from the table: "subcontractor_trade" */
  delete_subcontractor_trade?: Maybe<Subcontractor_Trade_Mutation_Response>;
  /** delete single row from the table: "subcontractor_trade" */
  delete_subcontractor_trade_by_pk?: Maybe<Subcontractor_Trade>;
  /** delete data from the table: "subcontractor_worker" */
  delete_subcontractor_worker?: Maybe<Subcontractor_Worker_Mutation_Response>;
  /** delete single row from the table: "subcontractor_worker" */
  delete_subcontractor_worker_by_pk?: Maybe<Subcontractor_Worker>;
  /** delete data from the table: "submission_image" */
  delete_submission_image?: Maybe<Submission_Image_Mutation_Response>;
  /** delete single row from the table: "submission_image" */
  delete_submission_image_by_pk?: Maybe<Submission_Image>;
  /** delete data from the table: "submission_image_type" */
  delete_submission_image_type?: Maybe<Submission_Image_Type_Mutation_Response>;
  /** delete single row from the table: "submission_image_type" */
  delete_submission_image_type_by_pk?: Maybe<Submission_Image_Type>;
  /** delete data from the table: "tag" */
  delete_tag?: Maybe<Tag_Mutation_Response>;
  /** delete single row from the table: "tag" */
  delete_tag_by_pk?: Maybe<Tag>;
  /** delete data from the table: "task" */
  delete_task?: Maybe<Task_Mutation_Response>;
  /** delete single row from the table: "task" */
  delete_task_by_pk?: Maybe<Task>;
  /** delete data from the table: "task_note" */
  delete_task_note?: Maybe<Task_Note_Mutation_Response>;
  /** delete single row from the table: "task_note" */
  delete_task_note_by_pk?: Maybe<Task_Note>;
  /** delete data from the table: "task_permit_type" */
  delete_task_permit_type?: Maybe<Task_Permit_Type_Mutation_Response>;
  /** delete single row from the table: "task_permit_type" */
  delete_task_permit_type_by_pk?: Maybe<Task_Permit_Type>;
  /** delete data from the table: "task_ppe_type" */
  delete_task_ppe_type?: Maybe<Task_Ppe_Type_Mutation_Response>;
  /** delete single row from the table: "task_ppe_type" */
  delete_task_ppe_type_by_pk?: Maybe<Task_Ppe_Type>;
  /** delete data from the table: "task_step" */
  delete_task_step?: Maybe<Task_Step_Mutation_Response>;
  /** delete single row from the table: "task_step" */
  delete_task_step_by_pk?: Maybe<Task_Step>;
  /** delete data from the table: "task_step_hazard" */
  delete_task_step_hazard?: Maybe<Task_Step_Hazard_Mutation_Response>;
  /** delete single row from the table: "task_step_hazard" */
  delete_task_step_hazard_by_pk?: Maybe<Task_Step_Hazard>;
  /** delete data from the table: "text_translation" */
  delete_text_translation?: Maybe<Text_Translation_Mutation_Response>;
  /** delete single row from the table: "text_translation" */
  delete_text_translation_by_pk?: Maybe<Text_Translation>;
  /** delete data from the table: "todo" */
  delete_todo?: Maybe<Todo_Mutation_Response>;
  /** delete data from the table: "todo_assignee" */
  delete_todo_assignee?: Maybe<Todo_Assignee_Mutation_Response>;
  /** delete single row from the table: "todo_assignee" */
  delete_todo_assignee_by_pk?: Maybe<Todo_Assignee>;
  /** delete single row from the table: "todo" */
  delete_todo_by_pk?: Maybe<Todo>;
  /** delete data from the table: "todo_notifyee" */
  delete_todo_notifyee?: Maybe<Todo_Notifyee_Mutation_Response>;
  /** delete single row from the table: "todo_notifyee" */
  delete_todo_notifyee_by_pk?: Maybe<Todo_Notifyee>;
  /** delete data from the table: "toolbox_talk" */
  delete_toolbox_talk?: Maybe<Toolbox_Talk_Mutation_Response>;
  /** delete single row from the table: "toolbox_talk" */
  delete_toolbox_talk_by_pk?: Maybe<Toolbox_Talk>;
  /** delete data from the table: "toolbox_talk_pdf" */
  delete_toolbox_talk_pdf?: Maybe<Toolbox_Talk_Pdf_Mutation_Response>;
  /** delete single row from the table: "toolbox_talk_pdf" */
  delete_toolbox_talk_pdf_by_pk?: Maybe<Toolbox_Talk_Pdf>;
  /** delete data from the table: "toolbox_talk_project_worker" */
  delete_toolbox_talk_project_worker?: Maybe<Toolbox_Talk_Project_Worker_Mutation_Response>;
  /** delete single row from the table: "toolbox_talk_project_worker" */
  delete_toolbox_talk_project_worker_by_pk?: Maybe<Toolbox_Talk_Project_Worker>;
  /** delete data from the table: "user" */
  delete_user?: Maybe<User_Mutation_Response>;
  /** delete single row from the table: "user" */
  delete_user_by_pk?: Maybe<User>;
  /** delete data from the table: "user_notification" */
  delete_user_notification?: Maybe<User_Notification_Mutation_Response>;
  /** delete single row from the table: "user_notification" */
  delete_user_notification_by_pk?: Maybe<User_Notification>;
  /** delete data from the table: "user_notification_event_type" */
  delete_user_notification_event_type?: Maybe<User_Notification_Event_Type_Mutation_Response>;
  /** delete single row from the table: "user_notification_event_type" */
  delete_user_notification_event_type_by_pk?: Maybe<User_Notification_Event_Type>;
  /** delete data from the table: "user_project_filter_calendar" */
  delete_user_project_filter_calendar?: Maybe<User_Project_Filter_Calendar_Mutation_Response>;
  /** delete single row from the table: "user_project_filter_calendar" */
  delete_user_project_filter_calendar_by_pk?: Maybe<User_Project_Filter_Calendar>;
  /** delete data from the table: "user_saved_email" */
  delete_user_saved_email?: Maybe<User_Saved_Email_Mutation_Response>;
  /** delete single row from the table: "user_saved_email" */
  delete_user_saved_email_by_pk?: Maybe<User_Saved_Email>;
  /** delete data from the table: "work_above_permit" */
  delete_work_above_permit?: Maybe<Work_Above_Permit_Mutation_Response>;
  /** delete single row from the table: "work_above_permit" */
  delete_work_above_permit_by_pk?: Maybe<Work_Above_Permit>;
  /** delete data from the table: "worker" */
  delete_worker?: Maybe<Worker_Mutation_Response>;
  /** delete data from the table: "worker_automatic_email" */
  delete_worker_automatic_email?: Maybe<Worker_Automatic_Email_Mutation_Response>;
  /** delete single row from the table: "worker_automatic_email" */
  delete_worker_automatic_email_by_pk?: Maybe<Worker_Automatic_Email>;
  /** delete data from the table: "worker_automatic_email_event_type" */
  delete_worker_automatic_email_event_type?: Maybe<Worker_Automatic_Email_Event_Type_Mutation_Response>;
  /** delete single row from the table: "worker_automatic_email_event_type" */
  delete_worker_automatic_email_event_type_by_pk?: Maybe<Worker_Automatic_Email_Event_Type>;
  /** delete single row from the table: "worker" */
  delete_worker_by_pk?: Maybe<Worker>;
  /** delete data from the table: "worker_certification" */
  delete_worker_certification?: Maybe<Worker_Certification_Mutation_Response>;
  /** delete single row from the table: "worker_certification" */
  delete_worker_certification_by_pk?: Maybe<Worker_Certification>;
  /** delete data from the table: "worker_drug_test" */
  delete_worker_drug_test?: Maybe<Worker_Drug_Test_Mutation_Response>;
  /** delete single row from the table: "worker_drug_test" */
  delete_worker_drug_test_by_pk?: Maybe<Worker_Drug_Test>;
  /** delete data from the table: "worker_enabled_automatic_email_event" */
  delete_worker_enabled_automatic_email_event?: Maybe<Worker_Enabled_Automatic_Email_Event_Mutation_Response>;
  /** delete single row from the table: "worker_enabled_automatic_email_event" */
  delete_worker_enabled_automatic_email_event_by_pk?: Maybe<Worker_Enabled_Automatic_Email_Event>;
  /** delete data from the table: "worker_manhour_stats_by_range_table" */
  delete_worker_manhour_stats_by_range_table?: Maybe<Worker_Manhour_Stats_By_Range_Table_Mutation_Response>;
  /** delete single row from the table: "worker_manhour_stats_by_range_table" */
  delete_worker_manhour_stats_by_range_table_by_pk?: Maybe<Worker_Manhour_Stats_By_Range_Table>;
  /** delete data from the table: "worker_manhour_stats_table" */
  delete_worker_manhour_stats_table?: Maybe<Worker_Manhour_Stats_Table_Mutation_Response>;
  /** delete single row from the table: "worker_manhour_stats_table" */
  delete_worker_manhour_stats_table_by_pk?: Maybe<Worker_Manhour_Stats_Table>;
  /** delete data from the table: "worker_role" */
  delete_worker_role?: Maybe<Worker_Role_Mutation_Response>;
  /** delete single row from the table: "worker_role" */
  delete_worker_role_by_pk?: Maybe<Worker_Role>;
  /** delete data from the table: "worker_stats_by_range_table" */
  delete_worker_stats_by_range_table?: Maybe<Worker_Stats_By_Range_Table_Mutation_Response>;
  /** delete single row from the table: "worker_stats_by_range_table" */
  delete_worker_stats_by_range_table_by_pk?: Maybe<Worker_Stats_By_Range_Table>;
  /** delete data from the table: "worker_stats_table" */
  delete_worker_stats_table?: Maybe<Worker_Stats_Table_Mutation_Response>;
  /** delete single row from the table: "worker_stats_table" */
  delete_worker_stats_table_by_pk?: Maybe<Worker_Stats_Table>;
  /** delete data from the table: "worker_title" */
  delete_worker_title?: Maybe<Worker_Title_Mutation_Response>;
  /** delete single row from the table: "worker_title" */
  delete_worker_title_by_pk?: Maybe<Worker_Title>;
  emailChecklistNotifyees?: Maybe<Scalars['Boolean']>;
  emailCovidSpreadsheet?: Maybe<Scalars['String']>;
  emailCovidTestedPositive?: Maybe<Scalars['Boolean']>;
  emailCovidWorkerAuditSpreadsheet?: Maybe<Scalars['String']>;
  emailDailyLogComment?: Maybe<Scalars['Boolean']>;
  emailDailyLogsPdf?: Maybe<Scalars['Boolean']>;
  emailDailyReportPdf?: Maybe<Scalars['Boolean']>;
  emailDashboardSpreadsheet?: Maybe<Scalars['String']>;
  emailFailedCovidCertification?: Maybe<Scalars['Boolean']>;
  emailPermitPdf?: Maybe<Scalars['Boolean']>;
  emailSafetyReportPdf?: Maybe<Scalars['Boolean']>;
  emailToolboxTalkPdf?: Maybe<Scalars['Boolean']>;
  forgotPassword?: Maybe<Scalars['Boolean']>;
  generateDailyReportsSummary?: Maybe<Scalars['String']>;
  generateGCSpreadsheet?: Maybe<Scalars['String']>;
  getBlurhash?: Maybe<GetBlurhashOutput>;
  getCurrentProjectDailyReports: Array<Daily_Report>;
  getQrCode?: Maybe<Scalars['String']>;
  insertCurrentProjectDailyReport: Daily_Report_Mutation_Response;
  /** insert data into the table: "address" */
  insert_address?: Maybe<Address_Mutation_Response>;
  /** insert a single row into the table: "address" */
  insert_address_one?: Maybe<Address>;
  /** insert data into the table: "auto_email" */
  insert_auto_email?: Maybe<Auto_Email_Mutation_Response>;
  /** insert data into the table: "auto_email_event_type" */
  insert_auto_email_event_type?: Maybe<Auto_Email_Event_Type_Mutation_Response>;
  /** insert a single row into the table: "auto_email_event_type" */
  insert_auto_email_event_type_one?: Maybe<Auto_Email_Event_Type>;
  /** insert a single row into the table: "auto_email" */
  insert_auto_email_one?: Maybe<Auto_Email>;
  /** insert data into the table: "awareness_question" */
  insert_awareness_question?: Maybe<Awareness_Question_Mutation_Response>;
  /** insert a single row into the table: "awareness_question" */
  insert_awareness_question_one?: Maybe<Awareness_Question>;
  /** insert data into the table: "calendar" */
  insert_calendar?: Maybe<Calendar_Mutation_Response>;
  /** insert a single row into the table: "calendar" */
  insert_calendar_one?: Maybe<Calendar>;
  /** insert data into the table: "certification" */
  insert_certification?: Maybe<Certification_Mutation_Response>;
  /** insert a single row into the table: "certification" */
  insert_certification_one?: Maybe<Certification>;
  /** insert data into the table: "chat" */
  insert_chat?: Maybe<Chat_Mutation_Response>;
  /** insert data into the table: "chat_employee_preview" */
  insert_chat_employee_preview?: Maybe<Chat_Employee_Preview_Mutation_Response>;
  /** insert a single row into the table: "chat_employee_preview" */
  insert_chat_employee_preview_one?: Maybe<Chat_Employee_Preview>;
  /** insert data into the table: "chat_item" */
  insert_chat_item?: Maybe<Chat_Item_Mutation_Response>;
  /** insert data into the table: "chat_item_attachment" */
  insert_chat_item_attachment?: Maybe<Chat_Item_Attachment_Mutation_Response>;
  /** insert a single row into the table: "chat_item_attachment" */
  insert_chat_item_attachment_one?: Maybe<Chat_Item_Attachment>;
  /** insert a single row into the table: "chat_item" */
  insert_chat_item_one?: Maybe<Chat_Item>;
  /** insert data into the table: "chat_item_type" */
  insert_chat_item_type?: Maybe<Chat_Item_Type_Mutation_Response>;
  /** insert a single row into the table: "chat_item_type" */
  insert_chat_item_type_one?: Maybe<Chat_Item_Type>;
  /** insert data into the table: "chat_member" */
  insert_chat_member?: Maybe<Chat_Member_Mutation_Response>;
  /** insert a single row into the table: "chat_member" */
  insert_chat_member_one?: Maybe<Chat_Member>;
  /** insert a single row into the table: "chat" */
  insert_chat_one?: Maybe<Chat>;
  /** insert data into the table: "checklist_item" */
  insert_checklist_item?: Maybe<Checklist_Item_Mutation_Response>;
  /** insert data into the table: "checklist_item_config" */
  insert_checklist_item_config?: Maybe<Checklist_Item_Config_Mutation_Response>;
  /** insert a single row into the table: "checklist_item_config" */
  insert_checklist_item_config_one?: Maybe<Checklist_Item_Config>;
  /** insert data into the table: "checklist_item_config_type" */
  insert_checklist_item_config_type?: Maybe<Checklist_Item_Config_Type_Mutation_Response>;
  /** insert a single row into the table: "checklist_item_config_type" */
  insert_checklist_item_config_type_one?: Maybe<Checklist_Item_Config_Type>;
  /** insert data into the table: "checklist_item_notify_email" */
  insert_checklist_item_notify_email?: Maybe<Checklist_Item_Notify_Email_Mutation_Response>;
  /** insert a single row into the table: "checklist_item_notify_email" */
  insert_checklist_item_notify_email_one?: Maybe<Checklist_Item_Notify_Email>;
  /** insert a single row into the table: "checklist_item" */
  insert_checklist_item_one?: Maybe<Checklist_Item>;
  /** insert data into the table: "checklist_item_type" */
  insert_checklist_item_type?: Maybe<Checklist_Item_Type_Mutation_Response>;
  /** insert a single row into the table: "checklist_item_type" */
  insert_checklist_item_type_one?: Maybe<Checklist_Item_Type>;
  /** insert data into the table: "cleared_project_covid_certify_worker" */
  insert_cleared_project_covid_certify_worker?: Maybe<Cleared_Project_Covid_Certify_Worker_Mutation_Response>;
  /** insert a single row into the table: "cleared_project_covid_certify_worker" */
  insert_cleared_project_covid_certify_worker_one?: Maybe<Cleared_Project_Covid_Certify_Worker>;
  /** insert data into the table: "cleared_project_covid_tested_positive_worker" */
  insert_cleared_project_covid_tested_positive_worker?: Maybe<Cleared_Project_Covid_Tested_Positive_Worker_Mutation_Response>;
  /** insert a single row into the table: "cleared_project_covid_tested_positive_worker" */
  insert_cleared_project_covid_tested_positive_worker_one?: Maybe<Cleared_Project_Covid_Tested_Positive_Worker>;
  /** insert data into the table: "confined_space_permit" */
  insert_confined_space_permit?: Maybe<Confined_Space_Permit_Mutation_Response>;
  /** insert data into the table: "confined_space_permit_monitoring_equipment" */
  insert_confined_space_permit_monitoring_equipment?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Mutation_Response>;
  /** insert a single row into the table: "confined_space_permit_monitoring_equipment" */
  insert_confined_space_permit_monitoring_equipment_one?: Maybe<Confined_Space_Permit_Monitoring_Equipment>;
  /** insert a single row into the table: "confined_space_permit" */
  insert_confined_space_permit_one?: Maybe<Confined_Space_Permit>;
  /** insert data into the table: "confined_space_permit_reading" */
  insert_confined_space_permit_reading?: Maybe<Confined_Space_Permit_Reading_Mutation_Response>;
  /** insert data into the table: "confined_space_permit_reading_custom_item" */
  insert_confined_space_permit_reading_custom_item?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Mutation_Response>;
  /** insert a single row into the table: "confined_space_permit_reading_custom_item" */
  insert_confined_space_permit_reading_custom_item_one?: Maybe<Confined_Space_Permit_Reading_Custom_Item>;
  /** insert a single row into the table: "confined_space_permit_reading" */
  insert_confined_space_permit_reading_one?: Maybe<Confined_Space_Permit_Reading>;
  /** insert data into the table: "daily_copy" */
  insert_daily_copy?: Maybe<Daily_Copy_Mutation_Response>;
  /** insert a single row into the table: "daily_copy" */
  insert_daily_copy_one?: Maybe<Daily_Copy>;
  /** insert data into the table: "daily_copy_section" */
  insert_daily_copy_section?: Maybe<Daily_Copy_Section_Mutation_Response>;
  /** insert a single row into the table: "daily_copy_section" */
  insert_daily_copy_section_one?: Maybe<Daily_Copy_Section>;
  /** insert data into the table: "daily_note" */
  insert_daily_note?: Maybe<Daily_Note_Mutation_Response>;
  /** insert a single row into the table: "daily_note" */
  insert_daily_note_one?: Maybe<Daily_Note>;
  /** insert data into the table: "daily_note_sub" */
  insert_daily_note_sub?: Maybe<Daily_Note_Sub_Mutation_Response>;
  /** insert a single row into the table: "daily_note_sub" */
  insert_daily_note_sub_one?: Maybe<Daily_Note_Sub>;
  /** insert data into the table: "daily_note_tag" */
  insert_daily_note_tag?: Maybe<Daily_Note_Tag_Mutation_Response>;
  /** insert a single row into the table: "daily_note_tag" */
  insert_daily_note_tag_one?: Maybe<Daily_Note_Tag>;
  /** insert data into the table: "daily_report" */
  insert_daily_report?: Maybe<Daily_Report_Mutation_Response>;
  /** insert data into the table: "daily_report_completed" */
  insert_daily_report_completed?: Maybe<Daily_Report_Completed_Mutation_Response>;
  /** insert a single row into the table: "daily_report_completed" */
  insert_daily_report_completed_one?: Maybe<Daily_Report_Completed>;
  /** insert data into the table: "daily_report_event" */
  insert_daily_report_event?: Maybe<Daily_Report_Event_Mutation_Response>;
  /** insert a single row into the table: "daily_report_event" */
  insert_daily_report_event_one?: Maybe<Daily_Report_Event>;
  /** insert data into the table: "daily_report_event_type" */
  insert_daily_report_event_type?: Maybe<Daily_Report_Event_Type_Mutation_Response>;
  /** insert a single row into the table: "daily_report_event_type" */
  insert_daily_report_event_type_one?: Maybe<Daily_Report_Event_Type>;
  /** insert a single row into the table: "daily_report" */
  insert_daily_report_one?: Maybe<Daily_Report>;
  /** insert data into the table: "daily_report_project_worker" */
  insert_daily_report_project_worker?: Maybe<Daily_Report_Project_Worker_Mutation_Response>;
  /** insert a single row into the table: "daily_report_project_worker" */
  insert_daily_report_project_worker_one?: Maybe<Daily_Report_Project_Worker>;
  /** insert data into the table: "daily_schedule_event" */
  insert_daily_schedule_event?: Maybe<Daily_Schedule_Event_Mutation_Response>;
  /** insert a single row into the table: "daily_schedule_event" */
  insert_daily_schedule_event_one?: Maybe<Daily_Schedule_Event>;
  /** insert data into the table: "daily_schedule_event_sub" */
  insert_daily_schedule_event_sub?: Maybe<Daily_Schedule_Event_Sub_Mutation_Response>;
  /** insert a single row into the table: "daily_schedule_event_sub" */
  insert_daily_schedule_event_sub_one?: Maybe<Daily_Schedule_Event_Sub>;
  /** insert data into the table: "daily_schedule_event_type" */
  insert_daily_schedule_event_type?: Maybe<Daily_Schedule_Event_Type_Mutation_Response>;
  /** insert a single row into the table: "daily_schedule_event_type" */
  insert_daily_schedule_event_type_one?: Maybe<Daily_Schedule_Event_Type>;
  /** insert data into the table: "daily_weather_observation" */
  insert_daily_weather_observation?: Maybe<Daily_Weather_Observation_Mutation_Response>;
  /** insert a single row into the table: "daily_weather_observation" */
  insert_daily_weather_observation_one?: Maybe<Daily_Weather_Observation>;
  /** insert data into the table: "daily_weather_observation_sub" */
  insert_daily_weather_observation_sub?: Maybe<Daily_Weather_Observation_Sub_Mutation_Response>;
  /** insert a single row into the table: "daily_weather_observation_sub" */
  insert_daily_weather_observation_sub_one?: Maybe<Daily_Weather_Observation_Sub>;
  /** insert data into the table: "daily_work_log" */
  insert_daily_work_log?: Maybe<Daily_Work_Log_Mutation_Response>;
  /** insert data into the table: "daily_work_log_comment" */
  insert_daily_work_log_comment?: Maybe<Daily_Work_Log_Comment_Mutation_Response>;
  /** insert data into the table: "daily_work_log_comment_email" */
  insert_daily_work_log_comment_email?: Maybe<Daily_Work_Log_Comment_Email_Mutation_Response>;
  /** insert a single row into the table: "daily_work_log_comment_email" */
  insert_daily_work_log_comment_email_one?: Maybe<Daily_Work_Log_Comment_Email>;
  /** insert a single row into the table: "daily_work_log_comment" */
  insert_daily_work_log_comment_one?: Maybe<Daily_Work_Log_Comment>;
  /** insert a single row into the table: "daily_work_log" */
  insert_daily_work_log_one?: Maybe<Daily_Work_Log>;
  /** insert data into the table: "daily_work_log_tag" */
  insert_daily_work_log_tag?: Maybe<Daily_Work_Log_Tag_Mutation_Response>;
  /** insert a single row into the table: "daily_work_log_tag" */
  insert_daily_work_log_tag_one?: Maybe<Daily_Work_Log_Tag>;
  /** insert data into the table: "daily_work_log_worker" */
  insert_daily_work_log_worker?: Maybe<Daily_Work_Log_Worker_Mutation_Response>;
  /** insert a single row into the table: "daily_work_log_worker" */
  insert_daily_work_log_worker_one?: Maybe<Daily_Work_Log_Worker>;
  /** insert data into the table: "delivery" */
  insert_delivery?: Maybe<Delivery_Mutation_Response>;
  /** insert data into the table: "delivery_calendar" */
  insert_delivery_calendar?: Maybe<Delivery_Calendar_Mutation_Response>;
  /** insert a single row into the table: "delivery_calendar" */
  insert_delivery_calendar_one?: Maybe<Delivery_Calendar>;
  /** insert a single row into the table: "delivery" */
  insert_delivery_one?: Maybe<Delivery>;
  /** insert data into the table: "dig_permit" */
  insert_dig_permit?: Maybe<Dig_Permit_Mutation_Response>;
  /** insert a single row into the table: "dig_permit" */
  insert_dig_permit_one?: Maybe<Dig_Permit>;
  /** insert data into the table: "dig_permit_select_option" */
  insert_dig_permit_select_option?: Maybe<Dig_Permit_Select_Option_Mutation_Response>;
  /** insert a single row into the table: "dig_permit_select_option" */
  insert_dig_permit_select_option_one?: Maybe<Dig_Permit_Select_Option>;
  /** insert data into the table: "dig_permit_ticket" */
  insert_dig_permit_ticket?: Maybe<Dig_Permit_Ticket_Mutation_Response>;
  /** insert a single row into the table: "dig_permit_ticket" */
  insert_dig_permit_ticket_one?: Maybe<Dig_Permit_Ticket>;
  /** insert data into the table: "employee_title" */
  insert_employee_title?: Maybe<Employee_Title_Mutation_Response>;
  /** insert a single row into the table: "employee_title" */
  insert_employee_title_one?: Maybe<Employee_Title>;
  /** insert data into the table: "expo_push_token" */
  insert_expo_push_token?: Maybe<Expo_Push_Token_Mutation_Response>;
  /** insert a single row into the table: "expo_push_token" */
  insert_expo_push_token_one?: Maybe<Expo_Push_Token>;
  /** insert data into the table: "feedback" */
  insert_feedback?: Maybe<Feedback_Mutation_Response>;
  /** insert a single row into the table: "feedback" */
  insert_feedback_one?: Maybe<Feedback>;
  /** insert data into the table: "forgot_password_key" */
  insert_forgot_password_key?: Maybe<Forgot_Password_Key_Mutation_Response>;
  /** insert a single row into the table: "forgot_password_key" */
  insert_forgot_password_key_one?: Maybe<Forgot_Password_Key>;
  /** insert data into the table: "gc_daily_checklist_item" */
  insert_gc_daily_checklist_item?: Maybe<Gc_Daily_Checklist_Item_Mutation_Response>;
  /** insert a single row into the table: "gc_daily_checklist_item" */
  insert_gc_daily_checklist_item_one?: Maybe<Gc_Daily_Checklist_Item>;
  /** insert data into the table: "gc_disabled_project_subcontractor" */
  insert_gc_disabled_project_subcontractor?: Maybe<Gc_Disabled_Project_Subcontractor_Mutation_Response>;
  /** insert a single row into the table: "gc_disabled_project_subcontractor" */
  insert_gc_disabled_project_subcontractor_one?: Maybe<Gc_Disabled_Project_Subcontractor>;
  /** insert data into the table: "general_contractor" */
  insert_general_contractor?: Maybe<General_Contractor_Mutation_Response>;
  /** insert data into the table: "general_contractor_employee" */
  insert_general_contractor_employee?: Maybe<General_Contractor_Employee_Mutation_Response>;
  /** insert a single row into the table: "general_contractor_employee" */
  insert_general_contractor_employee_one?: Maybe<General_Contractor_Employee>;
  /** insert a single row into the table: "general_contractor" */
  insert_general_contractor_one?: Maybe<General_Contractor>;
  /** insert data into the table: "government_identification" */
  insert_government_identification?: Maybe<Government_Identification_Mutation_Response>;
  /** insert a single row into the table: "government_identification" */
  insert_government_identification_one?: Maybe<Government_Identification>;
  /** insert data into the table: "hot_work_permit" */
  insert_hot_work_permit?: Maybe<Hot_Work_Permit_Mutation_Response>;
  /** insert a single row into the table: "hot_work_permit" */
  insert_hot_work_permit_one?: Maybe<Hot_Work_Permit>;
  /** insert data into the table: "hourly_forecast" */
  insert_hourly_forecast?: Maybe<Hourly_Forecast_Mutation_Response>;
  /** insert a single row into the table: "hourly_forecast" */
  insert_hourly_forecast_one?: Maybe<Hourly_Forecast>;
  /** insert data into the table: "image" */
  insert_image?: Maybe<Image_Mutation_Response>;
  /** insert a single row into the table: "image" */
  insert_image_one?: Maybe<Image>;
  /** insert data into the table: "image_type" */
  insert_image_type?: Maybe<Image_Type_Mutation_Response>;
  /** insert a single row into the table: "image_type" */
  insert_image_type_one?: Maybe<Image_Type>;
  /** insert data into the table: "incident_example" */
  insert_incident_example?: Maybe<Incident_Example_Mutation_Response>;
  /** insert a single row into the table: "incident_example" */
  insert_incident_example_one?: Maybe<Incident_Example>;
  /** insert data into the table: "invite" */
  insert_invite?: Maybe<Invite_Mutation_Response>;
  /** insert a single row into the table: "invite" */
  insert_invite_one?: Maybe<Invite>;
  /** insert data into the table: "lang_code" */
  insert_lang_code?: Maybe<Lang_Code_Mutation_Response>;
  /** insert a single row into the table: "lang_code" */
  insert_lang_code_one?: Maybe<Lang_Code>;
  /** insert data into the table: "notification_badge_count" */
  insert_notification_badge_count?: Maybe<Notification_Badge_Count_Mutation_Response>;
  /** insert a single row into the table: "notification_badge_count" */
  insert_notification_badge_count_one?: Maybe<Notification_Badge_Count>;
  /** insert data into the table: "orientation" */
  insert_orientation?: Maybe<Orientation_Mutation_Response>;
  /** insert a single row into the table: "orientation" */
  insert_orientation_one?: Maybe<Orientation>;
  /** insert data into the table: "orientation_slide" */
  insert_orientation_slide?: Maybe<Orientation_Slide_Mutation_Response>;
  /** insert a single row into the table: "orientation_slide" */
  insert_orientation_slide_one?: Maybe<Orientation_Slide>;
  /** insert data into the table: "pdf" */
  insert_pdf?: Maybe<Pdf_Mutation_Response>;
  /** insert a single row into the table: "pdf" */
  insert_pdf_one?: Maybe<Pdf>;
  /** insert data into the table: "permit" */
  insert_permit?: Maybe<Permit_Mutation_Response>;
  /** insert data into the table: "permit_checklist_item" */
  insert_permit_checklist_item?: Maybe<Permit_Checklist_Item_Mutation_Response>;
  /** insert a single row into the table: "permit_checklist_item" */
  insert_permit_checklist_item_one?: Maybe<Permit_Checklist_Item>;
  /** insert data into the table: "permit_history" */
  insert_permit_history?: Maybe<Permit_History_Mutation_Response>;
  /** insert a single row into the table: "permit_history" */
  insert_permit_history_one?: Maybe<Permit_History>;
  /** insert a single row into the table: "permit" */
  insert_permit_one?: Maybe<Permit>;
  /** insert data into the table: "permit_project_worker" */
  insert_permit_project_worker?: Maybe<Permit_Project_Worker_Mutation_Response>;
  /** insert a single row into the table: "permit_project_worker" */
  insert_permit_project_worker_one?: Maybe<Permit_Project_Worker>;
  /** insert data into the table: "permit_sign_in_image" */
  insert_permit_sign_in_image?: Maybe<Permit_Sign_In_Image_Mutation_Response>;
  /** insert a single row into the table: "permit_sign_in_image" */
  insert_permit_sign_in_image_one?: Maybe<Permit_Sign_In_Image>;
  /** insert data into the table: "permit_type" */
  insert_permit_type?: Maybe<Permit_Type_Mutation_Response>;
  /** insert a single row into the table: "permit_type" */
  insert_permit_type_one?: Maybe<Permit_Type>;
  /** insert data into the table: "ppe_category" */
  insert_ppe_category?: Maybe<Ppe_Category_Mutation_Response>;
  /** insert a single row into the table: "ppe_category" */
  insert_ppe_category_one?: Maybe<Ppe_Category>;
  /** insert data into the table: "ppe_type" */
  insert_ppe_type?: Maybe<Ppe_Type_Mutation_Response>;
  /** insert a single row into the table: "ppe_type" */
  insert_ppe_type_one?: Maybe<Ppe_Type>;
  /** insert data into the table: "procore_auth_data" */
  insert_procore_auth_data?: Maybe<Procore_Auth_Data_Mutation_Response>;
  /** insert a single row into the table: "procore_auth_data" */
  insert_procore_auth_data_one?: Maybe<Procore_Auth_Data>;
  /** insert data into the table: "procore_project_data" */
  insert_procore_project_data?: Maybe<Procore_Project_Data_Mutation_Response>;
  /** insert a single row into the table: "procore_project_data" */
  insert_procore_project_data_one?: Maybe<Procore_Project_Data>;
  /** insert data into the table: "procore_service_account" */
  insert_procore_service_account?: Maybe<Procore_Service_Account_Mutation_Response>;
  /** insert a single row into the table: "procore_service_account" */
  insert_procore_service_account_one?: Maybe<Procore_Service_Account>;
  /** insert data into the table: "procore_subcontractor" */
  insert_procore_subcontractor?: Maybe<Procore_Subcontractor_Mutation_Response>;
  /** insert a single row into the table: "procore_subcontractor" */
  insert_procore_subcontractor_one?: Maybe<Procore_Subcontractor>;
  /** insert data into the table: "project" */
  insert_project?: Maybe<Project_Mutation_Response>;
  /** insert data into the table: "project_completion_automated_notification" */
  insert_project_completion_automated_notification?: Maybe<Project_Completion_Automated_Notification_Mutation_Response>;
  /** insert a single row into the table: "project_completion_automated_notification" */
  insert_project_completion_automated_notification_one?: Maybe<Project_Completion_Automated_Notification>;
  /** insert data into the table: "project_covid_certify_worker" */
  insert_project_covid_certify_worker?: Maybe<Project_Covid_Certify_Worker_Mutation_Response>;
  /** insert data into the table: "project_covid_certify_worker_answer" */
  insert_project_covid_certify_worker_answer?: Maybe<Project_Covid_Certify_Worker_Answer_Mutation_Response>;
  /** insert a single row into the table: "project_covid_certify_worker_answer" */
  insert_project_covid_certify_worker_answer_one?: Maybe<Project_Covid_Certify_Worker_Answer>;
  /** insert a single row into the table: "project_covid_certify_worker" */
  insert_project_covid_certify_worker_one?: Maybe<Project_Covid_Certify_Worker>;
  /** insert data into the table: "project_covid_config" */
  insert_project_covid_config?: Maybe<Project_Covid_Config_Mutation_Response>;
  /** insert a single row into the table: "project_covid_config" */
  insert_project_covid_config_one?: Maybe<Project_Covid_Config>;
  /** insert data into the table: "project_covid_crew_certify" */
  insert_project_covid_crew_certify?: Maybe<Project_Covid_Crew_Certify_Mutation_Response>;
  /** insert a single row into the table: "project_covid_crew_certify" */
  insert_project_covid_crew_certify_one?: Maybe<Project_Covid_Crew_Certify>;
  /** insert data into the table: "project_covid_guest_certification" */
  insert_project_covid_guest_certification?: Maybe<Project_Covid_Guest_Certification_Mutation_Response>;
  /** insert data into the table: "project_covid_guest_certification_answer" */
  insert_project_covid_guest_certification_answer?: Maybe<Project_Covid_Guest_Certification_Answer_Mutation_Response>;
  /** insert a single row into the table: "project_covid_guest_certification_answer" */
  insert_project_covid_guest_certification_answer_one?: Maybe<Project_Covid_Guest_Certification_Answer>;
  /** insert a single row into the table: "project_covid_guest_certification" */
  insert_project_covid_guest_certification_one?: Maybe<Project_Covid_Guest_Certification>;
  /** insert data into the table: "project_covid_notify_employee" */
  insert_project_covid_notify_employee?: Maybe<Project_Covid_Notify_Employee_Mutation_Response>;
  /** insert a single row into the table: "project_covid_notify_employee" */
  insert_project_covid_notify_employee_one?: Maybe<Project_Covid_Notify_Employee>;
  /** insert data into the table: "project_covid_tested_positive_answer" */
  insert_project_covid_tested_positive_answer?: Maybe<Project_Covid_Tested_Positive_Answer_Mutation_Response>;
  /** insert a single row into the table: "project_covid_tested_positive_answer" */
  insert_project_covid_tested_positive_answer_one?: Maybe<Project_Covid_Tested_Positive_Answer>;
  /** insert data into the table: "project_covid_tested_positive_question" */
  insert_project_covid_tested_positive_question?: Maybe<Project_Covid_Tested_Positive_Question_Mutation_Response>;
  /** insert a single row into the table: "project_covid_tested_positive_question" */
  insert_project_covid_tested_positive_question_one?: Maybe<Project_Covid_Tested_Positive_Question>;
  /** insert data into the table: "project_covid_tested_positive_worker" */
  insert_project_covid_tested_positive_worker?: Maybe<Project_Covid_Tested_Positive_Worker_Mutation_Response>;
  /** insert a single row into the table: "project_covid_tested_positive_worker" */
  insert_project_covid_tested_positive_worker_one?: Maybe<Project_Covid_Tested_Positive_Worker>;
  /** insert data into the table: "project_covid_yes_no_question" */
  insert_project_covid_yes_no_question?: Maybe<Project_Covid_Yes_No_Question_Mutation_Response>;
  /** insert a single row into the table: "project_covid_yes_no_question" */
  insert_project_covid_yes_no_question_one?: Maybe<Project_Covid_Yes_No_Question>;
  /** insert data into the table: "project_crew" */
  insert_project_crew?: Maybe<Project_Crew_Mutation_Response>;
  /** insert a single row into the table: "project_crew" */
  insert_project_crew_one?: Maybe<Project_Crew>;
  /** insert data into the table: "project_employee" */
  insert_project_employee?: Maybe<Project_Employee_Mutation_Response>;
  /** insert a single row into the table: "project_employee" */
  insert_project_employee_one?: Maybe<Project_Employee>;
  /** insert data into the table: "project_hazard" */
  insert_project_hazard?: Maybe<Project_Hazard_Mutation_Response>;
  /** insert a single row into the table: "project_hazard" */
  insert_project_hazard_one?: Maybe<Project_Hazard>;
  /** insert data into the table: "project_hazard_subcontractor" */
  insert_project_hazard_subcontractor?: Maybe<Project_Hazard_Subcontractor_Mutation_Response>;
  /** insert a single row into the table: "project_hazard_subcontractor" */
  insert_project_hazard_subcontractor_one?: Maybe<Project_Hazard_Subcontractor>;
  /** insert a single row into the table: "project" */
  insert_project_one?: Maybe<Project>;
  /** insert data into the table: "project_post" */
  insert_project_post?: Maybe<Project_Post_Mutation_Response>;
  /** insert data into the table: "project_post_GCs" */
  insert_project_post_GCs?: Maybe<Project_Post_GCs_Mutation_Response>;
  /** insert a single row into the table: "project_post_GCs" */
  insert_project_post_GCs_one?: Maybe<Project_Post_GCs>;
  /** insert a single row into the table: "project_post" */
  insert_project_post_one?: Maybe<Project_Post>;
  /** insert data into the table: "project_post_workers" */
  insert_project_post_workers?: Maybe<Project_Post_Workers_Mutation_Response>;
  /** insert a single row into the table: "project_post_workers" */
  insert_project_post_workers_one?: Maybe<Project_Post_Workers>;
  /** insert data into the table: "project_report_settings" */
  insert_project_report_settings?: Maybe<Project_Report_Settings_Mutation_Response>;
  /** insert a single row into the table: "project_report_settings" */
  insert_project_report_settings_one?: Maybe<Project_Report_Settings>;
  /** insert data into the table: "project_site_notification" */
  insert_project_site_notification?: Maybe<Project_Site_Notification_Mutation_Response>;
  /** insert a single row into the table: "project_site_notification" */
  insert_project_site_notification_one?: Maybe<Project_Site_Notification>;
  /** insert data into the table: "project_subcontractor" */
  insert_project_subcontractor?: Maybe<Project_Subcontractor_Mutation_Response>;
  /** insert a single row into the table: "project_subcontractor" */
  insert_project_subcontractor_one?: Maybe<Project_Subcontractor>;
  /** insert data into the table: "project_subcontractor_onsite_update" */
  insert_project_subcontractor_onsite_update?: Maybe<Project_Subcontractor_Onsite_Update_Mutation_Response>;
  /** insert a single row into the table: "project_subcontractor_onsite_update" */
  insert_project_subcontractor_onsite_update_one?: Maybe<Project_Subcontractor_Onsite_Update>;
  /** insert data into the table: "project_subcontractor_report_settings" */
  insert_project_subcontractor_report_settings?: Maybe<Project_Subcontractor_Report_Settings_Mutation_Response>;
  /** insert a single row into the table: "project_subcontractor_report_settings" */
  insert_project_subcontractor_report_settings_one?: Maybe<Project_Subcontractor_Report_Settings>;
  /** insert data into the table: "project_user" */
  insert_project_user?: Maybe<Project_User_Mutation_Response>;
  /** insert a single row into the table: "project_user" */
  insert_project_user_one?: Maybe<Project_User>;
  /** insert data into the table: "project_worker" */
  insert_project_worker?: Maybe<Project_Worker_Mutation_Response>;
  /** insert data into the table: "project_worker_competency" */
  insert_project_worker_competency?: Maybe<Project_Worker_Competency_Mutation_Response>;
  /** insert a single row into the table: "project_worker_competency" */
  insert_project_worker_competency_one?: Maybe<Project_Worker_Competency>;
  /** insert a single row into the table: "project_worker" */
  insert_project_worker_one?: Maybe<Project_Worker>;
  /** insert data into the table: "project_worker_onsite_ping" */
  insert_project_worker_onsite_ping?: Maybe<Project_Worker_Onsite_Ping_Mutation_Response>;
  /** insert a single row into the table: "project_worker_onsite_ping" */
  insert_project_worker_onsite_ping_one?: Maybe<Project_Worker_Onsite_Ping>;
  /** insert data into the table: "projects_to_posts" */
  insert_projects_to_posts?: Maybe<Projects_To_Posts_Mutation_Response>;
  /** insert a single row into the table: "projects_to_posts" */
  insert_projects_to_posts_one?: Maybe<Projects_To_Posts>;
  /** insert data into the table: "report" */
  insert_report?: Maybe<Report_Mutation_Response>;
  /** insert data into the table: "report_awareness_question" */
  insert_report_awareness_question?: Maybe<Report_Awareness_Question_Mutation_Response>;
  /** insert a single row into the table: "report_awareness_question" */
  insert_report_awareness_question_one?: Maybe<Report_Awareness_Question>;
  /** insert data into the table: "report_fatal_four" */
  insert_report_fatal_four?: Maybe<Report_Fatal_Four_Mutation_Response>;
  /** insert a single row into the table: "report_fatal_four" */
  insert_report_fatal_four_one?: Maybe<Report_Fatal_Four>;
  /** insert data into the table: "report_injury" */
  insert_report_injury?: Maybe<Report_Injury_Mutation_Response>;
  /** insert a single row into the table: "report_injury" */
  insert_report_injury_one?: Maybe<Report_Injury>;
  /** insert a single row into the table: "report" */
  insert_report_one?: Maybe<Report>;
  /** insert data into the table: "report_project_hazard" */
  insert_report_project_hazard?: Maybe<Report_Project_Hazard_Mutation_Response>;
  /** insert a single row into the table: "report_project_hazard" */
  insert_report_project_hazard_one?: Maybe<Report_Project_Hazard>;
  /** insert data into the table: "report_project_post" */
  insert_report_project_post?: Maybe<Report_Project_Post_Mutation_Response>;
  /** insert a single row into the table: "report_project_post" */
  insert_report_project_post_one?: Maybe<Report_Project_Post>;
  /** insert data into the table: "report_project_worker" */
  insert_report_project_worker?: Maybe<Report_Project_Worker_Mutation_Response>;
  /** insert a single row into the table: "report_project_worker" */
  insert_report_project_worker_one?: Maybe<Report_Project_Worker>;
  /** insert data into the table: "s_daily_hours_to_date" */
  insert_s_daily_hours_to_date?: Maybe<S_Daily_Hours_To_Date_Mutation_Response>;
  /** insert a single row into the table: "s_daily_hours_to_date" */
  insert_s_daily_hours_to_date_one?: Maybe<S_Daily_Hours_To_Date>;
  /** insert data into the table: "s_sub_daily_log_submittal" */
  insert_s_sub_daily_log_submittal?: Maybe<S_Sub_Daily_Log_Submittal_Mutation_Response>;
  /** insert a single row into the table: "s_sub_daily_log_submittal" */
  insert_s_sub_daily_log_submittal_one?: Maybe<S_Sub_Daily_Log_Submittal>;
  /** insert data into the table: "select_option" */
  insert_select_option?: Maybe<Select_Option_Mutation_Response>;
  /** insert a single row into the table: "select_option" */
  insert_select_option_one?: Maybe<Select_Option>;
  /** insert data into the table: "select_option_type" */
  insert_select_option_type?: Maybe<Select_Option_Type_Mutation_Response>;
  /** insert a single row into the table: "select_option_type" */
  insert_select_option_type_one?: Maybe<Select_Option_Type>;
  /** insert data into the table: "short_forecast_type" */
  insert_short_forecast_type?: Maybe<Short_Forecast_Type_Mutation_Response>;
  /** insert a single row into the table: "short_forecast_type" */
  insert_short_forecast_type_one?: Maybe<Short_Forecast_Type>;
  /** insert data into the table: "sign_in_type" */
  insert_sign_in_type?: Maybe<Sign_In_Type_Mutation_Response>;
  /** insert a single row into the table: "sign_in_type" */
  insert_sign_in_type_one?: Maybe<Sign_In_Type>;
  /** insert data into the table: "state" */
  insert_state?: Maybe<State_Mutation_Response>;
  /** insert a single row into the table: "state" */
  insert_state_one?: Maybe<State>;
  /** insert data into the table: "subcontractor" */
  insert_subcontractor?: Maybe<Subcontractor_Mutation_Response>;
  /** insert data into the table: "subcontractor_employee" */
  insert_subcontractor_employee?: Maybe<Subcontractor_Employee_Mutation_Response>;
  /** insert a single row into the table: "subcontractor_employee" */
  insert_subcontractor_employee_one?: Maybe<Subcontractor_Employee>;
  /** insert data into the table: "subcontractor_employee_title" */
  insert_subcontractor_employee_title?: Maybe<Subcontractor_Employee_Title_Mutation_Response>;
  /** insert a single row into the table: "subcontractor_employee_title" */
  insert_subcontractor_employee_title_one?: Maybe<Subcontractor_Employee_Title>;
  /** insert a single row into the table: "subcontractor" */
  insert_subcontractor_one?: Maybe<Subcontractor>;
  /** insert data into the table: "subcontractor_onsite_status_update" */
  insert_subcontractor_onsite_status_update?: Maybe<Subcontractor_Onsite_Status_Update_Mutation_Response>;
  /** insert a single row into the table: "subcontractor_onsite_status_update" */
  insert_subcontractor_onsite_status_update_one?: Maybe<Subcontractor_Onsite_Status_Update>;
  /** insert data into the table: "subcontractor_trade" */
  insert_subcontractor_trade?: Maybe<Subcontractor_Trade_Mutation_Response>;
  /** insert a single row into the table: "subcontractor_trade" */
  insert_subcontractor_trade_one?: Maybe<Subcontractor_Trade>;
  /** insert data into the table: "subcontractor_worker" */
  insert_subcontractor_worker?: Maybe<Subcontractor_Worker_Mutation_Response>;
  /** insert a single row into the table: "subcontractor_worker" */
  insert_subcontractor_worker_one?: Maybe<Subcontractor_Worker>;
  /** insert data into the table: "submission_image" */
  insert_submission_image?: Maybe<Submission_Image_Mutation_Response>;
  /** insert a single row into the table: "submission_image" */
  insert_submission_image_one?: Maybe<Submission_Image>;
  /** insert data into the table: "submission_image_type" */
  insert_submission_image_type?: Maybe<Submission_Image_Type_Mutation_Response>;
  /** insert a single row into the table: "submission_image_type" */
  insert_submission_image_type_one?: Maybe<Submission_Image_Type>;
  /** insert data into the table: "tag" */
  insert_tag?: Maybe<Tag_Mutation_Response>;
  /** insert a single row into the table: "tag" */
  insert_tag_one?: Maybe<Tag>;
  /** insert data into the table: "task" */
  insert_task?: Maybe<Task_Mutation_Response>;
  /** insert data into the table: "task_note" */
  insert_task_note?: Maybe<Task_Note_Mutation_Response>;
  /** insert a single row into the table: "task_note" */
  insert_task_note_one?: Maybe<Task_Note>;
  /** insert a single row into the table: "task" */
  insert_task_one?: Maybe<Task>;
  /** insert data into the table: "task_permit_type" */
  insert_task_permit_type?: Maybe<Task_Permit_Type_Mutation_Response>;
  /** insert a single row into the table: "task_permit_type" */
  insert_task_permit_type_one?: Maybe<Task_Permit_Type>;
  /** insert data into the table: "task_ppe_type" */
  insert_task_ppe_type?: Maybe<Task_Ppe_Type_Mutation_Response>;
  /** insert a single row into the table: "task_ppe_type" */
  insert_task_ppe_type_one?: Maybe<Task_Ppe_Type>;
  /** insert data into the table: "task_step" */
  insert_task_step?: Maybe<Task_Step_Mutation_Response>;
  /** insert data into the table: "task_step_hazard" */
  insert_task_step_hazard?: Maybe<Task_Step_Hazard_Mutation_Response>;
  /** insert a single row into the table: "task_step_hazard" */
  insert_task_step_hazard_one?: Maybe<Task_Step_Hazard>;
  /** insert a single row into the table: "task_step" */
  insert_task_step_one?: Maybe<Task_Step>;
  /** insert data into the table: "text_translation" */
  insert_text_translation?: Maybe<Text_Translation_Mutation_Response>;
  /** insert a single row into the table: "text_translation" */
  insert_text_translation_one?: Maybe<Text_Translation>;
  /** insert data into the table: "todo" */
  insert_todo?: Maybe<Todo_Mutation_Response>;
  /** insert data into the table: "todo_assignee" */
  insert_todo_assignee?: Maybe<Todo_Assignee_Mutation_Response>;
  /** insert a single row into the table: "todo_assignee" */
  insert_todo_assignee_one?: Maybe<Todo_Assignee>;
  /** insert data into the table: "todo_notifyee" */
  insert_todo_notifyee?: Maybe<Todo_Notifyee_Mutation_Response>;
  /** insert a single row into the table: "todo_notifyee" */
  insert_todo_notifyee_one?: Maybe<Todo_Notifyee>;
  /** insert a single row into the table: "todo" */
  insert_todo_one?: Maybe<Todo>;
  /** insert data into the table: "toolbox_talk" */
  insert_toolbox_talk?: Maybe<Toolbox_Talk_Mutation_Response>;
  /** insert a single row into the table: "toolbox_talk" */
  insert_toolbox_talk_one?: Maybe<Toolbox_Talk>;
  /** insert data into the table: "toolbox_talk_pdf" */
  insert_toolbox_talk_pdf?: Maybe<Toolbox_Talk_Pdf_Mutation_Response>;
  /** insert a single row into the table: "toolbox_talk_pdf" */
  insert_toolbox_talk_pdf_one?: Maybe<Toolbox_Talk_Pdf>;
  /** insert data into the table: "toolbox_talk_project_worker" */
  insert_toolbox_talk_project_worker?: Maybe<Toolbox_Talk_Project_Worker_Mutation_Response>;
  /** insert a single row into the table: "toolbox_talk_project_worker" */
  insert_toolbox_talk_project_worker_one?: Maybe<Toolbox_Talk_Project_Worker>;
  /** insert data into the table: "user" */
  insert_user?: Maybe<User_Mutation_Response>;
  /** insert data into the table: "user_notification" */
  insert_user_notification?: Maybe<User_Notification_Mutation_Response>;
  /** insert data into the table: "user_notification_event_type" */
  insert_user_notification_event_type?: Maybe<User_Notification_Event_Type_Mutation_Response>;
  /** insert a single row into the table: "user_notification_event_type" */
  insert_user_notification_event_type_one?: Maybe<User_Notification_Event_Type>;
  /** insert a single row into the table: "user_notification" */
  insert_user_notification_one?: Maybe<User_Notification>;
  /** insert a single row into the table: "user" */
  insert_user_one?: Maybe<User>;
  /** insert data into the table: "user_project_filter_calendar" */
  insert_user_project_filter_calendar?: Maybe<User_Project_Filter_Calendar_Mutation_Response>;
  /** insert a single row into the table: "user_project_filter_calendar" */
  insert_user_project_filter_calendar_one?: Maybe<User_Project_Filter_Calendar>;
  /** insert data into the table: "user_saved_email" */
  insert_user_saved_email?: Maybe<User_Saved_Email_Mutation_Response>;
  /** insert a single row into the table: "user_saved_email" */
  insert_user_saved_email_one?: Maybe<User_Saved_Email>;
  /** insert data into the table: "work_above_permit" */
  insert_work_above_permit?: Maybe<Work_Above_Permit_Mutation_Response>;
  /** insert a single row into the table: "work_above_permit" */
  insert_work_above_permit_one?: Maybe<Work_Above_Permit>;
  /** insert data into the table: "worker" */
  insert_worker?: Maybe<Worker_Mutation_Response>;
  /** insert data into the table: "worker_automatic_email" */
  insert_worker_automatic_email?: Maybe<Worker_Automatic_Email_Mutation_Response>;
  /** insert data into the table: "worker_automatic_email_event_type" */
  insert_worker_automatic_email_event_type?: Maybe<Worker_Automatic_Email_Event_Type_Mutation_Response>;
  /** insert a single row into the table: "worker_automatic_email_event_type" */
  insert_worker_automatic_email_event_type_one?: Maybe<Worker_Automatic_Email_Event_Type>;
  /** insert a single row into the table: "worker_automatic_email" */
  insert_worker_automatic_email_one?: Maybe<Worker_Automatic_Email>;
  /** insert data into the table: "worker_certification" */
  insert_worker_certification?: Maybe<Worker_Certification_Mutation_Response>;
  /** insert a single row into the table: "worker_certification" */
  insert_worker_certification_one?: Maybe<Worker_Certification>;
  /** insert data into the table: "worker_drug_test" */
  insert_worker_drug_test?: Maybe<Worker_Drug_Test_Mutation_Response>;
  /** insert a single row into the table: "worker_drug_test" */
  insert_worker_drug_test_one?: Maybe<Worker_Drug_Test>;
  /** insert data into the table: "worker_enabled_automatic_email_event" */
  insert_worker_enabled_automatic_email_event?: Maybe<Worker_Enabled_Automatic_Email_Event_Mutation_Response>;
  /** insert a single row into the table: "worker_enabled_automatic_email_event" */
  insert_worker_enabled_automatic_email_event_one?: Maybe<Worker_Enabled_Automatic_Email_Event>;
  /** insert data into the table: "worker_manhour_stats_by_range_table" */
  insert_worker_manhour_stats_by_range_table?: Maybe<Worker_Manhour_Stats_By_Range_Table_Mutation_Response>;
  /** insert a single row into the table: "worker_manhour_stats_by_range_table" */
  insert_worker_manhour_stats_by_range_table_one?: Maybe<Worker_Manhour_Stats_By_Range_Table>;
  /** insert data into the table: "worker_manhour_stats_table" */
  insert_worker_manhour_stats_table?: Maybe<Worker_Manhour_Stats_Table_Mutation_Response>;
  /** insert a single row into the table: "worker_manhour_stats_table" */
  insert_worker_manhour_stats_table_one?: Maybe<Worker_Manhour_Stats_Table>;
  /** insert a single row into the table: "worker" */
  insert_worker_one?: Maybe<Worker>;
  /** insert data into the table: "worker_role" */
  insert_worker_role?: Maybe<Worker_Role_Mutation_Response>;
  /** insert a single row into the table: "worker_role" */
  insert_worker_role_one?: Maybe<Worker_Role>;
  /** insert data into the table: "worker_stats_by_range_table" */
  insert_worker_stats_by_range_table?: Maybe<Worker_Stats_By_Range_Table_Mutation_Response>;
  /** insert a single row into the table: "worker_stats_by_range_table" */
  insert_worker_stats_by_range_table_one?: Maybe<Worker_Stats_By_Range_Table>;
  /** insert data into the table: "worker_stats_table" */
  insert_worker_stats_table?: Maybe<Worker_Stats_Table_Mutation_Response>;
  /** insert a single row into the table: "worker_stats_table" */
  insert_worker_stats_table_one?: Maybe<Worker_Stats_Table>;
  /** insert data into the table: "worker_title" */
  insert_worker_title?: Maybe<Worker_Title_Mutation_Response>;
  /** insert a single row into the table: "worker_title" */
  insert_worker_title_one?: Maybe<Worker_Title>;
  makeWorkerCrewLead?: Maybe<Scalars['Boolean']>;
  procoreDailyLog?: Maybe<ProcoreDailyLogOutput>;
  procoreDailyNote?: Maybe<ProcoreDailyNoteOutput>;
  procoreDailyWeather?: Maybe<ProcoreDailyWeatherOutput>;
  procoreGenerateToken?: Maybe<Scalars['String']>;
  procoreProjectList?: Maybe<ProcoreProjectListOutput>;
  procoreSetUserAccount?: Maybe<ProcoreSetUserAccountOutput>;
  procoreSubcontractorList?: Maybe<ProcoreSubcontractorListOutput>;
  resetPassword?: Maybe<Scalars['Boolean']>;
  sendReadingNotPermissibleNotifications: Scalars['String'];
  sendSiteNotification?: Maybe<Scalars['Int']>;
  signIn?: Maybe<Scalars['String']>;
  updatePassword?: Maybe<Scalars['Boolean']>;
  updateWorkerCrew?: Maybe<Scalars['Boolean']>;
  /** update data of the table: "address" */
  update_address?: Maybe<Address_Mutation_Response>;
  /** update single row of the table: "address" */
  update_address_by_pk?: Maybe<Address>;
  /** update data of the table: "auto_email" */
  update_auto_email?: Maybe<Auto_Email_Mutation_Response>;
  /** update single row of the table: "auto_email" */
  update_auto_email_by_pk?: Maybe<Auto_Email>;
  /** update data of the table: "auto_email_event_type" */
  update_auto_email_event_type?: Maybe<Auto_Email_Event_Type_Mutation_Response>;
  /** update single row of the table: "auto_email_event_type" */
  update_auto_email_event_type_by_pk?: Maybe<Auto_Email_Event_Type>;
  /** update data of the table: "awareness_question" */
  update_awareness_question?: Maybe<Awareness_Question_Mutation_Response>;
  /** update single row of the table: "awareness_question" */
  update_awareness_question_by_pk?: Maybe<Awareness_Question>;
  /** update data of the table: "calendar" */
  update_calendar?: Maybe<Calendar_Mutation_Response>;
  /** update single row of the table: "calendar" */
  update_calendar_by_pk?: Maybe<Calendar>;
  /** update data of the table: "certification" */
  update_certification?: Maybe<Certification_Mutation_Response>;
  /** update single row of the table: "certification" */
  update_certification_by_pk?: Maybe<Certification>;
  /** update data of the table: "chat" */
  update_chat?: Maybe<Chat_Mutation_Response>;
  /** update single row of the table: "chat" */
  update_chat_by_pk?: Maybe<Chat>;
  /** update data of the table: "chat_employee_preview" */
  update_chat_employee_preview?: Maybe<Chat_Employee_Preview_Mutation_Response>;
  /** update single row of the table: "chat_employee_preview" */
  update_chat_employee_preview_by_pk?: Maybe<Chat_Employee_Preview>;
  /** update data of the table: "chat_item" */
  update_chat_item?: Maybe<Chat_Item_Mutation_Response>;
  /** update data of the table: "chat_item_attachment" */
  update_chat_item_attachment?: Maybe<Chat_Item_Attachment_Mutation_Response>;
  /** update single row of the table: "chat_item_attachment" */
  update_chat_item_attachment_by_pk?: Maybe<Chat_Item_Attachment>;
  /** update single row of the table: "chat_item" */
  update_chat_item_by_pk?: Maybe<Chat_Item>;
  /** update data of the table: "chat_item_type" */
  update_chat_item_type?: Maybe<Chat_Item_Type_Mutation_Response>;
  /** update single row of the table: "chat_item_type" */
  update_chat_item_type_by_pk?: Maybe<Chat_Item_Type>;
  /** update data of the table: "chat_member" */
  update_chat_member?: Maybe<Chat_Member_Mutation_Response>;
  /** update single row of the table: "chat_member" */
  update_chat_member_by_pk?: Maybe<Chat_Member>;
  /** update data of the table: "checklist_item" */
  update_checklist_item?: Maybe<Checklist_Item_Mutation_Response>;
  /** update single row of the table: "checklist_item" */
  update_checklist_item_by_pk?: Maybe<Checklist_Item>;
  /** update data of the table: "checklist_item_config" */
  update_checklist_item_config?: Maybe<Checklist_Item_Config_Mutation_Response>;
  /** update single row of the table: "checklist_item_config" */
  update_checklist_item_config_by_pk?: Maybe<Checklist_Item_Config>;
  /** update data of the table: "checklist_item_config_type" */
  update_checklist_item_config_type?: Maybe<Checklist_Item_Config_Type_Mutation_Response>;
  /** update single row of the table: "checklist_item_config_type" */
  update_checklist_item_config_type_by_pk?: Maybe<Checklist_Item_Config_Type>;
  /** update data of the table: "checklist_item_notify_email" */
  update_checklist_item_notify_email?: Maybe<Checklist_Item_Notify_Email_Mutation_Response>;
  /** update single row of the table: "checklist_item_notify_email" */
  update_checklist_item_notify_email_by_pk?: Maybe<Checklist_Item_Notify_Email>;
  /** update data of the table: "checklist_item_type" */
  update_checklist_item_type?: Maybe<Checklist_Item_Type_Mutation_Response>;
  /** update single row of the table: "checklist_item_type" */
  update_checklist_item_type_by_pk?: Maybe<Checklist_Item_Type>;
  /** update data of the table: "cleared_project_covid_certify_worker" */
  update_cleared_project_covid_certify_worker?: Maybe<Cleared_Project_Covid_Certify_Worker_Mutation_Response>;
  /** update single row of the table: "cleared_project_covid_certify_worker" */
  update_cleared_project_covid_certify_worker_by_pk?: Maybe<Cleared_Project_Covid_Certify_Worker>;
  /** update data of the table: "cleared_project_covid_tested_positive_worker" */
  update_cleared_project_covid_tested_positive_worker?: Maybe<Cleared_Project_Covid_Tested_Positive_Worker_Mutation_Response>;
  /** update single row of the table: "cleared_project_covid_tested_positive_worker" */
  update_cleared_project_covid_tested_positive_worker_by_pk?: Maybe<Cleared_Project_Covid_Tested_Positive_Worker>;
  /** update data of the table: "confined_space_permit" */
  update_confined_space_permit?: Maybe<Confined_Space_Permit_Mutation_Response>;
  /** update single row of the table: "confined_space_permit" */
  update_confined_space_permit_by_pk?: Maybe<Confined_Space_Permit>;
  /** update data of the table: "confined_space_permit_monitoring_equipment" */
  update_confined_space_permit_monitoring_equipment?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Mutation_Response>;
  /** update single row of the table: "confined_space_permit_monitoring_equipment" */
  update_confined_space_permit_monitoring_equipment_by_pk?: Maybe<Confined_Space_Permit_Monitoring_Equipment>;
  /** update data of the table: "confined_space_permit_reading" */
  update_confined_space_permit_reading?: Maybe<Confined_Space_Permit_Reading_Mutation_Response>;
  /** update single row of the table: "confined_space_permit_reading" */
  update_confined_space_permit_reading_by_pk?: Maybe<Confined_Space_Permit_Reading>;
  /** update data of the table: "confined_space_permit_reading_custom_item" */
  update_confined_space_permit_reading_custom_item?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Mutation_Response>;
  /** update single row of the table: "confined_space_permit_reading_custom_item" */
  update_confined_space_permit_reading_custom_item_by_pk?: Maybe<Confined_Space_Permit_Reading_Custom_Item>;
  /** update data of the table: "daily_copy" */
  update_daily_copy?: Maybe<Daily_Copy_Mutation_Response>;
  /** update single row of the table: "daily_copy" */
  update_daily_copy_by_pk?: Maybe<Daily_Copy>;
  /** update data of the table: "daily_copy_section" */
  update_daily_copy_section?: Maybe<Daily_Copy_Section_Mutation_Response>;
  /** update single row of the table: "daily_copy_section" */
  update_daily_copy_section_by_pk?: Maybe<Daily_Copy_Section>;
  /** update data of the table: "daily_note" */
  update_daily_note?: Maybe<Daily_Note_Mutation_Response>;
  /** update single row of the table: "daily_note" */
  update_daily_note_by_pk?: Maybe<Daily_Note>;
  /** update data of the table: "daily_note_sub" */
  update_daily_note_sub?: Maybe<Daily_Note_Sub_Mutation_Response>;
  /** update single row of the table: "daily_note_sub" */
  update_daily_note_sub_by_pk?: Maybe<Daily_Note_Sub>;
  /** update data of the table: "daily_note_tag" */
  update_daily_note_tag?: Maybe<Daily_Note_Tag_Mutation_Response>;
  /** update single row of the table: "daily_note_tag" */
  update_daily_note_tag_by_pk?: Maybe<Daily_Note_Tag>;
  /** update data of the table: "daily_report" */
  update_daily_report?: Maybe<Daily_Report_Mutation_Response>;
  /** update single row of the table: "daily_report" */
  update_daily_report_by_pk?: Maybe<Daily_Report>;
  /** update data of the table: "daily_report_completed" */
  update_daily_report_completed?: Maybe<Daily_Report_Completed_Mutation_Response>;
  /** update single row of the table: "daily_report_completed" */
  update_daily_report_completed_by_pk?: Maybe<Daily_Report_Completed>;
  /** update data of the table: "daily_report_event" */
  update_daily_report_event?: Maybe<Daily_Report_Event_Mutation_Response>;
  /** update single row of the table: "daily_report_event" */
  update_daily_report_event_by_pk?: Maybe<Daily_Report_Event>;
  /** update data of the table: "daily_report_event_type" */
  update_daily_report_event_type?: Maybe<Daily_Report_Event_Type_Mutation_Response>;
  /** update single row of the table: "daily_report_event_type" */
  update_daily_report_event_type_by_pk?: Maybe<Daily_Report_Event_Type>;
  /** update data of the table: "daily_report_project_worker" */
  update_daily_report_project_worker?: Maybe<Daily_Report_Project_Worker_Mutation_Response>;
  /** update single row of the table: "daily_report_project_worker" */
  update_daily_report_project_worker_by_pk?: Maybe<Daily_Report_Project_Worker>;
  /** update data of the table: "daily_schedule_event" */
  update_daily_schedule_event?: Maybe<Daily_Schedule_Event_Mutation_Response>;
  /** update single row of the table: "daily_schedule_event" */
  update_daily_schedule_event_by_pk?: Maybe<Daily_Schedule_Event>;
  /** update data of the table: "daily_schedule_event_sub" */
  update_daily_schedule_event_sub?: Maybe<Daily_Schedule_Event_Sub_Mutation_Response>;
  /** update single row of the table: "daily_schedule_event_sub" */
  update_daily_schedule_event_sub_by_pk?: Maybe<Daily_Schedule_Event_Sub>;
  /** update data of the table: "daily_schedule_event_type" */
  update_daily_schedule_event_type?: Maybe<Daily_Schedule_Event_Type_Mutation_Response>;
  /** update single row of the table: "daily_schedule_event_type" */
  update_daily_schedule_event_type_by_pk?: Maybe<Daily_Schedule_Event_Type>;
  /** update data of the table: "daily_weather_observation" */
  update_daily_weather_observation?: Maybe<Daily_Weather_Observation_Mutation_Response>;
  /** update single row of the table: "daily_weather_observation" */
  update_daily_weather_observation_by_pk?: Maybe<Daily_Weather_Observation>;
  /** update data of the table: "daily_weather_observation_sub" */
  update_daily_weather_observation_sub?: Maybe<Daily_Weather_Observation_Sub_Mutation_Response>;
  /** update single row of the table: "daily_weather_observation_sub" */
  update_daily_weather_observation_sub_by_pk?: Maybe<Daily_Weather_Observation_Sub>;
  /** update data of the table: "daily_work_log" */
  update_daily_work_log?: Maybe<Daily_Work_Log_Mutation_Response>;
  /** update single row of the table: "daily_work_log" */
  update_daily_work_log_by_pk?: Maybe<Daily_Work_Log>;
  /** update data of the table: "daily_work_log_comment" */
  update_daily_work_log_comment?: Maybe<Daily_Work_Log_Comment_Mutation_Response>;
  /** update single row of the table: "daily_work_log_comment" */
  update_daily_work_log_comment_by_pk?: Maybe<Daily_Work_Log_Comment>;
  /** update data of the table: "daily_work_log_comment_email" */
  update_daily_work_log_comment_email?: Maybe<Daily_Work_Log_Comment_Email_Mutation_Response>;
  /** update single row of the table: "daily_work_log_comment_email" */
  update_daily_work_log_comment_email_by_pk?: Maybe<Daily_Work_Log_Comment_Email>;
  /** update data of the table: "daily_work_log_tag" */
  update_daily_work_log_tag?: Maybe<Daily_Work_Log_Tag_Mutation_Response>;
  /** update single row of the table: "daily_work_log_tag" */
  update_daily_work_log_tag_by_pk?: Maybe<Daily_Work_Log_Tag>;
  /** update data of the table: "daily_work_log_worker" */
  update_daily_work_log_worker?: Maybe<Daily_Work_Log_Worker_Mutation_Response>;
  /** update single row of the table: "daily_work_log_worker" */
  update_daily_work_log_worker_by_pk?: Maybe<Daily_Work_Log_Worker>;
  /** update data of the table: "delivery" */
  update_delivery?: Maybe<Delivery_Mutation_Response>;
  /** update single row of the table: "delivery" */
  update_delivery_by_pk?: Maybe<Delivery>;
  /** update data of the table: "delivery_calendar" */
  update_delivery_calendar?: Maybe<Delivery_Calendar_Mutation_Response>;
  /** update single row of the table: "delivery_calendar" */
  update_delivery_calendar_by_pk?: Maybe<Delivery_Calendar>;
  /** update data of the table: "dig_permit" */
  update_dig_permit?: Maybe<Dig_Permit_Mutation_Response>;
  /** update single row of the table: "dig_permit" */
  update_dig_permit_by_pk?: Maybe<Dig_Permit>;
  /** update data of the table: "dig_permit_select_option" */
  update_dig_permit_select_option?: Maybe<Dig_Permit_Select_Option_Mutation_Response>;
  /** update single row of the table: "dig_permit_select_option" */
  update_dig_permit_select_option_by_pk?: Maybe<Dig_Permit_Select_Option>;
  /** update data of the table: "dig_permit_ticket" */
  update_dig_permit_ticket?: Maybe<Dig_Permit_Ticket_Mutation_Response>;
  /** update single row of the table: "dig_permit_ticket" */
  update_dig_permit_ticket_by_pk?: Maybe<Dig_Permit_Ticket>;
  /** update data of the table: "employee_title" */
  update_employee_title?: Maybe<Employee_Title_Mutation_Response>;
  /** update single row of the table: "employee_title" */
  update_employee_title_by_pk?: Maybe<Employee_Title>;
  /** update data of the table: "expo_push_token" */
  update_expo_push_token?: Maybe<Expo_Push_Token_Mutation_Response>;
  /** update single row of the table: "expo_push_token" */
  update_expo_push_token_by_pk?: Maybe<Expo_Push_Token>;
  /** update data of the table: "feedback" */
  update_feedback?: Maybe<Feedback_Mutation_Response>;
  /** update single row of the table: "feedback" */
  update_feedback_by_pk?: Maybe<Feedback>;
  /** update data of the table: "forgot_password_key" */
  update_forgot_password_key?: Maybe<Forgot_Password_Key_Mutation_Response>;
  /** update single row of the table: "forgot_password_key" */
  update_forgot_password_key_by_pk?: Maybe<Forgot_Password_Key>;
  /** update data of the table: "gc_daily_checklist_item" */
  update_gc_daily_checklist_item?: Maybe<Gc_Daily_Checklist_Item_Mutation_Response>;
  /** update single row of the table: "gc_daily_checklist_item" */
  update_gc_daily_checklist_item_by_pk?: Maybe<Gc_Daily_Checklist_Item>;
  /** update data of the table: "gc_disabled_project_subcontractor" */
  update_gc_disabled_project_subcontractor?: Maybe<Gc_Disabled_Project_Subcontractor_Mutation_Response>;
  /** update single row of the table: "gc_disabled_project_subcontractor" */
  update_gc_disabled_project_subcontractor_by_pk?: Maybe<Gc_Disabled_Project_Subcontractor>;
  /** update data of the table: "general_contractor" */
  update_general_contractor?: Maybe<General_Contractor_Mutation_Response>;
  /** update single row of the table: "general_contractor" */
  update_general_contractor_by_pk?: Maybe<General_Contractor>;
  /** update data of the table: "general_contractor_employee" */
  update_general_contractor_employee?: Maybe<General_Contractor_Employee_Mutation_Response>;
  /** update single row of the table: "general_contractor_employee" */
  update_general_contractor_employee_by_pk?: Maybe<General_Contractor_Employee>;
  /** update data of the table: "government_identification" */
  update_government_identification?: Maybe<Government_Identification_Mutation_Response>;
  /** update single row of the table: "government_identification" */
  update_government_identification_by_pk?: Maybe<Government_Identification>;
  /** update data of the table: "hot_work_permit" */
  update_hot_work_permit?: Maybe<Hot_Work_Permit_Mutation_Response>;
  /** update single row of the table: "hot_work_permit" */
  update_hot_work_permit_by_pk?: Maybe<Hot_Work_Permit>;
  /** update data of the table: "hourly_forecast" */
  update_hourly_forecast?: Maybe<Hourly_Forecast_Mutation_Response>;
  /** update single row of the table: "hourly_forecast" */
  update_hourly_forecast_by_pk?: Maybe<Hourly_Forecast>;
  /** update data of the table: "image" */
  update_image?: Maybe<Image_Mutation_Response>;
  /** update single row of the table: "image" */
  update_image_by_pk?: Maybe<Image>;
  /** update data of the table: "image_type" */
  update_image_type?: Maybe<Image_Type_Mutation_Response>;
  /** update single row of the table: "image_type" */
  update_image_type_by_pk?: Maybe<Image_Type>;
  /** update data of the table: "incident_example" */
  update_incident_example?: Maybe<Incident_Example_Mutation_Response>;
  /** update single row of the table: "incident_example" */
  update_incident_example_by_pk?: Maybe<Incident_Example>;
  /** update data of the table: "invite" */
  update_invite?: Maybe<Invite_Mutation_Response>;
  /** update single row of the table: "invite" */
  update_invite_by_pk?: Maybe<Invite>;
  /** update data of the table: "lang_code" */
  update_lang_code?: Maybe<Lang_Code_Mutation_Response>;
  /** update single row of the table: "lang_code" */
  update_lang_code_by_pk?: Maybe<Lang_Code>;
  /** update data of the table: "notification_badge_count" */
  update_notification_badge_count?: Maybe<Notification_Badge_Count_Mutation_Response>;
  /** update single row of the table: "notification_badge_count" */
  update_notification_badge_count_by_pk?: Maybe<Notification_Badge_Count>;
  /** update data of the table: "orientation" */
  update_orientation?: Maybe<Orientation_Mutation_Response>;
  /** update single row of the table: "orientation" */
  update_orientation_by_pk?: Maybe<Orientation>;
  /** update data of the table: "orientation_slide" */
  update_orientation_slide?: Maybe<Orientation_Slide_Mutation_Response>;
  /** update single row of the table: "orientation_slide" */
  update_orientation_slide_by_pk?: Maybe<Orientation_Slide>;
  /** update data of the table: "pdf" */
  update_pdf?: Maybe<Pdf_Mutation_Response>;
  /** update single row of the table: "pdf" */
  update_pdf_by_pk?: Maybe<Pdf>;
  /** update data of the table: "permit" */
  update_permit?: Maybe<Permit_Mutation_Response>;
  /** update single row of the table: "permit" */
  update_permit_by_pk?: Maybe<Permit>;
  /** update data of the table: "permit_checklist_item" */
  update_permit_checklist_item?: Maybe<Permit_Checklist_Item_Mutation_Response>;
  /** update single row of the table: "permit_checklist_item" */
  update_permit_checklist_item_by_pk?: Maybe<Permit_Checklist_Item>;
  /** update data of the table: "permit_history" */
  update_permit_history?: Maybe<Permit_History_Mutation_Response>;
  /** update single row of the table: "permit_history" */
  update_permit_history_by_pk?: Maybe<Permit_History>;
  /** update data of the table: "permit_project_worker" */
  update_permit_project_worker?: Maybe<Permit_Project_Worker_Mutation_Response>;
  /** update single row of the table: "permit_project_worker" */
  update_permit_project_worker_by_pk?: Maybe<Permit_Project_Worker>;
  /** update data of the table: "permit_sign_in_image" */
  update_permit_sign_in_image?: Maybe<Permit_Sign_In_Image_Mutation_Response>;
  /** update single row of the table: "permit_sign_in_image" */
  update_permit_sign_in_image_by_pk?: Maybe<Permit_Sign_In_Image>;
  /** update data of the table: "permit_type" */
  update_permit_type?: Maybe<Permit_Type_Mutation_Response>;
  /** update single row of the table: "permit_type" */
  update_permit_type_by_pk?: Maybe<Permit_Type>;
  /** update data of the table: "ppe_category" */
  update_ppe_category?: Maybe<Ppe_Category_Mutation_Response>;
  /** update single row of the table: "ppe_category" */
  update_ppe_category_by_pk?: Maybe<Ppe_Category>;
  /** update data of the table: "ppe_type" */
  update_ppe_type?: Maybe<Ppe_Type_Mutation_Response>;
  /** update single row of the table: "ppe_type" */
  update_ppe_type_by_pk?: Maybe<Ppe_Type>;
  /** update data of the table: "procore_auth_data" */
  update_procore_auth_data?: Maybe<Procore_Auth_Data_Mutation_Response>;
  /** update single row of the table: "procore_auth_data" */
  update_procore_auth_data_by_pk?: Maybe<Procore_Auth_Data>;
  /** update data of the table: "procore_project_data" */
  update_procore_project_data?: Maybe<Procore_Project_Data_Mutation_Response>;
  /** update single row of the table: "procore_project_data" */
  update_procore_project_data_by_pk?: Maybe<Procore_Project_Data>;
  /** update data of the table: "procore_service_account" */
  update_procore_service_account?: Maybe<Procore_Service_Account_Mutation_Response>;
  /** update single row of the table: "procore_service_account" */
  update_procore_service_account_by_pk?: Maybe<Procore_Service_Account>;
  /** update data of the table: "procore_subcontractor" */
  update_procore_subcontractor?: Maybe<Procore_Subcontractor_Mutation_Response>;
  /** update single row of the table: "procore_subcontractor" */
  update_procore_subcontractor_by_pk?: Maybe<Procore_Subcontractor>;
  /** update data of the table: "project" */
  update_project?: Maybe<Project_Mutation_Response>;
  /** update single row of the table: "project" */
  update_project_by_pk?: Maybe<Project>;
  /** update data of the table: "project_completion_automated_notification" */
  update_project_completion_automated_notification?: Maybe<Project_Completion_Automated_Notification_Mutation_Response>;
  /** update single row of the table: "project_completion_automated_notification" */
  update_project_completion_automated_notification_by_pk?: Maybe<Project_Completion_Automated_Notification>;
  /** update data of the table: "project_covid_certify_worker" */
  update_project_covid_certify_worker?: Maybe<Project_Covid_Certify_Worker_Mutation_Response>;
  /** update data of the table: "project_covid_certify_worker_answer" */
  update_project_covid_certify_worker_answer?: Maybe<Project_Covid_Certify_Worker_Answer_Mutation_Response>;
  /** update single row of the table: "project_covid_certify_worker_answer" */
  update_project_covid_certify_worker_answer_by_pk?: Maybe<Project_Covid_Certify_Worker_Answer>;
  /** update single row of the table: "project_covid_certify_worker" */
  update_project_covid_certify_worker_by_pk?: Maybe<Project_Covid_Certify_Worker>;
  /** update data of the table: "project_covid_config" */
  update_project_covid_config?: Maybe<Project_Covid_Config_Mutation_Response>;
  /** update single row of the table: "project_covid_config" */
  update_project_covid_config_by_pk?: Maybe<Project_Covid_Config>;
  /** update data of the table: "project_covid_crew_certify" */
  update_project_covid_crew_certify?: Maybe<Project_Covid_Crew_Certify_Mutation_Response>;
  /** update single row of the table: "project_covid_crew_certify" */
  update_project_covid_crew_certify_by_pk?: Maybe<Project_Covid_Crew_Certify>;
  /** update data of the table: "project_covid_guest_certification" */
  update_project_covid_guest_certification?: Maybe<Project_Covid_Guest_Certification_Mutation_Response>;
  /** update data of the table: "project_covid_guest_certification_answer" */
  update_project_covid_guest_certification_answer?: Maybe<Project_Covid_Guest_Certification_Answer_Mutation_Response>;
  /** update single row of the table: "project_covid_guest_certification_answer" */
  update_project_covid_guest_certification_answer_by_pk?: Maybe<Project_Covid_Guest_Certification_Answer>;
  /** update single row of the table: "project_covid_guest_certification" */
  update_project_covid_guest_certification_by_pk?: Maybe<Project_Covid_Guest_Certification>;
  /** update data of the table: "project_covid_notify_employee" */
  update_project_covid_notify_employee?: Maybe<Project_Covid_Notify_Employee_Mutation_Response>;
  /** update single row of the table: "project_covid_notify_employee" */
  update_project_covid_notify_employee_by_pk?: Maybe<Project_Covid_Notify_Employee>;
  /** update data of the table: "project_covid_tested_positive_answer" */
  update_project_covid_tested_positive_answer?: Maybe<Project_Covid_Tested_Positive_Answer_Mutation_Response>;
  /** update single row of the table: "project_covid_tested_positive_answer" */
  update_project_covid_tested_positive_answer_by_pk?: Maybe<Project_Covid_Tested_Positive_Answer>;
  /** update data of the table: "project_covid_tested_positive_question" */
  update_project_covid_tested_positive_question?: Maybe<Project_Covid_Tested_Positive_Question_Mutation_Response>;
  /** update single row of the table: "project_covid_tested_positive_question" */
  update_project_covid_tested_positive_question_by_pk?: Maybe<Project_Covid_Tested_Positive_Question>;
  /** update data of the table: "project_covid_tested_positive_worker" */
  update_project_covid_tested_positive_worker?: Maybe<Project_Covid_Tested_Positive_Worker_Mutation_Response>;
  /** update single row of the table: "project_covid_tested_positive_worker" */
  update_project_covid_tested_positive_worker_by_pk?: Maybe<Project_Covid_Tested_Positive_Worker>;
  /** update data of the table: "project_covid_yes_no_question" */
  update_project_covid_yes_no_question?: Maybe<Project_Covid_Yes_No_Question_Mutation_Response>;
  /** update single row of the table: "project_covid_yes_no_question" */
  update_project_covid_yes_no_question_by_pk?: Maybe<Project_Covid_Yes_No_Question>;
  /** update data of the table: "project_crew" */
  update_project_crew?: Maybe<Project_Crew_Mutation_Response>;
  /** update single row of the table: "project_crew" */
  update_project_crew_by_pk?: Maybe<Project_Crew>;
  /** update data of the table: "project_employee" */
  update_project_employee?: Maybe<Project_Employee_Mutation_Response>;
  /** update single row of the table: "project_employee" */
  update_project_employee_by_pk?: Maybe<Project_Employee>;
  /** update data of the table: "project_hazard" */
  update_project_hazard?: Maybe<Project_Hazard_Mutation_Response>;
  /** update single row of the table: "project_hazard" */
  update_project_hazard_by_pk?: Maybe<Project_Hazard>;
  /** update data of the table: "project_hazard_subcontractor" */
  update_project_hazard_subcontractor?: Maybe<Project_Hazard_Subcontractor_Mutation_Response>;
  /** update single row of the table: "project_hazard_subcontractor" */
  update_project_hazard_subcontractor_by_pk?: Maybe<Project_Hazard_Subcontractor>;
  /** update data of the table: "project_post" */
  update_project_post?: Maybe<Project_Post_Mutation_Response>;
  /** update data of the table: "project_post_GCs" */
  update_project_post_GCs?: Maybe<Project_Post_GCs_Mutation_Response>;
  /** update single row of the table: "project_post_GCs" */
  update_project_post_GCs_by_pk?: Maybe<Project_Post_GCs>;
  /** update single row of the table: "project_post" */
  update_project_post_by_pk?: Maybe<Project_Post>;
  /** update data of the table: "project_post_workers" */
  update_project_post_workers?: Maybe<Project_Post_Workers_Mutation_Response>;
  /** update single row of the table: "project_post_workers" */
  update_project_post_workers_by_pk?: Maybe<Project_Post_Workers>;
  /** update data of the table: "project_report_settings" */
  update_project_report_settings?: Maybe<Project_Report_Settings_Mutation_Response>;
  /** update single row of the table: "project_report_settings" */
  update_project_report_settings_by_pk?: Maybe<Project_Report_Settings>;
  /** update data of the table: "project_site_notification" */
  update_project_site_notification?: Maybe<Project_Site_Notification_Mutation_Response>;
  /** update single row of the table: "project_site_notification" */
  update_project_site_notification_by_pk?: Maybe<Project_Site_Notification>;
  /** update data of the table: "project_subcontractor" */
  update_project_subcontractor?: Maybe<Project_Subcontractor_Mutation_Response>;
  /** update single row of the table: "project_subcontractor" */
  update_project_subcontractor_by_pk?: Maybe<Project_Subcontractor>;
  /** update data of the table: "project_subcontractor_onsite_update" */
  update_project_subcontractor_onsite_update?: Maybe<Project_Subcontractor_Onsite_Update_Mutation_Response>;
  /** update single row of the table: "project_subcontractor_onsite_update" */
  update_project_subcontractor_onsite_update_by_pk?: Maybe<Project_Subcontractor_Onsite_Update>;
  /** update data of the table: "project_subcontractor_report_settings" */
  update_project_subcontractor_report_settings?: Maybe<Project_Subcontractor_Report_Settings_Mutation_Response>;
  /** update single row of the table: "project_subcontractor_report_settings" */
  update_project_subcontractor_report_settings_by_pk?: Maybe<Project_Subcontractor_Report_Settings>;
  /** update data of the table: "project_user" */
  update_project_user?: Maybe<Project_User_Mutation_Response>;
  /** update single row of the table: "project_user" */
  update_project_user_by_pk?: Maybe<Project_User>;
  /** update data of the table: "project_worker" */
  update_project_worker?: Maybe<Project_Worker_Mutation_Response>;
  /** update single row of the table: "project_worker" */
  update_project_worker_by_pk?: Maybe<Project_Worker>;
  /** update data of the table: "project_worker_competency" */
  update_project_worker_competency?: Maybe<Project_Worker_Competency_Mutation_Response>;
  /** update single row of the table: "project_worker_competency" */
  update_project_worker_competency_by_pk?: Maybe<Project_Worker_Competency>;
  /** update data of the table: "project_worker_onsite_ping" */
  update_project_worker_onsite_ping?: Maybe<Project_Worker_Onsite_Ping_Mutation_Response>;
  /** update single row of the table: "project_worker_onsite_ping" */
  update_project_worker_onsite_ping_by_pk?: Maybe<Project_Worker_Onsite_Ping>;
  /** update data of the table: "projects_to_posts" */
  update_projects_to_posts?: Maybe<Projects_To_Posts_Mutation_Response>;
  /** update single row of the table: "projects_to_posts" */
  update_projects_to_posts_by_pk?: Maybe<Projects_To_Posts>;
  /** update data of the table: "report" */
  update_report?: Maybe<Report_Mutation_Response>;
  /** update data of the table: "report_awareness_question" */
  update_report_awareness_question?: Maybe<Report_Awareness_Question_Mutation_Response>;
  /** update single row of the table: "report_awareness_question" */
  update_report_awareness_question_by_pk?: Maybe<Report_Awareness_Question>;
  /** update single row of the table: "report" */
  update_report_by_pk?: Maybe<Report>;
  /** update data of the table: "report_fatal_four" */
  update_report_fatal_four?: Maybe<Report_Fatal_Four_Mutation_Response>;
  /** update single row of the table: "report_fatal_four" */
  update_report_fatal_four_by_pk?: Maybe<Report_Fatal_Four>;
  /** update data of the table: "report_injury" */
  update_report_injury?: Maybe<Report_Injury_Mutation_Response>;
  /** update single row of the table: "report_injury" */
  update_report_injury_by_pk?: Maybe<Report_Injury>;
  /** update data of the table: "report_project_hazard" */
  update_report_project_hazard?: Maybe<Report_Project_Hazard_Mutation_Response>;
  /** update single row of the table: "report_project_hazard" */
  update_report_project_hazard_by_pk?: Maybe<Report_Project_Hazard>;
  /** update data of the table: "report_project_post" */
  update_report_project_post?: Maybe<Report_Project_Post_Mutation_Response>;
  /** update single row of the table: "report_project_post" */
  update_report_project_post_by_pk?: Maybe<Report_Project_Post>;
  /** update data of the table: "report_project_worker" */
  update_report_project_worker?: Maybe<Report_Project_Worker_Mutation_Response>;
  /** update single row of the table: "report_project_worker" */
  update_report_project_worker_by_pk?: Maybe<Report_Project_Worker>;
  /** update data of the table: "s_daily_hours_to_date" */
  update_s_daily_hours_to_date?: Maybe<S_Daily_Hours_To_Date_Mutation_Response>;
  /** update single row of the table: "s_daily_hours_to_date" */
  update_s_daily_hours_to_date_by_pk?: Maybe<S_Daily_Hours_To_Date>;
  /** update data of the table: "s_sub_daily_log_submittal" */
  update_s_sub_daily_log_submittal?: Maybe<S_Sub_Daily_Log_Submittal_Mutation_Response>;
  /** update single row of the table: "s_sub_daily_log_submittal" */
  update_s_sub_daily_log_submittal_by_pk?: Maybe<S_Sub_Daily_Log_Submittal>;
  /** update data of the table: "select_option" */
  update_select_option?: Maybe<Select_Option_Mutation_Response>;
  /** update single row of the table: "select_option" */
  update_select_option_by_pk?: Maybe<Select_Option>;
  /** update data of the table: "select_option_type" */
  update_select_option_type?: Maybe<Select_Option_Type_Mutation_Response>;
  /** update single row of the table: "select_option_type" */
  update_select_option_type_by_pk?: Maybe<Select_Option_Type>;
  /** update data of the table: "short_forecast_type" */
  update_short_forecast_type?: Maybe<Short_Forecast_Type_Mutation_Response>;
  /** update single row of the table: "short_forecast_type" */
  update_short_forecast_type_by_pk?: Maybe<Short_Forecast_Type>;
  /** update data of the table: "sign_in_type" */
  update_sign_in_type?: Maybe<Sign_In_Type_Mutation_Response>;
  /** update single row of the table: "sign_in_type" */
  update_sign_in_type_by_pk?: Maybe<Sign_In_Type>;
  /** update data of the table: "state" */
  update_state?: Maybe<State_Mutation_Response>;
  /** update single row of the table: "state" */
  update_state_by_pk?: Maybe<State>;
  /** update data of the table: "subcontractor" */
  update_subcontractor?: Maybe<Subcontractor_Mutation_Response>;
  /** update single row of the table: "subcontractor" */
  update_subcontractor_by_pk?: Maybe<Subcontractor>;
  /** update data of the table: "subcontractor_employee" */
  update_subcontractor_employee?: Maybe<Subcontractor_Employee_Mutation_Response>;
  /** update single row of the table: "subcontractor_employee" */
  update_subcontractor_employee_by_pk?: Maybe<Subcontractor_Employee>;
  /** update data of the table: "subcontractor_employee_title" */
  update_subcontractor_employee_title?: Maybe<Subcontractor_Employee_Title_Mutation_Response>;
  /** update single row of the table: "subcontractor_employee_title" */
  update_subcontractor_employee_title_by_pk?: Maybe<Subcontractor_Employee_Title>;
  /** update data of the table: "subcontractor_onsite_status_update" */
  update_subcontractor_onsite_status_update?: Maybe<Subcontractor_Onsite_Status_Update_Mutation_Response>;
  /** update single row of the table: "subcontractor_onsite_status_update" */
  update_subcontractor_onsite_status_update_by_pk?: Maybe<Subcontractor_Onsite_Status_Update>;
  /** update data of the table: "subcontractor_trade" */
  update_subcontractor_trade?: Maybe<Subcontractor_Trade_Mutation_Response>;
  /** update single row of the table: "subcontractor_trade" */
  update_subcontractor_trade_by_pk?: Maybe<Subcontractor_Trade>;
  /** update data of the table: "subcontractor_worker" */
  update_subcontractor_worker?: Maybe<Subcontractor_Worker_Mutation_Response>;
  /** update single row of the table: "subcontractor_worker" */
  update_subcontractor_worker_by_pk?: Maybe<Subcontractor_Worker>;
  /** update data of the table: "submission_image" */
  update_submission_image?: Maybe<Submission_Image_Mutation_Response>;
  /** update single row of the table: "submission_image" */
  update_submission_image_by_pk?: Maybe<Submission_Image>;
  /** update data of the table: "submission_image_type" */
  update_submission_image_type?: Maybe<Submission_Image_Type_Mutation_Response>;
  /** update single row of the table: "submission_image_type" */
  update_submission_image_type_by_pk?: Maybe<Submission_Image_Type>;
  /** update data of the table: "tag" */
  update_tag?: Maybe<Tag_Mutation_Response>;
  /** update single row of the table: "tag" */
  update_tag_by_pk?: Maybe<Tag>;
  /** update data of the table: "task" */
  update_task?: Maybe<Task_Mutation_Response>;
  /** update single row of the table: "task" */
  update_task_by_pk?: Maybe<Task>;
  /** update data of the table: "task_note" */
  update_task_note?: Maybe<Task_Note_Mutation_Response>;
  /** update single row of the table: "task_note" */
  update_task_note_by_pk?: Maybe<Task_Note>;
  /** update data of the table: "task_permit_type" */
  update_task_permit_type?: Maybe<Task_Permit_Type_Mutation_Response>;
  /** update single row of the table: "task_permit_type" */
  update_task_permit_type_by_pk?: Maybe<Task_Permit_Type>;
  /** update data of the table: "task_ppe_type" */
  update_task_ppe_type?: Maybe<Task_Ppe_Type_Mutation_Response>;
  /** update single row of the table: "task_ppe_type" */
  update_task_ppe_type_by_pk?: Maybe<Task_Ppe_Type>;
  /** update data of the table: "task_step" */
  update_task_step?: Maybe<Task_Step_Mutation_Response>;
  /** update single row of the table: "task_step" */
  update_task_step_by_pk?: Maybe<Task_Step>;
  /** update data of the table: "task_step_hazard" */
  update_task_step_hazard?: Maybe<Task_Step_Hazard_Mutation_Response>;
  /** update single row of the table: "task_step_hazard" */
  update_task_step_hazard_by_pk?: Maybe<Task_Step_Hazard>;
  /** update data of the table: "text_translation" */
  update_text_translation?: Maybe<Text_Translation_Mutation_Response>;
  /** update single row of the table: "text_translation" */
  update_text_translation_by_pk?: Maybe<Text_Translation>;
  /** update data of the table: "todo" */
  update_todo?: Maybe<Todo_Mutation_Response>;
  /** update data of the table: "todo_assignee" */
  update_todo_assignee?: Maybe<Todo_Assignee_Mutation_Response>;
  /** update single row of the table: "todo_assignee" */
  update_todo_assignee_by_pk?: Maybe<Todo_Assignee>;
  /** update single row of the table: "todo" */
  update_todo_by_pk?: Maybe<Todo>;
  /** update data of the table: "todo_notifyee" */
  update_todo_notifyee?: Maybe<Todo_Notifyee_Mutation_Response>;
  /** update single row of the table: "todo_notifyee" */
  update_todo_notifyee_by_pk?: Maybe<Todo_Notifyee>;
  /** update data of the table: "toolbox_talk" */
  update_toolbox_talk?: Maybe<Toolbox_Talk_Mutation_Response>;
  /** update single row of the table: "toolbox_talk" */
  update_toolbox_talk_by_pk?: Maybe<Toolbox_Talk>;
  /** update data of the table: "toolbox_talk_pdf" */
  update_toolbox_talk_pdf?: Maybe<Toolbox_Talk_Pdf_Mutation_Response>;
  /** update single row of the table: "toolbox_talk_pdf" */
  update_toolbox_talk_pdf_by_pk?: Maybe<Toolbox_Talk_Pdf>;
  /** update data of the table: "toolbox_talk_project_worker" */
  update_toolbox_talk_project_worker?: Maybe<Toolbox_Talk_Project_Worker_Mutation_Response>;
  /** update single row of the table: "toolbox_talk_project_worker" */
  update_toolbox_talk_project_worker_by_pk?: Maybe<Toolbox_Talk_Project_Worker>;
  /** update data of the table: "user" */
  update_user?: Maybe<User_Mutation_Response>;
  /** update single row of the table: "user" */
  update_user_by_pk?: Maybe<User>;
  /** update data of the table: "user_notification" */
  update_user_notification?: Maybe<User_Notification_Mutation_Response>;
  /** update single row of the table: "user_notification" */
  update_user_notification_by_pk?: Maybe<User_Notification>;
  /** update data of the table: "user_notification_event_type" */
  update_user_notification_event_type?: Maybe<User_Notification_Event_Type_Mutation_Response>;
  /** update single row of the table: "user_notification_event_type" */
  update_user_notification_event_type_by_pk?: Maybe<User_Notification_Event_Type>;
  /** update data of the table: "user_project_filter_calendar" */
  update_user_project_filter_calendar?: Maybe<User_Project_Filter_Calendar_Mutation_Response>;
  /** update single row of the table: "user_project_filter_calendar" */
  update_user_project_filter_calendar_by_pk?: Maybe<User_Project_Filter_Calendar>;
  /** update data of the table: "user_saved_email" */
  update_user_saved_email?: Maybe<User_Saved_Email_Mutation_Response>;
  /** update single row of the table: "user_saved_email" */
  update_user_saved_email_by_pk?: Maybe<User_Saved_Email>;
  /** update data of the table: "work_above_permit" */
  update_work_above_permit?: Maybe<Work_Above_Permit_Mutation_Response>;
  /** update single row of the table: "work_above_permit" */
  update_work_above_permit_by_pk?: Maybe<Work_Above_Permit>;
  /** update data of the table: "worker" */
  update_worker?: Maybe<Worker_Mutation_Response>;
  /** update data of the table: "worker_automatic_email" */
  update_worker_automatic_email?: Maybe<Worker_Automatic_Email_Mutation_Response>;
  /** update single row of the table: "worker_automatic_email" */
  update_worker_automatic_email_by_pk?: Maybe<Worker_Automatic_Email>;
  /** update data of the table: "worker_automatic_email_event_type" */
  update_worker_automatic_email_event_type?: Maybe<Worker_Automatic_Email_Event_Type_Mutation_Response>;
  /** update single row of the table: "worker_automatic_email_event_type" */
  update_worker_automatic_email_event_type_by_pk?: Maybe<Worker_Automatic_Email_Event_Type>;
  /** update single row of the table: "worker" */
  update_worker_by_pk?: Maybe<Worker>;
  /** update data of the table: "worker_certification" */
  update_worker_certification?: Maybe<Worker_Certification_Mutation_Response>;
  /** update single row of the table: "worker_certification" */
  update_worker_certification_by_pk?: Maybe<Worker_Certification>;
  /** update data of the table: "worker_drug_test" */
  update_worker_drug_test?: Maybe<Worker_Drug_Test_Mutation_Response>;
  /** update single row of the table: "worker_drug_test" */
  update_worker_drug_test_by_pk?: Maybe<Worker_Drug_Test>;
  /** update data of the table: "worker_enabled_automatic_email_event" */
  update_worker_enabled_automatic_email_event?: Maybe<Worker_Enabled_Automatic_Email_Event_Mutation_Response>;
  /** update single row of the table: "worker_enabled_automatic_email_event" */
  update_worker_enabled_automatic_email_event_by_pk?: Maybe<Worker_Enabled_Automatic_Email_Event>;
  /** update data of the table: "worker_manhour_stats_by_range_table" */
  update_worker_manhour_stats_by_range_table?: Maybe<Worker_Manhour_Stats_By_Range_Table_Mutation_Response>;
  /** update single row of the table: "worker_manhour_stats_by_range_table" */
  update_worker_manhour_stats_by_range_table_by_pk?: Maybe<Worker_Manhour_Stats_By_Range_Table>;
  /** update data of the table: "worker_manhour_stats_table" */
  update_worker_manhour_stats_table?: Maybe<Worker_Manhour_Stats_Table_Mutation_Response>;
  /** update single row of the table: "worker_manhour_stats_table" */
  update_worker_manhour_stats_table_by_pk?: Maybe<Worker_Manhour_Stats_Table>;
  /** update data of the table: "worker_role" */
  update_worker_role?: Maybe<Worker_Role_Mutation_Response>;
  /** update single row of the table: "worker_role" */
  update_worker_role_by_pk?: Maybe<Worker_Role>;
  /** update data of the table: "worker_stats_by_range_table" */
  update_worker_stats_by_range_table?: Maybe<Worker_Stats_By_Range_Table_Mutation_Response>;
  /** update single row of the table: "worker_stats_by_range_table" */
  update_worker_stats_by_range_table_by_pk?: Maybe<Worker_Stats_By_Range_Table>;
  /** update data of the table: "worker_stats_table" */
  update_worker_stats_table?: Maybe<Worker_Stats_Table_Mutation_Response>;
  /** update single row of the table: "worker_stats_table" */
  update_worker_stats_table_by_pk?: Maybe<Worker_Stats_Table>;
  /** update data of the table: "worker_title" */
  update_worker_title?: Maybe<Worker_Title_Mutation_Response>;
  /** update single row of the table: "worker_title" */
  update_worker_title_by_pk?: Maybe<Worker_Title>;
  uploadBase64File?: Maybe<Scalars['String']>;
  validateProjectReportSettings?: Maybe<Scalars['Boolean']>;
  workerCreatePassword?: Maybe<WorkerCreatePasswordResponse>;
};


/** mutation root */
export type Mutation_RootMyMutationArgs = {
  author_id?: Maybe<Scalars['uuid']>;
  description?: Maybe<Scalars['String']>;
  expiry_date?: Maybe<Scalars['timestamptz']>;
  project_id?: Maybe<Scalars['uuid']>;
  title?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};


/** mutation root */
export type Mutation_RootAcceptInviteArgs = {
  input: AcceptInviteInput;
};


/** mutation root */
export type Mutation_RootActionNameArgs = {
  arg1: SampleInput;
};


/** mutation root */
export type Mutation_RootCreateEmployeeArgs = {
  email: Scalars['String'];
  generalContractorId: Scalars['String'];
  name: Scalars['String'];
  phoneNumber?: Maybe<Scalars['String']>;
  titleId: Scalars['String'];
  username: Scalars['String'];
};


/** mutation root */
export type Mutation_RootCreateInviteArgs = {
  objects: Array<CreateInviteDataObject>;
};


/** mutation root */
export type Mutation_RootCreateSubcontractorEmployeeArgs = {
  input: CreateSubcontractorEmployeeInput;
};


/** mutation root */
export type Mutation_RootCreateWorkerArgs = {
  email?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  password: Scalars['String'];
  phoneNumber?: Maybe<Scalars['String']>;
  username: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_AddressArgs = {
  where: Address_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Address_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Auto_EmailArgs = {
  where: Auto_Email_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Auto_Email_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Auto_Email_Event_TypeArgs = {
  where: Auto_Email_Event_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Auto_Email_Event_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Awareness_QuestionArgs = {
  where: Awareness_Question_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Awareness_Question_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_CalendarArgs = {
  where: Calendar_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Calendar_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_CertificationArgs = {
  where: Certification_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Certification_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_ChatArgs = {
  where: Chat_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Chat_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Chat_Employee_PreviewArgs = {
  where: Chat_Employee_Preview_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Chat_Employee_Preview_By_PkArgs = {
  chat_member_id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Chat_ItemArgs = {
  where: Chat_Item_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Chat_Item_AttachmentArgs = {
  where: Chat_Item_Attachment_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Chat_Item_Attachment_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Chat_Item_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Chat_Item_TypeArgs = {
  where: Chat_Item_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Chat_Item_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Chat_MemberArgs = {
  where: Chat_Member_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Chat_Member_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Checklist_ItemArgs = {
  where: Checklist_Item_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Checklist_Item_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Checklist_Item_ConfigArgs = {
  where: Checklist_Item_Config_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Checklist_Item_Config_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Checklist_Item_Config_TypeArgs = {
  where: Checklist_Item_Config_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Checklist_Item_Config_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Checklist_Item_Notify_EmailArgs = {
  where: Checklist_Item_Notify_Email_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Checklist_Item_Notify_Email_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Checklist_Item_TypeArgs = {
  where: Checklist_Item_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Checklist_Item_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Cleared_Project_Covid_Certify_WorkerArgs = {
  where: Cleared_Project_Covid_Certify_Worker_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Cleared_Project_Covid_Certify_Worker_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Cleared_Project_Covid_Tested_Positive_WorkerArgs = {
  where: Cleared_Project_Covid_Tested_Positive_Worker_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Cleared_Project_Covid_Tested_Positive_Worker_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Confined_Space_PermitArgs = {
  where: Confined_Space_Permit_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Confined_Space_Permit_By_PkArgs = {
  permit_id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Confined_Space_Permit_Monitoring_EquipmentArgs = {
  where: Confined_Space_Permit_Monitoring_Equipment_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Confined_Space_Permit_Monitoring_Equipment_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Confined_Space_Permit_ReadingArgs = {
  where: Confined_Space_Permit_Reading_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Confined_Space_Permit_Reading_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Confined_Space_Permit_Reading_Custom_ItemArgs = {
  where: Confined_Space_Permit_Reading_Custom_Item_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Confined_Space_Permit_Reading_Custom_Item_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Daily_CopyArgs = {
  where: Daily_Copy_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Daily_Copy_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Daily_Copy_SectionArgs = {
  where: Daily_Copy_Section_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Daily_Copy_Section_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Daily_NoteArgs = {
  where: Daily_Note_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Daily_Note_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Daily_Note_SubArgs = {
  where: Daily_Note_Sub_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Daily_Note_Sub_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Daily_Note_TagArgs = {
  where: Daily_Note_Tag_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Daily_Note_Tag_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Daily_ReportArgs = {
  where: Daily_Report_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Daily_Report_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Daily_Report_CompletedArgs = {
  where: Daily_Report_Completed_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Daily_Report_Completed_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Daily_Report_EventArgs = {
  where: Daily_Report_Event_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Daily_Report_Event_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Daily_Report_Event_TypeArgs = {
  where: Daily_Report_Event_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Daily_Report_Event_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Daily_Report_Project_WorkerArgs = {
  where: Daily_Report_Project_Worker_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Daily_Report_Project_Worker_By_PkArgs = {
  daily_report_id: Scalars['uuid'];
  project_worker_id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Daily_Schedule_EventArgs = {
  where: Daily_Schedule_Event_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Daily_Schedule_Event_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Daily_Schedule_Event_SubArgs = {
  where: Daily_Schedule_Event_Sub_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Daily_Schedule_Event_Sub_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Daily_Schedule_Event_TypeArgs = {
  where: Daily_Schedule_Event_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Daily_Schedule_Event_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Daily_Weather_ObservationArgs = {
  where: Daily_Weather_Observation_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Daily_Weather_Observation_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Daily_Weather_Observation_SubArgs = {
  where: Daily_Weather_Observation_Sub_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Daily_Weather_Observation_Sub_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Daily_Work_LogArgs = {
  where: Daily_Work_Log_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Daily_Work_Log_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Daily_Work_Log_CommentArgs = {
  where: Daily_Work_Log_Comment_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Daily_Work_Log_Comment_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Daily_Work_Log_Comment_EmailArgs = {
  where: Daily_Work_Log_Comment_Email_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Daily_Work_Log_Comment_Email_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Daily_Work_Log_TagArgs = {
  where: Daily_Work_Log_Tag_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Daily_Work_Log_Tag_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Daily_Work_Log_WorkerArgs = {
  where: Daily_Work_Log_Worker_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Daily_Work_Log_Worker_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_DeliveryArgs = {
  where: Delivery_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Delivery_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Delivery_CalendarArgs = {
  where: Delivery_Calendar_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Delivery_Calendar_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Dig_PermitArgs = {
  where: Dig_Permit_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Dig_Permit_By_PkArgs = {
  permit_id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Dig_Permit_Select_OptionArgs = {
  where: Dig_Permit_Select_Option_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Dig_Permit_Select_Option_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Dig_Permit_TicketArgs = {
  where: Dig_Permit_Ticket_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Dig_Permit_Ticket_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Employee_TitleArgs = {
  where: Employee_Title_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Employee_Title_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Expo_Push_TokenArgs = {
  where: Expo_Push_Token_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Expo_Push_Token_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_FeedbackArgs = {
  where: Feedback_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Feedback_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Forgot_Password_KeyArgs = {
  where: Forgot_Password_Key_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Forgot_Password_Key_By_PkArgs = {
  key: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Gc_Daily_Checklist_ItemArgs = {
  where: Gc_Daily_Checklist_Item_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Gc_Daily_Checklist_Item_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Gc_Disabled_Project_SubcontractorArgs = {
  where: Gc_Disabled_Project_Subcontractor_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Gc_Disabled_Project_Subcontractor_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_General_ContractorArgs = {
  where: General_Contractor_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_General_Contractor_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_General_Contractor_EmployeeArgs = {
  where: General_Contractor_Employee_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_General_Contractor_Employee_By_PkArgs = {
  uid: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Government_IdentificationArgs = {
  where: Government_Identification_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Government_Identification_By_PkArgs = {
  user_id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Hot_Work_PermitArgs = {
  where: Hot_Work_Permit_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Hot_Work_Permit_By_PkArgs = {
  permit_id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Hourly_ForecastArgs = {
  where: Hourly_Forecast_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Hourly_Forecast_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_ImageArgs = {
  where: Image_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Image_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Image_TypeArgs = {
  where: Image_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Image_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Incident_ExampleArgs = {
  where: Incident_Example_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Incident_Example_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_InviteArgs = {
  where: Invite_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Invite_By_PkArgs = {
  id: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Lang_CodeArgs = {
  where: Lang_Code_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Lang_Code_By_PkArgs = {
  value: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Notification_Badge_CountArgs = {
  where: Notification_Badge_Count_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Notification_Badge_Count_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_OrientationArgs = {
  where: Orientation_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Orientation_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Orientation_SlideArgs = {
  where: Orientation_Slide_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Orientation_Slide_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_PdfArgs = {
  where: Pdf_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Pdf_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_PermitArgs = {
  where: Permit_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Permit_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Permit_Checklist_ItemArgs = {
  where: Permit_Checklist_Item_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Permit_Checklist_Item_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Permit_HistoryArgs = {
  where: Permit_History_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Permit_History_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Permit_Project_WorkerArgs = {
  where: Permit_Project_Worker_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Permit_Project_Worker_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Permit_Sign_In_ImageArgs = {
  where: Permit_Sign_In_Image_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Permit_Sign_In_Image_By_PkArgs = {
  image_id: Scalars['uuid'];
  permit_id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Permit_TypeArgs = {
  where: Permit_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Permit_Type_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Ppe_CategoryArgs = {
  where: Ppe_Category_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Ppe_Category_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Ppe_TypeArgs = {
  where: Ppe_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Ppe_Type_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Procore_Auth_DataArgs = {
  where: Procore_Auth_Data_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Procore_Auth_Data_By_PkArgs = {
  general_contractor_id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Procore_Project_DataArgs = {
  where: Procore_Project_Data_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Procore_Project_Data_By_PkArgs = {
  project_id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Procore_Service_AccountArgs = {
  where: Procore_Service_Account_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Procore_Service_Account_By_PkArgs = {
  general_contractor_id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Procore_SubcontractorArgs = {
  where: Procore_Subcontractor_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Procore_Subcontractor_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_ProjectArgs = {
  where: Project_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Project_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Project_Completion_Automated_NotificationArgs = {
  where: Project_Completion_Automated_Notification_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Project_Completion_Automated_Notification_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Project_Covid_Certify_WorkerArgs = {
  where: Project_Covid_Certify_Worker_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Project_Covid_Certify_Worker_AnswerArgs = {
  where: Project_Covid_Certify_Worker_Answer_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Project_Covid_Certify_Worker_Answer_By_PkArgs = {
  project_covid_certify_worker_id: Scalars['uuid'];
  project_covid_yes_no_question_id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Project_Covid_Certify_Worker_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Project_Covid_ConfigArgs = {
  where: Project_Covid_Config_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Project_Covid_Config_By_PkArgs = {
  project_id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Project_Covid_Crew_CertifyArgs = {
  where: Project_Covid_Crew_Certify_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Project_Covid_Crew_Certify_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Project_Covid_Guest_CertificationArgs = {
  where: Project_Covid_Guest_Certification_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Project_Covid_Guest_Certification_AnswerArgs = {
  where: Project_Covid_Guest_Certification_Answer_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Project_Covid_Guest_Certification_Answer_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Project_Covid_Guest_Certification_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Project_Covid_Notify_EmployeeArgs = {
  where: Project_Covid_Notify_Employee_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Project_Covid_Notify_Employee_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Project_Covid_Tested_Positive_AnswerArgs = {
  where: Project_Covid_Tested_Positive_Answer_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Project_Covid_Tested_Positive_Answer_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Project_Covid_Tested_Positive_QuestionArgs = {
  where: Project_Covid_Tested_Positive_Question_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Project_Covid_Tested_Positive_Question_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Project_Covid_Tested_Positive_WorkerArgs = {
  where: Project_Covid_Tested_Positive_Worker_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Project_Covid_Tested_Positive_Worker_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Project_Covid_Yes_No_QuestionArgs = {
  where: Project_Covid_Yes_No_Question_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Project_Covid_Yes_No_Question_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Project_CrewArgs = {
  where: Project_Crew_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Project_Crew_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Project_EmployeeArgs = {
  where: Project_Employee_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Project_Employee_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Project_HazardArgs = {
  where: Project_Hazard_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Project_Hazard_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Project_Hazard_SubcontractorArgs = {
  where: Project_Hazard_Subcontractor_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Project_Hazard_Subcontractor_By_PkArgs = {
  project_hazard_id: Scalars['uuid'];
  subcontractor_id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Project_PostArgs = {
  where: Project_Post_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Project_Post_GCsArgs = {
  where: Project_Post_GCs_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Project_Post_GCs_By_PkArgs = {
  general_contractor_id: Scalars['uuid'];
  project_post_id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Project_Post_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Project_Post_WorkersArgs = {
  where: Project_Post_Workers_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Project_Post_Workers_By_PkArgs = {
  project_post_id: Scalars['uuid'];
  worker_id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Project_Report_SettingsArgs = {
  where: Project_Report_Settings_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Project_Report_Settings_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Project_Site_NotificationArgs = {
  where: Project_Site_Notification_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Project_Site_Notification_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Project_SubcontractorArgs = {
  where: Project_Subcontractor_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Project_Subcontractor_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Project_Subcontractor_Onsite_UpdateArgs = {
  where: Project_Subcontractor_Onsite_Update_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Project_Subcontractor_Onsite_Update_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Project_Subcontractor_Report_SettingsArgs = {
  where: Project_Subcontractor_Report_Settings_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Project_Subcontractor_Report_Settings_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Project_UserArgs = {
  where: Project_User_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Project_User_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Project_WorkerArgs = {
  where: Project_Worker_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Project_Worker_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Project_Worker_CompetencyArgs = {
  where: Project_Worker_Competency_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Project_Worker_Competency_By_PkArgs = {
  description: Scalars['String'];
  project_worker_id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Project_Worker_Onsite_PingArgs = {
  where: Project_Worker_Onsite_Ping_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Project_Worker_Onsite_Ping_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Projects_To_PostsArgs = {
  where: Projects_To_Posts_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Projects_To_Posts_By_PkArgs = {
  post_id: Scalars['uuid'];
  project_id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_ReportArgs = {
  where: Report_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Report_Awareness_QuestionArgs = {
  where: Report_Awareness_Question_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Report_Awareness_Question_By_PkArgs = {
  awareness_question_id: Scalars['uuid'];
  report_id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Report_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Report_Fatal_FourArgs = {
  where: Report_Fatal_Four_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Report_Fatal_Four_By_PkArgs = {
  report_id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Report_InjuryArgs = {
  where: Report_Injury_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Report_Injury_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Report_Project_HazardArgs = {
  where: Report_Project_Hazard_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Report_Project_Hazard_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Report_Project_PostArgs = {
  where: Report_Project_Post_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Report_Project_Post_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Report_Project_WorkerArgs = {
  where: Report_Project_Worker_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Report_Project_Worker_By_PkArgs = {
  project_worker_id: Scalars['uuid'];
  report_id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_S_Daily_Hours_To_DateArgs = {
  where: S_Daily_Hours_To_Date_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_S_Daily_Hours_To_Date_By_PkArgs = {
  subcontractor_id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_S_Sub_Daily_Log_SubmittalArgs = {
  where: S_Sub_Daily_Log_Submittal_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_S_Sub_Daily_Log_Submittal_By_PkArgs = {
  subcontractor_id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Select_OptionArgs = {
  where: Select_Option_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Select_Option_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Select_Option_TypeArgs = {
  where: Select_Option_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Select_Option_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Short_Forecast_TypeArgs = {
  where: Short_Forecast_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Short_Forecast_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Sign_In_TypeArgs = {
  where: Sign_In_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Sign_In_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_StateArgs = {
  where: State_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_State_By_PkArgs = {
  code: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_SubcontractorArgs = {
  where: Subcontractor_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Subcontractor_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Subcontractor_EmployeeArgs = {
  where: Subcontractor_Employee_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Subcontractor_Employee_By_PkArgs = {
  user_id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Subcontractor_Employee_TitleArgs = {
  where: Subcontractor_Employee_Title_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Subcontractor_Employee_Title_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Subcontractor_Onsite_Status_UpdateArgs = {
  where: Subcontractor_Onsite_Status_Update_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Subcontractor_Onsite_Status_Update_By_PkArgs = {
  created_at: Scalars['date'];
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Subcontractor_TradeArgs = {
  where: Subcontractor_Trade_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Subcontractor_Trade_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Subcontractor_WorkerArgs = {
  where: Subcontractor_Worker_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Subcontractor_Worker_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Submission_ImageArgs = {
  where: Submission_Image_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Submission_Image_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Submission_Image_TypeArgs = {
  where: Submission_Image_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Submission_Image_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_TagArgs = {
  where: Tag_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Tag_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_TaskArgs = {
  where: Task_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Task_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Task_NoteArgs = {
  where: Task_Note_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Task_Note_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Task_Permit_TypeArgs = {
  where: Task_Permit_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Task_Permit_Type_By_PkArgs = {
  permit_type_id: Scalars['uuid'];
  task_id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Task_Ppe_TypeArgs = {
  where: Task_Ppe_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Task_Ppe_Type_By_PkArgs = {
  ppe_type_id: Scalars['uuid'];
  task_id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Task_StepArgs = {
  where: Task_Step_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Task_Step_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Task_Step_HazardArgs = {
  where: Task_Step_Hazard_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Task_Step_Hazard_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Text_TranslationArgs = {
  where: Text_Translation_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Text_Translation_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_TodoArgs = {
  where: Todo_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Todo_AssigneeArgs = {
  where: Todo_Assignee_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Todo_Assignee_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Todo_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Todo_NotifyeeArgs = {
  where: Todo_Notifyee_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Todo_Notifyee_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Toolbox_TalkArgs = {
  where: Toolbox_Talk_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Toolbox_Talk_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Toolbox_Talk_PdfArgs = {
  where: Toolbox_Talk_Pdf_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Toolbox_Talk_Pdf_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Toolbox_Talk_Project_WorkerArgs = {
  where: Toolbox_Talk_Project_Worker_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Toolbox_Talk_Project_Worker_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_UserArgs = {
  where: User_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_User_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_User_NotificationArgs = {
  where: User_Notification_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_User_Notification_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_User_Notification_Event_TypeArgs = {
  where: User_Notification_Event_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_User_Notification_Event_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_User_Project_Filter_CalendarArgs = {
  where: User_Project_Filter_Calendar_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_User_Project_Filter_Calendar_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_User_Saved_EmailArgs = {
  where: User_Saved_Email_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_User_Saved_Email_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Work_Above_PermitArgs = {
  where: Work_Above_Permit_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Work_Above_Permit_By_PkArgs = {
  permit_id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_WorkerArgs = {
  where: Worker_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Worker_Automatic_EmailArgs = {
  where: Worker_Automatic_Email_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Worker_Automatic_Email_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Worker_Automatic_Email_Event_TypeArgs = {
  where: Worker_Automatic_Email_Event_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Worker_Automatic_Email_Event_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Worker_By_PkArgs = {
  uid: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Worker_CertificationArgs = {
  where: Worker_Certification_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Worker_Certification_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Worker_Drug_TestArgs = {
  where: Worker_Drug_Test_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Worker_Drug_Test_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Worker_Enabled_Automatic_Email_EventArgs = {
  where: Worker_Enabled_Automatic_Email_Event_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Worker_Enabled_Automatic_Email_Event_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Worker_Manhour_Stats_By_Range_TableArgs = {
  where: Worker_Manhour_Stats_By_Range_Table_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Worker_Manhour_Stats_By_Range_Table_By_PkArgs = {
  report_created_at: Scalars['date'];
};


/** mutation root */
export type Mutation_RootDelete_Worker_Manhour_Stats_TableArgs = {
  where: Worker_Manhour_Stats_Table_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Worker_Manhour_Stats_Table_By_PkArgs = {
  sub_id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Worker_RoleArgs = {
  where: Worker_Role_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Worker_Role_By_PkArgs = {
  value: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Worker_Stats_By_Range_TableArgs = {
  where: Worker_Stats_By_Range_Table_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Worker_Stats_By_Range_Table_By_PkArgs = {
  report_created_at: Scalars['date'];
};


/** mutation root */
export type Mutation_RootDelete_Worker_Stats_TableArgs = {
  where: Worker_Stats_Table_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Worker_Stats_Table_By_PkArgs = {
  sub_id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Worker_TitleArgs = {
  where: Worker_Title_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Worker_Title_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootEmailChecklistNotifyeesArgs = {
  input?: Maybe<EmailChecklistNotifyeesInput>;
};


/** mutation root */
export type Mutation_RootEmailCovidSpreadsheetArgs = {
  input: EmailCovidSpreadsheetInput;
};


/** mutation root */
export type Mutation_RootEmailCovidTestedPositiveArgs = {
  input: EmailCovidTestedPositiveInput;
};


/** mutation root */
export type Mutation_RootEmailCovidWorkerAuditSpreadsheetArgs = {
  input: EmailCovidWorkerAuditSpreadsheetInput;
};


/** mutation root */
export type Mutation_RootEmailDailyLogCommentArgs = {
  input: EmailDailyLogCommentInput;
};


/** mutation root */
export type Mutation_RootEmailDailyLogsPdfArgs = {
  input?: Maybe<EmailDailyLogsPdfInput>;
};


/** mutation root */
export type Mutation_RootEmailDailyReportPdfArgs = {
  input: EmailDailyReportPdfInput;
};


/** mutation root */
export type Mutation_RootEmailDashboardSpreadsheetArgs = {
  input: EmailDashboardSpreadsheetInput;
};


/** mutation root */
export type Mutation_RootEmailFailedCovidCertificationArgs = {
  input: EmailFailedCovidCertificationInput;
};


/** mutation root */
export type Mutation_RootEmailPermitPdfArgs = {
  input: EmailPermitPdfInput;
};


/** mutation root */
export type Mutation_RootEmailSafetyReportPdfArgs = {
  input: EmailSafetyReportPdfInput;
};


/** mutation root */
export type Mutation_RootEmailToolboxTalkPdfArgs = {
  input: EmailToolboxTalkPdfInput;
};


/** mutation root */
export type Mutation_RootForgotPasswordArgs = {
  input: ForgotPasswordInput;
};


/** mutation root */
export type Mutation_RootGenerateDailyReportsSummaryArgs = {
  input?: Maybe<GenerateDailyReportsSummaryInput>;
};


/** mutation root */
export type Mutation_RootGenerateGcSpreadsheetArgs = {
  input: GenerateGcSpreadsheetInput;
};


/** mutation root */
export type Mutation_RootGetBlurhashArgs = {
  input?: Maybe<GetBlurhashInput>;
};


/** mutation root */
export type Mutation_RootGetQrCodeArgs = {
  input: GetQrCodeInput;
};


/** mutation root */
export type Mutation_RootInsert_AddressArgs = {
  objects: Array<Address_Insert_Input>;
  on_conflict?: Maybe<Address_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Address_OneArgs = {
  object: Address_Insert_Input;
  on_conflict?: Maybe<Address_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Auto_EmailArgs = {
  objects: Array<Auto_Email_Insert_Input>;
  on_conflict?: Maybe<Auto_Email_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Auto_Email_Event_TypeArgs = {
  objects: Array<Auto_Email_Event_Type_Insert_Input>;
  on_conflict?: Maybe<Auto_Email_Event_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Auto_Email_Event_Type_OneArgs = {
  object: Auto_Email_Event_Type_Insert_Input;
  on_conflict?: Maybe<Auto_Email_Event_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Auto_Email_OneArgs = {
  object: Auto_Email_Insert_Input;
  on_conflict?: Maybe<Auto_Email_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Awareness_QuestionArgs = {
  objects: Array<Awareness_Question_Insert_Input>;
  on_conflict?: Maybe<Awareness_Question_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Awareness_Question_OneArgs = {
  object: Awareness_Question_Insert_Input;
  on_conflict?: Maybe<Awareness_Question_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_CalendarArgs = {
  objects: Array<Calendar_Insert_Input>;
  on_conflict?: Maybe<Calendar_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Calendar_OneArgs = {
  object: Calendar_Insert_Input;
  on_conflict?: Maybe<Calendar_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_CertificationArgs = {
  objects: Array<Certification_Insert_Input>;
  on_conflict?: Maybe<Certification_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Certification_OneArgs = {
  object: Certification_Insert_Input;
  on_conflict?: Maybe<Certification_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ChatArgs = {
  objects: Array<Chat_Insert_Input>;
  on_conflict?: Maybe<Chat_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Chat_Employee_PreviewArgs = {
  objects: Array<Chat_Employee_Preview_Insert_Input>;
  on_conflict?: Maybe<Chat_Employee_Preview_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Chat_Employee_Preview_OneArgs = {
  object: Chat_Employee_Preview_Insert_Input;
  on_conflict?: Maybe<Chat_Employee_Preview_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Chat_ItemArgs = {
  objects: Array<Chat_Item_Insert_Input>;
  on_conflict?: Maybe<Chat_Item_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Chat_Item_AttachmentArgs = {
  objects: Array<Chat_Item_Attachment_Insert_Input>;
  on_conflict?: Maybe<Chat_Item_Attachment_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Chat_Item_Attachment_OneArgs = {
  object: Chat_Item_Attachment_Insert_Input;
  on_conflict?: Maybe<Chat_Item_Attachment_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Chat_Item_OneArgs = {
  object: Chat_Item_Insert_Input;
  on_conflict?: Maybe<Chat_Item_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Chat_Item_TypeArgs = {
  objects: Array<Chat_Item_Type_Insert_Input>;
  on_conflict?: Maybe<Chat_Item_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Chat_Item_Type_OneArgs = {
  object: Chat_Item_Type_Insert_Input;
  on_conflict?: Maybe<Chat_Item_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Chat_MemberArgs = {
  objects: Array<Chat_Member_Insert_Input>;
  on_conflict?: Maybe<Chat_Member_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Chat_Member_OneArgs = {
  object: Chat_Member_Insert_Input;
  on_conflict?: Maybe<Chat_Member_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Chat_OneArgs = {
  object: Chat_Insert_Input;
  on_conflict?: Maybe<Chat_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Checklist_ItemArgs = {
  objects: Array<Checklist_Item_Insert_Input>;
  on_conflict?: Maybe<Checklist_Item_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Checklist_Item_ConfigArgs = {
  objects: Array<Checklist_Item_Config_Insert_Input>;
  on_conflict?: Maybe<Checklist_Item_Config_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Checklist_Item_Config_OneArgs = {
  object: Checklist_Item_Config_Insert_Input;
  on_conflict?: Maybe<Checklist_Item_Config_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Checklist_Item_Config_TypeArgs = {
  objects: Array<Checklist_Item_Config_Type_Insert_Input>;
  on_conflict?: Maybe<Checklist_Item_Config_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Checklist_Item_Config_Type_OneArgs = {
  object: Checklist_Item_Config_Type_Insert_Input;
  on_conflict?: Maybe<Checklist_Item_Config_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Checklist_Item_Notify_EmailArgs = {
  objects: Array<Checklist_Item_Notify_Email_Insert_Input>;
  on_conflict?: Maybe<Checklist_Item_Notify_Email_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Checklist_Item_Notify_Email_OneArgs = {
  object: Checklist_Item_Notify_Email_Insert_Input;
  on_conflict?: Maybe<Checklist_Item_Notify_Email_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Checklist_Item_OneArgs = {
  object: Checklist_Item_Insert_Input;
  on_conflict?: Maybe<Checklist_Item_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Checklist_Item_TypeArgs = {
  objects: Array<Checklist_Item_Type_Insert_Input>;
  on_conflict?: Maybe<Checklist_Item_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Checklist_Item_Type_OneArgs = {
  object: Checklist_Item_Type_Insert_Input;
  on_conflict?: Maybe<Checklist_Item_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Cleared_Project_Covid_Certify_WorkerArgs = {
  objects: Array<Cleared_Project_Covid_Certify_Worker_Insert_Input>;
  on_conflict?: Maybe<Cleared_Project_Covid_Certify_Worker_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Cleared_Project_Covid_Certify_Worker_OneArgs = {
  object: Cleared_Project_Covid_Certify_Worker_Insert_Input;
  on_conflict?: Maybe<Cleared_Project_Covid_Certify_Worker_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Cleared_Project_Covid_Tested_Positive_WorkerArgs = {
  objects: Array<Cleared_Project_Covid_Tested_Positive_Worker_Insert_Input>;
  on_conflict?: Maybe<Cleared_Project_Covid_Tested_Positive_Worker_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Cleared_Project_Covid_Tested_Positive_Worker_OneArgs = {
  object: Cleared_Project_Covid_Tested_Positive_Worker_Insert_Input;
  on_conflict?: Maybe<Cleared_Project_Covid_Tested_Positive_Worker_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Confined_Space_PermitArgs = {
  objects: Array<Confined_Space_Permit_Insert_Input>;
  on_conflict?: Maybe<Confined_Space_Permit_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Confined_Space_Permit_Monitoring_EquipmentArgs = {
  objects: Array<Confined_Space_Permit_Monitoring_Equipment_Insert_Input>;
  on_conflict?: Maybe<Confined_Space_Permit_Monitoring_Equipment_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Confined_Space_Permit_Monitoring_Equipment_OneArgs = {
  object: Confined_Space_Permit_Monitoring_Equipment_Insert_Input;
  on_conflict?: Maybe<Confined_Space_Permit_Monitoring_Equipment_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Confined_Space_Permit_OneArgs = {
  object: Confined_Space_Permit_Insert_Input;
  on_conflict?: Maybe<Confined_Space_Permit_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Confined_Space_Permit_ReadingArgs = {
  objects: Array<Confined_Space_Permit_Reading_Insert_Input>;
  on_conflict?: Maybe<Confined_Space_Permit_Reading_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Confined_Space_Permit_Reading_Custom_ItemArgs = {
  objects: Array<Confined_Space_Permit_Reading_Custom_Item_Insert_Input>;
  on_conflict?: Maybe<Confined_Space_Permit_Reading_Custom_Item_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Confined_Space_Permit_Reading_Custom_Item_OneArgs = {
  object: Confined_Space_Permit_Reading_Custom_Item_Insert_Input;
  on_conflict?: Maybe<Confined_Space_Permit_Reading_Custom_Item_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Confined_Space_Permit_Reading_OneArgs = {
  object: Confined_Space_Permit_Reading_Insert_Input;
  on_conflict?: Maybe<Confined_Space_Permit_Reading_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_CopyArgs = {
  objects: Array<Daily_Copy_Insert_Input>;
  on_conflict?: Maybe<Daily_Copy_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_Copy_OneArgs = {
  object: Daily_Copy_Insert_Input;
  on_conflict?: Maybe<Daily_Copy_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_Copy_SectionArgs = {
  objects: Array<Daily_Copy_Section_Insert_Input>;
  on_conflict?: Maybe<Daily_Copy_Section_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_Copy_Section_OneArgs = {
  object: Daily_Copy_Section_Insert_Input;
  on_conflict?: Maybe<Daily_Copy_Section_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_NoteArgs = {
  objects: Array<Daily_Note_Insert_Input>;
  on_conflict?: Maybe<Daily_Note_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_Note_OneArgs = {
  object: Daily_Note_Insert_Input;
  on_conflict?: Maybe<Daily_Note_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_Note_SubArgs = {
  objects: Array<Daily_Note_Sub_Insert_Input>;
  on_conflict?: Maybe<Daily_Note_Sub_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_Note_Sub_OneArgs = {
  object: Daily_Note_Sub_Insert_Input;
  on_conflict?: Maybe<Daily_Note_Sub_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_Note_TagArgs = {
  objects: Array<Daily_Note_Tag_Insert_Input>;
  on_conflict?: Maybe<Daily_Note_Tag_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_Note_Tag_OneArgs = {
  object: Daily_Note_Tag_Insert_Input;
  on_conflict?: Maybe<Daily_Note_Tag_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_ReportArgs = {
  objects: Array<Daily_Report_Insert_Input>;
  on_conflict?: Maybe<Daily_Report_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_Report_CompletedArgs = {
  objects: Array<Daily_Report_Completed_Insert_Input>;
  on_conflict?: Maybe<Daily_Report_Completed_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_Report_Completed_OneArgs = {
  object: Daily_Report_Completed_Insert_Input;
  on_conflict?: Maybe<Daily_Report_Completed_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_Report_EventArgs = {
  objects: Array<Daily_Report_Event_Insert_Input>;
  on_conflict?: Maybe<Daily_Report_Event_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_Report_Event_OneArgs = {
  object: Daily_Report_Event_Insert_Input;
  on_conflict?: Maybe<Daily_Report_Event_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_Report_Event_TypeArgs = {
  objects: Array<Daily_Report_Event_Type_Insert_Input>;
  on_conflict?: Maybe<Daily_Report_Event_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_Report_Event_Type_OneArgs = {
  object: Daily_Report_Event_Type_Insert_Input;
  on_conflict?: Maybe<Daily_Report_Event_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_Report_OneArgs = {
  object: Daily_Report_Insert_Input;
  on_conflict?: Maybe<Daily_Report_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_Report_Project_WorkerArgs = {
  objects: Array<Daily_Report_Project_Worker_Insert_Input>;
  on_conflict?: Maybe<Daily_Report_Project_Worker_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_Report_Project_Worker_OneArgs = {
  object: Daily_Report_Project_Worker_Insert_Input;
  on_conflict?: Maybe<Daily_Report_Project_Worker_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_Schedule_EventArgs = {
  objects: Array<Daily_Schedule_Event_Insert_Input>;
  on_conflict?: Maybe<Daily_Schedule_Event_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_Schedule_Event_OneArgs = {
  object: Daily_Schedule_Event_Insert_Input;
  on_conflict?: Maybe<Daily_Schedule_Event_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_Schedule_Event_SubArgs = {
  objects: Array<Daily_Schedule_Event_Sub_Insert_Input>;
  on_conflict?: Maybe<Daily_Schedule_Event_Sub_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_Schedule_Event_Sub_OneArgs = {
  object: Daily_Schedule_Event_Sub_Insert_Input;
  on_conflict?: Maybe<Daily_Schedule_Event_Sub_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_Schedule_Event_TypeArgs = {
  objects: Array<Daily_Schedule_Event_Type_Insert_Input>;
  on_conflict?: Maybe<Daily_Schedule_Event_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_Schedule_Event_Type_OneArgs = {
  object: Daily_Schedule_Event_Type_Insert_Input;
  on_conflict?: Maybe<Daily_Schedule_Event_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_Weather_ObservationArgs = {
  objects: Array<Daily_Weather_Observation_Insert_Input>;
  on_conflict?: Maybe<Daily_Weather_Observation_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_Weather_Observation_OneArgs = {
  object: Daily_Weather_Observation_Insert_Input;
  on_conflict?: Maybe<Daily_Weather_Observation_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_Weather_Observation_SubArgs = {
  objects: Array<Daily_Weather_Observation_Sub_Insert_Input>;
  on_conflict?: Maybe<Daily_Weather_Observation_Sub_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_Weather_Observation_Sub_OneArgs = {
  object: Daily_Weather_Observation_Sub_Insert_Input;
  on_conflict?: Maybe<Daily_Weather_Observation_Sub_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_Work_LogArgs = {
  objects: Array<Daily_Work_Log_Insert_Input>;
  on_conflict?: Maybe<Daily_Work_Log_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_Work_Log_CommentArgs = {
  objects: Array<Daily_Work_Log_Comment_Insert_Input>;
  on_conflict?: Maybe<Daily_Work_Log_Comment_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_Work_Log_Comment_EmailArgs = {
  objects: Array<Daily_Work_Log_Comment_Email_Insert_Input>;
  on_conflict?: Maybe<Daily_Work_Log_Comment_Email_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_Work_Log_Comment_Email_OneArgs = {
  object: Daily_Work_Log_Comment_Email_Insert_Input;
  on_conflict?: Maybe<Daily_Work_Log_Comment_Email_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_Work_Log_Comment_OneArgs = {
  object: Daily_Work_Log_Comment_Insert_Input;
  on_conflict?: Maybe<Daily_Work_Log_Comment_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_Work_Log_OneArgs = {
  object: Daily_Work_Log_Insert_Input;
  on_conflict?: Maybe<Daily_Work_Log_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_Work_Log_TagArgs = {
  objects: Array<Daily_Work_Log_Tag_Insert_Input>;
  on_conflict?: Maybe<Daily_Work_Log_Tag_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_Work_Log_Tag_OneArgs = {
  object: Daily_Work_Log_Tag_Insert_Input;
  on_conflict?: Maybe<Daily_Work_Log_Tag_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_Work_Log_WorkerArgs = {
  objects: Array<Daily_Work_Log_Worker_Insert_Input>;
  on_conflict?: Maybe<Daily_Work_Log_Worker_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Daily_Work_Log_Worker_OneArgs = {
  object: Daily_Work_Log_Worker_Insert_Input;
  on_conflict?: Maybe<Daily_Work_Log_Worker_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_DeliveryArgs = {
  objects: Array<Delivery_Insert_Input>;
  on_conflict?: Maybe<Delivery_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Delivery_CalendarArgs = {
  objects: Array<Delivery_Calendar_Insert_Input>;
  on_conflict?: Maybe<Delivery_Calendar_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Delivery_Calendar_OneArgs = {
  object: Delivery_Calendar_Insert_Input;
  on_conflict?: Maybe<Delivery_Calendar_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Delivery_OneArgs = {
  object: Delivery_Insert_Input;
  on_conflict?: Maybe<Delivery_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Dig_PermitArgs = {
  objects: Array<Dig_Permit_Insert_Input>;
  on_conflict?: Maybe<Dig_Permit_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Dig_Permit_OneArgs = {
  object: Dig_Permit_Insert_Input;
  on_conflict?: Maybe<Dig_Permit_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Dig_Permit_Select_OptionArgs = {
  objects: Array<Dig_Permit_Select_Option_Insert_Input>;
  on_conflict?: Maybe<Dig_Permit_Select_Option_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Dig_Permit_Select_Option_OneArgs = {
  object: Dig_Permit_Select_Option_Insert_Input;
  on_conflict?: Maybe<Dig_Permit_Select_Option_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Dig_Permit_TicketArgs = {
  objects: Array<Dig_Permit_Ticket_Insert_Input>;
  on_conflict?: Maybe<Dig_Permit_Ticket_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Dig_Permit_Ticket_OneArgs = {
  object: Dig_Permit_Ticket_Insert_Input;
  on_conflict?: Maybe<Dig_Permit_Ticket_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Employee_TitleArgs = {
  objects: Array<Employee_Title_Insert_Input>;
  on_conflict?: Maybe<Employee_Title_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Employee_Title_OneArgs = {
  object: Employee_Title_Insert_Input;
  on_conflict?: Maybe<Employee_Title_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Expo_Push_TokenArgs = {
  objects: Array<Expo_Push_Token_Insert_Input>;
  on_conflict?: Maybe<Expo_Push_Token_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Expo_Push_Token_OneArgs = {
  object: Expo_Push_Token_Insert_Input;
  on_conflict?: Maybe<Expo_Push_Token_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_FeedbackArgs = {
  objects: Array<Feedback_Insert_Input>;
  on_conflict?: Maybe<Feedback_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Feedback_OneArgs = {
  object: Feedback_Insert_Input;
  on_conflict?: Maybe<Feedback_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Forgot_Password_KeyArgs = {
  objects: Array<Forgot_Password_Key_Insert_Input>;
  on_conflict?: Maybe<Forgot_Password_Key_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Forgot_Password_Key_OneArgs = {
  object: Forgot_Password_Key_Insert_Input;
  on_conflict?: Maybe<Forgot_Password_Key_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Gc_Daily_Checklist_ItemArgs = {
  objects: Array<Gc_Daily_Checklist_Item_Insert_Input>;
  on_conflict?: Maybe<Gc_Daily_Checklist_Item_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Gc_Daily_Checklist_Item_OneArgs = {
  object: Gc_Daily_Checklist_Item_Insert_Input;
  on_conflict?: Maybe<Gc_Daily_Checklist_Item_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Gc_Disabled_Project_SubcontractorArgs = {
  objects: Array<Gc_Disabled_Project_Subcontractor_Insert_Input>;
  on_conflict?: Maybe<Gc_Disabled_Project_Subcontractor_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Gc_Disabled_Project_Subcontractor_OneArgs = {
  object: Gc_Disabled_Project_Subcontractor_Insert_Input;
  on_conflict?: Maybe<Gc_Disabled_Project_Subcontractor_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_General_ContractorArgs = {
  objects: Array<General_Contractor_Insert_Input>;
  on_conflict?: Maybe<General_Contractor_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_General_Contractor_EmployeeArgs = {
  objects: Array<General_Contractor_Employee_Insert_Input>;
  on_conflict?: Maybe<General_Contractor_Employee_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_General_Contractor_Employee_OneArgs = {
  object: General_Contractor_Employee_Insert_Input;
  on_conflict?: Maybe<General_Contractor_Employee_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_General_Contractor_OneArgs = {
  object: General_Contractor_Insert_Input;
  on_conflict?: Maybe<General_Contractor_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Government_IdentificationArgs = {
  objects: Array<Government_Identification_Insert_Input>;
  on_conflict?: Maybe<Government_Identification_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Government_Identification_OneArgs = {
  object: Government_Identification_Insert_Input;
  on_conflict?: Maybe<Government_Identification_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Hot_Work_PermitArgs = {
  objects: Array<Hot_Work_Permit_Insert_Input>;
  on_conflict?: Maybe<Hot_Work_Permit_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Hot_Work_Permit_OneArgs = {
  object: Hot_Work_Permit_Insert_Input;
  on_conflict?: Maybe<Hot_Work_Permit_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Hourly_ForecastArgs = {
  objects: Array<Hourly_Forecast_Insert_Input>;
  on_conflict?: Maybe<Hourly_Forecast_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Hourly_Forecast_OneArgs = {
  object: Hourly_Forecast_Insert_Input;
  on_conflict?: Maybe<Hourly_Forecast_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ImageArgs = {
  objects: Array<Image_Insert_Input>;
  on_conflict?: Maybe<Image_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Image_OneArgs = {
  object: Image_Insert_Input;
  on_conflict?: Maybe<Image_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Image_TypeArgs = {
  objects: Array<Image_Type_Insert_Input>;
  on_conflict?: Maybe<Image_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Image_Type_OneArgs = {
  object: Image_Type_Insert_Input;
  on_conflict?: Maybe<Image_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Incident_ExampleArgs = {
  objects: Array<Incident_Example_Insert_Input>;
  on_conflict?: Maybe<Incident_Example_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Incident_Example_OneArgs = {
  object: Incident_Example_Insert_Input;
  on_conflict?: Maybe<Incident_Example_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_InviteArgs = {
  objects: Array<Invite_Insert_Input>;
  on_conflict?: Maybe<Invite_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Invite_OneArgs = {
  object: Invite_Insert_Input;
  on_conflict?: Maybe<Invite_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Lang_CodeArgs = {
  objects: Array<Lang_Code_Insert_Input>;
  on_conflict?: Maybe<Lang_Code_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Lang_Code_OneArgs = {
  object: Lang_Code_Insert_Input;
  on_conflict?: Maybe<Lang_Code_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Notification_Badge_CountArgs = {
  objects: Array<Notification_Badge_Count_Insert_Input>;
  on_conflict?: Maybe<Notification_Badge_Count_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Notification_Badge_Count_OneArgs = {
  object: Notification_Badge_Count_Insert_Input;
  on_conflict?: Maybe<Notification_Badge_Count_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_OrientationArgs = {
  objects: Array<Orientation_Insert_Input>;
  on_conflict?: Maybe<Orientation_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Orientation_OneArgs = {
  object: Orientation_Insert_Input;
  on_conflict?: Maybe<Orientation_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Orientation_SlideArgs = {
  objects: Array<Orientation_Slide_Insert_Input>;
  on_conflict?: Maybe<Orientation_Slide_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Orientation_Slide_OneArgs = {
  object: Orientation_Slide_Insert_Input;
  on_conflict?: Maybe<Orientation_Slide_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_PdfArgs = {
  objects: Array<Pdf_Insert_Input>;
  on_conflict?: Maybe<Pdf_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Pdf_OneArgs = {
  object: Pdf_Insert_Input;
  on_conflict?: Maybe<Pdf_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_PermitArgs = {
  objects: Array<Permit_Insert_Input>;
  on_conflict?: Maybe<Permit_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Permit_Checklist_ItemArgs = {
  objects: Array<Permit_Checklist_Item_Insert_Input>;
  on_conflict?: Maybe<Permit_Checklist_Item_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Permit_Checklist_Item_OneArgs = {
  object: Permit_Checklist_Item_Insert_Input;
  on_conflict?: Maybe<Permit_Checklist_Item_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Permit_HistoryArgs = {
  objects: Array<Permit_History_Insert_Input>;
  on_conflict?: Maybe<Permit_History_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Permit_History_OneArgs = {
  object: Permit_History_Insert_Input;
  on_conflict?: Maybe<Permit_History_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Permit_OneArgs = {
  object: Permit_Insert_Input;
  on_conflict?: Maybe<Permit_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Permit_Project_WorkerArgs = {
  objects: Array<Permit_Project_Worker_Insert_Input>;
  on_conflict?: Maybe<Permit_Project_Worker_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Permit_Project_Worker_OneArgs = {
  object: Permit_Project_Worker_Insert_Input;
  on_conflict?: Maybe<Permit_Project_Worker_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Permit_Sign_In_ImageArgs = {
  objects: Array<Permit_Sign_In_Image_Insert_Input>;
  on_conflict?: Maybe<Permit_Sign_In_Image_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Permit_Sign_In_Image_OneArgs = {
  object: Permit_Sign_In_Image_Insert_Input;
  on_conflict?: Maybe<Permit_Sign_In_Image_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Permit_TypeArgs = {
  objects: Array<Permit_Type_Insert_Input>;
  on_conflict?: Maybe<Permit_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Permit_Type_OneArgs = {
  object: Permit_Type_Insert_Input;
  on_conflict?: Maybe<Permit_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Ppe_CategoryArgs = {
  objects: Array<Ppe_Category_Insert_Input>;
  on_conflict?: Maybe<Ppe_Category_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Ppe_Category_OneArgs = {
  object: Ppe_Category_Insert_Input;
  on_conflict?: Maybe<Ppe_Category_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Ppe_TypeArgs = {
  objects: Array<Ppe_Type_Insert_Input>;
  on_conflict?: Maybe<Ppe_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Ppe_Type_OneArgs = {
  object: Ppe_Type_Insert_Input;
  on_conflict?: Maybe<Ppe_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Procore_Auth_DataArgs = {
  objects: Array<Procore_Auth_Data_Insert_Input>;
  on_conflict?: Maybe<Procore_Auth_Data_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Procore_Auth_Data_OneArgs = {
  object: Procore_Auth_Data_Insert_Input;
  on_conflict?: Maybe<Procore_Auth_Data_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Procore_Project_DataArgs = {
  objects: Array<Procore_Project_Data_Insert_Input>;
  on_conflict?: Maybe<Procore_Project_Data_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Procore_Project_Data_OneArgs = {
  object: Procore_Project_Data_Insert_Input;
  on_conflict?: Maybe<Procore_Project_Data_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Procore_Service_AccountArgs = {
  objects: Array<Procore_Service_Account_Insert_Input>;
  on_conflict?: Maybe<Procore_Service_Account_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Procore_Service_Account_OneArgs = {
  object: Procore_Service_Account_Insert_Input;
  on_conflict?: Maybe<Procore_Service_Account_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Procore_SubcontractorArgs = {
  objects: Array<Procore_Subcontractor_Insert_Input>;
  on_conflict?: Maybe<Procore_Subcontractor_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Procore_Subcontractor_OneArgs = {
  object: Procore_Subcontractor_Insert_Input;
  on_conflict?: Maybe<Procore_Subcontractor_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ProjectArgs = {
  objects: Array<Project_Insert_Input>;
  on_conflict?: Maybe<Project_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Completion_Automated_NotificationArgs = {
  objects: Array<Project_Completion_Automated_Notification_Insert_Input>;
  on_conflict?: Maybe<Project_Completion_Automated_Notification_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Completion_Automated_Notification_OneArgs = {
  object: Project_Completion_Automated_Notification_Insert_Input;
  on_conflict?: Maybe<Project_Completion_Automated_Notification_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Covid_Certify_WorkerArgs = {
  objects: Array<Project_Covid_Certify_Worker_Insert_Input>;
  on_conflict?: Maybe<Project_Covid_Certify_Worker_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Covid_Certify_Worker_AnswerArgs = {
  objects: Array<Project_Covid_Certify_Worker_Answer_Insert_Input>;
  on_conflict?: Maybe<Project_Covid_Certify_Worker_Answer_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Covid_Certify_Worker_Answer_OneArgs = {
  object: Project_Covid_Certify_Worker_Answer_Insert_Input;
  on_conflict?: Maybe<Project_Covid_Certify_Worker_Answer_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Covid_Certify_Worker_OneArgs = {
  object: Project_Covid_Certify_Worker_Insert_Input;
  on_conflict?: Maybe<Project_Covid_Certify_Worker_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Covid_ConfigArgs = {
  objects: Array<Project_Covid_Config_Insert_Input>;
  on_conflict?: Maybe<Project_Covid_Config_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Covid_Config_OneArgs = {
  object: Project_Covid_Config_Insert_Input;
  on_conflict?: Maybe<Project_Covid_Config_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Covid_Crew_CertifyArgs = {
  objects: Array<Project_Covid_Crew_Certify_Insert_Input>;
  on_conflict?: Maybe<Project_Covid_Crew_Certify_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Covid_Crew_Certify_OneArgs = {
  object: Project_Covid_Crew_Certify_Insert_Input;
  on_conflict?: Maybe<Project_Covid_Crew_Certify_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Covid_Guest_CertificationArgs = {
  objects: Array<Project_Covid_Guest_Certification_Insert_Input>;
  on_conflict?: Maybe<Project_Covid_Guest_Certification_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Covid_Guest_Certification_AnswerArgs = {
  objects: Array<Project_Covid_Guest_Certification_Answer_Insert_Input>;
  on_conflict?: Maybe<Project_Covid_Guest_Certification_Answer_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Covid_Guest_Certification_Answer_OneArgs = {
  object: Project_Covid_Guest_Certification_Answer_Insert_Input;
  on_conflict?: Maybe<Project_Covid_Guest_Certification_Answer_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Covid_Guest_Certification_OneArgs = {
  object: Project_Covid_Guest_Certification_Insert_Input;
  on_conflict?: Maybe<Project_Covid_Guest_Certification_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Covid_Notify_EmployeeArgs = {
  objects: Array<Project_Covid_Notify_Employee_Insert_Input>;
  on_conflict?: Maybe<Project_Covid_Notify_Employee_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Covid_Notify_Employee_OneArgs = {
  object: Project_Covid_Notify_Employee_Insert_Input;
  on_conflict?: Maybe<Project_Covid_Notify_Employee_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Covid_Tested_Positive_AnswerArgs = {
  objects: Array<Project_Covid_Tested_Positive_Answer_Insert_Input>;
  on_conflict?: Maybe<Project_Covid_Tested_Positive_Answer_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Covid_Tested_Positive_Answer_OneArgs = {
  object: Project_Covid_Tested_Positive_Answer_Insert_Input;
  on_conflict?: Maybe<Project_Covid_Tested_Positive_Answer_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Covid_Tested_Positive_QuestionArgs = {
  objects: Array<Project_Covid_Tested_Positive_Question_Insert_Input>;
  on_conflict?: Maybe<Project_Covid_Tested_Positive_Question_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Covid_Tested_Positive_Question_OneArgs = {
  object: Project_Covid_Tested_Positive_Question_Insert_Input;
  on_conflict?: Maybe<Project_Covid_Tested_Positive_Question_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Covid_Tested_Positive_WorkerArgs = {
  objects: Array<Project_Covid_Tested_Positive_Worker_Insert_Input>;
  on_conflict?: Maybe<Project_Covid_Tested_Positive_Worker_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Covid_Tested_Positive_Worker_OneArgs = {
  object: Project_Covid_Tested_Positive_Worker_Insert_Input;
  on_conflict?: Maybe<Project_Covid_Tested_Positive_Worker_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Covid_Yes_No_QuestionArgs = {
  objects: Array<Project_Covid_Yes_No_Question_Insert_Input>;
  on_conflict?: Maybe<Project_Covid_Yes_No_Question_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Covid_Yes_No_Question_OneArgs = {
  object: Project_Covid_Yes_No_Question_Insert_Input;
  on_conflict?: Maybe<Project_Covid_Yes_No_Question_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_CrewArgs = {
  objects: Array<Project_Crew_Insert_Input>;
  on_conflict?: Maybe<Project_Crew_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Crew_OneArgs = {
  object: Project_Crew_Insert_Input;
  on_conflict?: Maybe<Project_Crew_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_EmployeeArgs = {
  objects: Array<Project_Employee_Insert_Input>;
  on_conflict?: Maybe<Project_Employee_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Employee_OneArgs = {
  object: Project_Employee_Insert_Input;
  on_conflict?: Maybe<Project_Employee_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_HazardArgs = {
  objects: Array<Project_Hazard_Insert_Input>;
  on_conflict?: Maybe<Project_Hazard_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Hazard_OneArgs = {
  object: Project_Hazard_Insert_Input;
  on_conflict?: Maybe<Project_Hazard_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Hazard_SubcontractorArgs = {
  objects: Array<Project_Hazard_Subcontractor_Insert_Input>;
  on_conflict?: Maybe<Project_Hazard_Subcontractor_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Hazard_Subcontractor_OneArgs = {
  object: Project_Hazard_Subcontractor_Insert_Input;
  on_conflict?: Maybe<Project_Hazard_Subcontractor_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_OneArgs = {
  object: Project_Insert_Input;
  on_conflict?: Maybe<Project_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_PostArgs = {
  objects: Array<Project_Post_Insert_Input>;
  on_conflict?: Maybe<Project_Post_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Post_GCsArgs = {
  objects: Array<Project_Post_GCs_Insert_Input>;
  on_conflict?: Maybe<Project_Post_GCs_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Post_GCs_OneArgs = {
  object: Project_Post_GCs_Insert_Input;
  on_conflict?: Maybe<Project_Post_GCs_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Post_OneArgs = {
  object: Project_Post_Insert_Input;
  on_conflict?: Maybe<Project_Post_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Post_WorkersArgs = {
  objects: Array<Project_Post_Workers_Insert_Input>;
  on_conflict?: Maybe<Project_Post_Workers_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Post_Workers_OneArgs = {
  object: Project_Post_Workers_Insert_Input;
  on_conflict?: Maybe<Project_Post_Workers_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Report_SettingsArgs = {
  objects: Array<Project_Report_Settings_Insert_Input>;
  on_conflict?: Maybe<Project_Report_Settings_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Report_Settings_OneArgs = {
  object: Project_Report_Settings_Insert_Input;
  on_conflict?: Maybe<Project_Report_Settings_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Site_NotificationArgs = {
  objects: Array<Project_Site_Notification_Insert_Input>;
  on_conflict?: Maybe<Project_Site_Notification_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Site_Notification_OneArgs = {
  object: Project_Site_Notification_Insert_Input;
  on_conflict?: Maybe<Project_Site_Notification_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_SubcontractorArgs = {
  objects: Array<Project_Subcontractor_Insert_Input>;
  on_conflict?: Maybe<Project_Subcontractor_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Subcontractor_OneArgs = {
  object: Project_Subcontractor_Insert_Input;
  on_conflict?: Maybe<Project_Subcontractor_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Subcontractor_Onsite_UpdateArgs = {
  objects: Array<Project_Subcontractor_Onsite_Update_Insert_Input>;
  on_conflict?: Maybe<Project_Subcontractor_Onsite_Update_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Subcontractor_Onsite_Update_OneArgs = {
  object: Project_Subcontractor_Onsite_Update_Insert_Input;
  on_conflict?: Maybe<Project_Subcontractor_Onsite_Update_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Subcontractor_Report_SettingsArgs = {
  objects: Array<Project_Subcontractor_Report_Settings_Insert_Input>;
  on_conflict?: Maybe<Project_Subcontractor_Report_Settings_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Subcontractor_Report_Settings_OneArgs = {
  object: Project_Subcontractor_Report_Settings_Insert_Input;
  on_conflict?: Maybe<Project_Subcontractor_Report_Settings_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_UserArgs = {
  objects: Array<Project_User_Insert_Input>;
  on_conflict?: Maybe<Project_User_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_User_OneArgs = {
  object: Project_User_Insert_Input;
  on_conflict?: Maybe<Project_User_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_WorkerArgs = {
  objects: Array<Project_Worker_Insert_Input>;
  on_conflict?: Maybe<Project_Worker_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Worker_CompetencyArgs = {
  objects: Array<Project_Worker_Competency_Insert_Input>;
  on_conflict?: Maybe<Project_Worker_Competency_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Worker_Competency_OneArgs = {
  object: Project_Worker_Competency_Insert_Input;
  on_conflict?: Maybe<Project_Worker_Competency_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Worker_OneArgs = {
  object: Project_Worker_Insert_Input;
  on_conflict?: Maybe<Project_Worker_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Worker_Onsite_PingArgs = {
  objects: Array<Project_Worker_Onsite_Ping_Insert_Input>;
  on_conflict?: Maybe<Project_Worker_Onsite_Ping_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Project_Worker_Onsite_Ping_OneArgs = {
  object: Project_Worker_Onsite_Ping_Insert_Input;
  on_conflict?: Maybe<Project_Worker_Onsite_Ping_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Projects_To_PostsArgs = {
  objects: Array<Projects_To_Posts_Insert_Input>;
  on_conflict?: Maybe<Projects_To_Posts_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Projects_To_Posts_OneArgs = {
  object: Projects_To_Posts_Insert_Input;
  on_conflict?: Maybe<Projects_To_Posts_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ReportArgs = {
  objects: Array<Report_Insert_Input>;
  on_conflict?: Maybe<Report_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Report_Awareness_QuestionArgs = {
  objects: Array<Report_Awareness_Question_Insert_Input>;
  on_conflict?: Maybe<Report_Awareness_Question_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Report_Awareness_Question_OneArgs = {
  object: Report_Awareness_Question_Insert_Input;
  on_conflict?: Maybe<Report_Awareness_Question_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Report_Fatal_FourArgs = {
  objects: Array<Report_Fatal_Four_Insert_Input>;
  on_conflict?: Maybe<Report_Fatal_Four_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Report_Fatal_Four_OneArgs = {
  object: Report_Fatal_Four_Insert_Input;
  on_conflict?: Maybe<Report_Fatal_Four_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Report_InjuryArgs = {
  objects: Array<Report_Injury_Insert_Input>;
  on_conflict?: Maybe<Report_Injury_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Report_Injury_OneArgs = {
  object: Report_Injury_Insert_Input;
  on_conflict?: Maybe<Report_Injury_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Report_OneArgs = {
  object: Report_Insert_Input;
  on_conflict?: Maybe<Report_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Report_Project_HazardArgs = {
  objects: Array<Report_Project_Hazard_Insert_Input>;
  on_conflict?: Maybe<Report_Project_Hazard_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Report_Project_Hazard_OneArgs = {
  object: Report_Project_Hazard_Insert_Input;
  on_conflict?: Maybe<Report_Project_Hazard_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Report_Project_PostArgs = {
  objects: Array<Report_Project_Post_Insert_Input>;
  on_conflict?: Maybe<Report_Project_Post_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Report_Project_Post_OneArgs = {
  object: Report_Project_Post_Insert_Input;
  on_conflict?: Maybe<Report_Project_Post_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Report_Project_WorkerArgs = {
  objects: Array<Report_Project_Worker_Insert_Input>;
  on_conflict?: Maybe<Report_Project_Worker_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Report_Project_Worker_OneArgs = {
  object: Report_Project_Worker_Insert_Input;
  on_conflict?: Maybe<Report_Project_Worker_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_S_Daily_Hours_To_DateArgs = {
  objects: Array<S_Daily_Hours_To_Date_Insert_Input>;
  on_conflict?: Maybe<S_Daily_Hours_To_Date_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_S_Daily_Hours_To_Date_OneArgs = {
  object: S_Daily_Hours_To_Date_Insert_Input;
  on_conflict?: Maybe<S_Daily_Hours_To_Date_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_S_Sub_Daily_Log_SubmittalArgs = {
  objects: Array<S_Sub_Daily_Log_Submittal_Insert_Input>;
  on_conflict?: Maybe<S_Sub_Daily_Log_Submittal_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_S_Sub_Daily_Log_Submittal_OneArgs = {
  object: S_Sub_Daily_Log_Submittal_Insert_Input;
  on_conflict?: Maybe<S_Sub_Daily_Log_Submittal_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Select_OptionArgs = {
  objects: Array<Select_Option_Insert_Input>;
  on_conflict?: Maybe<Select_Option_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Select_Option_OneArgs = {
  object: Select_Option_Insert_Input;
  on_conflict?: Maybe<Select_Option_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Select_Option_TypeArgs = {
  objects: Array<Select_Option_Type_Insert_Input>;
  on_conflict?: Maybe<Select_Option_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Select_Option_Type_OneArgs = {
  object: Select_Option_Type_Insert_Input;
  on_conflict?: Maybe<Select_Option_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Short_Forecast_TypeArgs = {
  objects: Array<Short_Forecast_Type_Insert_Input>;
  on_conflict?: Maybe<Short_Forecast_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Short_Forecast_Type_OneArgs = {
  object: Short_Forecast_Type_Insert_Input;
  on_conflict?: Maybe<Short_Forecast_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sign_In_TypeArgs = {
  objects: Array<Sign_In_Type_Insert_Input>;
  on_conflict?: Maybe<Sign_In_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sign_In_Type_OneArgs = {
  object: Sign_In_Type_Insert_Input;
  on_conflict?: Maybe<Sign_In_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_StateArgs = {
  objects: Array<State_Insert_Input>;
  on_conflict?: Maybe<State_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_State_OneArgs = {
  object: State_Insert_Input;
  on_conflict?: Maybe<State_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_SubcontractorArgs = {
  objects: Array<Subcontractor_Insert_Input>;
  on_conflict?: Maybe<Subcontractor_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Subcontractor_EmployeeArgs = {
  objects: Array<Subcontractor_Employee_Insert_Input>;
  on_conflict?: Maybe<Subcontractor_Employee_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Subcontractor_Employee_OneArgs = {
  object: Subcontractor_Employee_Insert_Input;
  on_conflict?: Maybe<Subcontractor_Employee_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Subcontractor_Employee_TitleArgs = {
  objects: Array<Subcontractor_Employee_Title_Insert_Input>;
  on_conflict?: Maybe<Subcontractor_Employee_Title_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Subcontractor_Employee_Title_OneArgs = {
  object: Subcontractor_Employee_Title_Insert_Input;
  on_conflict?: Maybe<Subcontractor_Employee_Title_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Subcontractor_OneArgs = {
  object: Subcontractor_Insert_Input;
  on_conflict?: Maybe<Subcontractor_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Subcontractor_Onsite_Status_UpdateArgs = {
  objects: Array<Subcontractor_Onsite_Status_Update_Insert_Input>;
  on_conflict?: Maybe<Subcontractor_Onsite_Status_Update_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Subcontractor_Onsite_Status_Update_OneArgs = {
  object: Subcontractor_Onsite_Status_Update_Insert_Input;
  on_conflict?: Maybe<Subcontractor_Onsite_Status_Update_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Subcontractor_TradeArgs = {
  objects: Array<Subcontractor_Trade_Insert_Input>;
  on_conflict?: Maybe<Subcontractor_Trade_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Subcontractor_Trade_OneArgs = {
  object: Subcontractor_Trade_Insert_Input;
  on_conflict?: Maybe<Subcontractor_Trade_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Subcontractor_WorkerArgs = {
  objects: Array<Subcontractor_Worker_Insert_Input>;
  on_conflict?: Maybe<Subcontractor_Worker_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Subcontractor_Worker_OneArgs = {
  object: Subcontractor_Worker_Insert_Input;
  on_conflict?: Maybe<Subcontractor_Worker_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Submission_ImageArgs = {
  objects: Array<Submission_Image_Insert_Input>;
  on_conflict?: Maybe<Submission_Image_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Submission_Image_OneArgs = {
  object: Submission_Image_Insert_Input;
  on_conflict?: Maybe<Submission_Image_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Submission_Image_TypeArgs = {
  objects: Array<Submission_Image_Type_Insert_Input>;
  on_conflict?: Maybe<Submission_Image_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Submission_Image_Type_OneArgs = {
  object: Submission_Image_Type_Insert_Input;
  on_conflict?: Maybe<Submission_Image_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_TagArgs = {
  objects: Array<Tag_Insert_Input>;
  on_conflict?: Maybe<Tag_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Tag_OneArgs = {
  object: Tag_Insert_Input;
  on_conflict?: Maybe<Tag_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_TaskArgs = {
  objects: Array<Task_Insert_Input>;
  on_conflict?: Maybe<Task_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Task_NoteArgs = {
  objects: Array<Task_Note_Insert_Input>;
  on_conflict?: Maybe<Task_Note_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Task_Note_OneArgs = {
  object: Task_Note_Insert_Input;
  on_conflict?: Maybe<Task_Note_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Task_OneArgs = {
  object: Task_Insert_Input;
  on_conflict?: Maybe<Task_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Task_Permit_TypeArgs = {
  objects: Array<Task_Permit_Type_Insert_Input>;
  on_conflict?: Maybe<Task_Permit_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Task_Permit_Type_OneArgs = {
  object: Task_Permit_Type_Insert_Input;
  on_conflict?: Maybe<Task_Permit_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Task_Ppe_TypeArgs = {
  objects: Array<Task_Ppe_Type_Insert_Input>;
  on_conflict?: Maybe<Task_Ppe_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Task_Ppe_Type_OneArgs = {
  object: Task_Ppe_Type_Insert_Input;
  on_conflict?: Maybe<Task_Ppe_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Task_StepArgs = {
  objects: Array<Task_Step_Insert_Input>;
  on_conflict?: Maybe<Task_Step_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Task_Step_HazardArgs = {
  objects: Array<Task_Step_Hazard_Insert_Input>;
  on_conflict?: Maybe<Task_Step_Hazard_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Task_Step_Hazard_OneArgs = {
  object: Task_Step_Hazard_Insert_Input;
  on_conflict?: Maybe<Task_Step_Hazard_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Task_Step_OneArgs = {
  object: Task_Step_Insert_Input;
  on_conflict?: Maybe<Task_Step_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Text_TranslationArgs = {
  objects: Array<Text_Translation_Insert_Input>;
  on_conflict?: Maybe<Text_Translation_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Text_Translation_OneArgs = {
  object: Text_Translation_Insert_Input;
  on_conflict?: Maybe<Text_Translation_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_TodoArgs = {
  objects: Array<Todo_Insert_Input>;
  on_conflict?: Maybe<Todo_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Todo_AssigneeArgs = {
  objects: Array<Todo_Assignee_Insert_Input>;
  on_conflict?: Maybe<Todo_Assignee_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Todo_Assignee_OneArgs = {
  object: Todo_Assignee_Insert_Input;
  on_conflict?: Maybe<Todo_Assignee_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Todo_NotifyeeArgs = {
  objects: Array<Todo_Notifyee_Insert_Input>;
  on_conflict?: Maybe<Todo_Notifyee_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Todo_Notifyee_OneArgs = {
  object: Todo_Notifyee_Insert_Input;
  on_conflict?: Maybe<Todo_Notifyee_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Todo_OneArgs = {
  object: Todo_Insert_Input;
  on_conflict?: Maybe<Todo_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Toolbox_TalkArgs = {
  objects: Array<Toolbox_Talk_Insert_Input>;
  on_conflict?: Maybe<Toolbox_Talk_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Toolbox_Talk_OneArgs = {
  object: Toolbox_Talk_Insert_Input;
  on_conflict?: Maybe<Toolbox_Talk_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Toolbox_Talk_PdfArgs = {
  objects: Array<Toolbox_Talk_Pdf_Insert_Input>;
  on_conflict?: Maybe<Toolbox_Talk_Pdf_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Toolbox_Talk_Pdf_OneArgs = {
  object: Toolbox_Talk_Pdf_Insert_Input;
  on_conflict?: Maybe<Toolbox_Talk_Pdf_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Toolbox_Talk_Project_WorkerArgs = {
  objects: Array<Toolbox_Talk_Project_Worker_Insert_Input>;
  on_conflict?: Maybe<Toolbox_Talk_Project_Worker_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Toolbox_Talk_Project_Worker_OneArgs = {
  object: Toolbox_Talk_Project_Worker_Insert_Input;
  on_conflict?: Maybe<Toolbox_Talk_Project_Worker_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_UserArgs = {
  objects: Array<User_Insert_Input>;
  on_conflict?: Maybe<User_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_User_NotificationArgs = {
  objects: Array<User_Notification_Insert_Input>;
  on_conflict?: Maybe<User_Notification_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_User_Notification_Event_TypeArgs = {
  objects: Array<User_Notification_Event_Type_Insert_Input>;
  on_conflict?: Maybe<User_Notification_Event_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_User_Notification_Event_Type_OneArgs = {
  object: User_Notification_Event_Type_Insert_Input;
  on_conflict?: Maybe<User_Notification_Event_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_User_Notification_OneArgs = {
  object: User_Notification_Insert_Input;
  on_conflict?: Maybe<User_Notification_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_User_OneArgs = {
  object: User_Insert_Input;
  on_conflict?: Maybe<User_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_User_Project_Filter_CalendarArgs = {
  objects: Array<User_Project_Filter_Calendar_Insert_Input>;
  on_conflict?: Maybe<User_Project_Filter_Calendar_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_User_Project_Filter_Calendar_OneArgs = {
  object: User_Project_Filter_Calendar_Insert_Input;
  on_conflict?: Maybe<User_Project_Filter_Calendar_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_User_Saved_EmailArgs = {
  objects: Array<User_Saved_Email_Insert_Input>;
  on_conflict?: Maybe<User_Saved_Email_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_User_Saved_Email_OneArgs = {
  object: User_Saved_Email_Insert_Input;
  on_conflict?: Maybe<User_Saved_Email_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Work_Above_PermitArgs = {
  objects: Array<Work_Above_Permit_Insert_Input>;
  on_conflict?: Maybe<Work_Above_Permit_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Work_Above_Permit_OneArgs = {
  object: Work_Above_Permit_Insert_Input;
  on_conflict?: Maybe<Work_Above_Permit_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_WorkerArgs = {
  objects: Array<Worker_Insert_Input>;
  on_conflict?: Maybe<Worker_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Worker_Automatic_EmailArgs = {
  objects: Array<Worker_Automatic_Email_Insert_Input>;
  on_conflict?: Maybe<Worker_Automatic_Email_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Worker_Automatic_Email_Event_TypeArgs = {
  objects: Array<Worker_Automatic_Email_Event_Type_Insert_Input>;
  on_conflict?: Maybe<Worker_Automatic_Email_Event_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Worker_Automatic_Email_Event_Type_OneArgs = {
  object: Worker_Automatic_Email_Event_Type_Insert_Input;
  on_conflict?: Maybe<Worker_Automatic_Email_Event_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Worker_Automatic_Email_OneArgs = {
  object: Worker_Automatic_Email_Insert_Input;
  on_conflict?: Maybe<Worker_Automatic_Email_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Worker_CertificationArgs = {
  objects: Array<Worker_Certification_Insert_Input>;
  on_conflict?: Maybe<Worker_Certification_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Worker_Certification_OneArgs = {
  object: Worker_Certification_Insert_Input;
  on_conflict?: Maybe<Worker_Certification_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Worker_Drug_TestArgs = {
  objects: Array<Worker_Drug_Test_Insert_Input>;
  on_conflict?: Maybe<Worker_Drug_Test_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Worker_Drug_Test_OneArgs = {
  object: Worker_Drug_Test_Insert_Input;
  on_conflict?: Maybe<Worker_Drug_Test_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Worker_Enabled_Automatic_Email_EventArgs = {
  objects: Array<Worker_Enabled_Automatic_Email_Event_Insert_Input>;
  on_conflict?: Maybe<Worker_Enabled_Automatic_Email_Event_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Worker_Enabled_Automatic_Email_Event_OneArgs = {
  object: Worker_Enabled_Automatic_Email_Event_Insert_Input;
  on_conflict?: Maybe<Worker_Enabled_Automatic_Email_Event_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Worker_Manhour_Stats_By_Range_TableArgs = {
  objects: Array<Worker_Manhour_Stats_By_Range_Table_Insert_Input>;
  on_conflict?: Maybe<Worker_Manhour_Stats_By_Range_Table_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Worker_Manhour_Stats_By_Range_Table_OneArgs = {
  object: Worker_Manhour_Stats_By_Range_Table_Insert_Input;
  on_conflict?: Maybe<Worker_Manhour_Stats_By_Range_Table_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Worker_Manhour_Stats_TableArgs = {
  objects: Array<Worker_Manhour_Stats_Table_Insert_Input>;
  on_conflict?: Maybe<Worker_Manhour_Stats_Table_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Worker_Manhour_Stats_Table_OneArgs = {
  object: Worker_Manhour_Stats_Table_Insert_Input;
  on_conflict?: Maybe<Worker_Manhour_Stats_Table_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Worker_OneArgs = {
  object: Worker_Insert_Input;
  on_conflict?: Maybe<Worker_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Worker_RoleArgs = {
  objects: Array<Worker_Role_Insert_Input>;
  on_conflict?: Maybe<Worker_Role_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Worker_Role_OneArgs = {
  object: Worker_Role_Insert_Input;
  on_conflict?: Maybe<Worker_Role_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Worker_Stats_By_Range_TableArgs = {
  objects: Array<Worker_Stats_By_Range_Table_Insert_Input>;
  on_conflict?: Maybe<Worker_Stats_By_Range_Table_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Worker_Stats_By_Range_Table_OneArgs = {
  object: Worker_Stats_By_Range_Table_Insert_Input;
  on_conflict?: Maybe<Worker_Stats_By_Range_Table_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Worker_Stats_TableArgs = {
  objects: Array<Worker_Stats_Table_Insert_Input>;
  on_conflict?: Maybe<Worker_Stats_Table_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Worker_Stats_Table_OneArgs = {
  object: Worker_Stats_Table_Insert_Input;
  on_conflict?: Maybe<Worker_Stats_Table_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Worker_TitleArgs = {
  objects: Array<Worker_Title_Insert_Input>;
  on_conflict?: Maybe<Worker_Title_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Worker_Title_OneArgs = {
  object: Worker_Title_Insert_Input;
  on_conflict?: Maybe<Worker_Title_On_Conflict>;
};


/** mutation root */
export type Mutation_RootMakeWorkerCrewLeadArgs = {
  input: MakeWorkerCrewLeadInput;
};


/** mutation root */
export type Mutation_RootProcoreDailyLogArgs = {
  input?: Maybe<ProcoreDailyLogInput>;
};


/** mutation root */
export type Mutation_RootProcoreDailyNoteArgs = {
  input?: Maybe<ProcoreDailyNoteInput>;
};


/** mutation root */
export type Mutation_RootProcoreDailyWeatherArgs = {
  input?: Maybe<ProcoreDailyWeatherInput>;
};


/** mutation root */
export type Mutation_RootProcoreGenerateTokenArgs = {
  input?: Maybe<ProcoreGenerateTokenInput>;
};


/** mutation root */
export type Mutation_RootProcoreProjectListArgs = {
  input?: Maybe<ProcoreProjectListInput>;
};


/** mutation root */
export type Mutation_RootProcoreSetUserAccountArgs = {
  input?: Maybe<ProcoreSetUserAccountInput>;
};


/** mutation root */
export type Mutation_RootProcoreSubcontractorListArgs = {
  input?: Maybe<ProcoreSubcontractorListInput>;
};


/** mutation root */
export type Mutation_RootResetPasswordArgs = {
  input: ResetPasswordInput;
};


/** mutation root */
export type Mutation_RootSendReadingNotPermissibleNotificationsArgs = {
  input: SendReadingNotPermissibleNotificationsInput;
};


/** mutation root */
export type Mutation_RootSendSiteNotificationArgs = {
  input: SendSiteNotificationInput;
};


/** mutation root */
export type Mutation_RootSignInArgs = {
  loginCredential: Scalars['String'];
  password: Scalars['String'];
};


/** mutation root */
export type Mutation_RootUpdatePasswordArgs = {
  input: UpdatePasswordInput;
};


/** mutation root */
export type Mutation_RootUpdateWorkerCrewArgs = {
  input: UpdateWorkerCrewInput;
};


/** mutation root */
export type Mutation_RootUpdate_AddressArgs = {
  _inc?: Maybe<Address_Inc_Input>;
  _set?: Maybe<Address_Set_Input>;
  where: Address_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Address_By_PkArgs = {
  _inc?: Maybe<Address_Inc_Input>;
  _set?: Maybe<Address_Set_Input>;
  pk_columns: Address_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Auto_EmailArgs = {
  _set?: Maybe<Auto_Email_Set_Input>;
  where: Auto_Email_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Auto_Email_By_PkArgs = {
  _set?: Maybe<Auto_Email_Set_Input>;
  pk_columns: Auto_Email_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Auto_Email_Event_TypeArgs = {
  _set?: Maybe<Auto_Email_Event_Type_Set_Input>;
  where: Auto_Email_Event_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Auto_Email_Event_Type_By_PkArgs = {
  _set?: Maybe<Auto_Email_Event_Type_Set_Input>;
  pk_columns: Auto_Email_Event_Type_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Awareness_QuestionArgs = {
  _set?: Maybe<Awareness_Question_Set_Input>;
  where: Awareness_Question_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Awareness_Question_By_PkArgs = {
  _set?: Maybe<Awareness_Question_Set_Input>;
  pk_columns: Awareness_Question_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_CalendarArgs = {
  _set?: Maybe<Calendar_Set_Input>;
  where: Calendar_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Calendar_By_PkArgs = {
  _set?: Maybe<Calendar_Set_Input>;
  pk_columns: Calendar_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_CertificationArgs = {
  _set?: Maybe<Certification_Set_Input>;
  where: Certification_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Certification_By_PkArgs = {
  _set?: Maybe<Certification_Set_Input>;
  pk_columns: Certification_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_ChatArgs = {
  _set?: Maybe<Chat_Set_Input>;
  where: Chat_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Chat_By_PkArgs = {
  _set?: Maybe<Chat_Set_Input>;
  pk_columns: Chat_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Chat_Employee_PreviewArgs = {
  _inc?: Maybe<Chat_Employee_Preview_Inc_Input>;
  _set?: Maybe<Chat_Employee_Preview_Set_Input>;
  where: Chat_Employee_Preview_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Chat_Employee_Preview_By_PkArgs = {
  _inc?: Maybe<Chat_Employee_Preview_Inc_Input>;
  _set?: Maybe<Chat_Employee_Preview_Set_Input>;
  pk_columns: Chat_Employee_Preview_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Chat_ItemArgs = {
  _set?: Maybe<Chat_Item_Set_Input>;
  where: Chat_Item_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Chat_Item_AttachmentArgs = {
  _inc?: Maybe<Chat_Item_Attachment_Inc_Input>;
  _set?: Maybe<Chat_Item_Attachment_Set_Input>;
  where: Chat_Item_Attachment_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Chat_Item_Attachment_By_PkArgs = {
  _inc?: Maybe<Chat_Item_Attachment_Inc_Input>;
  _set?: Maybe<Chat_Item_Attachment_Set_Input>;
  pk_columns: Chat_Item_Attachment_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Chat_Item_By_PkArgs = {
  _set?: Maybe<Chat_Item_Set_Input>;
  pk_columns: Chat_Item_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Chat_Item_TypeArgs = {
  _set?: Maybe<Chat_Item_Type_Set_Input>;
  where: Chat_Item_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Chat_Item_Type_By_PkArgs = {
  _set?: Maybe<Chat_Item_Type_Set_Input>;
  pk_columns: Chat_Item_Type_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Chat_MemberArgs = {
  _set?: Maybe<Chat_Member_Set_Input>;
  where: Chat_Member_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Chat_Member_By_PkArgs = {
  _set?: Maybe<Chat_Member_Set_Input>;
  pk_columns: Chat_Member_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Checklist_ItemArgs = {
  _inc?: Maybe<Checklist_Item_Inc_Input>;
  _set?: Maybe<Checklist_Item_Set_Input>;
  where: Checklist_Item_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Checklist_Item_By_PkArgs = {
  _inc?: Maybe<Checklist_Item_Inc_Input>;
  _set?: Maybe<Checklist_Item_Set_Input>;
  pk_columns: Checklist_Item_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Checklist_Item_ConfigArgs = {
  _set?: Maybe<Checklist_Item_Config_Set_Input>;
  where: Checklist_Item_Config_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Checklist_Item_Config_By_PkArgs = {
  _set?: Maybe<Checklist_Item_Config_Set_Input>;
  pk_columns: Checklist_Item_Config_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Checklist_Item_Config_TypeArgs = {
  _set?: Maybe<Checklist_Item_Config_Type_Set_Input>;
  where: Checklist_Item_Config_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Checklist_Item_Config_Type_By_PkArgs = {
  _set?: Maybe<Checklist_Item_Config_Type_Set_Input>;
  pk_columns: Checklist_Item_Config_Type_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Checklist_Item_Notify_EmailArgs = {
  _set?: Maybe<Checklist_Item_Notify_Email_Set_Input>;
  where: Checklist_Item_Notify_Email_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Checklist_Item_Notify_Email_By_PkArgs = {
  _set?: Maybe<Checklist_Item_Notify_Email_Set_Input>;
  pk_columns: Checklist_Item_Notify_Email_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Checklist_Item_TypeArgs = {
  _set?: Maybe<Checklist_Item_Type_Set_Input>;
  where: Checklist_Item_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Checklist_Item_Type_By_PkArgs = {
  _set?: Maybe<Checklist_Item_Type_Set_Input>;
  pk_columns: Checklist_Item_Type_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Cleared_Project_Covid_Certify_WorkerArgs = {
  _set?: Maybe<Cleared_Project_Covid_Certify_Worker_Set_Input>;
  where: Cleared_Project_Covid_Certify_Worker_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Cleared_Project_Covid_Certify_Worker_By_PkArgs = {
  _set?: Maybe<Cleared_Project_Covid_Certify_Worker_Set_Input>;
  pk_columns: Cleared_Project_Covid_Certify_Worker_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Cleared_Project_Covid_Tested_Positive_WorkerArgs = {
  _set?: Maybe<Cleared_Project_Covid_Tested_Positive_Worker_Set_Input>;
  where: Cleared_Project_Covid_Tested_Positive_Worker_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Cleared_Project_Covid_Tested_Positive_Worker_By_PkArgs = {
  _set?: Maybe<Cleared_Project_Covid_Tested_Positive_Worker_Set_Input>;
  pk_columns: Cleared_Project_Covid_Tested_Positive_Worker_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Confined_Space_PermitArgs = {
  _set?: Maybe<Confined_Space_Permit_Set_Input>;
  where: Confined_Space_Permit_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Confined_Space_Permit_By_PkArgs = {
  _set?: Maybe<Confined_Space_Permit_Set_Input>;
  pk_columns: Confined_Space_Permit_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Confined_Space_Permit_Monitoring_EquipmentArgs = {
  _inc?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Inc_Input>;
  _set?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Set_Input>;
  where: Confined_Space_Permit_Monitoring_Equipment_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Confined_Space_Permit_Monitoring_Equipment_By_PkArgs = {
  _inc?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Inc_Input>;
  _set?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Set_Input>;
  pk_columns: Confined_Space_Permit_Monitoring_Equipment_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Confined_Space_Permit_ReadingArgs = {
  _set?: Maybe<Confined_Space_Permit_Reading_Set_Input>;
  where: Confined_Space_Permit_Reading_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Confined_Space_Permit_Reading_By_PkArgs = {
  _set?: Maybe<Confined_Space_Permit_Reading_Set_Input>;
  pk_columns: Confined_Space_Permit_Reading_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Confined_Space_Permit_Reading_Custom_ItemArgs = {
  _inc?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Inc_Input>;
  _set?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Set_Input>;
  where: Confined_Space_Permit_Reading_Custom_Item_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Confined_Space_Permit_Reading_Custom_Item_By_PkArgs = {
  _inc?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Inc_Input>;
  _set?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Set_Input>;
  pk_columns: Confined_Space_Permit_Reading_Custom_Item_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_CopyArgs = {
  _set?: Maybe<Daily_Copy_Set_Input>;
  where: Daily_Copy_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_Copy_By_PkArgs = {
  _set?: Maybe<Daily_Copy_Set_Input>;
  pk_columns: Daily_Copy_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_Copy_SectionArgs = {
  _set?: Maybe<Daily_Copy_Section_Set_Input>;
  where: Daily_Copy_Section_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_Copy_Section_By_PkArgs = {
  _set?: Maybe<Daily_Copy_Section_Set_Input>;
  pk_columns: Daily_Copy_Section_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_NoteArgs = {
  _set?: Maybe<Daily_Note_Set_Input>;
  where: Daily_Note_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_Note_By_PkArgs = {
  _set?: Maybe<Daily_Note_Set_Input>;
  pk_columns: Daily_Note_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_Note_SubArgs = {
  _set?: Maybe<Daily_Note_Sub_Set_Input>;
  where: Daily_Note_Sub_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_Note_Sub_By_PkArgs = {
  _set?: Maybe<Daily_Note_Sub_Set_Input>;
  pk_columns: Daily_Note_Sub_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_Note_TagArgs = {
  _set?: Maybe<Daily_Note_Tag_Set_Input>;
  where: Daily_Note_Tag_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_Note_Tag_By_PkArgs = {
  _set?: Maybe<Daily_Note_Tag_Set_Input>;
  pk_columns: Daily_Note_Tag_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_ReportArgs = {
  _set?: Maybe<Daily_Report_Set_Input>;
  where: Daily_Report_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_Report_By_PkArgs = {
  _set?: Maybe<Daily_Report_Set_Input>;
  pk_columns: Daily_Report_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_Report_CompletedArgs = {
  _set?: Maybe<Daily_Report_Completed_Set_Input>;
  where: Daily_Report_Completed_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_Report_Completed_By_PkArgs = {
  _set?: Maybe<Daily_Report_Completed_Set_Input>;
  pk_columns: Daily_Report_Completed_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_Report_EventArgs = {
  _set?: Maybe<Daily_Report_Event_Set_Input>;
  where: Daily_Report_Event_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_Report_Event_By_PkArgs = {
  _set?: Maybe<Daily_Report_Event_Set_Input>;
  pk_columns: Daily_Report_Event_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_Report_Event_TypeArgs = {
  _set?: Maybe<Daily_Report_Event_Type_Set_Input>;
  where: Daily_Report_Event_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_Report_Event_Type_By_PkArgs = {
  _set?: Maybe<Daily_Report_Event_Type_Set_Input>;
  pk_columns: Daily_Report_Event_Type_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_Report_Project_WorkerArgs = {
  _set?: Maybe<Daily_Report_Project_Worker_Set_Input>;
  where: Daily_Report_Project_Worker_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_Report_Project_Worker_By_PkArgs = {
  _set?: Maybe<Daily_Report_Project_Worker_Set_Input>;
  pk_columns: Daily_Report_Project_Worker_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_Schedule_EventArgs = {
  _set?: Maybe<Daily_Schedule_Event_Set_Input>;
  where: Daily_Schedule_Event_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_Schedule_Event_By_PkArgs = {
  _set?: Maybe<Daily_Schedule_Event_Set_Input>;
  pk_columns: Daily_Schedule_Event_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_Schedule_Event_SubArgs = {
  _set?: Maybe<Daily_Schedule_Event_Sub_Set_Input>;
  where: Daily_Schedule_Event_Sub_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_Schedule_Event_Sub_By_PkArgs = {
  _set?: Maybe<Daily_Schedule_Event_Sub_Set_Input>;
  pk_columns: Daily_Schedule_Event_Sub_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_Schedule_Event_TypeArgs = {
  _set?: Maybe<Daily_Schedule_Event_Type_Set_Input>;
  where: Daily_Schedule_Event_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_Schedule_Event_Type_By_PkArgs = {
  _set?: Maybe<Daily_Schedule_Event_Type_Set_Input>;
  pk_columns: Daily_Schedule_Event_Type_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_Weather_ObservationArgs = {
  _set?: Maybe<Daily_Weather_Observation_Set_Input>;
  where: Daily_Weather_Observation_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_Weather_Observation_By_PkArgs = {
  _set?: Maybe<Daily_Weather_Observation_Set_Input>;
  pk_columns: Daily_Weather_Observation_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_Weather_Observation_SubArgs = {
  _set?: Maybe<Daily_Weather_Observation_Sub_Set_Input>;
  where: Daily_Weather_Observation_Sub_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_Weather_Observation_Sub_By_PkArgs = {
  _set?: Maybe<Daily_Weather_Observation_Sub_Set_Input>;
  pk_columns: Daily_Weather_Observation_Sub_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_Work_LogArgs = {
  _inc?: Maybe<Daily_Work_Log_Inc_Input>;
  _set?: Maybe<Daily_Work_Log_Set_Input>;
  where: Daily_Work_Log_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_Work_Log_By_PkArgs = {
  _inc?: Maybe<Daily_Work_Log_Inc_Input>;
  _set?: Maybe<Daily_Work_Log_Set_Input>;
  pk_columns: Daily_Work_Log_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_Work_Log_CommentArgs = {
  _set?: Maybe<Daily_Work_Log_Comment_Set_Input>;
  where: Daily_Work_Log_Comment_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_Work_Log_Comment_By_PkArgs = {
  _set?: Maybe<Daily_Work_Log_Comment_Set_Input>;
  pk_columns: Daily_Work_Log_Comment_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_Work_Log_Comment_EmailArgs = {
  _set?: Maybe<Daily_Work_Log_Comment_Email_Set_Input>;
  where: Daily_Work_Log_Comment_Email_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_Work_Log_Comment_Email_By_PkArgs = {
  _set?: Maybe<Daily_Work_Log_Comment_Email_Set_Input>;
  pk_columns: Daily_Work_Log_Comment_Email_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_Work_Log_TagArgs = {
  _set?: Maybe<Daily_Work_Log_Tag_Set_Input>;
  where: Daily_Work_Log_Tag_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_Work_Log_Tag_By_PkArgs = {
  _set?: Maybe<Daily_Work_Log_Tag_Set_Input>;
  pk_columns: Daily_Work_Log_Tag_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_Work_Log_WorkerArgs = {
  _inc?: Maybe<Daily_Work_Log_Worker_Inc_Input>;
  _set?: Maybe<Daily_Work_Log_Worker_Set_Input>;
  where: Daily_Work_Log_Worker_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Daily_Work_Log_Worker_By_PkArgs = {
  _inc?: Maybe<Daily_Work_Log_Worker_Inc_Input>;
  _set?: Maybe<Daily_Work_Log_Worker_Set_Input>;
  pk_columns: Daily_Work_Log_Worker_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_DeliveryArgs = {
  _inc?: Maybe<Delivery_Inc_Input>;
  _set?: Maybe<Delivery_Set_Input>;
  where: Delivery_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Delivery_By_PkArgs = {
  _inc?: Maybe<Delivery_Inc_Input>;
  _set?: Maybe<Delivery_Set_Input>;
  pk_columns: Delivery_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Delivery_CalendarArgs = {
  _set?: Maybe<Delivery_Calendar_Set_Input>;
  where: Delivery_Calendar_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Delivery_Calendar_By_PkArgs = {
  _set?: Maybe<Delivery_Calendar_Set_Input>;
  pk_columns: Delivery_Calendar_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Dig_PermitArgs = {
  _set?: Maybe<Dig_Permit_Set_Input>;
  where: Dig_Permit_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Dig_Permit_By_PkArgs = {
  _set?: Maybe<Dig_Permit_Set_Input>;
  pk_columns: Dig_Permit_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Dig_Permit_Select_OptionArgs = {
  _set?: Maybe<Dig_Permit_Select_Option_Set_Input>;
  where: Dig_Permit_Select_Option_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Dig_Permit_Select_Option_By_PkArgs = {
  _set?: Maybe<Dig_Permit_Select_Option_Set_Input>;
  pk_columns: Dig_Permit_Select_Option_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Dig_Permit_TicketArgs = {
  _inc?: Maybe<Dig_Permit_Ticket_Inc_Input>;
  _set?: Maybe<Dig_Permit_Ticket_Set_Input>;
  where: Dig_Permit_Ticket_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Dig_Permit_Ticket_By_PkArgs = {
  _inc?: Maybe<Dig_Permit_Ticket_Inc_Input>;
  _set?: Maybe<Dig_Permit_Ticket_Set_Input>;
  pk_columns: Dig_Permit_Ticket_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Employee_TitleArgs = {
  _set?: Maybe<Employee_Title_Set_Input>;
  where: Employee_Title_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Employee_Title_By_PkArgs = {
  _set?: Maybe<Employee_Title_Set_Input>;
  pk_columns: Employee_Title_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Expo_Push_TokenArgs = {
  _set?: Maybe<Expo_Push_Token_Set_Input>;
  where: Expo_Push_Token_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Expo_Push_Token_By_PkArgs = {
  _set?: Maybe<Expo_Push_Token_Set_Input>;
  pk_columns: Expo_Push_Token_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_FeedbackArgs = {
  _set?: Maybe<Feedback_Set_Input>;
  where: Feedback_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Feedback_By_PkArgs = {
  _set?: Maybe<Feedback_Set_Input>;
  pk_columns: Feedback_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Forgot_Password_KeyArgs = {
  _set?: Maybe<Forgot_Password_Key_Set_Input>;
  where: Forgot_Password_Key_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Forgot_Password_Key_By_PkArgs = {
  _set?: Maybe<Forgot_Password_Key_Set_Input>;
  pk_columns: Forgot_Password_Key_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Gc_Daily_Checklist_ItemArgs = {
  _set?: Maybe<Gc_Daily_Checklist_Item_Set_Input>;
  where: Gc_Daily_Checklist_Item_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Gc_Daily_Checklist_Item_By_PkArgs = {
  _set?: Maybe<Gc_Daily_Checklist_Item_Set_Input>;
  pk_columns: Gc_Daily_Checklist_Item_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Gc_Disabled_Project_SubcontractorArgs = {
  _set?: Maybe<Gc_Disabled_Project_Subcontractor_Set_Input>;
  where: Gc_Disabled_Project_Subcontractor_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Gc_Disabled_Project_Subcontractor_By_PkArgs = {
  _set?: Maybe<Gc_Disabled_Project_Subcontractor_Set_Input>;
  pk_columns: Gc_Disabled_Project_Subcontractor_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_General_ContractorArgs = {
  _set?: Maybe<General_Contractor_Set_Input>;
  where: General_Contractor_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_General_Contractor_By_PkArgs = {
  _set?: Maybe<General_Contractor_Set_Input>;
  pk_columns: General_Contractor_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_General_Contractor_EmployeeArgs = {
  _set?: Maybe<General_Contractor_Employee_Set_Input>;
  where: General_Contractor_Employee_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_General_Contractor_Employee_By_PkArgs = {
  _set?: Maybe<General_Contractor_Employee_Set_Input>;
  pk_columns: General_Contractor_Employee_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Government_IdentificationArgs = {
  _set?: Maybe<Government_Identification_Set_Input>;
  where: Government_Identification_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Government_Identification_By_PkArgs = {
  _set?: Maybe<Government_Identification_Set_Input>;
  pk_columns: Government_Identification_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Hot_Work_PermitArgs = {
  _set?: Maybe<Hot_Work_Permit_Set_Input>;
  where: Hot_Work_Permit_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Hot_Work_Permit_By_PkArgs = {
  _set?: Maybe<Hot_Work_Permit_Set_Input>;
  pk_columns: Hot_Work_Permit_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Hourly_ForecastArgs = {
  _inc?: Maybe<Hourly_Forecast_Inc_Input>;
  _set?: Maybe<Hourly_Forecast_Set_Input>;
  where: Hourly_Forecast_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Hourly_Forecast_By_PkArgs = {
  _inc?: Maybe<Hourly_Forecast_Inc_Input>;
  _set?: Maybe<Hourly_Forecast_Set_Input>;
  pk_columns: Hourly_Forecast_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_ImageArgs = {
  _inc?: Maybe<Image_Inc_Input>;
  _set?: Maybe<Image_Set_Input>;
  where: Image_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Image_By_PkArgs = {
  _inc?: Maybe<Image_Inc_Input>;
  _set?: Maybe<Image_Set_Input>;
  pk_columns: Image_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Image_TypeArgs = {
  _set?: Maybe<Image_Type_Set_Input>;
  where: Image_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Image_Type_By_PkArgs = {
  _set?: Maybe<Image_Type_Set_Input>;
  pk_columns: Image_Type_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Incident_ExampleArgs = {
  _inc?: Maybe<Incident_Example_Inc_Input>;
  _set?: Maybe<Incident_Example_Set_Input>;
  where: Incident_Example_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Incident_Example_By_PkArgs = {
  _inc?: Maybe<Incident_Example_Inc_Input>;
  _set?: Maybe<Incident_Example_Set_Input>;
  pk_columns: Incident_Example_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_InviteArgs = {
  _set?: Maybe<Invite_Set_Input>;
  where: Invite_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Invite_By_PkArgs = {
  _set?: Maybe<Invite_Set_Input>;
  pk_columns: Invite_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Lang_CodeArgs = {
  _set?: Maybe<Lang_Code_Set_Input>;
  where: Lang_Code_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Lang_Code_By_PkArgs = {
  _set?: Maybe<Lang_Code_Set_Input>;
  pk_columns: Lang_Code_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Notification_Badge_CountArgs = {
  _inc?: Maybe<Notification_Badge_Count_Inc_Input>;
  _set?: Maybe<Notification_Badge_Count_Set_Input>;
  where: Notification_Badge_Count_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Notification_Badge_Count_By_PkArgs = {
  _inc?: Maybe<Notification_Badge_Count_Inc_Input>;
  _set?: Maybe<Notification_Badge_Count_Set_Input>;
  pk_columns: Notification_Badge_Count_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_OrientationArgs = {
  _inc?: Maybe<Orientation_Inc_Input>;
  _set?: Maybe<Orientation_Set_Input>;
  where: Orientation_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Orientation_By_PkArgs = {
  _inc?: Maybe<Orientation_Inc_Input>;
  _set?: Maybe<Orientation_Set_Input>;
  pk_columns: Orientation_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Orientation_SlideArgs = {
  _inc?: Maybe<Orientation_Slide_Inc_Input>;
  _set?: Maybe<Orientation_Slide_Set_Input>;
  where: Orientation_Slide_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Orientation_Slide_By_PkArgs = {
  _inc?: Maybe<Orientation_Slide_Inc_Input>;
  _set?: Maybe<Orientation_Slide_Set_Input>;
  pk_columns: Orientation_Slide_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_PdfArgs = {
  _set?: Maybe<Pdf_Set_Input>;
  where: Pdf_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Pdf_By_PkArgs = {
  _set?: Maybe<Pdf_Set_Input>;
  pk_columns: Pdf_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_PermitArgs = {
  _set?: Maybe<Permit_Set_Input>;
  where: Permit_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Permit_By_PkArgs = {
  _set?: Maybe<Permit_Set_Input>;
  pk_columns: Permit_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Permit_Checklist_ItemArgs = {
  _inc?: Maybe<Permit_Checklist_Item_Inc_Input>;
  _set?: Maybe<Permit_Checklist_Item_Set_Input>;
  where: Permit_Checklist_Item_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Permit_Checklist_Item_By_PkArgs = {
  _inc?: Maybe<Permit_Checklist_Item_Inc_Input>;
  _set?: Maybe<Permit_Checklist_Item_Set_Input>;
  pk_columns: Permit_Checklist_Item_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Permit_HistoryArgs = {
  _set?: Maybe<Permit_History_Set_Input>;
  where: Permit_History_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Permit_History_By_PkArgs = {
  _set?: Maybe<Permit_History_Set_Input>;
  pk_columns: Permit_History_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Permit_Project_WorkerArgs = {
  _set?: Maybe<Permit_Project_Worker_Set_Input>;
  where: Permit_Project_Worker_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Permit_Project_Worker_By_PkArgs = {
  _set?: Maybe<Permit_Project_Worker_Set_Input>;
  pk_columns: Permit_Project_Worker_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Permit_Sign_In_ImageArgs = {
  _set?: Maybe<Permit_Sign_In_Image_Set_Input>;
  where: Permit_Sign_In_Image_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Permit_Sign_In_Image_By_PkArgs = {
  _set?: Maybe<Permit_Sign_In_Image_Set_Input>;
  pk_columns: Permit_Sign_In_Image_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Permit_TypeArgs = {
  _set?: Maybe<Permit_Type_Set_Input>;
  where: Permit_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Permit_Type_By_PkArgs = {
  _set?: Maybe<Permit_Type_Set_Input>;
  pk_columns: Permit_Type_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Ppe_CategoryArgs = {
  _set?: Maybe<Ppe_Category_Set_Input>;
  where: Ppe_Category_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Ppe_Category_By_PkArgs = {
  _set?: Maybe<Ppe_Category_Set_Input>;
  pk_columns: Ppe_Category_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Ppe_TypeArgs = {
  _set?: Maybe<Ppe_Type_Set_Input>;
  where: Ppe_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Ppe_Type_By_PkArgs = {
  _set?: Maybe<Ppe_Type_Set_Input>;
  pk_columns: Ppe_Type_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Procore_Auth_DataArgs = {
  _inc?: Maybe<Procore_Auth_Data_Inc_Input>;
  _set?: Maybe<Procore_Auth_Data_Set_Input>;
  where: Procore_Auth_Data_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Procore_Auth_Data_By_PkArgs = {
  _inc?: Maybe<Procore_Auth_Data_Inc_Input>;
  _set?: Maybe<Procore_Auth_Data_Set_Input>;
  pk_columns: Procore_Auth_Data_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Procore_Project_DataArgs = {
  _inc?: Maybe<Procore_Project_Data_Inc_Input>;
  _set?: Maybe<Procore_Project_Data_Set_Input>;
  where: Procore_Project_Data_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Procore_Project_Data_By_PkArgs = {
  _inc?: Maybe<Procore_Project_Data_Inc_Input>;
  _set?: Maybe<Procore_Project_Data_Set_Input>;
  pk_columns: Procore_Project_Data_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Procore_Service_AccountArgs = {
  _set?: Maybe<Procore_Service_Account_Set_Input>;
  where: Procore_Service_Account_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Procore_Service_Account_By_PkArgs = {
  _set?: Maybe<Procore_Service_Account_Set_Input>;
  pk_columns: Procore_Service_Account_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Procore_SubcontractorArgs = {
  _set?: Maybe<Procore_Subcontractor_Set_Input>;
  where: Procore_Subcontractor_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Procore_Subcontractor_By_PkArgs = {
  _set?: Maybe<Procore_Subcontractor_Set_Input>;
  pk_columns: Procore_Subcontractor_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_ProjectArgs = {
  _set?: Maybe<Project_Set_Input>;
  where: Project_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Project_By_PkArgs = {
  _set?: Maybe<Project_Set_Input>;
  pk_columns: Project_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Completion_Automated_NotificationArgs = {
  _set?: Maybe<Project_Completion_Automated_Notification_Set_Input>;
  where: Project_Completion_Automated_Notification_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Completion_Automated_Notification_By_PkArgs = {
  _set?: Maybe<Project_Completion_Automated_Notification_Set_Input>;
  pk_columns: Project_Completion_Automated_Notification_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Covid_Certify_WorkerArgs = {
  _set?: Maybe<Project_Covid_Certify_Worker_Set_Input>;
  where: Project_Covid_Certify_Worker_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Covid_Certify_Worker_AnswerArgs = {
  _set?: Maybe<Project_Covid_Certify_Worker_Answer_Set_Input>;
  where: Project_Covid_Certify_Worker_Answer_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Covid_Certify_Worker_Answer_By_PkArgs = {
  _set?: Maybe<Project_Covid_Certify_Worker_Answer_Set_Input>;
  pk_columns: Project_Covid_Certify_Worker_Answer_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Covid_Certify_Worker_By_PkArgs = {
  _set?: Maybe<Project_Covid_Certify_Worker_Set_Input>;
  pk_columns: Project_Covid_Certify_Worker_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Covid_ConfigArgs = {
  _set?: Maybe<Project_Covid_Config_Set_Input>;
  where: Project_Covid_Config_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Covid_Config_By_PkArgs = {
  _set?: Maybe<Project_Covid_Config_Set_Input>;
  pk_columns: Project_Covid_Config_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Covid_Crew_CertifyArgs = {
  _set?: Maybe<Project_Covid_Crew_Certify_Set_Input>;
  where: Project_Covid_Crew_Certify_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Covid_Crew_Certify_By_PkArgs = {
  _set?: Maybe<Project_Covid_Crew_Certify_Set_Input>;
  pk_columns: Project_Covid_Crew_Certify_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Covid_Guest_CertificationArgs = {
  _set?: Maybe<Project_Covid_Guest_Certification_Set_Input>;
  where: Project_Covid_Guest_Certification_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Covid_Guest_Certification_AnswerArgs = {
  _set?: Maybe<Project_Covid_Guest_Certification_Answer_Set_Input>;
  where: Project_Covid_Guest_Certification_Answer_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Covid_Guest_Certification_Answer_By_PkArgs = {
  _set?: Maybe<Project_Covid_Guest_Certification_Answer_Set_Input>;
  pk_columns: Project_Covid_Guest_Certification_Answer_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Covid_Guest_Certification_By_PkArgs = {
  _set?: Maybe<Project_Covid_Guest_Certification_Set_Input>;
  pk_columns: Project_Covid_Guest_Certification_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Covid_Notify_EmployeeArgs = {
  _set?: Maybe<Project_Covid_Notify_Employee_Set_Input>;
  where: Project_Covid_Notify_Employee_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Covid_Notify_Employee_By_PkArgs = {
  _set?: Maybe<Project_Covid_Notify_Employee_Set_Input>;
  pk_columns: Project_Covid_Notify_Employee_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Covid_Tested_Positive_AnswerArgs = {
  _set?: Maybe<Project_Covid_Tested_Positive_Answer_Set_Input>;
  where: Project_Covid_Tested_Positive_Answer_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Covid_Tested_Positive_Answer_By_PkArgs = {
  _set?: Maybe<Project_Covid_Tested_Positive_Answer_Set_Input>;
  pk_columns: Project_Covid_Tested_Positive_Answer_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Covid_Tested_Positive_QuestionArgs = {
  _set?: Maybe<Project_Covid_Tested_Positive_Question_Set_Input>;
  where: Project_Covid_Tested_Positive_Question_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Covid_Tested_Positive_Question_By_PkArgs = {
  _set?: Maybe<Project_Covid_Tested_Positive_Question_Set_Input>;
  pk_columns: Project_Covid_Tested_Positive_Question_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Covid_Tested_Positive_WorkerArgs = {
  _set?: Maybe<Project_Covid_Tested_Positive_Worker_Set_Input>;
  where: Project_Covid_Tested_Positive_Worker_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Covid_Tested_Positive_Worker_By_PkArgs = {
  _set?: Maybe<Project_Covid_Tested_Positive_Worker_Set_Input>;
  pk_columns: Project_Covid_Tested_Positive_Worker_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Covid_Yes_No_QuestionArgs = {
  _set?: Maybe<Project_Covid_Yes_No_Question_Set_Input>;
  where: Project_Covid_Yes_No_Question_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Covid_Yes_No_Question_By_PkArgs = {
  _set?: Maybe<Project_Covid_Yes_No_Question_Set_Input>;
  pk_columns: Project_Covid_Yes_No_Question_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Project_CrewArgs = {
  _set?: Maybe<Project_Crew_Set_Input>;
  where: Project_Crew_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Crew_By_PkArgs = {
  _set?: Maybe<Project_Crew_Set_Input>;
  pk_columns: Project_Crew_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Project_EmployeeArgs = {
  _set?: Maybe<Project_Employee_Set_Input>;
  where: Project_Employee_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Employee_By_PkArgs = {
  _set?: Maybe<Project_Employee_Set_Input>;
  pk_columns: Project_Employee_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Project_HazardArgs = {
  _set?: Maybe<Project_Hazard_Set_Input>;
  where: Project_Hazard_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Hazard_By_PkArgs = {
  _set?: Maybe<Project_Hazard_Set_Input>;
  pk_columns: Project_Hazard_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Hazard_SubcontractorArgs = {
  _set?: Maybe<Project_Hazard_Subcontractor_Set_Input>;
  where: Project_Hazard_Subcontractor_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Hazard_Subcontractor_By_PkArgs = {
  _set?: Maybe<Project_Hazard_Subcontractor_Set_Input>;
  pk_columns: Project_Hazard_Subcontractor_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Project_PostArgs = {
  _set?: Maybe<Project_Post_Set_Input>;
  where: Project_Post_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Post_GCsArgs = {
  _set?: Maybe<Project_Post_GCs_Set_Input>;
  where: Project_Post_GCs_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Post_GCs_By_PkArgs = {
  _set?: Maybe<Project_Post_GCs_Set_Input>;
  pk_columns: Project_Post_GCs_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Post_By_PkArgs = {
  _set?: Maybe<Project_Post_Set_Input>;
  pk_columns: Project_Post_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Post_WorkersArgs = {
  _set?: Maybe<Project_Post_Workers_Set_Input>;
  where: Project_Post_Workers_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Post_Workers_By_PkArgs = {
  _set?: Maybe<Project_Post_Workers_Set_Input>;
  pk_columns: Project_Post_Workers_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Report_SettingsArgs = {
  _set?: Maybe<Project_Report_Settings_Set_Input>;
  where: Project_Report_Settings_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Report_Settings_By_PkArgs = {
  _set?: Maybe<Project_Report_Settings_Set_Input>;
  pk_columns: Project_Report_Settings_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Site_NotificationArgs = {
  _set?: Maybe<Project_Site_Notification_Set_Input>;
  where: Project_Site_Notification_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Site_Notification_By_PkArgs = {
  _set?: Maybe<Project_Site_Notification_Set_Input>;
  pk_columns: Project_Site_Notification_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Project_SubcontractorArgs = {
  _set?: Maybe<Project_Subcontractor_Set_Input>;
  where: Project_Subcontractor_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Subcontractor_By_PkArgs = {
  _set?: Maybe<Project_Subcontractor_Set_Input>;
  pk_columns: Project_Subcontractor_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Subcontractor_Onsite_UpdateArgs = {
  _set?: Maybe<Project_Subcontractor_Onsite_Update_Set_Input>;
  where: Project_Subcontractor_Onsite_Update_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Subcontractor_Onsite_Update_By_PkArgs = {
  _set?: Maybe<Project_Subcontractor_Onsite_Update_Set_Input>;
  pk_columns: Project_Subcontractor_Onsite_Update_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Subcontractor_Report_SettingsArgs = {
  _set?: Maybe<Project_Subcontractor_Report_Settings_Set_Input>;
  where: Project_Subcontractor_Report_Settings_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Subcontractor_Report_Settings_By_PkArgs = {
  _set?: Maybe<Project_Subcontractor_Report_Settings_Set_Input>;
  pk_columns: Project_Subcontractor_Report_Settings_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Project_UserArgs = {
  _set?: Maybe<Project_User_Set_Input>;
  where: Project_User_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Project_User_By_PkArgs = {
  _set?: Maybe<Project_User_Set_Input>;
  pk_columns: Project_User_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Project_WorkerArgs = {
  _set?: Maybe<Project_Worker_Set_Input>;
  where: Project_Worker_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Worker_By_PkArgs = {
  _set?: Maybe<Project_Worker_Set_Input>;
  pk_columns: Project_Worker_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Worker_CompetencyArgs = {
  _set?: Maybe<Project_Worker_Competency_Set_Input>;
  where: Project_Worker_Competency_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Worker_Competency_By_PkArgs = {
  _set?: Maybe<Project_Worker_Competency_Set_Input>;
  pk_columns: Project_Worker_Competency_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Worker_Onsite_PingArgs = {
  _set?: Maybe<Project_Worker_Onsite_Ping_Set_Input>;
  where: Project_Worker_Onsite_Ping_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Project_Worker_Onsite_Ping_By_PkArgs = {
  _set?: Maybe<Project_Worker_Onsite_Ping_Set_Input>;
  pk_columns: Project_Worker_Onsite_Ping_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Projects_To_PostsArgs = {
  _set?: Maybe<Projects_To_Posts_Set_Input>;
  where: Projects_To_Posts_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Projects_To_Posts_By_PkArgs = {
  _set?: Maybe<Projects_To_Posts_Set_Input>;
  pk_columns: Projects_To_Posts_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_ReportArgs = {
  _set?: Maybe<Report_Set_Input>;
  where: Report_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Report_Awareness_QuestionArgs = {
  _set?: Maybe<Report_Awareness_Question_Set_Input>;
  where: Report_Awareness_Question_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Report_Awareness_Question_By_PkArgs = {
  _set?: Maybe<Report_Awareness_Question_Set_Input>;
  pk_columns: Report_Awareness_Question_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Report_By_PkArgs = {
  _set?: Maybe<Report_Set_Input>;
  pk_columns: Report_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Report_Fatal_FourArgs = {
  _set?: Maybe<Report_Fatal_Four_Set_Input>;
  where: Report_Fatal_Four_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Report_Fatal_Four_By_PkArgs = {
  _set?: Maybe<Report_Fatal_Four_Set_Input>;
  pk_columns: Report_Fatal_Four_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Report_InjuryArgs = {
  _set?: Maybe<Report_Injury_Set_Input>;
  where: Report_Injury_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Report_Injury_By_PkArgs = {
  _set?: Maybe<Report_Injury_Set_Input>;
  pk_columns: Report_Injury_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Report_Project_HazardArgs = {
  _set?: Maybe<Report_Project_Hazard_Set_Input>;
  where: Report_Project_Hazard_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Report_Project_Hazard_By_PkArgs = {
  _set?: Maybe<Report_Project_Hazard_Set_Input>;
  pk_columns: Report_Project_Hazard_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Report_Project_PostArgs = {
  _set?: Maybe<Report_Project_Post_Set_Input>;
  where: Report_Project_Post_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Report_Project_Post_By_PkArgs = {
  _set?: Maybe<Report_Project_Post_Set_Input>;
  pk_columns: Report_Project_Post_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Report_Project_WorkerArgs = {
  _set?: Maybe<Report_Project_Worker_Set_Input>;
  where: Report_Project_Worker_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Report_Project_Worker_By_PkArgs = {
  _set?: Maybe<Report_Project_Worker_Set_Input>;
  pk_columns: Report_Project_Worker_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_S_Daily_Hours_To_DateArgs = {
  _inc?: Maybe<S_Daily_Hours_To_Date_Inc_Input>;
  _set?: Maybe<S_Daily_Hours_To_Date_Set_Input>;
  where: S_Daily_Hours_To_Date_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_S_Daily_Hours_To_Date_By_PkArgs = {
  _inc?: Maybe<S_Daily_Hours_To_Date_Inc_Input>;
  _set?: Maybe<S_Daily_Hours_To_Date_Set_Input>;
  pk_columns: S_Daily_Hours_To_Date_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_S_Sub_Daily_Log_SubmittalArgs = {
  _inc?: Maybe<S_Sub_Daily_Log_Submittal_Inc_Input>;
  _set?: Maybe<S_Sub_Daily_Log_Submittal_Set_Input>;
  where: S_Sub_Daily_Log_Submittal_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_S_Sub_Daily_Log_Submittal_By_PkArgs = {
  _inc?: Maybe<S_Sub_Daily_Log_Submittal_Inc_Input>;
  _set?: Maybe<S_Sub_Daily_Log_Submittal_Set_Input>;
  pk_columns: S_Sub_Daily_Log_Submittal_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Select_OptionArgs = {
  _set?: Maybe<Select_Option_Set_Input>;
  where: Select_Option_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Select_Option_By_PkArgs = {
  _set?: Maybe<Select_Option_Set_Input>;
  pk_columns: Select_Option_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Select_Option_TypeArgs = {
  _set?: Maybe<Select_Option_Type_Set_Input>;
  where: Select_Option_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Select_Option_Type_By_PkArgs = {
  _set?: Maybe<Select_Option_Type_Set_Input>;
  pk_columns: Select_Option_Type_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Short_Forecast_TypeArgs = {
  _set?: Maybe<Short_Forecast_Type_Set_Input>;
  where: Short_Forecast_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Short_Forecast_Type_By_PkArgs = {
  _set?: Maybe<Short_Forecast_Type_Set_Input>;
  pk_columns: Short_Forecast_Type_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Sign_In_TypeArgs = {
  _set?: Maybe<Sign_In_Type_Set_Input>;
  where: Sign_In_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Sign_In_Type_By_PkArgs = {
  _set?: Maybe<Sign_In_Type_Set_Input>;
  pk_columns: Sign_In_Type_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_StateArgs = {
  _set?: Maybe<State_Set_Input>;
  where: State_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_State_By_PkArgs = {
  _set?: Maybe<State_Set_Input>;
  pk_columns: State_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_SubcontractorArgs = {
  _set?: Maybe<Subcontractor_Set_Input>;
  where: Subcontractor_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Subcontractor_By_PkArgs = {
  _set?: Maybe<Subcontractor_Set_Input>;
  pk_columns: Subcontractor_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Subcontractor_EmployeeArgs = {
  _set?: Maybe<Subcontractor_Employee_Set_Input>;
  where: Subcontractor_Employee_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Subcontractor_Employee_By_PkArgs = {
  _set?: Maybe<Subcontractor_Employee_Set_Input>;
  pk_columns: Subcontractor_Employee_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Subcontractor_Employee_TitleArgs = {
  _set?: Maybe<Subcontractor_Employee_Title_Set_Input>;
  where: Subcontractor_Employee_Title_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Subcontractor_Employee_Title_By_PkArgs = {
  _set?: Maybe<Subcontractor_Employee_Title_Set_Input>;
  pk_columns: Subcontractor_Employee_Title_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Subcontractor_Onsite_Status_UpdateArgs = {
  _set?: Maybe<Subcontractor_Onsite_Status_Update_Set_Input>;
  where: Subcontractor_Onsite_Status_Update_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Subcontractor_Onsite_Status_Update_By_PkArgs = {
  _set?: Maybe<Subcontractor_Onsite_Status_Update_Set_Input>;
  pk_columns: Subcontractor_Onsite_Status_Update_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Subcontractor_TradeArgs = {
  _set?: Maybe<Subcontractor_Trade_Set_Input>;
  where: Subcontractor_Trade_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Subcontractor_Trade_By_PkArgs = {
  _set?: Maybe<Subcontractor_Trade_Set_Input>;
  pk_columns: Subcontractor_Trade_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Subcontractor_WorkerArgs = {
  _set?: Maybe<Subcontractor_Worker_Set_Input>;
  where: Subcontractor_Worker_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Subcontractor_Worker_By_PkArgs = {
  _set?: Maybe<Subcontractor_Worker_Set_Input>;
  pk_columns: Subcontractor_Worker_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Submission_ImageArgs = {
  _inc?: Maybe<Submission_Image_Inc_Input>;
  _set?: Maybe<Submission_Image_Set_Input>;
  where: Submission_Image_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Submission_Image_By_PkArgs = {
  _inc?: Maybe<Submission_Image_Inc_Input>;
  _set?: Maybe<Submission_Image_Set_Input>;
  pk_columns: Submission_Image_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Submission_Image_TypeArgs = {
  _set?: Maybe<Submission_Image_Type_Set_Input>;
  where: Submission_Image_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Submission_Image_Type_By_PkArgs = {
  _set?: Maybe<Submission_Image_Type_Set_Input>;
  pk_columns: Submission_Image_Type_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_TagArgs = {
  _set?: Maybe<Tag_Set_Input>;
  where: Tag_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Tag_By_PkArgs = {
  _set?: Maybe<Tag_Set_Input>;
  pk_columns: Tag_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_TaskArgs = {
  _set?: Maybe<Task_Set_Input>;
  where: Task_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Task_By_PkArgs = {
  _set?: Maybe<Task_Set_Input>;
  pk_columns: Task_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Task_NoteArgs = {
  _set?: Maybe<Task_Note_Set_Input>;
  where: Task_Note_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Task_Note_By_PkArgs = {
  _set?: Maybe<Task_Note_Set_Input>;
  pk_columns: Task_Note_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Task_Permit_TypeArgs = {
  _set?: Maybe<Task_Permit_Type_Set_Input>;
  where: Task_Permit_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Task_Permit_Type_By_PkArgs = {
  _set?: Maybe<Task_Permit_Type_Set_Input>;
  pk_columns: Task_Permit_Type_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Task_Ppe_TypeArgs = {
  _set?: Maybe<Task_Ppe_Type_Set_Input>;
  where: Task_Ppe_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Task_Ppe_Type_By_PkArgs = {
  _set?: Maybe<Task_Ppe_Type_Set_Input>;
  pk_columns: Task_Ppe_Type_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Task_StepArgs = {
  _inc?: Maybe<Task_Step_Inc_Input>;
  _set?: Maybe<Task_Step_Set_Input>;
  where: Task_Step_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Task_Step_By_PkArgs = {
  _inc?: Maybe<Task_Step_Inc_Input>;
  _set?: Maybe<Task_Step_Set_Input>;
  pk_columns: Task_Step_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Task_Step_HazardArgs = {
  _inc?: Maybe<Task_Step_Hazard_Inc_Input>;
  _set?: Maybe<Task_Step_Hazard_Set_Input>;
  where: Task_Step_Hazard_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Task_Step_Hazard_By_PkArgs = {
  _inc?: Maybe<Task_Step_Hazard_Inc_Input>;
  _set?: Maybe<Task_Step_Hazard_Set_Input>;
  pk_columns: Task_Step_Hazard_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Text_TranslationArgs = {
  _inc?: Maybe<Text_Translation_Inc_Input>;
  _set?: Maybe<Text_Translation_Set_Input>;
  where: Text_Translation_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Text_Translation_By_PkArgs = {
  _inc?: Maybe<Text_Translation_Inc_Input>;
  _set?: Maybe<Text_Translation_Set_Input>;
  pk_columns: Text_Translation_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_TodoArgs = {
  _inc?: Maybe<Todo_Inc_Input>;
  _set?: Maybe<Todo_Set_Input>;
  where: Todo_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Todo_AssigneeArgs = {
  _set?: Maybe<Todo_Assignee_Set_Input>;
  where: Todo_Assignee_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Todo_Assignee_By_PkArgs = {
  _set?: Maybe<Todo_Assignee_Set_Input>;
  pk_columns: Todo_Assignee_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Todo_By_PkArgs = {
  _inc?: Maybe<Todo_Inc_Input>;
  _set?: Maybe<Todo_Set_Input>;
  pk_columns: Todo_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Todo_NotifyeeArgs = {
  _set?: Maybe<Todo_Notifyee_Set_Input>;
  where: Todo_Notifyee_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Todo_Notifyee_By_PkArgs = {
  _set?: Maybe<Todo_Notifyee_Set_Input>;
  pk_columns: Todo_Notifyee_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Toolbox_TalkArgs = {
  _set?: Maybe<Toolbox_Talk_Set_Input>;
  where: Toolbox_Talk_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Toolbox_Talk_By_PkArgs = {
  _set?: Maybe<Toolbox_Talk_Set_Input>;
  pk_columns: Toolbox_Talk_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Toolbox_Talk_PdfArgs = {
  _set?: Maybe<Toolbox_Talk_Pdf_Set_Input>;
  where: Toolbox_Talk_Pdf_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Toolbox_Talk_Pdf_By_PkArgs = {
  _set?: Maybe<Toolbox_Talk_Pdf_Set_Input>;
  pk_columns: Toolbox_Talk_Pdf_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Toolbox_Talk_Project_WorkerArgs = {
  _set?: Maybe<Toolbox_Talk_Project_Worker_Set_Input>;
  where: Toolbox_Talk_Project_Worker_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Toolbox_Talk_Project_Worker_By_PkArgs = {
  _set?: Maybe<Toolbox_Talk_Project_Worker_Set_Input>;
  pk_columns: Toolbox_Talk_Project_Worker_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_UserArgs = {
  _set?: Maybe<User_Set_Input>;
  where: User_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_User_By_PkArgs = {
  _set?: Maybe<User_Set_Input>;
  pk_columns: User_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_User_NotificationArgs = {
  _set?: Maybe<User_Notification_Set_Input>;
  where: User_Notification_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_User_Notification_By_PkArgs = {
  _set?: Maybe<User_Notification_Set_Input>;
  pk_columns: User_Notification_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_User_Notification_Event_TypeArgs = {
  _set?: Maybe<User_Notification_Event_Type_Set_Input>;
  where: User_Notification_Event_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_User_Notification_Event_Type_By_PkArgs = {
  _set?: Maybe<User_Notification_Event_Type_Set_Input>;
  pk_columns: User_Notification_Event_Type_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_User_Project_Filter_CalendarArgs = {
  _set?: Maybe<User_Project_Filter_Calendar_Set_Input>;
  where: User_Project_Filter_Calendar_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_User_Project_Filter_Calendar_By_PkArgs = {
  _set?: Maybe<User_Project_Filter_Calendar_Set_Input>;
  pk_columns: User_Project_Filter_Calendar_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_User_Saved_EmailArgs = {
  _set?: Maybe<User_Saved_Email_Set_Input>;
  where: User_Saved_Email_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_User_Saved_Email_By_PkArgs = {
  _set?: Maybe<User_Saved_Email_Set_Input>;
  pk_columns: User_Saved_Email_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Work_Above_PermitArgs = {
  _set?: Maybe<Work_Above_Permit_Set_Input>;
  where: Work_Above_Permit_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Work_Above_Permit_By_PkArgs = {
  _set?: Maybe<Work_Above_Permit_Set_Input>;
  pk_columns: Work_Above_Permit_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_WorkerArgs = {
  _set?: Maybe<Worker_Set_Input>;
  where: Worker_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Worker_Automatic_EmailArgs = {
  _set?: Maybe<Worker_Automatic_Email_Set_Input>;
  where: Worker_Automatic_Email_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Worker_Automatic_Email_By_PkArgs = {
  _set?: Maybe<Worker_Automatic_Email_Set_Input>;
  pk_columns: Worker_Automatic_Email_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Worker_Automatic_Email_Event_TypeArgs = {
  _set?: Maybe<Worker_Automatic_Email_Event_Type_Set_Input>;
  where: Worker_Automatic_Email_Event_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Worker_Automatic_Email_Event_Type_By_PkArgs = {
  _set?: Maybe<Worker_Automatic_Email_Event_Type_Set_Input>;
  pk_columns: Worker_Automatic_Email_Event_Type_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Worker_By_PkArgs = {
  _set?: Maybe<Worker_Set_Input>;
  pk_columns: Worker_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Worker_CertificationArgs = {
  _set?: Maybe<Worker_Certification_Set_Input>;
  where: Worker_Certification_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Worker_Certification_By_PkArgs = {
  _set?: Maybe<Worker_Certification_Set_Input>;
  pk_columns: Worker_Certification_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Worker_Drug_TestArgs = {
  _set?: Maybe<Worker_Drug_Test_Set_Input>;
  where: Worker_Drug_Test_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Worker_Drug_Test_By_PkArgs = {
  _set?: Maybe<Worker_Drug_Test_Set_Input>;
  pk_columns: Worker_Drug_Test_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Worker_Enabled_Automatic_Email_EventArgs = {
  _set?: Maybe<Worker_Enabled_Automatic_Email_Event_Set_Input>;
  where: Worker_Enabled_Automatic_Email_Event_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Worker_Enabled_Automatic_Email_Event_By_PkArgs = {
  _set?: Maybe<Worker_Enabled_Automatic_Email_Event_Set_Input>;
  pk_columns: Worker_Enabled_Automatic_Email_Event_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Worker_Manhour_Stats_By_Range_TableArgs = {
  _inc?: Maybe<Worker_Manhour_Stats_By_Range_Table_Inc_Input>;
  _set?: Maybe<Worker_Manhour_Stats_By_Range_Table_Set_Input>;
  where: Worker_Manhour_Stats_By_Range_Table_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Worker_Manhour_Stats_By_Range_Table_By_PkArgs = {
  _inc?: Maybe<Worker_Manhour_Stats_By_Range_Table_Inc_Input>;
  _set?: Maybe<Worker_Manhour_Stats_By_Range_Table_Set_Input>;
  pk_columns: Worker_Manhour_Stats_By_Range_Table_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Worker_Manhour_Stats_TableArgs = {
  _inc?: Maybe<Worker_Manhour_Stats_Table_Inc_Input>;
  _set?: Maybe<Worker_Manhour_Stats_Table_Set_Input>;
  where: Worker_Manhour_Stats_Table_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Worker_Manhour_Stats_Table_By_PkArgs = {
  _inc?: Maybe<Worker_Manhour_Stats_Table_Inc_Input>;
  _set?: Maybe<Worker_Manhour_Stats_Table_Set_Input>;
  pk_columns: Worker_Manhour_Stats_Table_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Worker_RoleArgs = {
  _set?: Maybe<Worker_Role_Set_Input>;
  where: Worker_Role_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Worker_Role_By_PkArgs = {
  _set?: Maybe<Worker_Role_Set_Input>;
  pk_columns: Worker_Role_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Worker_Stats_By_Range_TableArgs = {
  _inc?: Maybe<Worker_Stats_By_Range_Table_Inc_Input>;
  _set?: Maybe<Worker_Stats_By_Range_Table_Set_Input>;
  where: Worker_Stats_By_Range_Table_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Worker_Stats_By_Range_Table_By_PkArgs = {
  _inc?: Maybe<Worker_Stats_By_Range_Table_Inc_Input>;
  _set?: Maybe<Worker_Stats_By_Range_Table_Set_Input>;
  pk_columns: Worker_Stats_By_Range_Table_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Worker_Stats_TableArgs = {
  _inc?: Maybe<Worker_Stats_Table_Inc_Input>;
  _set?: Maybe<Worker_Stats_Table_Set_Input>;
  where: Worker_Stats_Table_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Worker_Stats_Table_By_PkArgs = {
  _inc?: Maybe<Worker_Stats_Table_Inc_Input>;
  _set?: Maybe<Worker_Stats_Table_Set_Input>;
  pk_columns: Worker_Stats_Table_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Worker_TitleArgs = {
  _set?: Maybe<Worker_Title_Set_Input>;
  where: Worker_Title_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Worker_Title_By_PkArgs = {
  _set?: Maybe<Worker_Title_Set_Input>;
  pk_columns: Worker_Title_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUploadBase64FileArgs = {
  input?: Maybe<UploadBase64FileInput>;
};


/** mutation root */
export type Mutation_RootValidateProjectReportSettingsArgs = {
  projectId: Scalars['String'];
};


/** mutation root */
export type Mutation_RootWorkerCreatePasswordArgs = {
  input: WorkerCreatePasswordInput;
};

export type MyMutationOutput = {
   __typename?: 'MyMutationOutput';
  affected_rows: Scalars['Int'];
};

/**
 * placeholder table for sql functions
 * 
 * 
 * columns and relationships of "notification_badge_count"
 */
export type Notification_Badge_Count = {
   __typename?: 'notification_badge_count';
  count: Scalars['numeric'];
  id: Scalars['uuid'];
  source_type: Scalars['String'];
};

/** aggregated selection of "notification_badge_count" */
export type Notification_Badge_Count_Aggregate = {
   __typename?: 'notification_badge_count_aggregate';
  aggregate?: Maybe<Notification_Badge_Count_Aggregate_Fields>;
  nodes: Array<Notification_Badge_Count>;
};

/** aggregate fields of "notification_badge_count" */
export type Notification_Badge_Count_Aggregate_Fields = {
   __typename?: 'notification_badge_count_aggregate_fields';
  avg?: Maybe<Notification_Badge_Count_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Notification_Badge_Count_Max_Fields>;
  min?: Maybe<Notification_Badge_Count_Min_Fields>;
  stddev?: Maybe<Notification_Badge_Count_Stddev_Fields>;
  stddev_pop?: Maybe<Notification_Badge_Count_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Notification_Badge_Count_Stddev_Samp_Fields>;
  sum?: Maybe<Notification_Badge_Count_Sum_Fields>;
  var_pop?: Maybe<Notification_Badge_Count_Var_Pop_Fields>;
  var_samp?: Maybe<Notification_Badge_Count_Var_Samp_Fields>;
  variance?: Maybe<Notification_Badge_Count_Variance_Fields>;
};


/** aggregate fields of "notification_badge_count" */
export type Notification_Badge_Count_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Notification_Badge_Count_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "notification_badge_count" */
export type Notification_Badge_Count_Aggregate_Order_By = {
  avg?: Maybe<Notification_Badge_Count_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Notification_Badge_Count_Max_Order_By>;
  min?: Maybe<Notification_Badge_Count_Min_Order_By>;
  stddev?: Maybe<Notification_Badge_Count_Stddev_Order_By>;
  stddev_pop?: Maybe<Notification_Badge_Count_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Notification_Badge_Count_Stddev_Samp_Order_By>;
  sum?: Maybe<Notification_Badge_Count_Sum_Order_By>;
  var_pop?: Maybe<Notification_Badge_Count_Var_Pop_Order_By>;
  var_samp?: Maybe<Notification_Badge_Count_Var_Samp_Order_By>;
  variance?: Maybe<Notification_Badge_Count_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "notification_badge_count" */
export type Notification_Badge_Count_Arr_Rel_Insert_Input = {
  data: Array<Notification_Badge_Count_Insert_Input>;
  on_conflict?: Maybe<Notification_Badge_Count_On_Conflict>;
};

/** aggregate avg on columns */
export type Notification_Badge_Count_Avg_Fields = {
   __typename?: 'notification_badge_count_avg_fields';
  count?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "notification_badge_count" */
export type Notification_Badge_Count_Avg_Order_By = {
  count?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "notification_badge_count". All fields are combined with a logical 'AND'. */
export type Notification_Badge_Count_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Notification_Badge_Count_Bool_Exp>>>;
  _not?: Maybe<Notification_Badge_Count_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Notification_Badge_Count_Bool_Exp>>>;
  count?: Maybe<Numeric_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  source_type?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "notification_badge_count" */
export enum Notification_Badge_Count_Constraint {
  /** unique or primary key constraint */
  NotificationBadgeCountPkey = 'notification_badge_count_pkey'
}

/** input type for incrementing integer column in table "notification_badge_count" */
export type Notification_Badge_Count_Inc_Input = {
  count?: Maybe<Scalars['numeric']>;
};

/** input type for inserting data into table "notification_badge_count" */
export type Notification_Badge_Count_Insert_Input = {
  count?: Maybe<Scalars['numeric']>;
  id?: Maybe<Scalars['uuid']>;
  source_type?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Notification_Badge_Count_Max_Fields = {
   __typename?: 'notification_badge_count_max_fields';
  count?: Maybe<Scalars['numeric']>;
  id?: Maybe<Scalars['uuid']>;
  source_type?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "notification_badge_count" */
export type Notification_Badge_Count_Max_Order_By = {
  count?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  source_type?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Notification_Badge_Count_Min_Fields = {
   __typename?: 'notification_badge_count_min_fields';
  count?: Maybe<Scalars['numeric']>;
  id?: Maybe<Scalars['uuid']>;
  source_type?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "notification_badge_count" */
export type Notification_Badge_Count_Min_Order_By = {
  count?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  source_type?: Maybe<Order_By>;
};

/** response of any mutation on the table "notification_badge_count" */
export type Notification_Badge_Count_Mutation_Response = {
   __typename?: 'notification_badge_count_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Notification_Badge_Count>;
};

/** input type for inserting object relation for remote table "notification_badge_count" */
export type Notification_Badge_Count_Obj_Rel_Insert_Input = {
  data: Notification_Badge_Count_Insert_Input;
  on_conflict?: Maybe<Notification_Badge_Count_On_Conflict>;
};

/** on conflict condition type for table "notification_badge_count" */
export type Notification_Badge_Count_On_Conflict = {
  constraint: Notification_Badge_Count_Constraint;
  update_columns: Array<Notification_Badge_Count_Update_Column>;
  where?: Maybe<Notification_Badge_Count_Bool_Exp>;
};

/** ordering options when selecting data from "notification_badge_count" */
export type Notification_Badge_Count_Order_By = {
  count?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  source_type?: Maybe<Order_By>;
};

/** primary key columns input for table: "notification_badge_count" */
export type Notification_Badge_Count_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "notification_badge_count" */
export enum Notification_Badge_Count_Select_Column {
  /** column name */
  Count = 'count',
  /** column name */
  Id = 'id',
  /** column name */
  SourceType = 'source_type'
}

/** input type for updating data in table "notification_badge_count" */
export type Notification_Badge_Count_Set_Input = {
  count?: Maybe<Scalars['numeric']>;
  id?: Maybe<Scalars['uuid']>;
  source_type?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Notification_Badge_Count_Stddev_Fields = {
   __typename?: 'notification_badge_count_stddev_fields';
  count?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "notification_badge_count" */
export type Notification_Badge_Count_Stddev_Order_By = {
  count?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Notification_Badge_Count_Stddev_Pop_Fields = {
   __typename?: 'notification_badge_count_stddev_pop_fields';
  count?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "notification_badge_count" */
export type Notification_Badge_Count_Stddev_Pop_Order_By = {
  count?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Notification_Badge_Count_Stddev_Samp_Fields = {
   __typename?: 'notification_badge_count_stddev_samp_fields';
  count?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "notification_badge_count" */
export type Notification_Badge_Count_Stddev_Samp_Order_By = {
  count?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Notification_Badge_Count_Sum_Fields = {
   __typename?: 'notification_badge_count_sum_fields';
  count?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "notification_badge_count" */
export type Notification_Badge_Count_Sum_Order_By = {
  count?: Maybe<Order_By>;
};

/** update columns of table "notification_badge_count" */
export enum Notification_Badge_Count_Update_Column {
  /** column name */
  Count = 'count',
  /** column name */
  Id = 'id',
  /** column name */
  SourceType = 'source_type'
}

/** aggregate var_pop on columns */
export type Notification_Badge_Count_Var_Pop_Fields = {
   __typename?: 'notification_badge_count_var_pop_fields';
  count?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "notification_badge_count" */
export type Notification_Badge_Count_Var_Pop_Order_By = {
  count?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Notification_Badge_Count_Var_Samp_Fields = {
   __typename?: 'notification_badge_count_var_samp_fields';
  count?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "notification_badge_count" */
export type Notification_Badge_Count_Var_Samp_Order_By = {
  count?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Notification_Badge_Count_Variance_Fields = {
   __typename?: 'notification_badge_count_variance_fields';
  count?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "notification_badge_count" */
export type Notification_Badge_Count_Variance_Order_By = {
  count?: Maybe<Order_By>;
};


/** expression to compare columns of type numeric. All fields are combined with logical 'AND'. */
export type Numeric_Comparison_Exp = {
  _eq?: Maybe<Scalars['numeric']>;
  _gt?: Maybe<Scalars['numeric']>;
  _gte?: Maybe<Scalars['numeric']>;
  _in?: Maybe<Array<Scalars['numeric']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['numeric']>;
  _lte?: Maybe<Scalars['numeric']>;
  _neq?: Maybe<Scalars['numeric']>;
  _nin?: Maybe<Array<Scalars['numeric']>>;
};

/** column ordering options */
export enum Order_By {
  /** in the ascending order, nulls last */
  Asc = 'asc',
  /** in the ascending order, nulls first */
  AscNullsFirst = 'asc_nulls_first',
  /** in the ascending order, nulls last */
  AscNullsLast = 'asc_nulls_last',
  /** in the descending order, nulls first */
  Desc = 'desc',
  /** in the descending order, nulls first */
  DescNullsFirst = 'desc_nulls_first',
  /** in the descending order, nulls last */
  DescNullsLast = 'desc_nulls_last'
}

/** columns and relationships of "orientation" */
export type Orientation = {
   __typename?: 'orientation';
  created_at: Scalars['timestamptz'];
  created_by_user_id?: Maybe<Scalars['uuid']>;
  duration_valid: Scalars['Int'];
  /** An object relationship */
  general_contractor?: Maybe<General_Contractor>;
  general_contractor_id?: Maybe<Scalars['uuid']>;
  id: Scalars['uuid'];
  name: Scalars['String'];
  /** An object relationship */
  project?: Maybe<Project>;
  project_id?: Maybe<Scalars['uuid']>;
  /** An array relationship */
  slides: Array<Orientation_Slide>;
  /** An aggregated array relationship */
  slides_aggregate: Orientation_Slide_Aggregate;
  type: Scalars['String'];
  /** An object relationship */
  user?: Maybe<User>;
};


/** columns and relationships of "orientation" */
export type OrientationSlidesArgs = {
  distinct_on?: Maybe<Array<Orientation_Slide_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Orientation_Slide_Order_By>>;
  where?: Maybe<Orientation_Slide_Bool_Exp>;
};


/** columns and relationships of "orientation" */
export type OrientationSlides_AggregateArgs = {
  distinct_on?: Maybe<Array<Orientation_Slide_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Orientation_Slide_Order_By>>;
  where?: Maybe<Orientation_Slide_Bool_Exp>;
};

/** aggregated selection of "orientation" */
export type Orientation_Aggregate = {
   __typename?: 'orientation_aggregate';
  aggregate?: Maybe<Orientation_Aggregate_Fields>;
  nodes: Array<Orientation>;
};

/** aggregate fields of "orientation" */
export type Orientation_Aggregate_Fields = {
   __typename?: 'orientation_aggregate_fields';
  avg?: Maybe<Orientation_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Orientation_Max_Fields>;
  min?: Maybe<Orientation_Min_Fields>;
  stddev?: Maybe<Orientation_Stddev_Fields>;
  stddev_pop?: Maybe<Orientation_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Orientation_Stddev_Samp_Fields>;
  sum?: Maybe<Orientation_Sum_Fields>;
  var_pop?: Maybe<Orientation_Var_Pop_Fields>;
  var_samp?: Maybe<Orientation_Var_Samp_Fields>;
  variance?: Maybe<Orientation_Variance_Fields>;
};


/** aggregate fields of "orientation" */
export type Orientation_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Orientation_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "orientation" */
export type Orientation_Aggregate_Order_By = {
  avg?: Maybe<Orientation_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Orientation_Max_Order_By>;
  min?: Maybe<Orientation_Min_Order_By>;
  stddev?: Maybe<Orientation_Stddev_Order_By>;
  stddev_pop?: Maybe<Orientation_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Orientation_Stddev_Samp_Order_By>;
  sum?: Maybe<Orientation_Sum_Order_By>;
  var_pop?: Maybe<Orientation_Var_Pop_Order_By>;
  var_samp?: Maybe<Orientation_Var_Samp_Order_By>;
  variance?: Maybe<Orientation_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "orientation" */
export type Orientation_Arr_Rel_Insert_Input = {
  data: Array<Orientation_Insert_Input>;
  on_conflict?: Maybe<Orientation_On_Conflict>;
};

/** aggregate avg on columns */
export type Orientation_Avg_Fields = {
   __typename?: 'orientation_avg_fields';
  duration_valid?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "orientation" */
export type Orientation_Avg_Order_By = {
  duration_valid?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "orientation". All fields are combined with a logical 'AND'. */
export type Orientation_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Orientation_Bool_Exp>>>;
  _not?: Maybe<Orientation_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Orientation_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  created_by_user_id?: Maybe<Uuid_Comparison_Exp>;
  duration_valid?: Maybe<Int_Comparison_Exp>;
  general_contractor?: Maybe<General_Contractor_Bool_Exp>;
  general_contractor_id?: Maybe<Uuid_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  slides?: Maybe<Orientation_Slide_Bool_Exp>;
  type?: Maybe<String_Comparison_Exp>;
  user?: Maybe<User_Bool_Exp>;
};

/** unique or primary key constraints on table "orientation" */
export enum Orientation_Constraint {
  /** unique or primary key constraint */
  OrientationPkey = 'orientation_pkey'
}

/** input type for incrementing integer column in table "orientation" */
export type Orientation_Inc_Input = {
  duration_valid?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "orientation" */
export type Orientation_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  duration_valid?: Maybe<Scalars['Int']>;
  general_contractor?: Maybe<General_Contractor_Obj_Rel_Insert_Input>;
  general_contractor_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_id?: Maybe<Scalars['uuid']>;
  slides?: Maybe<Orientation_Slide_Arr_Rel_Insert_Input>;
  type?: Maybe<Scalars['String']>;
  user?: Maybe<User_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Orientation_Max_Fields = {
   __typename?: 'orientation_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  duration_valid?: Maybe<Scalars['Int']>;
  general_contractor_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  project_id?: Maybe<Scalars['uuid']>;
  type?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "orientation" */
export type Orientation_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  created_by_user_id?: Maybe<Order_By>;
  duration_valid?: Maybe<Order_By>;
  general_contractor_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Orientation_Min_Fields = {
   __typename?: 'orientation_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  duration_valid?: Maybe<Scalars['Int']>;
  general_contractor_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  project_id?: Maybe<Scalars['uuid']>;
  type?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "orientation" */
export type Orientation_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  created_by_user_id?: Maybe<Order_By>;
  duration_valid?: Maybe<Order_By>;
  general_contractor_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
};

/** response of any mutation on the table "orientation" */
export type Orientation_Mutation_Response = {
   __typename?: 'orientation_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Orientation>;
};

/** input type for inserting object relation for remote table "orientation" */
export type Orientation_Obj_Rel_Insert_Input = {
  data: Orientation_Insert_Input;
  on_conflict?: Maybe<Orientation_On_Conflict>;
};

/** on conflict condition type for table "orientation" */
export type Orientation_On_Conflict = {
  constraint: Orientation_Constraint;
  update_columns: Array<Orientation_Update_Column>;
  where?: Maybe<Orientation_Bool_Exp>;
};

/** ordering options when selecting data from "orientation" */
export type Orientation_Order_By = {
  created_at?: Maybe<Order_By>;
  created_by_user_id?: Maybe<Order_By>;
  duration_valid?: Maybe<Order_By>;
  general_contractor?: Maybe<General_Contractor_Order_By>;
  general_contractor_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  project?: Maybe<Project_Order_By>;
  project_id?: Maybe<Order_By>;
  slides_aggregate?: Maybe<Orientation_Slide_Aggregate_Order_By>;
  type?: Maybe<Order_By>;
  user?: Maybe<User_Order_By>;
};

/** primary key columns input for table: "orientation" */
export type Orientation_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "orientation" */
export enum Orientation_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CreatedByUserId = 'created_by_user_id',
  /** column name */
  DurationValid = 'duration_valid',
  /** column name */
  GeneralContractorId = 'general_contractor_id',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  Type = 'type'
}

/** input type for updating data in table "orientation" */
export type Orientation_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  duration_valid?: Maybe<Scalars['Int']>;
  general_contractor_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  project_id?: Maybe<Scalars['uuid']>;
  type?: Maybe<Scalars['String']>;
};

/** columns and relationships of "orientation_slide" */
export type Orientation_Slide = {
   __typename?: 'orientation_slide';
  content_type?: Maybe<Scalars['String']>;
  id: Scalars['uuid'];
  image_url: Scalars['String'];
  order: Scalars['Int'];
  orientation_id: Scalars['uuid'];
  text?: Maybe<Scalars['String']>;
  title: Scalars['String'];
  video_url?: Maybe<Scalars['String']>;
};

/** aggregated selection of "orientation_slide" */
export type Orientation_Slide_Aggregate = {
   __typename?: 'orientation_slide_aggregate';
  aggregate?: Maybe<Orientation_Slide_Aggregate_Fields>;
  nodes: Array<Orientation_Slide>;
};

/** aggregate fields of "orientation_slide" */
export type Orientation_Slide_Aggregate_Fields = {
   __typename?: 'orientation_slide_aggregate_fields';
  avg?: Maybe<Orientation_Slide_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Orientation_Slide_Max_Fields>;
  min?: Maybe<Orientation_Slide_Min_Fields>;
  stddev?: Maybe<Orientation_Slide_Stddev_Fields>;
  stddev_pop?: Maybe<Orientation_Slide_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Orientation_Slide_Stddev_Samp_Fields>;
  sum?: Maybe<Orientation_Slide_Sum_Fields>;
  var_pop?: Maybe<Orientation_Slide_Var_Pop_Fields>;
  var_samp?: Maybe<Orientation_Slide_Var_Samp_Fields>;
  variance?: Maybe<Orientation_Slide_Variance_Fields>;
};


/** aggregate fields of "orientation_slide" */
export type Orientation_Slide_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Orientation_Slide_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "orientation_slide" */
export type Orientation_Slide_Aggregate_Order_By = {
  avg?: Maybe<Orientation_Slide_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Orientation_Slide_Max_Order_By>;
  min?: Maybe<Orientation_Slide_Min_Order_By>;
  stddev?: Maybe<Orientation_Slide_Stddev_Order_By>;
  stddev_pop?: Maybe<Orientation_Slide_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Orientation_Slide_Stddev_Samp_Order_By>;
  sum?: Maybe<Orientation_Slide_Sum_Order_By>;
  var_pop?: Maybe<Orientation_Slide_Var_Pop_Order_By>;
  var_samp?: Maybe<Orientation_Slide_Var_Samp_Order_By>;
  variance?: Maybe<Orientation_Slide_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "orientation_slide" */
export type Orientation_Slide_Arr_Rel_Insert_Input = {
  data: Array<Orientation_Slide_Insert_Input>;
  on_conflict?: Maybe<Orientation_Slide_On_Conflict>;
};

/** aggregate avg on columns */
export type Orientation_Slide_Avg_Fields = {
   __typename?: 'orientation_slide_avg_fields';
  order?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "orientation_slide" */
export type Orientation_Slide_Avg_Order_By = {
  order?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "orientation_slide". All fields are combined with a logical 'AND'. */
export type Orientation_Slide_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Orientation_Slide_Bool_Exp>>>;
  _not?: Maybe<Orientation_Slide_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Orientation_Slide_Bool_Exp>>>;
  content_type?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  image_url?: Maybe<String_Comparison_Exp>;
  order?: Maybe<Int_Comparison_Exp>;
  orientation_id?: Maybe<Uuid_Comparison_Exp>;
  text?: Maybe<String_Comparison_Exp>;
  title?: Maybe<String_Comparison_Exp>;
  video_url?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "orientation_slide" */
export enum Orientation_Slide_Constraint {
  /** unique or primary key constraint */
  OrientationSlidePkey = 'orientation_slide_pkey'
}

/** input type for incrementing integer column in table "orientation_slide" */
export type Orientation_Slide_Inc_Input = {
  order?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "orientation_slide" */
export type Orientation_Slide_Insert_Input = {
  content_type?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  image_url?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  orientation_id?: Maybe<Scalars['uuid']>;
  text?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  video_url?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Orientation_Slide_Max_Fields = {
   __typename?: 'orientation_slide_max_fields';
  content_type?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  image_url?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  orientation_id?: Maybe<Scalars['uuid']>;
  text?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  video_url?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "orientation_slide" */
export type Orientation_Slide_Max_Order_By = {
  content_type?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  image_url?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
  orientation_id?: Maybe<Order_By>;
  text?: Maybe<Order_By>;
  title?: Maybe<Order_By>;
  video_url?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Orientation_Slide_Min_Fields = {
   __typename?: 'orientation_slide_min_fields';
  content_type?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  image_url?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  orientation_id?: Maybe<Scalars['uuid']>;
  text?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  video_url?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "orientation_slide" */
export type Orientation_Slide_Min_Order_By = {
  content_type?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  image_url?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
  orientation_id?: Maybe<Order_By>;
  text?: Maybe<Order_By>;
  title?: Maybe<Order_By>;
  video_url?: Maybe<Order_By>;
};

/** response of any mutation on the table "orientation_slide" */
export type Orientation_Slide_Mutation_Response = {
   __typename?: 'orientation_slide_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Orientation_Slide>;
};

/** input type for inserting object relation for remote table "orientation_slide" */
export type Orientation_Slide_Obj_Rel_Insert_Input = {
  data: Orientation_Slide_Insert_Input;
  on_conflict?: Maybe<Orientation_Slide_On_Conflict>;
};

/** on conflict condition type for table "orientation_slide" */
export type Orientation_Slide_On_Conflict = {
  constraint: Orientation_Slide_Constraint;
  update_columns: Array<Orientation_Slide_Update_Column>;
  where?: Maybe<Orientation_Slide_Bool_Exp>;
};

/** ordering options when selecting data from "orientation_slide" */
export type Orientation_Slide_Order_By = {
  content_type?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  image_url?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
  orientation_id?: Maybe<Order_By>;
  text?: Maybe<Order_By>;
  title?: Maybe<Order_By>;
  video_url?: Maybe<Order_By>;
};

/** primary key columns input for table: "orientation_slide" */
export type Orientation_Slide_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "orientation_slide" */
export enum Orientation_Slide_Select_Column {
  /** column name */
  ContentType = 'content_type',
  /** column name */
  Id = 'id',
  /** column name */
  ImageUrl = 'image_url',
  /** column name */
  Order = 'order',
  /** column name */
  OrientationId = 'orientation_id',
  /** column name */
  Text = 'text',
  /** column name */
  Title = 'title',
  /** column name */
  VideoUrl = 'video_url'
}

/** input type for updating data in table "orientation_slide" */
export type Orientation_Slide_Set_Input = {
  content_type?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  image_url?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  orientation_id?: Maybe<Scalars['uuid']>;
  text?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  video_url?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Orientation_Slide_Stddev_Fields = {
   __typename?: 'orientation_slide_stddev_fields';
  order?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "orientation_slide" */
export type Orientation_Slide_Stddev_Order_By = {
  order?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Orientation_Slide_Stddev_Pop_Fields = {
   __typename?: 'orientation_slide_stddev_pop_fields';
  order?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "orientation_slide" */
export type Orientation_Slide_Stddev_Pop_Order_By = {
  order?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Orientation_Slide_Stddev_Samp_Fields = {
   __typename?: 'orientation_slide_stddev_samp_fields';
  order?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "orientation_slide" */
export type Orientation_Slide_Stddev_Samp_Order_By = {
  order?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Orientation_Slide_Sum_Fields = {
   __typename?: 'orientation_slide_sum_fields';
  order?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "orientation_slide" */
export type Orientation_Slide_Sum_Order_By = {
  order?: Maybe<Order_By>;
};

/** update columns of table "orientation_slide" */
export enum Orientation_Slide_Update_Column {
  /** column name */
  ContentType = 'content_type',
  /** column name */
  Id = 'id',
  /** column name */
  ImageUrl = 'image_url',
  /** column name */
  Order = 'order',
  /** column name */
  OrientationId = 'orientation_id',
  /** column name */
  Text = 'text',
  /** column name */
  Title = 'title',
  /** column name */
  VideoUrl = 'video_url'
}

/** aggregate var_pop on columns */
export type Orientation_Slide_Var_Pop_Fields = {
   __typename?: 'orientation_slide_var_pop_fields';
  order?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "orientation_slide" */
export type Orientation_Slide_Var_Pop_Order_By = {
  order?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Orientation_Slide_Var_Samp_Fields = {
   __typename?: 'orientation_slide_var_samp_fields';
  order?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "orientation_slide" */
export type Orientation_Slide_Var_Samp_Order_By = {
  order?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Orientation_Slide_Variance_Fields = {
   __typename?: 'orientation_slide_variance_fields';
  order?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "orientation_slide" */
export type Orientation_Slide_Variance_Order_By = {
  order?: Maybe<Order_By>;
};

/** aggregate stddev on columns */
export type Orientation_Stddev_Fields = {
   __typename?: 'orientation_stddev_fields';
  duration_valid?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "orientation" */
export type Orientation_Stddev_Order_By = {
  duration_valid?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Orientation_Stddev_Pop_Fields = {
   __typename?: 'orientation_stddev_pop_fields';
  duration_valid?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "orientation" */
export type Orientation_Stddev_Pop_Order_By = {
  duration_valid?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Orientation_Stddev_Samp_Fields = {
   __typename?: 'orientation_stddev_samp_fields';
  duration_valid?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "orientation" */
export type Orientation_Stddev_Samp_Order_By = {
  duration_valid?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Orientation_Sum_Fields = {
   __typename?: 'orientation_sum_fields';
  duration_valid?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "orientation" */
export type Orientation_Sum_Order_By = {
  duration_valid?: Maybe<Order_By>;
};

/** update columns of table "orientation" */
export enum Orientation_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CreatedByUserId = 'created_by_user_id',
  /** column name */
  DurationValid = 'duration_valid',
  /** column name */
  GeneralContractorId = 'general_contractor_id',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  Type = 'type'
}

/** aggregate var_pop on columns */
export type Orientation_Var_Pop_Fields = {
   __typename?: 'orientation_var_pop_fields';
  duration_valid?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "orientation" */
export type Orientation_Var_Pop_Order_By = {
  duration_valid?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Orientation_Var_Samp_Fields = {
   __typename?: 'orientation_var_samp_fields';
  duration_valid?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "orientation" */
export type Orientation_Var_Samp_Order_By = {
  duration_valid?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Orientation_Variance_Fields = {
   __typename?: 'orientation_variance_fields';
  duration_valid?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "orientation" */
export type Orientation_Variance_Order_By = {
  duration_valid?: Maybe<Order_By>;
};

/** columns and relationships of "pdf" */
export type Pdf = {
   __typename?: 'pdf';
  author_id: Scalars['uuid'];
  description?: Maybe<Scalars['String']>;
  id: Scalars['uuid'];
  parent_id?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  project_post?: Maybe<Project_Post>;
  url: Scalars['String'];
};

/** aggregated selection of "pdf" */
export type Pdf_Aggregate = {
   __typename?: 'pdf_aggregate';
  aggregate?: Maybe<Pdf_Aggregate_Fields>;
  nodes: Array<Pdf>;
};

/** aggregate fields of "pdf" */
export type Pdf_Aggregate_Fields = {
   __typename?: 'pdf_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Pdf_Max_Fields>;
  min?: Maybe<Pdf_Min_Fields>;
};


/** aggregate fields of "pdf" */
export type Pdf_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Pdf_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "pdf" */
export type Pdf_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Pdf_Max_Order_By>;
  min?: Maybe<Pdf_Min_Order_By>;
};

/** input type for inserting array relation for remote table "pdf" */
export type Pdf_Arr_Rel_Insert_Input = {
  data: Array<Pdf_Insert_Input>;
  on_conflict?: Maybe<Pdf_On_Conflict>;
};

/** Boolean expression to filter rows from the table "pdf". All fields are combined with a logical 'AND'. */
export type Pdf_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Pdf_Bool_Exp>>>;
  _not?: Maybe<Pdf_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Pdf_Bool_Exp>>>;
  author_id?: Maybe<Uuid_Comparison_Exp>;
  description?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  parent_id?: Maybe<Uuid_Comparison_Exp>;
  project_post?: Maybe<Project_Post_Bool_Exp>;
  url?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "pdf" */
export enum Pdf_Constraint {
  /** unique or primary key constraint */
  PdfPkey = 'pdf_pkey'
}

/** input type for inserting data into table "pdf" */
export type Pdf_Insert_Input = {
  author_id?: Maybe<Scalars['uuid']>;
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  parent_id?: Maybe<Scalars['uuid']>;
  project_post?: Maybe<Project_Post_Obj_Rel_Insert_Input>;
  url?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Pdf_Max_Fields = {
   __typename?: 'pdf_max_fields';
  author_id?: Maybe<Scalars['uuid']>;
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  parent_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "pdf" */
export type Pdf_Max_Order_By = {
  author_id?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  parent_id?: Maybe<Order_By>;
  url?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Pdf_Min_Fields = {
   __typename?: 'pdf_min_fields';
  author_id?: Maybe<Scalars['uuid']>;
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  parent_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "pdf" */
export type Pdf_Min_Order_By = {
  author_id?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  parent_id?: Maybe<Order_By>;
  url?: Maybe<Order_By>;
};

/** response of any mutation on the table "pdf" */
export type Pdf_Mutation_Response = {
   __typename?: 'pdf_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Pdf>;
};

/** input type for inserting object relation for remote table "pdf" */
export type Pdf_Obj_Rel_Insert_Input = {
  data: Pdf_Insert_Input;
  on_conflict?: Maybe<Pdf_On_Conflict>;
};

/** on conflict condition type for table "pdf" */
export type Pdf_On_Conflict = {
  constraint: Pdf_Constraint;
  update_columns: Array<Pdf_Update_Column>;
  where?: Maybe<Pdf_Bool_Exp>;
};

/** ordering options when selecting data from "pdf" */
export type Pdf_Order_By = {
  author_id?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  parent_id?: Maybe<Order_By>;
  project_post?: Maybe<Project_Post_Order_By>;
  url?: Maybe<Order_By>;
};

/** primary key columns input for table: "pdf" */
export type Pdf_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "pdf" */
export enum Pdf_Select_Column {
  /** column name */
  AuthorId = 'author_id',
  /** column name */
  Description = 'description',
  /** column name */
  Id = 'id',
  /** column name */
  ParentId = 'parent_id',
  /** column name */
  Url = 'url'
}

/** input type for updating data in table "pdf" */
export type Pdf_Set_Input = {
  author_id?: Maybe<Scalars['uuid']>;
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  parent_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
};

/** update columns of table "pdf" */
export enum Pdf_Update_Column {
  /** column name */
  AuthorId = 'author_id',
  /** column name */
  Description = 'description',
  /** column name */
  Id = 'id',
  /** column name */
  ParentId = 'parent_id',
  /** column name */
  Url = 'url'
}

/** columns and relationships of "permit" */
export type Permit = {
   __typename?: 'permit';
  /** An object relationship */
  confined_space_permit?: Maybe<Confined_Space_Permit>;
  created_at: Scalars['timestamptz'];
  current_status: Scalars['String'];
  /** An object relationship */
  dig_permit?: Maybe<Dig_Permit>;
  /** An object relationship */
  hot_work_permit?: Maybe<Hot_Work_Permit>;
  id: Scalars['uuid'];
  /** An array relationship */
  images: Array<Image>;
  /** An aggregated array relationship */
  images_aggregate: Image_Aggregate;
  is_historical: Scalars['Boolean'];
  /** An object relationship */
  origin_permit_history?: Maybe<Permit_History>;
  /** An object relationship */
  owner_user?: Maybe<User>;
  owner_user_id?: Maybe<Scalars['uuid']>;
  /** An array relationship */
  permit_checklist_items: Array<Permit_Checklist_Item>;
  /** An aggregated array relationship */
  permit_checklist_items_aggregate: Permit_Checklist_Item_Aggregate;
  /** An array relationship */
  permit_histories: Array<Permit_History>;
  /** An aggregated array relationship */
  permit_histories_aggregate: Permit_History_Aggregate;
  /** An array relationship */
  permit_project_workers: Array<Permit_Project_Worker>;
  /** An aggregated array relationship */
  permit_project_workers_aggregate: Permit_Project_Worker_Aggregate;
  /** An array relationship */
  permit_sign_in_images: Array<Permit_Sign_In_Image>;
  /** An aggregated array relationship */
  permit_sign_in_images_aggregate: Permit_Sign_In_Image_Aggregate;
  /** An object relationship */
  project: Project;
  project_id: Scalars['uuid'];
  /** An object relationship */
  subcontractor: Subcontractor;
  subcontractor_id: Scalars['uuid'];
  type: Scalars['String'];
  updated_at: Scalars['timestamptz'];
  /** An object relationship */
  work_above_permit?: Maybe<Work_Above_Permit>;
};


/** columns and relationships of "permit" */
export type PermitImagesArgs = {
  distinct_on?: Maybe<Array<Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Image_Order_By>>;
  where?: Maybe<Image_Bool_Exp>;
};


/** columns and relationships of "permit" */
export type PermitImages_AggregateArgs = {
  distinct_on?: Maybe<Array<Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Image_Order_By>>;
  where?: Maybe<Image_Bool_Exp>;
};


/** columns and relationships of "permit" */
export type PermitPermit_Checklist_ItemsArgs = {
  distinct_on?: Maybe<Array<Permit_Checklist_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Permit_Checklist_Item_Order_By>>;
  where?: Maybe<Permit_Checklist_Item_Bool_Exp>;
};


/** columns and relationships of "permit" */
export type PermitPermit_Checklist_Items_AggregateArgs = {
  distinct_on?: Maybe<Array<Permit_Checklist_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Permit_Checklist_Item_Order_By>>;
  where?: Maybe<Permit_Checklist_Item_Bool_Exp>;
};


/** columns and relationships of "permit" */
export type PermitPermit_HistoriesArgs = {
  distinct_on?: Maybe<Array<Permit_History_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Permit_History_Order_By>>;
  where?: Maybe<Permit_History_Bool_Exp>;
};


/** columns and relationships of "permit" */
export type PermitPermit_Histories_AggregateArgs = {
  distinct_on?: Maybe<Array<Permit_History_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Permit_History_Order_By>>;
  where?: Maybe<Permit_History_Bool_Exp>;
};


/** columns and relationships of "permit" */
export type PermitPermit_Project_WorkersArgs = {
  distinct_on?: Maybe<Array<Permit_Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Permit_Project_Worker_Order_By>>;
  where?: Maybe<Permit_Project_Worker_Bool_Exp>;
};


/** columns and relationships of "permit" */
export type PermitPermit_Project_Workers_AggregateArgs = {
  distinct_on?: Maybe<Array<Permit_Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Permit_Project_Worker_Order_By>>;
  where?: Maybe<Permit_Project_Worker_Bool_Exp>;
};


/** columns and relationships of "permit" */
export type PermitPermit_Sign_In_ImagesArgs = {
  distinct_on?: Maybe<Array<Permit_Sign_In_Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Permit_Sign_In_Image_Order_By>>;
  where?: Maybe<Permit_Sign_In_Image_Bool_Exp>;
};


/** columns and relationships of "permit" */
export type PermitPermit_Sign_In_Images_AggregateArgs = {
  distinct_on?: Maybe<Array<Permit_Sign_In_Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Permit_Sign_In_Image_Order_By>>;
  where?: Maybe<Permit_Sign_In_Image_Bool_Exp>;
};

/** aggregated selection of "permit" */
export type Permit_Aggregate = {
   __typename?: 'permit_aggregate';
  aggregate?: Maybe<Permit_Aggregate_Fields>;
  nodes: Array<Permit>;
};

/** aggregate fields of "permit" */
export type Permit_Aggregate_Fields = {
   __typename?: 'permit_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Permit_Max_Fields>;
  min?: Maybe<Permit_Min_Fields>;
};


/** aggregate fields of "permit" */
export type Permit_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Permit_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "permit" */
export type Permit_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Permit_Max_Order_By>;
  min?: Maybe<Permit_Min_Order_By>;
};

/** input type for inserting array relation for remote table "permit" */
export type Permit_Arr_Rel_Insert_Input = {
  data: Array<Permit_Insert_Input>;
  on_conflict?: Maybe<Permit_On_Conflict>;
};

/** Boolean expression to filter rows from the table "permit". All fields are combined with a logical 'AND'. */
export type Permit_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Permit_Bool_Exp>>>;
  _not?: Maybe<Permit_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Permit_Bool_Exp>>>;
  confined_space_permit?: Maybe<Confined_Space_Permit_Bool_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  current_status?: Maybe<String_Comparison_Exp>;
  dig_permit?: Maybe<Dig_Permit_Bool_Exp>;
  hot_work_permit?: Maybe<Hot_Work_Permit_Bool_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  images?: Maybe<Image_Bool_Exp>;
  is_historical?: Maybe<Boolean_Comparison_Exp>;
  origin_permit_history?: Maybe<Permit_History_Bool_Exp>;
  owner_user?: Maybe<User_Bool_Exp>;
  owner_user_id?: Maybe<Uuid_Comparison_Exp>;
  permit_checklist_items?: Maybe<Permit_Checklist_Item_Bool_Exp>;
  permit_histories?: Maybe<Permit_History_Bool_Exp>;
  permit_project_workers?: Maybe<Permit_Project_Worker_Bool_Exp>;
  permit_sign_in_images?: Maybe<Permit_Sign_In_Image_Bool_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  subcontractor?: Maybe<Subcontractor_Bool_Exp>;
  subcontractor_id?: Maybe<Uuid_Comparison_Exp>;
  type?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  work_above_permit?: Maybe<Work_Above_Permit_Bool_Exp>;
};

/**
 * item_type identifies what type of item this is. permit is a normal checklist
 * item, closing  comes up when a permit is being closed
 * 
 * 
 * columns and relationships of "permit_checklist_item"
 */
export type Permit_Checklist_Item = {
   __typename?: 'permit_checklist_item';
  created_at: Scalars['timestamptz'];
  deleted_at?: Maybe<Scalars['timestamptz']>;
  /** An object relationship */
  description: Text_Translation;
  description_id: Scalars['uuid'];
  description_text: Scalars['String'];
  /** An object relationship */
  general_contractor?: Maybe<General_Contractor>;
  general_contractor_id?: Maybe<Scalars['uuid']>;
  id: Scalars['uuid'];
  item_type: Scalars['String'];
  na_enabled: Scalars['Boolean'];
  no_enabled: Scalars['Boolean'];
  option_response?: Maybe<Scalars['String']>;
  /** An object relationship */
  permit?: Maybe<Permit>;
  permit_id?: Maybe<Scalars['uuid']>;
  permit_type: Scalars['String'];
  sort_index: Scalars['numeric'];
  text_enabled: Scalars['Boolean'];
  text_required?: Maybe<Scalars['Boolean']>;
  /** An object relationship */
  text_response?: Maybe<Text_Translation>;
  text_response_id?: Maybe<Scalars['uuid']>;
  text_response_text?: Maybe<Scalars['String']>;
  updated_at: Scalars['timestamptz'];
  yes_enabled: Scalars['Boolean'];
};

/** aggregated selection of "permit_checklist_item" */
export type Permit_Checklist_Item_Aggregate = {
   __typename?: 'permit_checklist_item_aggregate';
  aggregate?: Maybe<Permit_Checklist_Item_Aggregate_Fields>;
  nodes: Array<Permit_Checklist_Item>;
};

/** aggregate fields of "permit_checklist_item" */
export type Permit_Checklist_Item_Aggregate_Fields = {
   __typename?: 'permit_checklist_item_aggregate_fields';
  avg?: Maybe<Permit_Checklist_Item_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Permit_Checklist_Item_Max_Fields>;
  min?: Maybe<Permit_Checklist_Item_Min_Fields>;
  stddev?: Maybe<Permit_Checklist_Item_Stddev_Fields>;
  stddev_pop?: Maybe<Permit_Checklist_Item_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Permit_Checklist_Item_Stddev_Samp_Fields>;
  sum?: Maybe<Permit_Checklist_Item_Sum_Fields>;
  var_pop?: Maybe<Permit_Checklist_Item_Var_Pop_Fields>;
  var_samp?: Maybe<Permit_Checklist_Item_Var_Samp_Fields>;
  variance?: Maybe<Permit_Checklist_Item_Variance_Fields>;
};


/** aggregate fields of "permit_checklist_item" */
export type Permit_Checklist_Item_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Permit_Checklist_Item_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "permit_checklist_item" */
export type Permit_Checklist_Item_Aggregate_Order_By = {
  avg?: Maybe<Permit_Checklist_Item_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Permit_Checklist_Item_Max_Order_By>;
  min?: Maybe<Permit_Checklist_Item_Min_Order_By>;
  stddev?: Maybe<Permit_Checklist_Item_Stddev_Order_By>;
  stddev_pop?: Maybe<Permit_Checklist_Item_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Permit_Checklist_Item_Stddev_Samp_Order_By>;
  sum?: Maybe<Permit_Checklist_Item_Sum_Order_By>;
  var_pop?: Maybe<Permit_Checklist_Item_Var_Pop_Order_By>;
  var_samp?: Maybe<Permit_Checklist_Item_Var_Samp_Order_By>;
  variance?: Maybe<Permit_Checklist_Item_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "permit_checklist_item" */
export type Permit_Checklist_Item_Arr_Rel_Insert_Input = {
  data: Array<Permit_Checklist_Item_Insert_Input>;
  on_conflict?: Maybe<Permit_Checklist_Item_On_Conflict>;
};

/** aggregate avg on columns */
export type Permit_Checklist_Item_Avg_Fields = {
   __typename?: 'permit_checklist_item_avg_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "permit_checklist_item" */
export type Permit_Checklist_Item_Avg_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "permit_checklist_item". All fields are combined with a logical 'AND'. */
export type Permit_Checklist_Item_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Permit_Checklist_Item_Bool_Exp>>>;
  _not?: Maybe<Permit_Checklist_Item_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Permit_Checklist_Item_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  deleted_at?: Maybe<Timestamptz_Comparison_Exp>;
  description?: Maybe<Text_Translation_Bool_Exp>;
  description_id?: Maybe<Uuid_Comparison_Exp>;
  description_text?: Maybe<String_Comparison_Exp>;
  general_contractor?: Maybe<General_Contractor_Bool_Exp>;
  general_contractor_id?: Maybe<Uuid_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  item_type?: Maybe<String_Comparison_Exp>;
  na_enabled?: Maybe<Boolean_Comparison_Exp>;
  no_enabled?: Maybe<Boolean_Comparison_Exp>;
  option_response?: Maybe<String_Comparison_Exp>;
  permit?: Maybe<Permit_Bool_Exp>;
  permit_id?: Maybe<Uuid_Comparison_Exp>;
  permit_type?: Maybe<String_Comparison_Exp>;
  sort_index?: Maybe<Numeric_Comparison_Exp>;
  text_enabled?: Maybe<Boolean_Comparison_Exp>;
  text_required?: Maybe<Boolean_Comparison_Exp>;
  text_response?: Maybe<Text_Translation_Bool_Exp>;
  text_response_id?: Maybe<Uuid_Comparison_Exp>;
  text_response_text?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  yes_enabled?: Maybe<Boolean_Comparison_Exp>;
};

/** unique or primary key constraints on table "permit_checklist_item" */
export enum Permit_Checklist_Item_Constraint {
  /** unique or primary key constraint */
  GeneralContractorHotWorkPermitChecklistQuestionPkey = 'general_contractor_hot_work_permit_checklist_question_pkey'
}

/** input type for incrementing integer column in table "permit_checklist_item" */
export type Permit_Checklist_Item_Inc_Input = {
  sort_index?: Maybe<Scalars['numeric']>;
};

/** input type for inserting data into table "permit_checklist_item" */
export type Permit_Checklist_Item_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  deleted_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  description_id?: Maybe<Scalars['uuid']>;
  description_text?: Maybe<Scalars['String']>;
  general_contractor?: Maybe<General_Contractor_Obj_Rel_Insert_Input>;
  general_contractor_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  item_type?: Maybe<Scalars['String']>;
  na_enabled?: Maybe<Scalars['Boolean']>;
  no_enabled?: Maybe<Scalars['Boolean']>;
  option_response?: Maybe<Scalars['String']>;
  permit?: Maybe<Permit_Obj_Rel_Insert_Input>;
  permit_id?: Maybe<Scalars['uuid']>;
  permit_type?: Maybe<Scalars['String']>;
  sort_index?: Maybe<Scalars['numeric']>;
  text_enabled?: Maybe<Scalars['Boolean']>;
  text_required?: Maybe<Scalars['Boolean']>;
  text_response?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  text_response_id?: Maybe<Scalars['uuid']>;
  text_response_text?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  yes_enabled?: Maybe<Scalars['Boolean']>;
};

/** aggregate max on columns */
export type Permit_Checklist_Item_Max_Fields = {
   __typename?: 'permit_checklist_item_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  deleted_at?: Maybe<Scalars['timestamptz']>;
  description_id?: Maybe<Scalars['uuid']>;
  description_text?: Maybe<Scalars['String']>;
  general_contractor_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  item_type?: Maybe<Scalars['String']>;
  option_response?: Maybe<Scalars['String']>;
  permit_id?: Maybe<Scalars['uuid']>;
  permit_type?: Maybe<Scalars['String']>;
  sort_index?: Maybe<Scalars['numeric']>;
  text_response_id?: Maybe<Scalars['uuid']>;
  text_response_text?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** order by max() on columns of table "permit_checklist_item" */
export type Permit_Checklist_Item_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  deleted_at?: Maybe<Order_By>;
  description_id?: Maybe<Order_By>;
  description_text?: Maybe<Order_By>;
  general_contractor_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  item_type?: Maybe<Order_By>;
  option_response?: Maybe<Order_By>;
  permit_id?: Maybe<Order_By>;
  permit_type?: Maybe<Order_By>;
  sort_index?: Maybe<Order_By>;
  text_response_id?: Maybe<Order_By>;
  text_response_text?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Permit_Checklist_Item_Min_Fields = {
   __typename?: 'permit_checklist_item_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  deleted_at?: Maybe<Scalars['timestamptz']>;
  description_id?: Maybe<Scalars['uuid']>;
  description_text?: Maybe<Scalars['String']>;
  general_contractor_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  item_type?: Maybe<Scalars['String']>;
  option_response?: Maybe<Scalars['String']>;
  permit_id?: Maybe<Scalars['uuid']>;
  permit_type?: Maybe<Scalars['String']>;
  sort_index?: Maybe<Scalars['numeric']>;
  text_response_id?: Maybe<Scalars['uuid']>;
  text_response_text?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** order by min() on columns of table "permit_checklist_item" */
export type Permit_Checklist_Item_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  deleted_at?: Maybe<Order_By>;
  description_id?: Maybe<Order_By>;
  description_text?: Maybe<Order_By>;
  general_contractor_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  item_type?: Maybe<Order_By>;
  option_response?: Maybe<Order_By>;
  permit_id?: Maybe<Order_By>;
  permit_type?: Maybe<Order_By>;
  sort_index?: Maybe<Order_By>;
  text_response_id?: Maybe<Order_By>;
  text_response_text?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** response of any mutation on the table "permit_checklist_item" */
export type Permit_Checklist_Item_Mutation_Response = {
   __typename?: 'permit_checklist_item_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Permit_Checklist_Item>;
};

/** input type for inserting object relation for remote table "permit_checklist_item" */
export type Permit_Checklist_Item_Obj_Rel_Insert_Input = {
  data: Permit_Checklist_Item_Insert_Input;
  on_conflict?: Maybe<Permit_Checklist_Item_On_Conflict>;
};

/** on conflict condition type for table "permit_checklist_item" */
export type Permit_Checklist_Item_On_Conflict = {
  constraint: Permit_Checklist_Item_Constraint;
  update_columns: Array<Permit_Checklist_Item_Update_Column>;
  where?: Maybe<Permit_Checklist_Item_Bool_Exp>;
};

/** ordering options when selecting data from "permit_checklist_item" */
export type Permit_Checklist_Item_Order_By = {
  created_at?: Maybe<Order_By>;
  deleted_at?: Maybe<Order_By>;
  description?: Maybe<Text_Translation_Order_By>;
  description_id?: Maybe<Order_By>;
  description_text?: Maybe<Order_By>;
  general_contractor?: Maybe<General_Contractor_Order_By>;
  general_contractor_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  item_type?: Maybe<Order_By>;
  na_enabled?: Maybe<Order_By>;
  no_enabled?: Maybe<Order_By>;
  option_response?: Maybe<Order_By>;
  permit?: Maybe<Permit_Order_By>;
  permit_id?: Maybe<Order_By>;
  permit_type?: Maybe<Order_By>;
  sort_index?: Maybe<Order_By>;
  text_enabled?: Maybe<Order_By>;
  text_required?: Maybe<Order_By>;
  text_response?: Maybe<Text_Translation_Order_By>;
  text_response_id?: Maybe<Order_By>;
  text_response_text?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  yes_enabled?: Maybe<Order_By>;
};

/** primary key columns input for table: "permit_checklist_item" */
export type Permit_Checklist_Item_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "permit_checklist_item" */
export enum Permit_Checklist_Item_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DeletedAt = 'deleted_at',
  /** column name */
  DescriptionId = 'description_id',
  /** column name */
  DescriptionText = 'description_text',
  /** column name */
  GeneralContractorId = 'general_contractor_id',
  /** column name */
  Id = 'id',
  /** column name */
  ItemType = 'item_type',
  /** column name */
  NaEnabled = 'na_enabled',
  /** column name */
  NoEnabled = 'no_enabled',
  /** column name */
  OptionResponse = 'option_response',
  /** column name */
  PermitId = 'permit_id',
  /** column name */
  PermitType = 'permit_type',
  /** column name */
  SortIndex = 'sort_index',
  /** column name */
  TextEnabled = 'text_enabled',
  /** column name */
  TextRequired = 'text_required',
  /** column name */
  TextResponseId = 'text_response_id',
  /** column name */
  TextResponseText = 'text_response_text',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  YesEnabled = 'yes_enabled'
}

/** input type for updating data in table "permit_checklist_item" */
export type Permit_Checklist_Item_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  deleted_at?: Maybe<Scalars['timestamptz']>;
  description_id?: Maybe<Scalars['uuid']>;
  description_text?: Maybe<Scalars['String']>;
  general_contractor_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  item_type?: Maybe<Scalars['String']>;
  na_enabled?: Maybe<Scalars['Boolean']>;
  no_enabled?: Maybe<Scalars['Boolean']>;
  option_response?: Maybe<Scalars['String']>;
  permit_id?: Maybe<Scalars['uuid']>;
  permit_type?: Maybe<Scalars['String']>;
  sort_index?: Maybe<Scalars['numeric']>;
  text_enabled?: Maybe<Scalars['Boolean']>;
  text_required?: Maybe<Scalars['Boolean']>;
  text_response_id?: Maybe<Scalars['uuid']>;
  text_response_text?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  yes_enabled?: Maybe<Scalars['Boolean']>;
};

/** aggregate stddev on columns */
export type Permit_Checklist_Item_Stddev_Fields = {
   __typename?: 'permit_checklist_item_stddev_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "permit_checklist_item" */
export type Permit_Checklist_Item_Stddev_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Permit_Checklist_Item_Stddev_Pop_Fields = {
   __typename?: 'permit_checklist_item_stddev_pop_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "permit_checklist_item" */
export type Permit_Checklist_Item_Stddev_Pop_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Permit_Checklist_Item_Stddev_Samp_Fields = {
   __typename?: 'permit_checklist_item_stddev_samp_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "permit_checklist_item" */
export type Permit_Checklist_Item_Stddev_Samp_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Permit_Checklist_Item_Sum_Fields = {
   __typename?: 'permit_checklist_item_sum_fields';
  sort_index?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "permit_checklist_item" */
export type Permit_Checklist_Item_Sum_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** update columns of table "permit_checklist_item" */
export enum Permit_Checklist_Item_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DeletedAt = 'deleted_at',
  /** column name */
  DescriptionId = 'description_id',
  /** column name */
  DescriptionText = 'description_text',
  /** column name */
  GeneralContractorId = 'general_contractor_id',
  /** column name */
  Id = 'id',
  /** column name */
  ItemType = 'item_type',
  /** column name */
  NaEnabled = 'na_enabled',
  /** column name */
  NoEnabled = 'no_enabled',
  /** column name */
  OptionResponse = 'option_response',
  /** column name */
  PermitId = 'permit_id',
  /** column name */
  PermitType = 'permit_type',
  /** column name */
  SortIndex = 'sort_index',
  /** column name */
  TextEnabled = 'text_enabled',
  /** column name */
  TextRequired = 'text_required',
  /** column name */
  TextResponseId = 'text_response_id',
  /** column name */
  TextResponseText = 'text_response_text',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  YesEnabled = 'yes_enabled'
}

/** aggregate var_pop on columns */
export type Permit_Checklist_Item_Var_Pop_Fields = {
   __typename?: 'permit_checklist_item_var_pop_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "permit_checklist_item" */
export type Permit_Checklist_Item_Var_Pop_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Permit_Checklist_Item_Var_Samp_Fields = {
   __typename?: 'permit_checklist_item_var_samp_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "permit_checklist_item" */
export type Permit_Checklist_Item_Var_Samp_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Permit_Checklist_Item_Variance_Fields = {
   __typename?: 'permit_checklist_item_variance_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "permit_checklist_item" */
export type Permit_Checklist_Item_Variance_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** unique or primary key constraints on table "permit" */
export enum Permit_Constraint {
  /** unique or primary key constraint */
  PermitPkey1 = 'permit_pkey1'
}

/** columns and relationships of "permit_history" */
export type Permit_History = {
   __typename?: 'permit_history';
  /** An object relationship */
  comment?: Maybe<Text_Translation>;
  comment_id?: Maybe<Scalars['uuid']>;
  comment_text?: Maybe<Scalars['String']>;
  created_at: Scalars['timestamptz'];
  /** An object relationship */
  created_by_user: User;
  created_by_user_id: Scalars['uuid'];
  /** An object relationship */
  historical_permit: Permit;
  historical_permit_id: Scalars['uuid'];
  id: Scalars['uuid'];
  /** An array relationship */
  images: Array<Image>;
  /** An aggregated array relationship */
  images_aggregate: Image_Aggregate;
  outside_project_location?: Maybe<Scalars['Boolean']>;
  /** An object relationship */
  permit: Permit;
  permit_id: Scalars['uuid'];
  /** An object relationship */
  signature_image?: Maybe<Image>;
  signature_image_id?: Maybe<Scalars['uuid']>;
  status: Scalars['String'];
  updated_location?: Maybe<Scalars['Boolean']>;
};


/** columns and relationships of "permit_history" */
export type Permit_HistoryImagesArgs = {
  distinct_on?: Maybe<Array<Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Image_Order_By>>;
  where?: Maybe<Image_Bool_Exp>;
};


/** columns and relationships of "permit_history" */
export type Permit_HistoryImages_AggregateArgs = {
  distinct_on?: Maybe<Array<Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Image_Order_By>>;
  where?: Maybe<Image_Bool_Exp>;
};

/** aggregated selection of "permit_history" */
export type Permit_History_Aggregate = {
   __typename?: 'permit_history_aggregate';
  aggregate?: Maybe<Permit_History_Aggregate_Fields>;
  nodes: Array<Permit_History>;
};

/** aggregate fields of "permit_history" */
export type Permit_History_Aggregate_Fields = {
   __typename?: 'permit_history_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Permit_History_Max_Fields>;
  min?: Maybe<Permit_History_Min_Fields>;
};


/** aggregate fields of "permit_history" */
export type Permit_History_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Permit_History_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "permit_history" */
export type Permit_History_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Permit_History_Max_Order_By>;
  min?: Maybe<Permit_History_Min_Order_By>;
};

/** input type for inserting array relation for remote table "permit_history" */
export type Permit_History_Arr_Rel_Insert_Input = {
  data: Array<Permit_History_Insert_Input>;
  on_conflict?: Maybe<Permit_History_On_Conflict>;
};

/** Boolean expression to filter rows from the table "permit_history". All fields are combined with a logical 'AND'. */
export type Permit_History_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Permit_History_Bool_Exp>>>;
  _not?: Maybe<Permit_History_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Permit_History_Bool_Exp>>>;
  comment?: Maybe<Text_Translation_Bool_Exp>;
  comment_id?: Maybe<Uuid_Comparison_Exp>;
  comment_text?: Maybe<String_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  created_by_user?: Maybe<User_Bool_Exp>;
  created_by_user_id?: Maybe<Uuid_Comparison_Exp>;
  historical_permit?: Maybe<Permit_Bool_Exp>;
  historical_permit_id?: Maybe<Uuid_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  images?: Maybe<Image_Bool_Exp>;
  outside_project_location?: Maybe<Boolean_Comparison_Exp>;
  permit?: Maybe<Permit_Bool_Exp>;
  permit_id?: Maybe<Uuid_Comparison_Exp>;
  signature_image?: Maybe<Image_Bool_Exp>;
  signature_image_id?: Maybe<Uuid_Comparison_Exp>;
  status?: Maybe<String_Comparison_Exp>;
  updated_location?: Maybe<Boolean_Comparison_Exp>;
};

/** unique or primary key constraints on table "permit_history" */
export enum Permit_History_Constraint {
  /** unique or primary key constraint */
  PermitHistoryHistoricalPermitIdKey = 'permit_history_historical_permit_id_key',
  /** unique or primary key constraint */
  PermitHistoryPkey = 'permit_history_pkey'
}

/** input type for inserting data into table "permit_history" */
export type Permit_History_Insert_Input = {
  comment?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  comment_id?: Maybe<Scalars['uuid']>;
  comment_text?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user?: Maybe<User_Obj_Rel_Insert_Input>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  historical_permit?: Maybe<Permit_Obj_Rel_Insert_Input>;
  historical_permit_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  images?: Maybe<Image_Arr_Rel_Insert_Input>;
  outside_project_location?: Maybe<Scalars['Boolean']>;
  permit?: Maybe<Permit_Obj_Rel_Insert_Input>;
  permit_id?: Maybe<Scalars['uuid']>;
  signature_image?: Maybe<Image_Obj_Rel_Insert_Input>;
  signature_image_id?: Maybe<Scalars['uuid']>;
  status?: Maybe<Scalars['String']>;
  updated_location?: Maybe<Scalars['Boolean']>;
};

/** aggregate max on columns */
export type Permit_History_Max_Fields = {
   __typename?: 'permit_history_max_fields';
  comment_id?: Maybe<Scalars['uuid']>;
  comment_text?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  historical_permit_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  permit_id?: Maybe<Scalars['uuid']>;
  signature_image_id?: Maybe<Scalars['uuid']>;
  status?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "permit_history" */
export type Permit_History_Max_Order_By = {
  comment_id?: Maybe<Order_By>;
  comment_text?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  created_by_user_id?: Maybe<Order_By>;
  historical_permit_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  permit_id?: Maybe<Order_By>;
  signature_image_id?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Permit_History_Min_Fields = {
   __typename?: 'permit_history_min_fields';
  comment_id?: Maybe<Scalars['uuid']>;
  comment_text?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  historical_permit_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  permit_id?: Maybe<Scalars['uuid']>;
  signature_image_id?: Maybe<Scalars['uuid']>;
  status?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "permit_history" */
export type Permit_History_Min_Order_By = {
  comment_id?: Maybe<Order_By>;
  comment_text?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  created_by_user_id?: Maybe<Order_By>;
  historical_permit_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  permit_id?: Maybe<Order_By>;
  signature_image_id?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
};

/** response of any mutation on the table "permit_history" */
export type Permit_History_Mutation_Response = {
   __typename?: 'permit_history_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Permit_History>;
};

/** input type for inserting object relation for remote table "permit_history" */
export type Permit_History_Obj_Rel_Insert_Input = {
  data: Permit_History_Insert_Input;
  on_conflict?: Maybe<Permit_History_On_Conflict>;
};

/** on conflict condition type for table "permit_history" */
export type Permit_History_On_Conflict = {
  constraint: Permit_History_Constraint;
  update_columns: Array<Permit_History_Update_Column>;
  where?: Maybe<Permit_History_Bool_Exp>;
};

/** ordering options when selecting data from "permit_history" */
export type Permit_History_Order_By = {
  comment?: Maybe<Text_Translation_Order_By>;
  comment_id?: Maybe<Order_By>;
  comment_text?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  created_by_user?: Maybe<User_Order_By>;
  created_by_user_id?: Maybe<Order_By>;
  historical_permit?: Maybe<Permit_Order_By>;
  historical_permit_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  images_aggregate?: Maybe<Image_Aggregate_Order_By>;
  outside_project_location?: Maybe<Order_By>;
  permit?: Maybe<Permit_Order_By>;
  permit_id?: Maybe<Order_By>;
  signature_image?: Maybe<Image_Order_By>;
  signature_image_id?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
  updated_location?: Maybe<Order_By>;
};

/** primary key columns input for table: "permit_history" */
export type Permit_History_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "permit_history" */
export enum Permit_History_Select_Column {
  /** column name */
  CommentId = 'comment_id',
  /** column name */
  CommentText = 'comment_text',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CreatedByUserId = 'created_by_user_id',
  /** column name */
  HistoricalPermitId = 'historical_permit_id',
  /** column name */
  Id = 'id',
  /** column name */
  OutsideProjectLocation = 'outside_project_location',
  /** column name */
  PermitId = 'permit_id',
  /** column name */
  SignatureImageId = 'signature_image_id',
  /** column name */
  Status = 'status',
  /** column name */
  UpdatedLocation = 'updated_location'
}

/** input type for updating data in table "permit_history" */
export type Permit_History_Set_Input = {
  comment_id?: Maybe<Scalars['uuid']>;
  comment_text?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  historical_permit_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  outside_project_location?: Maybe<Scalars['Boolean']>;
  permit_id?: Maybe<Scalars['uuid']>;
  signature_image_id?: Maybe<Scalars['uuid']>;
  status?: Maybe<Scalars['String']>;
  updated_location?: Maybe<Scalars['Boolean']>;
};

/** update columns of table "permit_history" */
export enum Permit_History_Update_Column {
  /** column name */
  CommentId = 'comment_id',
  /** column name */
  CommentText = 'comment_text',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CreatedByUserId = 'created_by_user_id',
  /** column name */
  HistoricalPermitId = 'historical_permit_id',
  /** column name */
  Id = 'id',
  /** column name */
  OutsideProjectLocation = 'outside_project_location',
  /** column name */
  PermitId = 'permit_id',
  /** column name */
  SignatureImageId = 'signature_image_id',
  /** column name */
  Status = 'status',
  /** column name */
  UpdatedLocation = 'updated_location'
}

/** input type for inserting data into table "permit" */
export type Permit_Insert_Input = {
  confined_space_permit?: Maybe<Confined_Space_Permit_Obj_Rel_Insert_Input>;
  created_at?: Maybe<Scalars['timestamptz']>;
  current_status?: Maybe<Scalars['String']>;
  dig_permit?: Maybe<Dig_Permit_Obj_Rel_Insert_Input>;
  hot_work_permit?: Maybe<Hot_Work_Permit_Obj_Rel_Insert_Input>;
  id?: Maybe<Scalars['uuid']>;
  images?: Maybe<Image_Arr_Rel_Insert_Input>;
  is_historical?: Maybe<Scalars['Boolean']>;
  origin_permit_history?: Maybe<Permit_History_Obj_Rel_Insert_Input>;
  owner_user?: Maybe<User_Obj_Rel_Insert_Input>;
  owner_user_id?: Maybe<Scalars['uuid']>;
  permit_checklist_items?: Maybe<Permit_Checklist_Item_Arr_Rel_Insert_Input>;
  permit_histories?: Maybe<Permit_History_Arr_Rel_Insert_Input>;
  permit_project_workers?: Maybe<Permit_Project_Worker_Arr_Rel_Insert_Input>;
  permit_sign_in_images?: Maybe<Permit_Sign_In_Image_Arr_Rel_Insert_Input>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor?: Maybe<Subcontractor_Obj_Rel_Insert_Input>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  work_above_permit?: Maybe<Work_Above_Permit_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Permit_Max_Fields = {
   __typename?: 'permit_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  current_status?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  owner_user_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** order by max() on columns of table "permit" */
export type Permit_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  current_status?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  owner_user_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Permit_Min_Fields = {
   __typename?: 'permit_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  current_status?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  owner_user_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** order by min() on columns of table "permit" */
export type Permit_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  current_status?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  owner_user_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** response of any mutation on the table "permit" */
export type Permit_Mutation_Response = {
   __typename?: 'permit_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Permit>;
};

/** input type for inserting object relation for remote table "permit" */
export type Permit_Obj_Rel_Insert_Input = {
  data: Permit_Insert_Input;
  on_conflict?: Maybe<Permit_On_Conflict>;
};

/** on conflict condition type for table "permit" */
export type Permit_On_Conflict = {
  constraint: Permit_Constraint;
  update_columns: Array<Permit_Update_Column>;
  where?: Maybe<Permit_Bool_Exp>;
};

/** ordering options when selecting data from "permit" */
export type Permit_Order_By = {
  confined_space_permit?: Maybe<Confined_Space_Permit_Order_By>;
  created_at?: Maybe<Order_By>;
  current_status?: Maybe<Order_By>;
  dig_permit?: Maybe<Dig_Permit_Order_By>;
  hot_work_permit?: Maybe<Hot_Work_Permit_Order_By>;
  id?: Maybe<Order_By>;
  images_aggregate?: Maybe<Image_Aggregate_Order_By>;
  is_historical?: Maybe<Order_By>;
  origin_permit_history?: Maybe<Permit_History_Order_By>;
  owner_user?: Maybe<User_Order_By>;
  owner_user_id?: Maybe<Order_By>;
  permit_checklist_items_aggregate?: Maybe<Permit_Checklist_Item_Aggregate_Order_By>;
  permit_histories_aggregate?: Maybe<Permit_History_Aggregate_Order_By>;
  permit_project_workers_aggregate?: Maybe<Permit_Project_Worker_Aggregate_Order_By>;
  permit_sign_in_images_aggregate?: Maybe<Permit_Sign_In_Image_Aggregate_Order_By>;
  project?: Maybe<Project_Order_By>;
  project_id?: Maybe<Order_By>;
  subcontractor?: Maybe<Subcontractor_Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  work_above_permit?: Maybe<Work_Above_Permit_Order_By>;
};

/** primary key columns input for table: "permit" */
export type Permit_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** columns and relationships of "permit_project_worker" */
export type Permit_Project_Worker = {
   __typename?: 'permit_project_worker';
  created_at: Scalars['timestamptz'];
  id: Scalars['uuid'];
  /** An object relationship */
  permit: Permit;
  permit_id: Scalars['uuid'];
  /** An object relationship */
  project_worker: Project_Worker;
  project_worker_id: Scalars['uuid'];
  /** An object relationship */
  signature_image?: Maybe<Image>;
  signature_image_id?: Maybe<Scalars['uuid']>;
  type: Scalars['String'];
};

/** aggregated selection of "permit_project_worker" */
export type Permit_Project_Worker_Aggregate = {
   __typename?: 'permit_project_worker_aggregate';
  aggregate?: Maybe<Permit_Project_Worker_Aggregate_Fields>;
  nodes: Array<Permit_Project_Worker>;
};

/** aggregate fields of "permit_project_worker" */
export type Permit_Project_Worker_Aggregate_Fields = {
   __typename?: 'permit_project_worker_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Permit_Project_Worker_Max_Fields>;
  min?: Maybe<Permit_Project_Worker_Min_Fields>;
};


/** aggregate fields of "permit_project_worker" */
export type Permit_Project_Worker_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Permit_Project_Worker_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "permit_project_worker" */
export type Permit_Project_Worker_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Permit_Project_Worker_Max_Order_By>;
  min?: Maybe<Permit_Project_Worker_Min_Order_By>;
};

/** input type for inserting array relation for remote table "permit_project_worker" */
export type Permit_Project_Worker_Arr_Rel_Insert_Input = {
  data: Array<Permit_Project_Worker_Insert_Input>;
  on_conflict?: Maybe<Permit_Project_Worker_On_Conflict>;
};

/** Boolean expression to filter rows from the table "permit_project_worker". All fields are combined with a logical 'AND'. */
export type Permit_Project_Worker_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Permit_Project_Worker_Bool_Exp>>>;
  _not?: Maybe<Permit_Project_Worker_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Permit_Project_Worker_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  permit?: Maybe<Permit_Bool_Exp>;
  permit_id?: Maybe<Uuid_Comparison_Exp>;
  project_worker?: Maybe<Project_Worker_Bool_Exp>;
  project_worker_id?: Maybe<Uuid_Comparison_Exp>;
  signature_image?: Maybe<Image_Bool_Exp>;
  signature_image_id?: Maybe<Uuid_Comparison_Exp>;
  type?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "permit_project_worker" */
export enum Permit_Project_Worker_Constraint {
  /** unique or primary key constraint */
  PermitProjectWorkerPkey = 'permit_project_worker_pkey'
}

/** input type for inserting data into table "permit_project_worker" */
export type Permit_Project_Worker_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  permit?: Maybe<Permit_Obj_Rel_Insert_Input>;
  permit_id?: Maybe<Scalars['uuid']>;
  project_worker?: Maybe<Project_Worker_Obj_Rel_Insert_Input>;
  project_worker_id?: Maybe<Scalars['uuid']>;
  signature_image?: Maybe<Image_Obj_Rel_Insert_Input>;
  signature_image_id?: Maybe<Scalars['uuid']>;
  type?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Permit_Project_Worker_Max_Fields = {
   __typename?: 'permit_project_worker_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  permit_id?: Maybe<Scalars['uuid']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
  signature_image_id?: Maybe<Scalars['uuid']>;
  type?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "permit_project_worker" */
export type Permit_Project_Worker_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  permit_id?: Maybe<Order_By>;
  project_worker_id?: Maybe<Order_By>;
  signature_image_id?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Permit_Project_Worker_Min_Fields = {
   __typename?: 'permit_project_worker_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  permit_id?: Maybe<Scalars['uuid']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
  signature_image_id?: Maybe<Scalars['uuid']>;
  type?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "permit_project_worker" */
export type Permit_Project_Worker_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  permit_id?: Maybe<Order_By>;
  project_worker_id?: Maybe<Order_By>;
  signature_image_id?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
};

/** response of any mutation on the table "permit_project_worker" */
export type Permit_Project_Worker_Mutation_Response = {
   __typename?: 'permit_project_worker_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Permit_Project_Worker>;
};

/** input type for inserting object relation for remote table "permit_project_worker" */
export type Permit_Project_Worker_Obj_Rel_Insert_Input = {
  data: Permit_Project_Worker_Insert_Input;
  on_conflict?: Maybe<Permit_Project_Worker_On_Conflict>;
};

/** on conflict condition type for table "permit_project_worker" */
export type Permit_Project_Worker_On_Conflict = {
  constraint: Permit_Project_Worker_Constraint;
  update_columns: Array<Permit_Project_Worker_Update_Column>;
  where?: Maybe<Permit_Project_Worker_Bool_Exp>;
};

/** ordering options when selecting data from "permit_project_worker" */
export type Permit_Project_Worker_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  permit?: Maybe<Permit_Order_By>;
  permit_id?: Maybe<Order_By>;
  project_worker?: Maybe<Project_Worker_Order_By>;
  project_worker_id?: Maybe<Order_By>;
  signature_image?: Maybe<Image_Order_By>;
  signature_image_id?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
};

/** primary key columns input for table: "permit_project_worker" */
export type Permit_Project_Worker_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "permit_project_worker" */
export enum Permit_Project_Worker_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  PermitId = 'permit_id',
  /** column name */
  ProjectWorkerId = 'project_worker_id',
  /** column name */
  SignatureImageId = 'signature_image_id',
  /** column name */
  Type = 'type'
}

/** input type for updating data in table "permit_project_worker" */
export type Permit_Project_Worker_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  permit_id?: Maybe<Scalars['uuid']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
  signature_image_id?: Maybe<Scalars['uuid']>;
  type?: Maybe<Scalars['String']>;
};

/** update columns of table "permit_project_worker" */
export enum Permit_Project_Worker_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  PermitId = 'permit_id',
  /** column name */
  ProjectWorkerId = 'project_worker_id',
  /** column name */
  SignatureImageId = 'signature_image_id',
  /** column name */
  Type = 'type'
}

/** select columns of table "permit" */
export enum Permit_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CurrentStatus = 'current_status',
  /** column name */
  Id = 'id',
  /** column name */
  IsHistorical = 'is_historical',
  /** column name */
  OwnerUserId = 'owner_user_id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  Type = 'type',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** input type for updating data in table "permit" */
export type Permit_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  current_status?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  is_historical?: Maybe<Scalars['Boolean']>;
  owner_user_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** columns and relationships of "permit_sign_in_image" */
export type Permit_Sign_In_Image = {
   __typename?: 'permit_sign_in_image';
  /** An object relationship */
  image: Image;
  image_id: Scalars['uuid'];
  /** An object relationship */
  permit: Permit;
  permit_id: Scalars['uuid'];
};

/** aggregated selection of "permit_sign_in_image" */
export type Permit_Sign_In_Image_Aggregate = {
   __typename?: 'permit_sign_in_image_aggregate';
  aggregate?: Maybe<Permit_Sign_In_Image_Aggregate_Fields>;
  nodes: Array<Permit_Sign_In_Image>;
};

/** aggregate fields of "permit_sign_in_image" */
export type Permit_Sign_In_Image_Aggregate_Fields = {
   __typename?: 'permit_sign_in_image_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Permit_Sign_In_Image_Max_Fields>;
  min?: Maybe<Permit_Sign_In_Image_Min_Fields>;
};


/** aggregate fields of "permit_sign_in_image" */
export type Permit_Sign_In_Image_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Permit_Sign_In_Image_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "permit_sign_in_image" */
export type Permit_Sign_In_Image_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Permit_Sign_In_Image_Max_Order_By>;
  min?: Maybe<Permit_Sign_In_Image_Min_Order_By>;
};

/** input type for inserting array relation for remote table "permit_sign_in_image" */
export type Permit_Sign_In_Image_Arr_Rel_Insert_Input = {
  data: Array<Permit_Sign_In_Image_Insert_Input>;
  on_conflict?: Maybe<Permit_Sign_In_Image_On_Conflict>;
};

/** Boolean expression to filter rows from the table "permit_sign_in_image". All fields are combined with a logical 'AND'. */
export type Permit_Sign_In_Image_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Permit_Sign_In_Image_Bool_Exp>>>;
  _not?: Maybe<Permit_Sign_In_Image_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Permit_Sign_In_Image_Bool_Exp>>>;
  image?: Maybe<Image_Bool_Exp>;
  image_id?: Maybe<Uuid_Comparison_Exp>;
  permit?: Maybe<Permit_Bool_Exp>;
  permit_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "permit_sign_in_image" */
export enum Permit_Sign_In_Image_Constraint {
  /** unique or primary key constraint */
  PermitSignInImagePkey = 'permit_sign_in_image_pkey'
}

/** input type for inserting data into table "permit_sign_in_image" */
export type Permit_Sign_In_Image_Insert_Input = {
  image?: Maybe<Image_Obj_Rel_Insert_Input>;
  image_id?: Maybe<Scalars['uuid']>;
  permit?: Maybe<Permit_Obj_Rel_Insert_Input>;
  permit_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Permit_Sign_In_Image_Max_Fields = {
   __typename?: 'permit_sign_in_image_max_fields';
  image_id?: Maybe<Scalars['uuid']>;
  permit_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "permit_sign_in_image" */
export type Permit_Sign_In_Image_Max_Order_By = {
  image_id?: Maybe<Order_By>;
  permit_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Permit_Sign_In_Image_Min_Fields = {
   __typename?: 'permit_sign_in_image_min_fields';
  image_id?: Maybe<Scalars['uuid']>;
  permit_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "permit_sign_in_image" */
export type Permit_Sign_In_Image_Min_Order_By = {
  image_id?: Maybe<Order_By>;
  permit_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "permit_sign_in_image" */
export type Permit_Sign_In_Image_Mutation_Response = {
   __typename?: 'permit_sign_in_image_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Permit_Sign_In_Image>;
};

/** input type for inserting object relation for remote table "permit_sign_in_image" */
export type Permit_Sign_In_Image_Obj_Rel_Insert_Input = {
  data: Permit_Sign_In_Image_Insert_Input;
  on_conflict?: Maybe<Permit_Sign_In_Image_On_Conflict>;
};

/** on conflict condition type for table "permit_sign_in_image" */
export type Permit_Sign_In_Image_On_Conflict = {
  constraint: Permit_Sign_In_Image_Constraint;
  update_columns: Array<Permit_Sign_In_Image_Update_Column>;
  where?: Maybe<Permit_Sign_In_Image_Bool_Exp>;
};

/** ordering options when selecting data from "permit_sign_in_image" */
export type Permit_Sign_In_Image_Order_By = {
  image?: Maybe<Image_Order_By>;
  image_id?: Maybe<Order_By>;
  permit?: Maybe<Permit_Order_By>;
  permit_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "permit_sign_in_image" */
export type Permit_Sign_In_Image_Pk_Columns_Input = {
  image_id: Scalars['uuid'];
  permit_id: Scalars['uuid'];
};

/** select columns of table "permit_sign_in_image" */
export enum Permit_Sign_In_Image_Select_Column {
  /** column name */
  ImageId = 'image_id',
  /** column name */
  PermitId = 'permit_id'
}

/** input type for updating data in table "permit_sign_in_image" */
export type Permit_Sign_In_Image_Set_Input = {
  image_id?: Maybe<Scalars['uuid']>;
  permit_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "permit_sign_in_image" */
export enum Permit_Sign_In_Image_Update_Column {
  /** column name */
  ImageId = 'image_id',
  /** column name */
  PermitId = 'permit_id'
}

/** columns and relationships of "permit_type" */
export type Permit_Type = {
   __typename?: 'permit_type';
  created_at?: Maybe<Scalars['timestamptz']>;
  id: Scalars['uuid'];
  /** An object relationship */
  name: Text_Translation;
  name_id: Scalars['uuid'];
  name_text: Scalars['String'];
  /** An array relationship */
  task_permit_types: Array<Task_Permit_Type>;
  /** An aggregated array relationship */
  task_permit_types_aggregate: Task_Permit_Type_Aggregate;
  updated_at?: Maybe<Scalars['timestamptz']>;
};


/** columns and relationships of "permit_type" */
export type Permit_TypeTask_Permit_TypesArgs = {
  distinct_on?: Maybe<Array<Task_Permit_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Permit_Type_Order_By>>;
  where?: Maybe<Task_Permit_Type_Bool_Exp>;
};


/** columns and relationships of "permit_type" */
export type Permit_TypeTask_Permit_Types_AggregateArgs = {
  distinct_on?: Maybe<Array<Task_Permit_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Permit_Type_Order_By>>;
  where?: Maybe<Task_Permit_Type_Bool_Exp>;
};

/** aggregated selection of "permit_type" */
export type Permit_Type_Aggregate = {
   __typename?: 'permit_type_aggregate';
  aggregate?: Maybe<Permit_Type_Aggregate_Fields>;
  nodes: Array<Permit_Type>;
};

/** aggregate fields of "permit_type" */
export type Permit_Type_Aggregate_Fields = {
   __typename?: 'permit_type_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Permit_Type_Max_Fields>;
  min?: Maybe<Permit_Type_Min_Fields>;
};


/** aggregate fields of "permit_type" */
export type Permit_Type_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Permit_Type_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "permit_type" */
export type Permit_Type_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Permit_Type_Max_Order_By>;
  min?: Maybe<Permit_Type_Min_Order_By>;
};

/** input type for inserting array relation for remote table "permit_type" */
export type Permit_Type_Arr_Rel_Insert_Input = {
  data: Array<Permit_Type_Insert_Input>;
  on_conflict?: Maybe<Permit_Type_On_Conflict>;
};

/** Boolean expression to filter rows from the table "permit_type". All fields are combined with a logical 'AND'. */
export type Permit_Type_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Permit_Type_Bool_Exp>>>;
  _not?: Maybe<Permit_Type_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Permit_Type_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  name?: Maybe<Text_Translation_Bool_Exp>;
  name_id?: Maybe<Uuid_Comparison_Exp>;
  name_text?: Maybe<String_Comparison_Exp>;
  task_permit_types?: Maybe<Task_Permit_Type_Bool_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "permit_type" */
export enum Permit_Type_Constraint {
  /** unique or primary key constraint */
  PermitPkey = 'permit_pkey',
  /** unique or primary key constraint */
  PermitTypeNameKey = 'permit_type_name_key'
}

/** input type for inserting data into table "permit_type" */
export type Permit_Type_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  name_id?: Maybe<Scalars['uuid']>;
  name_text?: Maybe<Scalars['String']>;
  task_permit_types?: Maybe<Task_Permit_Type_Arr_Rel_Insert_Input>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate max on columns */
export type Permit_Type_Max_Fields = {
   __typename?: 'permit_type_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  name_id?: Maybe<Scalars['uuid']>;
  name_text?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** order by max() on columns of table "permit_type" */
export type Permit_Type_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name_id?: Maybe<Order_By>;
  name_text?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Permit_Type_Min_Fields = {
   __typename?: 'permit_type_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  name_id?: Maybe<Scalars['uuid']>;
  name_text?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** order by min() on columns of table "permit_type" */
export type Permit_Type_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name_id?: Maybe<Order_By>;
  name_text?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** response of any mutation on the table "permit_type" */
export type Permit_Type_Mutation_Response = {
   __typename?: 'permit_type_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Permit_Type>;
};

/** input type for inserting object relation for remote table "permit_type" */
export type Permit_Type_Obj_Rel_Insert_Input = {
  data: Permit_Type_Insert_Input;
  on_conflict?: Maybe<Permit_Type_On_Conflict>;
};

/** on conflict condition type for table "permit_type" */
export type Permit_Type_On_Conflict = {
  constraint: Permit_Type_Constraint;
  update_columns: Array<Permit_Type_Update_Column>;
  where?: Maybe<Permit_Type_Bool_Exp>;
};

/** ordering options when selecting data from "permit_type" */
export type Permit_Type_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Text_Translation_Order_By>;
  name_id?: Maybe<Order_By>;
  name_text?: Maybe<Order_By>;
  task_permit_types_aggregate?: Maybe<Task_Permit_Type_Aggregate_Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** primary key columns input for table: "permit_type" */
export type Permit_Type_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "permit_type" */
export enum Permit_Type_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  NameId = 'name_id',
  /** column name */
  NameText = 'name_text',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** input type for updating data in table "permit_type" */
export type Permit_Type_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  name_id?: Maybe<Scalars['uuid']>;
  name_text?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** update columns of table "permit_type" */
export enum Permit_Type_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  NameId = 'name_id',
  /** column name */
  NameText = 'name_text',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** update columns of table "permit" */
export enum Permit_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CurrentStatus = 'current_status',
  /** column name */
  Id = 'id',
  /** column name */
  IsHistorical = 'is_historical',
  /** column name */
  OwnerUserId = 'owner_user_id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  Type = 'type',
  /** column name */
  UpdatedAt = 'updated_at'
}

export type PermitChecklistItemAnswer = {
   __typename?: 'PermitChecklistItemAnswer';
  checklistItemId: Scalars['String'];
  answer?: Maybe<Scalars['String']>;
  chosenOption?: Maybe<Scalars['String']>;
};

/** columns and relationships of "ppe_category" */
export type Ppe_Category = {
   __typename?: 'ppe_category';
  id: Scalars['uuid'];
  /** An object relationship */
  name: Text_Translation;
  name_id: Scalars['uuid'];
  name_text: Scalars['String'];
  /** An array relationship */
  ppe_types: Array<Ppe_Type>;
  /** An aggregated array relationship */
  ppe_types_aggregate: Ppe_Type_Aggregate;
};


/** columns and relationships of "ppe_category" */
export type Ppe_CategoryPpe_TypesArgs = {
  distinct_on?: Maybe<Array<Ppe_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Ppe_Type_Order_By>>;
  where?: Maybe<Ppe_Type_Bool_Exp>;
};


/** columns and relationships of "ppe_category" */
export type Ppe_CategoryPpe_Types_AggregateArgs = {
  distinct_on?: Maybe<Array<Ppe_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Ppe_Type_Order_By>>;
  where?: Maybe<Ppe_Type_Bool_Exp>;
};

/** aggregated selection of "ppe_category" */
export type Ppe_Category_Aggregate = {
   __typename?: 'ppe_category_aggregate';
  aggregate?: Maybe<Ppe_Category_Aggregate_Fields>;
  nodes: Array<Ppe_Category>;
};

/** aggregate fields of "ppe_category" */
export type Ppe_Category_Aggregate_Fields = {
   __typename?: 'ppe_category_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Ppe_Category_Max_Fields>;
  min?: Maybe<Ppe_Category_Min_Fields>;
};


/** aggregate fields of "ppe_category" */
export type Ppe_Category_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Ppe_Category_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "ppe_category" */
export type Ppe_Category_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Ppe_Category_Max_Order_By>;
  min?: Maybe<Ppe_Category_Min_Order_By>;
};

/** input type for inserting array relation for remote table "ppe_category" */
export type Ppe_Category_Arr_Rel_Insert_Input = {
  data: Array<Ppe_Category_Insert_Input>;
  on_conflict?: Maybe<Ppe_Category_On_Conflict>;
};

/** Boolean expression to filter rows from the table "ppe_category". All fields are combined with a logical 'AND'. */
export type Ppe_Category_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Ppe_Category_Bool_Exp>>>;
  _not?: Maybe<Ppe_Category_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Ppe_Category_Bool_Exp>>>;
  id?: Maybe<Uuid_Comparison_Exp>;
  name?: Maybe<Text_Translation_Bool_Exp>;
  name_id?: Maybe<Uuid_Comparison_Exp>;
  name_text?: Maybe<String_Comparison_Exp>;
  ppe_types?: Maybe<Ppe_Type_Bool_Exp>;
};

/** unique or primary key constraints on table "ppe_category" */
export enum Ppe_Category_Constraint {
  /** unique or primary key constraint */
  PpeCategoryNameKey = 'ppe_category_name_key',
  /** unique or primary key constraint */
  PpeCategoryPkey = 'ppe_category_pkey'
}

/** input type for inserting data into table "ppe_category" */
export type Ppe_Category_Insert_Input = {
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  name_id?: Maybe<Scalars['uuid']>;
  name_text?: Maybe<Scalars['String']>;
  ppe_types?: Maybe<Ppe_Type_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Ppe_Category_Max_Fields = {
   __typename?: 'ppe_category_max_fields';
  id?: Maybe<Scalars['uuid']>;
  name_id?: Maybe<Scalars['uuid']>;
  name_text?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "ppe_category" */
export type Ppe_Category_Max_Order_By = {
  id?: Maybe<Order_By>;
  name_id?: Maybe<Order_By>;
  name_text?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Ppe_Category_Min_Fields = {
   __typename?: 'ppe_category_min_fields';
  id?: Maybe<Scalars['uuid']>;
  name_id?: Maybe<Scalars['uuid']>;
  name_text?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "ppe_category" */
export type Ppe_Category_Min_Order_By = {
  id?: Maybe<Order_By>;
  name_id?: Maybe<Order_By>;
  name_text?: Maybe<Order_By>;
};

/** response of any mutation on the table "ppe_category" */
export type Ppe_Category_Mutation_Response = {
   __typename?: 'ppe_category_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Ppe_Category>;
};

/** input type for inserting object relation for remote table "ppe_category" */
export type Ppe_Category_Obj_Rel_Insert_Input = {
  data: Ppe_Category_Insert_Input;
  on_conflict?: Maybe<Ppe_Category_On_Conflict>;
};

/** on conflict condition type for table "ppe_category" */
export type Ppe_Category_On_Conflict = {
  constraint: Ppe_Category_Constraint;
  update_columns: Array<Ppe_Category_Update_Column>;
  where?: Maybe<Ppe_Category_Bool_Exp>;
};

/** ordering options when selecting data from "ppe_category" */
export type Ppe_Category_Order_By = {
  id?: Maybe<Order_By>;
  name?: Maybe<Text_Translation_Order_By>;
  name_id?: Maybe<Order_By>;
  name_text?: Maybe<Order_By>;
  ppe_types_aggregate?: Maybe<Ppe_Type_Aggregate_Order_By>;
};

/** primary key columns input for table: "ppe_category" */
export type Ppe_Category_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "ppe_category" */
export enum Ppe_Category_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  NameId = 'name_id',
  /** column name */
  NameText = 'name_text'
}

/** input type for updating data in table "ppe_category" */
export type Ppe_Category_Set_Input = {
  id?: Maybe<Scalars['uuid']>;
  name_id?: Maybe<Scalars['uuid']>;
  name_text?: Maybe<Scalars['String']>;
};

/** update columns of table "ppe_category" */
export enum Ppe_Category_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  NameId = 'name_id',
  /** column name */
  NameText = 'name_text'
}

/** columns and relationships of "ppe_type" */
export type Ppe_Type = {
   __typename?: 'ppe_type';
  created_at?: Maybe<Scalars['timestamptz']>;
  id: Scalars['uuid'];
  /** An object relationship */
  name: Text_Translation;
  name_id: Scalars['uuid'];
  name_text: Scalars['String'];
  /** An object relationship */
  ppe_category: Ppe_Category;
  ppe_category_id: Scalars['uuid'];
  /** An array relationship */
  task_ppe_types: Array<Task_Ppe_Type>;
  /** An aggregated array relationship */
  task_ppe_types_aggregate: Task_Ppe_Type_Aggregate;
};


/** columns and relationships of "ppe_type" */
export type Ppe_TypeTask_Ppe_TypesArgs = {
  distinct_on?: Maybe<Array<Task_Ppe_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Ppe_Type_Order_By>>;
  where?: Maybe<Task_Ppe_Type_Bool_Exp>;
};


/** columns and relationships of "ppe_type" */
export type Ppe_TypeTask_Ppe_Types_AggregateArgs = {
  distinct_on?: Maybe<Array<Task_Ppe_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Ppe_Type_Order_By>>;
  where?: Maybe<Task_Ppe_Type_Bool_Exp>;
};

/** aggregated selection of "ppe_type" */
export type Ppe_Type_Aggregate = {
   __typename?: 'ppe_type_aggregate';
  aggregate?: Maybe<Ppe_Type_Aggregate_Fields>;
  nodes: Array<Ppe_Type>;
};

/** aggregate fields of "ppe_type" */
export type Ppe_Type_Aggregate_Fields = {
   __typename?: 'ppe_type_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Ppe_Type_Max_Fields>;
  min?: Maybe<Ppe_Type_Min_Fields>;
};


/** aggregate fields of "ppe_type" */
export type Ppe_Type_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Ppe_Type_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "ppe_type" */
export type Ppe_Type_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Ppe_Type_Max_Order_By>;
  min?: Maybe<Ppe_Type_Min_Order_By>;
};

/** input type for inserting array relation for remote table "ppe_type" */
export type Ppe_Type_Arr_Rel_Insert_Input = {
  data: Array<Ppe_Type_Insert_Input>;
  on_conflict?: Maybe<Ppe_Type_On_Conflict>;
};

/** Boolean expression to filter rows from the table "ppe_type". All fields are combined with a logical 'AND'. */
export type Ppe_Type_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Ppe_Type_Bool_Exp>>>;
  _not?: Maybe<Ppe_Type_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Ppe_Type_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  name?: Maybe<Text_Translation_Bool_Exp>;
  name_id?: Maybe<Uuid_Comparison_Exp>;
  name_text?: Maybe<String_Comparison_Exp>;
  ppe_category?: Maybe<Ppe_Category_Bool_Exp>;
  ppe_category_id?: Maybe<Uuid_Comparison_Exp>;
  task_ppe_types?: Maybe<Task_Ppe_Type_Bool_Exp>;
};

/** unique or primary key constraints on table "ppe_type" */
export enum Ppe_Type_Constraint {
  /** unique or primary key constraint */
  PpeTypeNameKey = 'ppe_type_name_key',
  /** unique or primary key constraint */
  PpeTypePkey = 'ppe_type_pkey'
}

/** input type for inserting data into table "ppe_type" */
export type Ppe_Type_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  name_id?: Maybe<Scalars['uuid']>;
  name_text?: Maybe<Scalars['String']>;
  ppe_category?: Maybe<Ppe_Category_Obj_Rel_Insert_Input>;
  ppe_category_id?: Maybe<Scalars['uuid']>;
  task_ppe_types?: Maybe<Task_Ppe_Type_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Ppe_Type_Max_Fields = {
   __typename?: 'ppe_type_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  name_id?: Maybe<Scalars['uuid']>;
  name_text?: Maybe<Scalars['String']>;
  ppe_category_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "ppe_type" */
export type Ppe_Type_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name_id?: Maybe<Order_By>;
  name_text?: Maybe<Order_By>;
  ppe_category_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Ppe_Type_Min_Fields = {
   __typename?: 'ppe_type_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  name_id?: Maybe<Scalars['uuid']>;
  name_text?: Maybe<Scalars['String']>;
  ppe_category_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "ppe_type" */
export type Ppe_Type_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name_id?: Maybe<Order_By>;
  name_text?: Maybe<Order_By>;
  ppe_category_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "ppe_type" */
export type Ppe_Type_Mutation_Response = {
   __typename?: 'ppe_type_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Ppe_Type>;
};

/** input type for inserting object relation for remote table "ppe_type" */
export type Ppe_Type_Obj_Rel_Insert_Input = {
  data: Ppe_Type_Insert_Input;
  on_conflict?: Maybe<Ppe_Type_On_Conflict>;
};

/** on conflict condition type for table "ppe_type" */
export type Ppe_Type_On_Conflict = {
  constraint: Ppe_Type_Constraint;
  update_columns: Array<Ppe_Type_Update_Column>;
  where?: Maybe<Ppe_Type_Bool_Exp>;
};

/** ordering options when selecting data from "ppe_type" */
export type Ppe_Type_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Text_Translation_Order_By>;
  name_id?: Maybe<Order_By>;
  name_text?: Maybe<Order_By>;
  ppe_category?: Maybe<Ppe_Category_Order_By>;
  ppe_category_id?: Maybe<Order_By>;
  task_ppe_types_aggregate?: Maybe<Task_Ppe_Type_Aggregate_Order_By>;
};

/** primary key columns input for table: "ppe_type" */
export type Ppe_Type_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "ppe_type" */
export enum Ppe_Type_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  NameId = 'name_id',
  /** column name */
  NameText = 'name_text',
  /** column name */
  PpeCategoryId = 'ppe_category_id'
}

/** input type for updating data in table "ppe_type" */
export type Ppe_Type_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  name_id?: Maybe<Scalars['uuid']>;
  name_text?: Maybe<Scalars['String']>;
  ppe_category_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "ppe_type" */
export enum Ppe_Type_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  NameId = 'name_id',
  /** column name */
  NameText = 'name_text',
  /** column name */
  PpeCategoryId = 'ppe_category_id'
}

/** columns and relationships of "procore_auth_data" */
export type Procore_Auth_Data = {
   __typename?: 'procore_auth_data';
  access_token?: Maybe<Scalars['String']>;
  /** An object relationship */
  general_contractor: General_Contractor;
  general_contractor_id: Scalars['uuid'];
  integration_enabled: Scalars['Boolean'];
  refresh_token?: Maybe<Scalars['String']>;
  sandbox: Scalars['Boolean'];
  service_account_client_id?: Maybe<Scalars['String']>;
  service_account_client_secret?: Maybe<Scalars['String']>;
  token_expires_at?: Maybe<Scalars['timestamp']>;
  user_id?: Maybe<Scalars['Int']>;
  user_login?: Maybe<Scalars['String']>;
  user_name?: Maybe<Scalars['String']>;
};

/** aggregated selection of "procore_auth_data" */
export type Procore_Auth_Data_Aggregate = {
   __typename?: 'procore_auth_data_aggregate';
  aggregate?: Maybe<Procore_Auth_Data_Aggregate_Fields>;
  nodes: Array<Procore_Auth_Data>;
};

/** aggregate fields of "procore_auth_data" */
export type Procore_Auth_Data_Aggregate_Fields = {
   __typename?: 'procore_auth_data_aggregate_fields';
  avg?: Maybe<Procore_Auth_Data_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Procore_Auth_Data_Max_Fields>;
  min?: Maybe<Procore_Auth_Data_Min_Fields>;
  stddev?: Maybe<Procore_Auth_Data_Stddev_Fields>;
  stddev_pop?: Maybe<Procore_Auth_Data_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Procore_Auth_Data_Stddev_Samp_Fields>;
  sum?: Maybe<Procore_Auth_Data_Sum_Fields>;
  var_pop?: Maybe<Procore_Auth_Data_Var_Pop_Fields>;
  var_samp?: Maybe<Procore_Auth_Data_Var_Samp_Fields>;
  variance?: Maybe<Procore_Auth_Data_Variance_Fields>;
};


/** aggregate fields of "procore_auth_data" */
export type Procore_Auth_Data_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Procore_Auth_Data_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "procore_auth_data" */
export type Procore_Auth_Data_Aggregate_Order_By = {
  avg?: Maybe<Procore_Auth_Data_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Procore_Auth_Data_Max_Order_By>;
  min?: Maybe<Procore_Auth_Data_Min_Order_By>;
  stddev?: Maybe<Procore_Auth_Data_Stddev_Order_By>;
  stddev_pop?: Maybe<Procore_Auth_Data_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Procore_Auth_Data_Stddev_Samp_Order_By>;
  sum?: Maybe<Procore_Auth_Data_Sum_Order_By>;
  var_pop?: Maybe<Procore_Auth_Data_Var_Pop_Order_By>;
  var_samp?: Maybe<Procore_Auth_Data_Var_Samp_Order_By>;
  variance?: Maybe<Procore_Auth_Data_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "procore_auth_data" */
export type Procore_Auth_Data_Arr_Rel_Insert_Input = {
  data: Array<Procore_Auth_Data_Insert_Input>;
  on_conflict?: Maybe<Procore_Auth_Data_On_Conflict>;
};

/** aggregate avg on columns */
export type Procore_Auth_Data_Avg_Fields = {
   __typename?: 'procore_auth_data_avg_fields';
  user_id?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "procore_auth_data" */
export type Procore_Auth_Data_Avg_Order_By = {
  user_id?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "procore_auth_data". All fields are combined with a logical 'AND'. */
export type Procore_Auth_Data_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Procore_Auth_Data_Bool_Exp>>>;
  _not?: Maybe<Procore_Auth_Data_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Procore_Auth_Data_Bool_Exp>>>;
  access_token?: Maybe<String_Comparison_Exp>;
  general_contractor?: Maybe<General_Contractor_Bool_Exp>;
  general_contractor_id?: Maybe<Uuid_Comparison_Exp>;
  integration_enabled?: Maybe<Boolean_Comparison_Exp>;
  refresh_token?: Maybe<String_Comparison_Exp>;
  sandbox?: Maybe<Boolean_Comparison_Exp>;
  service_account_client_id?: Maybe<String_Comparison_Exp>;
  service_account_client_secret?: Maybe<String_Comparison_Exp>;
  token_expires_at?: Maybe<Timestamp_Comparison_Exp>;
  user_id?: Maybe<Int_Comparison_Exp>;
  user_login?: Maybe<String_Comparison_Exp>;
  user_name?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "procore_auth_data" */
export enum Procore_Auth_Data_Constraint {
  /** unique or primary key constraint */
  ProcoreAuthDataGeneralContractorIdKey = 'procore_auth_data_general_contractor_id_key',
  /** unique or primary key constraint */
  ProcoreAuthDataPkey = 'procore_auth_data_pkey'
}

/** input type for incrementing integer column in table "procore_auth_data" */
export type Procore_Auth_Data_Inc_Input = {
  user_id?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "procore_auth_data" */
export type Procore_Auth_Data_Insert_Input = {
  access_token?: Maybe<Scalars['String']>;
  general_contractor?: Maybe<General_Contractor_Obj_Rel_Insert_Input>;
  general_contractor_id?: Maybe<Scalars['uuid']>;
  integration_enabled?: Maybe<Scalars['Boolean']>;
  refresh_token?: Maybe<Scalars['String']>;
  sandbox?: Maybe<Scalars['Boolean']>;
  service_account_client_id?: Maybe<Scalars['String']>;
  service_account_client_secret?: Maybe<Scalars['String']>;
  token_expires_at?: Maybe<Scalars['timestamp']>;
  user_id?: Maybe<Scalars['Int']>;
  user_login?: Maybe<Scalars['String']>;
  user_name?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Procore_Auth_Data_Max_Fields = {
   __typename?: 'procore_auth_data_max_fields';
  access_token?: Maybe<Scalars['String']>;
  general_contractor_id?: Maybe<Scalars['uuid']>;
  refresh_token?: Maybe<Scalars['String']>;
  service_account_client_id?: Maybe<Scalars['String']>;
  service_account_client_secret?: Maybe<Scalars['String']>;
  token_expires_at?: Maybe<Scalars['timestamp']>;
  user_id?: Maybe<Scalars['Int']>;
  user_login?: Maybe<Scalars['String']>;
  user_name?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "procore_auth_data" */
export type Procore_Auth_Data_Max_Order_By = {
  access_token?: Maybe<Order_By>;
  general_contractor_id?: Maybe<Order_By>;
  refresh_token?: Maybe<Order_By>;
  service_account_client_id?: Maybe<Order_By>;
  service_account_client_secret?: Maybe<Order_By>;
  token_expires_at?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
  user_login?: Maybe<Order_By>;
  user_name?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Procore_Auth_Data_Min_Fields = {
   __typename?: 'procore_auth_data_min_fields';
  access_token?: Maybe<Scalars['String']>;
  general_contractor_id?: Maybe<Scalars['uuid']>;
  refresh_token?: Maybe<Scalars['String']>;
  service_account_client_id?: Maybe<Scalars['String']>;
  service_account_client_secret?: Maybe<Scalars['String']>;
  token_expires_at?: Maybe<Scalars['timestamp']>;
  user_id?: Maybe<Scalars['Int']>;
  user_login?: Maybe<Scalars['String']>;
  user_name?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "procore_auth_data" */
export type Procore_Auth_Data_Min_Order_By = {
  access_token?: Maybe<Order_By>;
  general_contractor_id?: Maybe<Order_By>;
  refresh_token?: Maybe<Order_By>;
  service_account_client_id?: Maybe<Order_By>;
  service_account_client_secret?: Maybe<Order_By>;
  token_expires_at?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
  user_login?: Maybe<Order_By>;
  user_name?: Maybe<Order_By>;
};

/** response of any mutation on the table "procore_auth_data" */
export type Procore_Auth_Data_Mutation_Response = {
   __typename?: 'procore_auth_data_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Procore_Auth_Data>;
};

/** input type for inserting object relation for remote table "procore_auth_data" */
export type Procore_Auth_Data_Obj_Rel_Insert_Input = {
  data: Procore_Auth_Data_Insert_Input;
  on_conflict?: Maybe<Procore_Auth_Data_On_Conflict>;
};

/** on conflict condition type for table "procore_auth_data" */
export type Procore_Auth_Data_On_Conflict = {
  constraint: Procore_Auth_Data_Constraint;
  update_columns: Array<Procore_Auth_Data_Update_Column>;
  where?: Maybe<Procore_Auth_Data_Bool_Exp>;
};

/** ordering options when selecting data from "procore_auth_data" */
export type Procore_Auth_Data_Order_By = {
  access_token?: Maybe<Order_By>;
  general_contractor?: Maybe<General_Contractor_Order_By>;
  general_contractor_id?: Maybe<Order_By>;
  integration_enabled?: Maybe<Order_By>;
  refresh_token?: Maybe<Order_By>;
  sandbox?: Maybe<Order_By>;
  service_account_client_id?: Maybe<Order_By>;
  service_account_client_secret?: Maybe<Order_By>;
  token_expires_at?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
  user_login?: Maybe<Order_By>;
  user_name?: Maybe<Order_By>;
};

/** primary key columns input for table: "procore_auth_data" */
export type Procore_Auth_Data_Pk_Columns_Input = {
  general_contractor_id: Scalars['uuid'];
};

/** select columns of table "procore_auth_data" */
export enum Procore_Auth_Data_Select_Column {
  /** column name */
  AccessToken = 'access_token',
  /** column name */
  GeneralContractorId = 'general_contractor_id',
  /** column name */
  IntegrationEnabled = 'integration_enabled',
  /** column name */
  RefreshToken = 'refresh_token',
  /** column name */
  Sandbox = 'sandbox',
  /** column name */
  ServiceAccountClientId = 'service_account_client_id',
  /** column name */
  ServiceAccountClientSecret = 'service_account_client_secret',
  /** column name */
  TokenExpiresAt = 'token_expires_at',
  /** column name */
  UserId = 'user_id',
  /** column name */
  UserLogin = 'user_login',
  /** column name */
  UserName = 'user_name'
}

/** input type for updating data in table "procore_auth_data" */
export type Procore_Auth_Data_Set_Input = {
  access_token?: Maybe<Scalars['String']>;
  general_contractor_id?: Maybe<Scalars['uuid']>;
  integration_enabled?: Maybe<Scalars['Boolean']>;
  refresh_token?: Maybe<Scalars['String']>;
  sandbox?: Maybe<Scalars['Boolean']>;
  service_account_client_id?: Maybe<Scalars['String']>;
  service_account_client_secret?: Maybe<Scalars['String']>;
  token_expires_at?: Maybe<Scalars['timestamp']>;
  user_id?: Maybe<Scalars['Int']>;
  user_login?: Maybe<Scalars['String']>;
  user_name?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Procore_Auth_Data_Stddev_Fields = {
   __typename?: 'procore_auth_data_stddev_fields';
  user_id?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "procore_auth_data" */
export type Procore_Auth_Data_Stddev_Order_By = {
  user_id?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Procore_Auth_Data_Stddev_Pop_Fields = {
   __typename?: 'procore_auth_data_stddev_pop_fields';
  user_id?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "procore_auth_data" */
export type Procore_Auth_Data_Stddev_Pop_Order_By = {
  user_id?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Procore_Auth_Data_Stddev_Samp_Fields = {
   __typename?: 'procore_auth_data_stddev_samp_fields';
  user_id?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "procore_auth_data" */
export type Procore_Auth_Data_Stddev_Samp_Order_By = {
  user_id?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Procore_Auth_Data_Sum_Fields = {
   __typename?: 'procore_auth_data_sum_fields';
  user_id?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "procore_auth_data" */
export type Procore_Auth_Data_Sum_Order_By = {
  user_id?: Maybe<Order_By>;
};

/** update columns of table "procore_auth_data" */
export enum Procore_Auth_Data_Update_Column {
  /** column name */
  AccessToken = 'access_token',
  /** column name */
  GeneralContractorId = 'general_contractor_id',
  /** column name */
  IntegrationEnabled = 'integration_enabled',
  /** column name */
  RefreshToken = 'refresh_token',
  /** column name */
  Sandbox = 'sandbox',
  /** column name */
  ServiceAccountClientId = 'service_account_client_id',
  /** column name */
  ServiceAccountClientSecret = 'service_account_client_secret',
  /** column name */
  TokenExpiresAt = 'token_expires_at',
  /** column name */
  UserId = 'user_id',
  /** column name */
  UserLogin = 'user_login',
  /** column name */
  UserName = 'user_name'
}

/** aggregate var_pop on columns */
export type Procore_Auth_Data_Var_Pop_Fields = {
   __typename?: 'procore_auth_data_var_pop_fields';
  user_id?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "procore_auth_data" */
export type Procore_Auth_Data_Var_Pop_Order_By = {
  user_id?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Procore_Auth_Data_Var_Samp_Fields = {
   __typename?: 'procore_auth_data_var_samp_fields';
  user_id?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "procore_auth_data" */
export type Procore_Auth_Data_Var_Samp_Order_By = {
  user_id?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Procore_Auth_Data_Variance_Fields = {
   __typename?: 'procore_auth_data_variance_fields';
  user_id?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "procore_auth_data" */
export type Procore_Auth_Data_Variance_Order_By = {
  user_id?: Maybe<Order_By>;
};

/** columns and relationships of "procore_project_data" */
export type Procore_Project_Data = {
   __typename?: 'procore_project_data';
  access_token?: Maybe<Scalars['String']>;
  integration_enabled: Scalars['Boolean'];
  procore_company_id?: Maybe<Scalars['Int']>;
  procore_project_id: Scalars['String'];
  procore_project_name?: Maybe<Scalars['String']>;
  /** An object relationship */
  project: Project;
  project_id: Scalars['uuid'];
  refresh_token?: Maybe<Scalars['String']>;
  sandbox: Scalars['Boolean'];
  service_account_client_id?: Maybe<Scalars['String']>;
  service_account_client_secret?: Maybe<Scalars['String']>;
  /** deprecated!!! DO NOT USE IT.  use integration_enabled instead */
  switch: Scalars['Boolean'];
  token_expires_at?: Maybe<Scalars['timestamp']>;
  upload_daily_reports_enabled: Scalars['Boolean'];
  upload_daily_reports_folder_id?: Maybe<Scalars['Int']>;
  upload_permits_enabled: Scalars['Boolean'];
  upload_permits_folder_id?: Maybe<Scalars['Int']>;
  upload_safety_reports_enabled: Scalars['Boolean'];
  upload_safety_reports_folder_id?: Maybe<Scalars['Int']>;
  upload_toolbox_talks_enabled: Scalars['Boolean'];
  upload_toolbox_talks_folder_id?: Maybe<Scalars['Int']>;
  user_id?: Maybe<Scalars['Int']>;
  user_login?: Maybe<Scalars['String']>;
  user_name?: Maybe<Scalars['String']>;
};

/** aggregated selection of "procore_project_data" */
export type Procore_Project_Data_Aggregate = {
   __typename?: 'procore_project_data_aggregate';
  aggregate?: Maybe<Procore_Project_Data_Aggregate_Fields>;
  nodes: Array<Procore_Project_Data>;
};

/** aggregate fields of "procore_project_data" */
export type Procore_Project_Data_Aggregate_Fields = {
   __typename?: 'procore_project_data_aggregate_fields';
  avg?: Maybe<Procore_Project_Data_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Procore_Project_Data_Max_Fields>;
  min?: Maybe<Procore_Project_Data_Min_Fields>;
  stddev?: Maybe<Procore_Project_Data_Stddev_Fields>;
  stddev_pop?: Maybe<Procore_Project_Data_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Procore_Project_Data_Stddev_Samp_Fields>;
  sum?: Maybe<Procore_Project_Data_Sum_Fields>;
  var_pop?: Maybe<Procore_Project_Data_Var_Pop_Fields>;
  var_samp?: Maybe<Procore_Project_Data_Var_Samp_Fields>;
  variance?: Maybe<Procore_Project_Data_Variance_Fields>;
};


/** aggregate fields of "procore_project_data" */
export type Procore_Project_Data_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Procore_Project_Data_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "procore_project_data" */
export type Procore_Project_Data_Aggregate_Order_By = {
  avg?: Maybe<Procore_Project_Data_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Procore_Project_Data_Max_Order_By>;
  min?: Maybe<Procore_Project_Data_Min_Order_By>;
  stddev?: Maybe<Procore_Project_Data_Stddev_Order_By>;
  stddev_pop?: Maybe<Procore_Project_Data_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Procore_Project_Data_Stddev_Samp_Order_By>;
  sum?: Maybe<Procore_Project_Data_Sum_Order_By>;
  var_pop?: Maybe<Procore_Project_Data_Var_Pop_Order_By>;
  var_samp?: Maybe<Procore_Project_Data_Var_Samp_Order_By>;
  variance?: Maybe<Procore_Project_Data_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "procore_project_data" */
export type Procore_Project_Data_Arr_Rel_Insert_Input = {
  data: Array<Procore_Project_Data_Insert_Input>;
  on_conflict?: Maybe<Procore_Project_Data_On_Conflict>;
};

/** aggregate avg on columns */
export type Procore_Project_Data_Avg_Fields = {
   __typename?: 'procore_project_data_avg_fields';
  procore_company_id?: Maybe<Scalars['Float']>;
  upload_daily_reports_folder_id?: Maybe<Scalars['Float']>;
  upload_permits_folder_id?: Maybe<Scalars['Float']>;
  upload_safety_reports_folder_id?: Maybe<Scalars['Float']>;
  upload_toolbox_talks_folder_id?: Maybe<Scalars['Float']>;
  user_id?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "procore_project_data" */
export type Procore_Project_Data_Avg_Order_By = {
  procore_company_id?: Maybe<Order_By>;
  upload_daily_reports_folder_id?: Maybe<Order_By>;
  upload_permits_folder_id?: Maybe<Order_By>;
  upload_safety_reports_folder_id?: Maybe<Order_By>;
  upload_toolbox_talks_folder_id?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "procore_project_data". All fields are combined with a logical 'AND'. */
export type Procore_Project_Data_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Procore_Project_Data_Bool_Exp>>>;
  _not?: Maybe<Procore_Project_Data_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Procore_Project_Data_Bool_Exp>>>;
  access_token?: Maybe<String_Comparison_Exp>;
  integration_enabled?: Maybe<Boolean_Comparison_Exp>;
  procore_company_id?: Maybe<Int_Comparison_Exp>;
  procore_project_id?: Maybe<String_Comparison_Exp>;
  procore_project_name?: Maybe<String_Comparison_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  refresh_token?: Maybe<String_Comparison_Exp>;
  sandbox?: Maybe<Boolean_Comparison_Exp>;
  service_account_client_id?: Maybe<String_Comparison_Exp>;
  service_account_client_secret?: Maybe<String_Comparison_Exp>;
  switch?: Maybe<Boolean_Comparison_Exp>;
  token_expires_at?: Maybe<Timestamp_Comparison_Exp>;
  upload_daily_reports_enabled?: Maybe<Boolean_Comparison_Exp>;
  upload_daily_reports_folder_id?: Maybe<Int_Comparison_Exp>;
  upload_permits_enabled?: Maybe<Boolean_Comparison_Exp>;
  upload_permits_folder_id?: Maybe<Int_Comparison_Exp>;
  upload_safety_reports_enabled?: Maybe<Boolean_Comparison_Exp>;
  upload_safety_reports_folder_id?: Maybe<Int_Comparison_Exp>;
  upload_toolbox_talks_enabled?: Maybe<Boolean_Comparison_Exp>;
  upload_toolbox_talks_folder_id?: Maybe<Int_Comparison_Exp>;
  user_id?: Maybe<Int_Comparison_Exp>;
  user_login?: Maybe<String_Comparison_Exp>;
  user_name?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "procore_project_data" */
export enum Procore_Project_Data_Constraint {
  /** unique or primary key constraint */
  ProcoreProjectDataPkey = 'procore_project_data_pkey'
}

/** input type for incrementing integer column in table "procore_project_data" */
export type Procore_Project_Data_Inc_Input = {
  procore_company_id?: Maybe<Scalars['Int']>;
  upload_daily_reports_folder_id?: Maybe<Scalars['Int']>;
  upload_permits_folder_id?: Maybe<Scalars['Int']>;
  upload_safety_reports_folder_id?: Maybe<Scalars['Int']>;
  upload_toolbox_talks_folder_id?: Maybe<Scalars['Int']>;
  user_id?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "procore_project_data" */
export type Procore_Project_Data_Insert_Input = {
  access_token?: Maybe<Scalars['String']>;
  integration_enabled?: Maybe<Scalars['Boolean']>;
  procore_company_id?: Maybe<Scalars['Int']>;
  procore_project_id?: Maybe<Scalars['String']>;
  procore_project_name?: Maybe<Scalars['String']>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_id?: Maybe<Scalars['uuid']>;
  refresh_token?: Maybe<Scalars['String']>;
  sandbox?: Maybe<Scalars['Boolean']>;
  service_account_client_id?: Maybe<Scalars['String']>;
  service_account_client_secret?: Maybe<Scalars['String']>;
  switch?: Maybe<Scalars['Boolean']>;
  token_expires_at?: Maybe<Scalars['timestamp']>;
  upload_daily_reports_enabled?: Maybe<Scalars['Boolean']>;
  upload_daily_reports_folder_id?: Maybe<Scalars['Int']>;
  upload_permits_enabled?: Maybe<Scalars['Boolean']>;
  upload_permits_folder_id?: Maybe<Scalars['Int']>;
  upload_safety_reports_enabled?: Maybe<Scalars['Boolean']>;
  upload_safety_reports_folder_id?: Maybe<Scalars['Int']>;
  upload_toolbox_talks_enabled?: Maybe<Scalars['Boolean']>;
  upload_toolbox_talks_folder_id?: Maybe<Scalars['Int']>;
  user_id?: Maybe<Scalars['Int']>;
  user_login?: Maybe<Scalars['String']>;
  user_name?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Procore_Project_Data_Max_Fields = {
   __typename?: 'procore_project_data_max_fields';
  access_token?: Maybe<Scalars['String']>;
  procore_company_id?: Maybe<Scalars['Int']>;
  procore_project_id?: Maybe<Scalars['String']>;
  procore_project_name?: Maybe<Scalars['String']>;
  project_id?: Maybe<Scalars['uuid']>;
  refresh_token?: Maybe<Scalars['String']>;
  service_account_client_id?: Maybe<Scalars['String']>;
  service_account_client_secret?: Maybe<Scalars['String']>;
  token_expires_at?: Maybe<Scalars['timestamp']>;
  upload_daily_reports_folder_id?: Maybe<Scalars['Int']>;
  upload_permits_folder_id?: Maybe<Scalars['Int']>;
  upload_safety_reports_folder_id?: Maybe<Scalars['Int']>;
  upload_toolbox_talks_folder_id?: Maybe<Scalars['Int']>;
  user_id?: Maybe<Scalars['Int']>;
  user_login?: Maybe<Scalars['String']>;
  user_name?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "procore_project_data" */
export type Procore_Project_Data_Max_Order_By = {
  access_token?: Maybe<Order_By>;
  procore_company_id?: Maybe<Order_By>;
  procore_project_id?: Maybe<Order_By>;
  procore_project_name?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  refresh_token?: Maybe<Order_By>;
  service_account_client_id?: Maybe<Order_By>;
  service_account_client_secret?: Maybe<Order_By>;
  token_expires_at?: Maybe<Order_By>;
  upload_daily_reports_folder_id?: Maybe<Order_By>;
  upload_permits_folder_id?: Maybe<Order_By>;
  upload_safety_reports_folder_id?: Maybe<Order_By>;
  upload_toolbox_talks_folder_id?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
  user_login?: Maybe<Order_By>;
  user_name?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Procore_Project_Data_Min_Fields = {
   __typename?: 'procore_project_data_min_fields';
  access_token?: Maybe<Scalars['String']>;
  procore_company_id?: Maybe<Scalars['Int']>;
  procore_project_id?: Maybe<Scalars['String']>;
  procore_project_name?: Maybe<Scalars['String']>;
  project_id?: Maybe<Scalars['uuid']>;
  refresh_token?: Maybe<Scalars['String']>;
  service_account_client_id?: Maybe<Scalars['String']>;
  service_account_client_secret?: Maybe<Scalars['String']>;
  token_expires_at?: Maybe<Scalars['timestamp']>;
  upload_daily_reports_folder_id?: Maybe<Scalars['Int']>;
  upload_permits_folder_id?: Maybe<Scalars['Int']>;
  upload_safety_reports_folder_id?: Maybe<Scalars['Int']>;
  upload_toolbox_talks_folder_id?: Maybe<Scalars['Int']>;
  user_id?: Maybe<Scalars['Int']>;
  user_login?: Maybe<Scalars['String']>;
  user_name?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "procore_project_data" */
export type Procore_Project_Data_Min_Order_By = {
  access_token?: Maybe<Order_By>;
  procore_company_id?: Maybe<Order_By>;
  procore_project_id?: Maybe<Order_By>;
  procore_project_name?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  refresh_token?: Maybe<Order_By>;
  service_account_client_id?: Maybe<Order_By>;
  service_account_client_secret?: Maybe<Order_By>;
  token_expires_at?: Maybe<Order_By>;
  upload_daily_reports_folder_id?: Maybe<Order_By>;
  upload_permits_folder_id?: Maybe<Order_By>;
  upload_safety_reports_folder_id?: Maybe<Order_By>;
  upload_toolbox_talks_folder_id?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
  user_login?: Maybe<Order_By>;
  user_name?: Maybe<Order_By>;
};

/** response of any mutation on the table "procore_project_data" */
export type Procore_Project_Data_Mutation_Response = {
   __typename?: 'procore_project_data_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Procore_Project_Data>;
};

/** input type for inserting object relation for remote table "procore_project_data" */
export type Procore_Project_Data_Obj_Rel_Insert_Input = {
  data: Procore_Project_Data_Insert_Input;
  on_conflict?: Maybe<Procore_Project_Data_On_Conflict>;
};

/** on conflict condition type for table "procore_project_data" */
export type Procore_Project_Data_On_Conflict = {
  constraint: Procore_Project_Data_Constraint;
  update_columns: Array<Procore_Project_Data_Update_Column>;
  where?: Maybe<Procore_Project_Data_Bool_Exp>;
};

/** ordering options when selecting data from "procore_project_data" */
export type Procore_Project_Data_Order_By = {
  access_token?: Maybe<Order_By>;
  integration_enabled?: Maybe<Order_By>;
  procore_company_id?: Maybe<Order_By>;
  procore_project_id?: Maybe<Order_By>;
  procore_project_name?: Maybe<Order_By>;
  project?: Maybe<Project_Order_By>;
  project_id?: Maybe<Order_By>;
  refresh_token?: Maybe<Order_By>;
  sandbox?: Maybe<Order_By>;
  service_account_client_id?: Maybe<Order_By>;
  service_account_client_secret?: Maybe<Order_By>;
  switch?: Maybe<Order_By>;
  token_expires_at?: Maybe<Order_By>;
  upload_daily_reports_enabled?: Maybe<Order_By>;
  upload_daily_reports_folder_id?: Maybe<Order_By>;
  upload_permits_enabled?: Maybe<Order_By>;
  upload_permits_folder_id?: Maybe<Order_By>;
  upload_safety_reports_enabled?: Maybe<Order_By>;
  upload_safety_reports_folder_id?: Maybe<Order_By>;
  upload_toolbox_talks_enabled?: Maybe<Order_By>;
  upload_toolbox_talks_folder_id?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
  user_login?: Maybe<Order_By>;
  user_name?: Maybe<Order_By>;
};

/** primary key columns input for table: "procore_project_data" */
export type Procore_Project_Data_Pk_Columns_Input = {
  project_id: Scalars['uuid'];
};

/** select columns of table "procore_project_data" */
export enum Procore_Project_Data_Select_Column {
  /** column name */
  AccessToken = 'access_token',
  /** column name */
  IntegrationEnabled = 'integration_enabled',
  /** column name */
  ProcoreCompanyId = 'procore_company_id',
  /** column name */
  ProcoreProjectId = 'procore_project_id',
  /** column name */
  ProcoreProjectName = 'procore_project_name',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  RefreshToken = 'refresh_token',
  /** column name */
  Sandbox = 'sandbox',
  /** column name */
  ServiceAccountClientId = 'service_account_client_id',
  /** column name */
  ServiceAccountClientSecret = 'service_account_client_secret',
  /** column name */
  Switch = 'switch',
  /** column name */
  TokenExpiresAt = 'token_expires_at',
  /** column name */
  UploadDailyReportsEnabled = 'upload_daily_reports_enabled',
  /** column name */
  UploadDailyReportsFolderId = 'upload_daily_reports_folder_id',
  /** column name */
  UploadPermitsEnabled = 'upload_permits_enabled',
  /** column name */
  UploadPermitsFolderId = 'upload_permits_folder_id',
  /** column name */
  UploadSafetyReportsEnabled = 'upload_safety_reports_enabled',
  /** column name */
  UploadSafetyReportsFolderId = 'upload_safety_reports_folder_id',
  /** column name */
  UploadToolboxTalksEnabled = 'upload_toolbox_talks_enabled',
  /** column name */
  UploadToolboxTalksFolderId = 'upload_toolbox_talks_folder_id',
  /** column name */
  UserId = 'user_id',
  /** column name */
  UserLogin = 'user_login',
  /** column name */
  UserName = 'user_name'
}

/** input type for updating data in table "procore_project_data" */
export type Procore_Project_Data_Set_Input = {
  access_token?: Maybe<Scalars['String']>;
  integration_enabled?: Maybe<Scalars['Boolean']>;
  procore_company_id?: Maybe<Scalars['Int']>;
  procore_project_id?: Maybe<Scalars['String']>;
  procore_project_name?: Maybe<Scalars['String']>;
  project_id?: Maybe<Scalars['uuid']>;
  refresh_token?: Maybe<Scalars['String']>;
  sandbox?: Maybe<Scalars['Boolean']>;
  service_account_client_id?: Maybe<Scalars['String']>;
  service_account_client_secret?: Maybe<Scalars['String']>;
  switch?: Maybe<Scalars['Boolean']>;
  token_expires_at?: Maybe<Scalars['timestamp']>;
  upload_daily_reports_enabled?: Maybe<Scalars['Boolean']>;
  upload_daily_reports_folder_id?: Maybe<Scalars['Int']>;
  upload_permits_enabled?: Maybe<Scalars['Boolean']>;
  upload_permits_folder_id?: Maybe<Scalars['Int']>;
  upload_safety_reports_enabled?: Maybe<Scalars['Boolean']>;
  upload_safety_reports_folder_id?: Maybe<Scalars['Int']>;
  upload_toolbox_talks_enabled?: Maybe<Scalars['Boolean']>;
  upload_toolbox_talks_folder_id?: Maybe<Scalars['Int']>;
  user_id?: Maybe<Scalars['Int']>;
  user_login?: Maybe<Scalars['String']>;
  user_name?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Procore_Project_Data_Stddev_Fields = {
   __typename?: 'procore_project_data_stddev_fields';
  procore_company_id?: Maybe<Scalars['Float']>;
  upload_daily_reports_folder_id?: Maybe<Scalars['Float']>;
  upload_permits_folder_id?: Maybe<Scalars['Float']>;
  upload_safety_reports_folder_id?: Maybe<Scalars['Float']>;
  upload_toolbox_talks_folder_id?: Maybe<Scalars['Float']>;
  user_id?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "procore_project_data" */
export type Procore_Project_Data_Stddev_Order_By = {
  procore_company_id?: Maybe<Order_By>;
  upload_daily_reports_folder_id?: Maybe<Order_By>;
  upload_permits_folder_id?: Maybe<Order_By>;
  upload_safety_reports_folder_id?: Maybe<Order_By>;
  upload_toolbox_talks_folder_id?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Procore_Project_Data_Stddev_Pop_Fields = {
   __typename?: 'procore_project_data_stddev_pop_fields';
  procore_company_id?: Maybe<Scalars['Float']>;
  upload_daily_reports_folder_id?: Maybe<Scalars['Float']>;
  upload_permits_folder_id?: Maybe<Scalars['Float']>;
  upload_safety_reports_folder_id?: Maybe<Scalars['Float']>;
  upload_toolbox_talks_folder_id?: Maybe<Scalars['Float']>;
  user_id?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "procore_project_data" */
export type Procore_Project_Data_Stddev_Pop_Order_By = {
  procore_company_id?: Maybe<Order_By>;
  upload_daily_reports_folder_id?: Maybe<Order_By>;
  upload_permits_folder_id?: Maybe<Order_By>;
  upload_safety_reports_folder_id?: Maybe<Order_By>;
  upload_toolbox_talks_folder_id?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Procore_Project_Data_Stddev_Samp_Fields = {
   __typename?: 'procore_project_data_stddev_samp_fields';
  procore_company_id?: Maybe<Scalars['Float']>;
  upload_daily_reports_folder_id?: Maybe<Scalars['Float']>;
  upload_permits_folder_id?: Maybe<Scalars['Float']>;
  upload_safety_reports_folder_id?: Maybe<Scalars['Float']>;
  upload_toolbox_talks_folder_id?: Maybe<Scalars['Float']>;
  user_id?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "procore_project_data" */
export type Procore_Project_Data_Stddev_Samp_Order_By = {
  procore_company_id?: Maybe<Order_By>;
  upload_daily_reports_folder_id?: Maybe<Order_By>;
  upload_permits_folder_id?: Maybe<Order_By>;
  upload_safety_reports_folder_id?: Maybe<Order_By>;
  upload_toolbox_talks_folder_id?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Procore_Project_Data_Sum_Fields = {
   __typename?: 'procore_project_data_sum_fields';
  procore_company_id?: Maybe<Scalars['Int']>;
  upload_daily_reports_folder_id?: Maybe<Scalars['Int']>;
  upload_permits_folder_id?: Maybe<Scalars['Int']>;
  upload_safety_reports_folder_id?: Maybe<Scalars['Int']>;
  upload_toolbox_talks_folder_id?: Maybe<Scalars['Int']>;
  user_id?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "procore_project_data" */
export type Procore_Project_Data_Sum_Order_By = {
  procore_company_id?: Maybe<Order_By>;
  upload_daily_reports_folder_id?: Maybe<Order_By>;
  upload_permits_folder_id?: Maybe<Order_By>;
  upload_safety_reports_folder_id?: Maybe<Order_By>;
  upload_toolbox_talks_folder_id?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
};

/** update columns of table "procore_project_data" */
export enum Procore_Project_Data_Update_Column {
  /** column name */
  AccessToken = 'access_token',
  /** column name */
  IntegrationEnabled = 'integration_enabled',
  /** column name */
  ProcoreCompanyId = 'procore_company_id',
  /** column name */
  ProcoreProjectId = 'procore_project_id',
  /** column name */
  ProcoreProjectName = 'procore_project_name',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  RefreshToken = 'refresh_token',
  /** column name */
  Sandbox = 'sandbox',
  /** column name */
  ServiceAccountClientId = 'service_account_client_id',
  /** column name */
  ServiceAccountClientSecret = 'service_account_client_secret',
  /** column name */
  Switch = 'switch',
  /** column name */
  TokenExpiresAt = 'token_expires_at',
  /** column name */
  UploadDailyReportsEnabled = 'upload_daily_reports_enabled',
  /** column name */
  UploadDailyReportsFolderId = 'upload_daily_reports_folder_id',
  /** column name */
  UploadPermitsEnabled = 'upload_permits_enabled',
  /** column name */
  UploadPermitsFolderId = 'upload_permits_folder_id',
  /** column name */
  UploadSafetyReportsEnabled = 'upload_safety_reports_enabled',
  /** column name */
  UploadSafetyReportsFolderId = 'upload_safety_reports_folder_id',
  /** column name */
  UploadToolboxTalksEnabled = 'upload_toolbox_talks_enabled',
  /** column name */
  UploadToolboxTalksFolderId = 'upload_toolbox_talks_folder_id',
  /** column name */
  UserId = 'user_id',
  /** column name */
  UserLogin = 'user_login',
  /** column name */
  UserName = 'user_name'
}

/** aggregate var_pop on columns */
export type Procore_Project_Data_Var_Pop_Fields = {
   __typename?: 'procore_project_data_var_pop_fields';
  procore_company_id?: Maybe<Scalars['Float']>;
  upload_daily_reports_folder_id?: Maybe<Scalars['Float']>;
  upload_permits_folder_id?: Maybe<Scalars['Float']>;
  upload_safety_reports_folder_id?: Maybe<Scalars['Float']>;
  upload_toolbox_talks_folder_id?: Maybe<Scalars['Float']>;
  user_id?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "procore_project_data" */
export type Procore_Project_Data_Var_Pop_Order_By = {
  procore_company_id?: Maybe<Order_By>;
  upload_daily_reports_folder_id?: Maybe<Order_By>;
  upload_permits_folder_id?: Maybe<Order_By>;
  upload_safety_reports_folder_id?: Maybe<Order_By>;
  upload_toolbox_talks_folder_id?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Procore_Project_Data_Var_Samp_Fields = {
   __typename?: 'procore_project_data_var_samp_fields';
  procore_company_id?: Maybe<Scalars['Float']>;
  upload_daily_reports_folder_id?: Maybe<Scalars['Float']>;
  upload_permits_folder_id?: Maybe<Scalars['Float']>;
  upload_safety_reports_folder_id?: Maybe<Scalars['Float']>;
  upload_toolbox_talks_folder_id?: Maybe<Scalars['Float']>;
  user_id?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "procore_project_data" */
export type Procore_Project_Data_Var_Samp_Order_By = {
  procore_company_id?: Maybe<Order_By>;
  upload_daily_reports_folder_id?: Maybe<Order_By>;
  upload_permits_folder_id?: Maybe<Order_By>;
  upload_safety_reports_folder_id?: Maybe<Order_By>;
  upload_toolbox_talks_folder_id?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Procore_Project_Data_Variance_Fields = {
   __typename?: 'procore_project_data_variance_fields';
  procore_company_id?: Maybe<Scalars['Float']>;
  upload_daily_reports_folder_id?: Maybe<Scalars['Float']>;
  upload_permits_folder_id?: Maybe<Scalars['Float']>;
  upload_safety_reports_folder_id?: Maybe<Scalars['Float']>;
  upload_toolbox_talks_folder_id?: Maybe<Scalars['Float']>;
  user_id?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "procore_project_data" */
export type Procore_Project_Data_Variance_Order_By = {
  procore_company_id?: Maybe<Order_By>;
  upload_daily_reports_folder_id?: Maybe<Order_By>;
  upload_permits_folder_id?: Maybe<Order_By>;
  upload_safety_reports_folder_id?: Maybe<Order_By>;
  upload_toolbox_talks_folder_id?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
};

/**
 * deprecated!!! DO NOT USE IT.  use procore_auth_data instead
 * 
 * 
 * columns and relationships of "procore_service_account"
 */
export type Procore_Service_Account = {
   __typename?: 'procore_service_account';
  client_id: Scalars['String'];
  client_secret?: Maybe<Scalars['String']>;
  /** An object relationship */
  general_contractor: General_Contractor;
  general_contractor_id: Scalars['uuid'];
  procore_user_name?: Maybe<Scalars['String']>;
  refresh_token?: Maybe<Scalars['String']>;
  switch: Scalars['Boolean'];
  token_expires_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregated selection of "procore_service_account" */
export type Procore_Service_Account_Aggregate = {
   __typename?: 'procore_service_account_aggregate';
  aggregate?: Maybe<Procore_Service_Account_Aggregate_Fields>;
  nodes: Array<Procore_Service_Account>;
};

/** aggregate fields of "procore_service_account" */
export type Procore_Service_Account_Aggregate_Fields = {
   __typename?: 'procore_service_account_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Procore_Service_Account_Max_Fields>;
  min?: Maybe<Procore_Service_Account_Min_Fields>;
};


/** aggregate fields of "procore_service_account" */
export type Procore_Service_Account_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Procore_Service_Account_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "procore_service_account" */
export type Procore_Service_Account_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Procore_Service_Account_Max_Order_By>;
  min?: Maybe<Procore_Service_Account_Min_Order_By>;
};

/** input type for inserting array relation for remote table "procore_service_account" */
export type Procore_Service_Account_Arr_Rel_Insert_Input = {
  data: Array<Procore_Service_Account_Insert_Input>;
  on_conflict?: Maybe<Procore_Service_Account_On_Conflict>;
};

/** Boolean expression to filter rows from the table "procore_service_account". All fields are combined with a logical 'AND'. */
export type Procore_Service_Account_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Procore_Service_Account_Bool_Exp>>>;
  _not?: Maybe<Procore_Service_Account_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Procore_Service_Account_Bool_Exp>>>;
  client_id?: Maybe<String_Comparison_Exp>;
  client_secret?: Maybe<String_Comparison_Exp>;
  general_contractor?: Maybe<General_Contractor_Bool_Exp>;
  general_contractor_id?: Maybe<Uuid_Comparison_Exp>;
  procore_user_name?: Maybe<String_Comparison_Exp>;
  refresh_token?: Maybe<String_Comparison_Exp>;
  switch?: Maybe<Boolean_Comparison_Exp>;
  token_expires_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "procore_service_account" */
export enum Procore_Service_Account_Constraint {
  /** unique or primary key constraint */
  ProcoreServiceAccountGeneralContractorIdKey = 'procore_service_account_general_contractor_id_key',
  /** unique or primary key constraint */
  ProcoreServiceAccountPkey = 'procore_service_account_pkey'
}

/** input type for inserting data into table "procore_service_account" */
export type Procore_Service_Account_Insert_Input = {
  client_id?: Maybe<Scalars['String']>;
  client_secret?: Maybe<Scalars['String']>;
  general_contractor?: Maybe<General_Contractor_Obj_Rel_Insert_Input>;
  general_contractor_id?: Maybe<Scalars['uuid']>;
  procore_user_name?: Maybe<Scalars['String']>;
  refresh_token?: Maybe<Scalars['String']>;
  switch?: Maybe<Scalars['Boolean']>;
  token_expires_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate max on columns */
export type Procore_Service_Account_Max_Fields = {
   __typename?: 'procore_service_account_max_fields';
  client_id?: Maybe<Scalars['String']>;
  client_secret?: Maybe<Scalars['String']>;
  general_contractor_id?: Maybe<Scalars['uuid']>;
  procore_user_name?: Maybe<Scalars['String']>;
  refresh_token?: Maybe<Scalars['String']>;
  token_expires_at?: Maybe<Scalars['timestamptz']>;
};

/** order by max() on columns of table "procore_service_account" */
export type Procore_Service_Account_Max_Order_By = {
  client_id?: Maybe<Order_By>;
  client_secret?: Maybe<Order_By>;
  general_contractor_id?: Maybe<Order_By>;
  procore_user_name?: Maybe<Order_By>;
  refresh_token?: Maybe<Order_By>;
  token_expires_at?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Procore_Service_Account_Min_Fields = {
   __typename?: 'procore_service_account_min_fields';
  client_id?: Maybe<Scalars['String']>;
  client_secret?: Maybe<Scalars['String']>;
  general_contractor_id?: Maybe<Scalars['uuid']>;
  procore_user_name?: Maybe<Scalars['String']>;
  refresh_token?: Maybe<Scalars['String']>;
  token_expires_at?: Maybe<Scalars['timestamptz']>;
};

/** order by min() on columns of table "procore_service_account" */
export type Procore_Service_Account_Min_Order_By = {
  client_id?: Maybe<Order_By>;
  client_secret?: Maybe<Order_By>;
  general_contractor_id?: Maybe<Order_By>;
  procore_user_name?: Maybe<Order_By>;
  refresh_token?: Maybe<Order_By>;
  token_expires_at?: Maybe<Order_By>;
};

/** response of any mutation on the table "procore_service_account" */
export type Procore_Service_Account_Mutation_Response = {
   __typename?: 'procore_service_account_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Procore_Service_Account>;
};

/** input type for inserting object relation for remote table "procore_service_account" */
export type Procore_Service_Account_Obj_Rel_Insert_Input = {
  data: Procore_Service_Account_Insert_Input;
  on_conflict?: Maybe<Procore_Service_Account_On_Conflict>;
};

/** on conflict condition type for table "procore_service_account" */
export type Procore_Service_Account_On_Conflict = {
  constraint: Procore_Service_Account_Constraint;
  update_columns: Array<Procore_Service_Account_Update_Column>;
  where?: Maybe<Procore_Service_Account_Bool_Exp>;
};

/** ordering options when selecting data from "procore_service_account" */
export type Procore_Service_Account_Order_By = {
  client_id?: Maybe<Order_By>;
  client_secret?: Maybe<Order_By>;
  general_contractor?: Maybe<General_Contractor_Order_By>;
  general_contractor_id?: Maybe<Order_By>;
  procore_user_name?: Maybe<Order_By>;
  refresh_token?: Maybe<Order_By>;
  switch?: Maybe<Order_By>;
  token_expires_at?: Maybe<Order_By>;
};

/** primary key columns input for table: "procore_service_account" */
export type Procore_Service_Account_Pk_Columns_Input = {
  general_contractor_id: Scalars['uuid'];
};

/** select columns of table "procore_service_account" */
export enum Procore_Service_Account_Select_Column {
  /** column name */
  ClientId = 'client_id',
  /** column name */
  ClientSecret = 'client_secret',
  /** column name */
  GeneralContractorId = 'general_contractor_id',
  /** column name */
  ProcoreUserName = 'procore_user_name',
  /** column name */
  RefreshToken = 'refresh_token',
  /** column name */
  Switch = 'switch',
  /** column name */
  TokenExpiresAt = 'token_expires_at'
}

/** input type for updating data in table "procore_service_account" */
export type Procore_Service_Account_Set_Input = {
  client_id?: Maybe<Scalars['String']>;
  client_secret?: Maybe<Scalars['String']>;
  general_contractor_id?: Maybe<Scalars['uuid']>;
  procore_user_name?: Maybe<Scalars['String']>;
  refresh_token?: Maybe<Scalars['String']>;
  switch?: Maybe<Scalars['Boolean']>;
  token_expires_at?: Maybe<Scalars['timestamptz']>;
};

/** update columns of table "procore_service_account" */
export enum Procore_Service_Account_Update_Column {
  /** column name */
  ClientId = 'client_id',
  /** column name */
  ClientSecret = 'client_secret',
  /** column name */
  GeneralContractorId = 'general_contractor_id',
  /** column name */
  ProcoreUserName = 'procore_user_name',
  /** column name */
  RefreshToken = 'refresh_token',
  /** column name */
  Switch = 'switch',
  /** column name */
  TokenExpiresAt = 'token_expires_at'
}

/** columns and relationships of "procore_subcontractor" */
export type Procore_Subcontractor = {
   __typename?: 'procore_subcontractor';
  id: Scalars['uuid'];
  procore_subcontractor_id?: Maybe<Scalars['String']>;
  procore_subcontractor_name?: Maybe<Scalars['String']>;
  /** An object relationship */
  project: Project;
  project_id: Scalars['uuid'];
  subcontractor_id: Scalars['uuid'];
  switch: Scalars['Boolean'];
};

/** aggregated selection of "procore_subcontractor" */
export type Procore_Subcontractor_Aggregate = {
   __typename?: 'procore_subcontractor_aggregate';
  aggregate?: Maybe<Procore_Subcontractor_Aggregate_Fields>;
  nodes: Array<Procore_Subcontractor>;
};

/** aggregate fields of "procore_subcontractor" */
export type Procore_Subcontractor_Aggregate_Fields = {
   __typename?: 'procore_subcontractor_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Procore_Subcontractor_Max_Fields>;
  min?: Maybe<Procore_Subcontractor_Min_Fields>;
};


/** aggregate fields of "procore_subcontractor" */
export type Procore_Subcontractor_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Procore_Subcontractor_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "procore_subcontractor" */
export type Procore_Subcontractor_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Procore_Subcontractor_Max_Order_By>;
  min?: Maybe<Procore_Subcontractor_Min_Order_By>;
};

/** input type for inserting array relation for remote table "procore_subcontractor" */
export type Procore_Subcontractor_Arr_Rel_Insert_Input = {
  data: Array<Procore_Subcontractor_Insert_Input>;
  on_conflict?: Maybe<Procore_Subcontractor_On_Conflict>;
};

/** Boolean expression to filter rows from the table "procore_subcontractor". All fields are combined with a logical 'AND'. */
export type Procore_Subcontractor_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Procore_Subcontractor_Bool_Exp>>>;
  _not?: Maybe<Procore_Subcontractor_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Procore_Subcontractor_Bool_Exp>>>;
  id?: Maybe<Uuid_Comparison_Exp>;
  procore_subcontractor_id?: Maybe<String_Comparison_Exp>;
  procore_subcontractor_name?: Maybe<String_Comparison_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  subcontractor_id?: Maybe<Uuid_Comparison_Exp>;
  switch?: Maybe<Boolean_Comparison_Exp>;
};

/** unique or primary key constraints on table "procore_subcontractor" */
export enum Procore_Subcontractor_Constraint {
  /** unique or primary key constraint */
  ProcoreSubcontractorPkey = 'procore_subcontractor_pkey',
  /** unique or primary key constraint */
  ProcoreSubcontractorProjectIdSubcontractorIdKey = 'procore_subcontractor_project_id_subcontractor_id_key'
}

/** input type for inserting data into table "procore_subcontractor" */
export type Procore_Subcontractor_Insert_Input = {
  id?: Maybe<Scalars['uuid']>;
  procore_subcontractor_id?: Maybe<Scalars['String']>;
  procore_subcontractor_name?: Maybe<Scalars['String']>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  switch?: Maybe<Scalars['Boolean']>;
};

/** aggregate max on columns */
export type Procore_Subcontractor_Max_Fields = {
   __typename?: 'procore_subcontractor_max_fields';
  id?: Maybe<Scalars['uuid']>;
  procore_subcontractor_id?: Maybe<Scalars['String']>;
  procore_subcontractor_name?: Maybe<Scalars['String']>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "procore_subcontractor" */
export type Procore_Subcontractor_Max_Order_By = {
  id?: Maybe<Order_By>;
  procore_subcontractor_id?: Maybe<Order_By>;
  procore_subcontractor_name?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Procore_Subcontractor_Min_Fields = {
   __typename?: 'procore_subcontractor_min_fields';
  id?: Maybe<Scalars['uuid']>;
  procore_subcontractor_id?: Maybe<Scalars['String']>;
  procore_subcontractor_name?: Maybe<Scalars['String']>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "procore_subcontractor" */
export type Procore_Subcontractor_Min_Order_By = {
  id?: Maybe<Order_By>;
  procore_subcontractor_id?: Maybe<Order_By>;
  procore_subcontractor_name?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "procore_subcontractor" */
export type Procore_Subcontractor_Mutation_Response = {
   __typename?: 'procore_subcontractor_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Procore_Subcontractor>;
};

/** input type for inserting object relation for remote table "procore_subcontractor" */
export type Procore_Subcontractor_Obj_Rel_Insert_Input = {
  data: Procore_Subcontractor_Insert_Input;
  on_conflict?: Maybe<Procore_Subcontractor_On_Conflict>;
};

/** on conflict condition type for table "procore_subcontractor" */
export type Procore_Subcontractor_On_Conflict = {
  constraint: Procore_Subcontractor_Constraint;
  update_columns: Array<Procore_Subcontractor_Update_Column>;
  where?: Maybe<Procore_Subcontractor_Bool_Exp>;
};

/** ordering options when selecting data from "procore_subcontractor" */
export type Procore_Subcontractor_Order_By = {
  id?: Maybe<Order_By>;
  procore_subcontractor_id?: Maybe<Order_By>;
  procore_subcontractor_name?: Maybe<Order_By>;
  project?: Maybe<Project_Order_By>;
  project_id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  switch?: Maybe<Order_By>;
};

/** primary key columns input for table: "procore_subcontractor" */
export type Procore_Subcontractor_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "procore_subcontractor" */
export enum Procore_Subcontractor_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  ProcoreSubcontractorId = 'procore_subcontractor_id',
  /** column name */
  ProcoreSubcontractorName = 'procore_subcontractor_name',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  Switch = 'switch'
}

/** input type for updating data in table "procore_subcontractor" */
export type Procore_Subcontractor_Set_Input = {
  id?: Maybe<Scalars['uuid']>;
  procore_subcontractor_id?: Maybe<Scalars['String']>;
  procore_subcontractor_name?: Maybe<Scalars['String']>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  switch?: Maybe<Scalars['Boolean']>;
};

/** update columns of table "procore_subcontractor" */
export enum Procore_Subcontractor_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  ProcoreSubcontractorId = 'procore_subcontractor_id',
  /** column name */
  ProcoreSubcontractorName = 'procore_subcontractor_name',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  Switch = 'switch'
}

export type ProcoreDailyLogInput = {
  daily_work_log_id: Scalars['String'];
};

export type ProcoreDailyLogOutput = {
   __typename?: 'ProcoreDailyLogOutput';
  statement: Scalars['String'];
};

export type ProcoreDailyNoteInput = {
  daily_note_id: Scalars['String'];
};

export type ProcoreDailyNoteOutput = {
   __typename?: 'ProcoreDailyNoteOutput';
  statement: Scalars['String'];
};

export type ProcoreDailyWeatherInput = {
  daily_weather_observation_id: Scalars['String'];
};

export type ProcoreDailyWeatherOutput = {
   __typename?: 'ProcoreDailyWeatherOutput';
  statement: Scalars['String'];
};

export type ProcoreGenerateTokenInput = {
  general_contractor_id?: Maybe<Scalars['String']>;
  project_id?: Maybe<Scalars['String']>;
};

export type ProcoreProjectFolder = {
   __typename?: 'ProcoreProjectFolder';
  has_children_files?: Maybe<Scalars['Boolean']>;
  has_children_folders: Scalars['Boolean'];
  id: Scalars['Int'];
  name: Scalars['String'];
  parent_id?: Maybe<Scalars['Int']>;
  path: Scalars['String'];
};

export type ProcoreProjectFoldersInput = {
  general_contractor_id?: Maybe<Scalars['String']>;
  procore_folder_id?: Maybe<Scalars['Int']>;
  procore_project_id: Scalars['Int'];
  project_id?: Maybe<Scalars['String']>;
};

export type ProcoreProjectFoldersOutput = {
   __typename?: 'ProcoreProjectFoldersOutput';
  folders: Array<ProcoreProjectFolder>;
};

export type ProcoreProjectListInput = {
  general_contractor_id?: Maybe<Scalars['String']>;
  project_id?: Maybe<Scalars['String']>;
};

export type ProcoreProjectListOutput = {
   __typename?: 'ProcoreProjectListOutput';
  project: Array<ProjectDetails>;
};

export type ProcoreSetUserAccountInput = {
  general_contractor_id?: Maybe<Scalars['String']>;
  project_id?: Maybe<Scalars['String']>;
  redirect_url?: Maybe<Scalars['String']>;
  sandbox?: Maybe<Scalars['Boolean']>;
  user_code: Scalars['String'];
};

export type ProcoreSetUserAccountOutput = {
   __typename?: 'ProcoreSetUserAccountOutput';
  user_id: Scalars['Int'];
  user_login: Scalars['String'];
  user_name: Scalars['String'];
};

export type ProcoreSubcontractorListInput = {
  general_contractor_id?: Maybe<Scalars['String']>;
  procore_project_id: Scalars['String'];
  project_id?: Maybe<Scalars['String']>;
};

export type ProcoreSubcontractorListOutput = {
   __typename?: 'ProcoreSubcontractorListOutput';
  subcontractor: Array<SubcontractorDetails>;
};

/** columns and relationships of "project" */
export type Project = {
   __typename?: 'project';
  /** An object relationship */
  address: Address;
  address_id: Scalars['uuid'];
  /** An array relationship */
  chats: Array<Chat>;
  /** An aggregated array relationship */
  chats_aggregate: Chat_Aggregate;
  completed: Scalars['Boolean'];
  created_at: Scalars['timestamptz'];
  /** An array relationship */
  daily_reports: Array<Daily_Report>;
  /** An aggregated array relationship */
  daily_reports_aggregate: Daily_Report_Aggregate;
  dashboard_updated_at: Scalars['timestamptz'];
  external_id?: Maybe<Scalars['String']>;
  /** An object relationship */
  general_contractor: General_Contractor;
  general_contractor_id: Scalars['uuid'];
  id: Scalars['uuid'];
  is_dashboard_active: Scalars['Boolean'];
  is_sitedelivery_active: Scalars['Boolean'];
  is_sitedelivery_on: Scalars['Boolean'];
  name: Scalars['String'];
  pemit_contact_project_employee_id?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  permit_contact_project_employee?: Maybe<Project_Employee>;
  /** An array relationship */
  permits: Array<Permit>;
  /** An aggregated array relationship */
  permits_aggregate: Permit_Aggregate;
  /** An object relationship */
  procore_project_data?: Maybe<Procore_Project_Data>;
  /** An array relationship */
  project_completion_automated_notifications: Array<Project_Completion_Automated_Notification>;
  /** An aggregated array relationship */
  project_completion_automated_notifications_aggregate: Project_Completion_Automated_Notification_Aggregate;
  /** An object relationship */
  project_covid_config?: Maybe<Project_Covid_Config>;
  /** An array relationship */
  project_covid_guest_certifications: Array<Project_Covid_Guest_Certification>;
  /** An aggregated array relationship */
  project_covid_guest_certifications_aggregate: Project_Covid_Guest_Certification_Aggregate;
  /** An array relationship */
  project_covid_yes_no_questions: Array<Project_Covid_Yes_No_Question>;
  /** An aggregated array relationship */
  project_covid_yes_no_questions_aggregate: Project_Covid_Yes_No_Question_Aggregate;
  /** An array relationship */
  project_crews: Array<Project_Crew>;
  /** An aggregated array relationship */
  project_crews_aggregate: Project_Crew_Aggregate;
  /** An array relationship */
  project_employees: Array<Project_Employee>;
  /** An aggregated array relationship */
  project_employees_aggregate: Project_Employee_Aggregate;
  /** An array relationship */
  project_hazards: Array<Project_Hazard>;
  /** An aggregated array relationship */
  project_hazards_aggregate: Project_Hazard_Aggregate;
  /** An object relationship */
  project_report_settings?: Maybe<Project_Report_Settings>;
  /** An array relationship */
  project_subcontractors: Array<Project_Subcontractor>;
  /** An aggregated array relationship */
  project_subcontractors_aggregate: Project_Subcontractor_Aggregate;
  /** An array relationship */
  project_workers: Array<Project_Worker>;
  /** An aggregated array relationship */
  project_workers_aggregate: Project_Worker_Aggregate;
  qr_code_url?: Maybe<Scalars['String']>;
  /** An array relationship */
  reports: Array<Report>;
  /** An aggregated array relationship */
  reports_aggregate: Report_Aggregate;
  safety_report_awareness_disabled: Scalars['Boolean'];
  /** An array relationship */
  todos: Array<Todo>;
  /** An aggregated array relationship */
  todos_aggregate: Todo_Aggregate;
  /** An array relationship */
  toolbox_talks: Array<Toolbox_Talk>;
  /** An aggregated array relationship */
  toolbox_talks_aggregate: Toolbox_Talk_Aggregate;
  updated_at: Scalars['timestamptz'];
  /** An array relationship */
  user_notifications: Array<User_Notification>;
  /** An aggregated array relationship */
  user_notifications_aggregate: User_Notification_Aggregate;
};


/** columns and relationships of "project" */
export type ProjectChatsArgs = {
  distinct_on?: Maybe<Array<Chat_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Order_By>>;
  where?: Maybe<Chat_Bool_Exp>;
};


/** columns and relationships of "project" */
export type ProjectChats_AggregateArgs = {
  distinct_on?: Maybe<Array<Chat_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Order_By>>;
  where?: Maybe<Chat_Bool_Exp>;
};


/** columns and relationships of "project" */
export type ProjectDaily_ReportsArgs = {
  distinct_on?: Maybe<Array<Daily_Report_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Report_Order_By>>;
  where?: Maybe<Daily_Report_Bool_Exp>;
};


/** columns and relationships of "project" */
export type ProjectDaily_Reports_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Report_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Report_Order_By>>;
  where?: Maybe<Daily_Report_Bool_Exp>;
};


/** columns and relationships of "project" */
export type ProjectPermitsArgs = {
  distinct_on?: Maybe<Array<Permit_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Permit_Order_By>>;
  where?: Maybe<Permit_Bool_Exp>;
};


/** columns and relationships of "project" */
export type ProjectPermits_AggregateArgs = {
  distinct_on?: Maybe<Array<Permit_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Permit_Order_By>>;
  where?: Maybe<Permit_Bool_Exp>;
};


/** columns and relationships of "project" */
export type ProjectProject_Completion_Automated_NotificationsArgs = {
  distinct_on?: Maybe<Array<Project_Completion_Automated_Notification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Completion_Automated_Notification_Order_By>>;
  where?: Maybe<Project_Completion_Automated_Notification_Bool_Exp>;
};


/** columns and relationships of "project" */
export type ProjectProject_Completion_Automated_Notifications_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Completion_Automated_Notification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Completion_Automated_Notification_Order_By>>;
  where?: Maybe<Project_Completion_Automated_Notification_Bool_Exp>;
};


/** columns and relationships of "project" */
export type ProjectProject_Covid_Guest_CertificationsArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Guest_Certification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Guest_Certification_Order_By>>;
  where?: Maybe<Project_Covid_Guest_Certification_Bool_Exp>;
};


/** columns and relationships of "project" */
export type ProjectProject_Covid_Guest_Certifications_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Guest_Certification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Guest_Certification_Order_By>>;
  where?: Maybe<Project_Covid_Guest_Certification_Bool_Exp>;
};


/** columns and relationships of "project" */
export type ProjectProject_Covid_Yes_No_QuestionsArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Yes_No_Question_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Yes_No_Question_Order_By>>;
  where?: Maybe<Project_Covid_Yes_No_Question_Bool_Exp>;
};


/** columns and relationships of "project" */
export type ProjectProject_Covid_Yes_No_Questions_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Yes_No_Question_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Yes_No_Question_Order_By>>;
  where?: Maybe<Project_Covid_Yes_No_Question_Bool_Exp>;
};


/** columns and relationships of "project" */
export type ProjectProject_CrewsArgs = {
  distinct_on?: Maybe<Array<Project_Crew_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Crew_Order_By>>;
  where?: Maybe<Project_Crew_Bool_Exp>;
};


/** columns and relationships of "project" */
export type ProjectProject_Crews_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Crew_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Crew_Order_By>>;
  where?: Maybe<Project_Crew_Bool_Exp>;
};


/** columns and relationships of "project" */
export type ProjectProject_EmployeesArgs = {
  distinct_on?: Maybe<Array<Project_Employee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Employee_Order_By>>;
  where?: Maybe<Project_Employee_Bool_Exp>;
};


/** columns and relationships of "project" */
export type ProjectProject_Employees_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Employee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Employee_Order_By>>;
  where?: Maybe<Project_Employee_Bool_Exp>;
};


/** columns and relationships of "project" */
export type ProjectProject_HazardsArgs = {
  distinct_on?: Maybe<Array<Project_Hazard_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Hazard_Order_By>>;
  where?: Maybe<Project_Hazard_Bool_Exp>;
};


/** columns and relationships of "project" */
export type ProjectProject_Hazards_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Hazard_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Hazard_Order_By>>;
  where?: Maybe<Project_Hazard_Bool_Exp>;
};


/** columns and relationships of "project" */
export type ProjectProject_SubcontractorsArgs = {
  distinct_on?: Maybe<Array<Project_Subcontractor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Subcontractor_Order_By>>;
  where?: Maybe<Project_Subcontractor_Bool_Exp>;
};


/** columns and relationships of "project" */
export type ProjectProject_Subcontractors_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Subcontractor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Subcontractor_Order_By>>;
  where?: Maybe<Project_Subcontractor_Bool_Exp>;
};


/** columns and relationships of "project" */
export type ProjectProject_WorkersArgs = {
  distinct_on?: Maybe<Array<Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Worker_Order_By>>;
  where?: Maybe<Project_Worker_Bool_Exp>;
};


/** columns and relationships of "project" */
export type ProjectProject_Workers_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Worker_Order_By>>;
  where?: Maybe<Project_Worker_Bool_Exp>;
};


/** columns and relationships of "project" */
export type ProjectReportsArgs = {
  distinct_on?: Maybe<Array<Report_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Order_By>>;
  where?: Maybe<Report_Bool_Exp>;
};


/** columns and relationships of "project" */
export type ProjectReports_AggregateArgs = {
  distinct_on?: Maybe<Array<Report_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Order_By>>;
  where?: Maybe<Report_Bool_Exp>;
};


/** columns and relationships of "project" */
export type ProjectTodosArgs = {
  distinct_on?: Maybe<Array<Todo_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Todo_Order_By>>;
  where?: Maybe<Todo_Bool_Exp>;
};


/** columns and relationships of "project" */
export type ProjectTodos_AggregateArgs = {
  distinct_on?: Maybe<Array<Todo_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Todo_Order_By>>;
  where?: Maybe<Todo_Bool_Exp>;
};


/** columns and relationships of "project" */
export type ProjectToolbox_TalksArgs = {
  distinct_on?: Maybe<Array<Toolbox_Talk_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Toolbox_Talk_Order_By>>;
  where?: Maybe<Toolbox_Talk_Bool_Exp>;
};


/** columns and relationships of "project" */
export type ProjectToolbox_Talks_AggregateArgs = {
  distinct_on?: Maybe<Array<Toolbox_Talk_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Toolbox_Talk_Order_By>>;
  where?: Maybe<Toolbox_Talk_Bool_Exp>;
};


/** columns and relationships of "project" */
export type ProjectUser_NotificationsArgs = {
  distinct_on?: Maybe<Array<User_Notification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Notification_Order_By>>;
  where?: Maybe<User_Notification_Bool_Exp>;
};


/** columns and relationships of "project" */
export type ProjectUser_Notifications_AggregateArgs = {
  distinct_on?: Maybe<Array<User_Notification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Notification_Order_By>>;
  where?: Maybe<User_Notification_Bool_Exp>;
};

/** aggregated selection of "project" */
export type Project_Aggregate = {
   __typename?: 'project_aggregate';
  aggregate?: Maybe<Project_Aggregate_Fields>;
  nodes: Array<Project>;
};

/** aggregate fields of "project" */
export type Project_Aggregate_Fields = {
   __typename?: 'project_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Project_Max_Fields>;
  min?: Maybe<Project_Min_Fields>;
};


/** aggregate fields of "project" */
export type Project_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Project_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "project" */
export type Project_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Project_Max_Order_By>;
  min?: Maybe<Project_Min_Order_By>;
};

/** input type for inserting array relation for remote table "project" */
export type Project_Arr_Rel_Insert_Input = {
  data: Array<Project_Insert_Input>;
  on_conflict?: Maybe<Project_On_Conflict>;
};

/** Boolean expression to filter rows from the table "project". All fields are combined with a logical 'AND'. */
export type Project_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Project_Bool_Exp>>>;
  _not?: Maybe<Project_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Project_Bool_Exp>>>;
  address?: Maybe<Address_Bool_Exp>;
  address_id?: Maybe<Uuid_Comparison_Exp>;
  chats?: Maybe<Chat_Bool_Exp>;
  completed?: Maybe<Boolean_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  daily_reports?: Maybe<Daily_Report_Bool_Exp>;
  dashboard_updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  external_id?: Maybe<String_Comparison_Exp>;
  general_contractor?: Maybe<General_Contractor_Bool_Exp>;
  general_contractor_id?: Maybe<Uuid_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  is_dashboard_active?: Maybe<Boolean_Comparison_Exp>;
  is_sitedelivery_active?: Maybe<Boolean_Comparison_Exp>;
  is_sitedelivery_on?: Maybe<Boolean_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  pemit_contact_project_employee_id?: Maybe<Uuid_Comparison_Exp>;
  permit_contact_project_employee?: Maybe<Project_Employee_Bool_Exp>;
  permits?: Maybe<Permit_Bool_Exp>;
  procore_project_data?: Maybe<Procore_Project_Data_Bool_Exp>;
  project_completion_automated_notifications?: Maybe<Project_Completion_Automated_Notification_Bool_Exp>;
  project_covid_config?: Maybe<Project_Covid_Config_Bool_Exp>;
  project_covid_guest_certifications?: Maybe<Project_Covid_Guest_Certification_Bool_Exp>;
  project_covid_yes_no_questions?: Maybe<Project_Covid_Yes_No_Question_Bool_Exp>;
  project_crews?: Maybe<Project_Crew_Bool_Exp>;
  project_employees?: Maybe<Project_Employee_Bool_Exp>;
  project_hazards?: Maybe<Project_Hazard_Bool_Exp>;
  project_report_settings?: Maybe<Project_Report_Settings_Bool_Exp>;
  project_subcontractors?: Maybe<Project_Subcontractor_Bool_Exp>;
  project_workers?: Maybe<Project_Worker_Bool_Exp>;
  qr_code_url?: Maybe<String_Comparison_Exp>;
  reports?: Maybe<Report_Bool_Exp>;
  safety_report_awareness_disabled?: Maybe<Boolean_Comparison_Exp>;
  todos?: Maybe<Todo_Bool_Exp>;
  toolbox_talks?: Maybe<Toolbox_Talk_Bool_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  user_notifications?: Maybe<User_Notification_Bool_Exp>;
};

/** columns and relationships of "project_completion_automated_notification" */
export type Project_Completion_Automated_Notification = {
   __typename?: 'project_completion_automated_notification';
  created_at: Scalars['timestamptz'];
  id: Scalars['uuid'];
  message: Scalars['String'];
  offset: Scalars['timestamptz'];
  /** An object relationship */
  project: Project;
  project_id: Scalars['uuid'];
  report_type: Scalars['String'];
  send_to: Scalars['String'];
  timezone?: Maybe<Scalars['String']>;
  /** An object relationship */
  user?: Maybe<User>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** aggregated selection of "project_completion_automated_notification" */
export type Project_Completion_Automated_Notification_Aggregate = {
   __typename?: 'project_completion_automated_notification_aggregate';
  aggregate?: Maybe<Project_Completion_Automated_Notification_Aggregate_Fields>;
  nodes: Array<Project_Completion_Automated_Notification>;
};

/** aggregate fields of "project_completion_automated_notification" */
export type Project_Completion_Automated_Notification_Aggregate_Fields = {
   __typename?: 'project_completion_automated_notification_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Project_Completion_Automated_Notification_Max_Fields>;
  min?: Maybe<Project_Completion_Automated_Notification_Min_Fields>;
};


/** aggregate fields of "project_completion_automated_notification" */
export type Project_Completion_Automated_Notification_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Project_Completion_Automated_Notification_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "project_completion_automated_notification" */
export type Project_Completion_Automated_Notification_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Project_Completion_Automated_Notification_Max_Order_By>;
  min?: Maybe<Project_Completion_Automated_Notification_Min_Order_By>;
};

/** input type for inserting array relation for remote table "project_completion_automated_notification" */
export type Project_Completion_Automated_Notification_Arr_Rel_Insert_Input = {
  data: Array<Project_Completion_Automated_Notification_Insert_Input>;
  on_conflict?: Maybe<Project_Completion_Automated_Notification_On_Conflict>;
};

/**
 * Boolean expression to filter rows from the table
 * "project_completion_automated_notification". All fields are combined with a logical 'AND'.
 */
export type Project_Completion_Automated_Notification_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Project_Completion_Automated_Notification_Bool_Exp>>>;
  _not?: Maybe<Project_Completion_Automated_Notification_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Project_Completion_Automated_Notification_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  message?: Maybe<String_Comparison_Exp>;
  offset?: Maybe<Timestamptz_Comparison_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  report_type?: Maybe<String_Comparison_Exp>;
  send_to?: Maybe<String_Comparison_Exp>;
  timezone?: Maybe<String_Comparison_Exp>;
  user?: Maybe<User_Bool_Exp>;
  user_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "project_completion_automated_notification" */
export enum Project_Completion_Automated_Notification_Constraint {
  /** unique or primary key constraint */
  ProjectReportSettingsNotificationPkey = 'project_report_settings_notification_pkey'
}

/** input type for inserting data into table "project_completion_automated_notification" */
export type Project_Completion_Automated_Notification_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  message?: Maybe<Scalars['String']>;
  offset?: Maybe<Scalars['timestamptz']>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_id?: Maybe<Scalars['uuid']>;
  report_type?: Maybe<Scalars['String']>;
  send_to?: Maybe<Scalars['String']>;
  timezone?: Maybe<Scalars['String']>;
  user?: Maybe<User_Obj_Rel_Insert_Input>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Project_Completion_Automated_Notification_Max_Fields = {
   __typename?: 'project_completion_automated_notification_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  message?: Maybe<Scalars['String']>;
  offset?: Maybe<Scalars['timestamptz']>;
  project_id?: Maybe<Scalars['uuid']>;
  report_type?: Maybe<Scalars['String']>;
  send_to?: Maybe<Scalars['String']>;
  timezone?: Maybe<Scalars['String']>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "project_completion_automated_notification" */
export type Project_Completion_Automated_Notification_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  message?: Maybe<Order_By>;
  offset?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  report_type?: Maybe<Order_By>;
  send_to?: Maybe<Order_By>;
  timezone?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Project_Completion_Automated_Notification_Min_Fields = {
   __typename?: 'project_completion_automated_notification_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  message?: Maybe<Scalars['String']>;
  offset?: Maybe<Scalars['timestamptz']>;
  project_id?: Maybe<Scalars['uuid']>;
  report_type?: Maybe<Scalars['String']>;
  send_to?: Maybe<Scalars['String']>;
  timezone?: Maybe<Scalars['String']>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "project_completion_automated_notification" */
export type Project_Completion_Automated_Notification_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  message?: Maybe<Order_By>;
  offset?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  report_type?: Maybe<Order_By>;
  send_to?: Maybe<Order_By>;
  timezone?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "project_completion_automated_notification" */
export type Project_Completion_Automated_Notification_Mutation_Response = {
   __typename?: 'project_completion_automated_notification_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Project_Completion_Automated_Notification>;
};

/** input type for inserting object relation for remote table "project_completion_automated_notification" */
export type Project_Completion_Automated_Notification_Obj_Rel_Insert_Input = {
  data: Project_Completion_Automated_Notification_Insert_Input;
  on_conflict?: Maybe<Project_Completion_Automated_Notification_On_Conflict>;
};

/** on conflict condition type for table "project_completion_automated_notification" */
export type Project_Completion_Automated_Notification_On_Conflict = {
  constraint: Project_Completion_Automated_Notification_Constraint;
  update_columns: Array<Project_Completion_Automated_Notification_Update_Column>;
  where?: Maybe<Project_Completion_Automated_Notification_Bool_Exp>;
};

/** ordering options when selecting data from "project_completion_automated_notification" */
export type Project_Completion_Automated_Notification_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  message?: Maybe<Order_By>;
  offset?: Maybe<Order_By>;
  project?: Maybe<Project_Order_By>;
  project_id?: Maybe<Order_By>;
  report_type?: Maybe<Order_By>;
  send_to?: Maybe<Order_By>;
  timezone?: Maybe<Order_By>;
  user?: Maybe<User_Order_By>;
  user_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "project_completion_automated_notification" */
export type Project_Completion_Automated_Notification_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "project_completion_automated_notification" */
export enum Project_Completion_Automated_Notification_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Message = 'message',
  /** column name */
  Offset = 'offset',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  ReportType = 'report_type',
  /** column name */
  SendTo = 'send_to',
  /** column name */
  Timezone = 'timezone',
  /** column name */
  UserId = 'user_id'
}

/** input type for updating data in table "project_completion_automated_notification" */
export type Project_Completion_Automated_Notification_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  message?: Maybe<Scalars['String']>;
  offset?: Maybe<Scalars['timestamptz']>;
  project_id?: Maybe<Scalars['uuid']>;
  report_type?: Maybe<Scalars['String']>;
  send_to?: Maybe<Scalars['String']>;
  timezone?: Maybe<Scalars['String']>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "project_completion_automated_notification" */
export enum Project_Completion_Automated_Notification_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Message = 'message',
  /** column name */
  Offset = 'offset',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  ReportType = 'report_type',
  /** column name */
  SendTo = 'send_to',
  /** column name */
  Timezone = 'timezone',
  /** column name */
  UserId = 'user_id'
}

/** unique or primary key constraints on table "project" */
export enum Project_Constraint {
  /** unique or primary key constraint */
  ProjectIdKey = 'project_id_key',
  /** unique or primary key constraint */
  ProjectPkey = 'project_pkey'
}

/**
 * external_id only on failed certify worker
 * 
 * 
 * columns and relationships of "project_covid_certify_worker"
 */
export type Project_Covid_Certify_Worker = {
   __typename?: 'project_covid_certify_worker';
  cleared_at?: Maybe<Scalars['timestamptz']>;
  cleared_by_project_employee_id?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  cleared_project_covid_certify_worker?: Maybe<Cleared_Project_Covid_Certify_Worker>;
  created_at: Scalars['timestamptz'];
  crew_certify_id?: Maybe<Scalars['uuid']>;
  external_id?: Maybe<Scalars['String']>;
  id: Scalars['uuid'];
  passed: Scalars['Boolean'];
  pending_project_worker_id?: Maybe<Scalars['uuid']>;
  /** An array relationship */
  project_covid_certified_worker_answers: Array<Project_Covid_Certify_Worker_Answer>;
  /** An aggregated array relationship */
  project_covid_certified_worker_answers_aggregate: Project_Covid_Certify_Worker_Answer_Aggregate;
  /** An object relationship */
  project_covid_crew_certify?: Maybe<Project_Covid_Crew_Certify>;
  /** An object relationship */
  project_worker?: Maybe<Project_Worker>;
  project_worker_id?: Maybe<Scalars['uuid']>;
};


/**
 * external_id only on failed certify worker
 * 
 * 
 * columns and relationships of "project_covid_certify_worker"
 */
export type Project_Covid_Certify_WorkerProject_Covid_Certified_Worker_AnswersArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Certify_Worker_Answer_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Certify_Worker_Answer_Order_By>>;
  where?: Maybe<Project_Covid_Certify_Worker_Answer_Bool_Exp>;
};


/**
 * external_id only on failed certify worker
 * 
 * 
 * columns and relationships of "project_covid_certify_worker"
 */
export type Project_Covid_Certify_WorkerProject_Covid_Certified_Worker_Answers_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Certify_Worker_Answer_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Certify_Worker_Answer_Order_By>>;
  where?: Maybe<Project_Covid_Certify_Worker_Answer_Bool_Exp>;
};

/** aggregated selection of "project_covid_certify_worker" */
export type Project_Covid_Certify_Worker_Aggregate = {
   __typename?: 'project_covid_certify_worker_aggregate';
  aggregate?: Maybe<Project_Covid_Certify_Worker_Aggregate_Fields>;
  nodes: Array<Project_Covid_Certify_Worker>;
};

/** aggregate fields of "project_covid_certify_worker" */
export type Project_Covid_Certify_Worker_Aggregate_Fields = {
   __typename?: 'project_covid_certify_worker_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Project_Covid_Certify_Worker_Max_Fields>;
  min?: Maybe<Project_Covid_Certify_Worker_Min_Fields>;
};


/** aggregate fields of "project_covid_certify_worker" */
export type Project_Covid_Certify_Worker_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Project_Covid_Certify_Worker_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "project_covid_certify_worker" */
export type Project_Covid_Certify_Worker_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Project_Covid_Certify_Worker_Max_Order_By>;
  min?: Maybe<Project_Covid_Certify_Worker_Min_Order_By>;
};

/** columns and relationships of "project_covid_certify_worker_answer" */
export type Project_Covid_Certify_Worker_Answer = {
   __typename?: 'project_covid_certify_worker_answer';
  answered_yes: Scalars['Boolean'];
  /** An object relationship */
  project_covid_certify_worker: Project_Covid_Certify_Worker;
  project_covid_certify_worker_id: Scalars['uuid'];
  /** An object relationship */
  project_covid_yes_no_question: Project_Covid_Yes_No_Question;
  project_covid_yes_no_question_id: Scalars['uuid'];
};

/** aggregated selection of "project_covid_certify_worker_answer" */
export type Project_Covid_Certify_Worker_Answer_Aggregate = {
   __typename?: 'project_covid_certify_worker_answer_aggregate';
  aggregate?: Maybe<Project_Covid_Certify_Worker_Answer_Aggregate_Fields>;
  nodes: Array<Project_Covid_Certify_Worker_Answer>;
};

/** aggregate fields of "project_covid_certify_worker_answer" */
export type Project_Covid_Certify_Worker_Answer_Aggregate_Fields = {
   __typename?: 'project_covid_certify_worker_answer_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Project_Covid_Certify_Worker_Answer_Max_Fields>;
  min?: Maybe<Project_Covid_Certify_Worker_Answer_Min_Fields>;
};


/** aggregate fields of "project_covid_certify_worker_answer" */
export type Project_Covid_Certify_Worker_Answer_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Project_Covid_Certify_Worker_Answer_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "project_covid_certify_worker_answer" */
export type Project_Covid_Certify_Worker_Answer_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Project_Covid_Certify_Worker_Answer_Max_Order_By>;
  min?: Maybe<Project_Covid_Certify_Worker_Answer_Min_Order_By>;
};

/** input type for inserting array relation for remote table "project_covid_certify_worker_answer" */
export type Project_Covid_Certify_Worker_Answer_Arr_Rel_Insert_Input = {
  data: Array<Project_Covid_Certify_Worker_Answer_Insert_Input>;
  on_conflict?: Maybe<Project_Covid_Certify_Worker_Answer_On_Conflict>;
};

/**
 * Boolean expression to filter rows from the table
 * "project_covid_certify_worker_answer". All fields are combined with a logical 'AND'.
 */
export type Project_Covid_Certify_Worker_Answer_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Project_Covid_Certify_Worker_Answer_Bool_Exp>>>;
  _not?: Maybe<Project_Covid_Certify_Worker_Answer_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Project_Covid_Certify_Worker_Answer_Bool_Exp>>>;
  answered_yes?: Maybe<Boolean_Comparison_Exp>;
  project_covid_certify_worker?: Maybe<Project_Covid_Certify_Worker_Bool_Exp>;
  project_covid_certify_worker_id?: Maybe<Uuid_Comparison_Exp>;
  project_covid_yes_no_question?: Maybe<Project_Covid_Yes_No_Question_Bool_Exp>;
  project_covid_yes_no_question_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "project_covid_certify_worker_answer" */
export enum Project_Covid_Certify_Worker_Answer_Constraint {
  /** unique or primary key constraint */
  ProjectCovidCertifiedWorkerAnswerPkey = 'project_covid_certified_worker_answer_pkey'
}

/** input type for inserting data into table "project_covid_certify_worker_answer" */
export type Project_Covid_Certify_Worker_Answer_Insert_Input = {
  answered_yes?: Maybe<Scalars['Boolean']>;
  project_covid_certify_worker?: Maybe<Project_Covid_Certify_Worker_Obj_Rel_Insert_Input>;
  project_covid_certify_worker_id?: Maybe<Scalars['uuid']>;
  project_covid_yes_no_question?: Maybe<Project_Covid_Yes_No_Question_Obj_Rel_Insert_Input>;
  project_covid_yes_no_question_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Project_Covid_Certify_Worker_Answer_Max_Fields = {
   __typename?: 'project_covid_certify_worker_answer_max_fields';
  project_covid_certify_worker_id?: Maybe<Scalars['uuid']>;
  project_covid_yes_no_question_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "project_covid_certify_worker_answer" */
export type Project_Covid_Certify_Worker_Answer_Max_Order_By = {
  project_covid_certify_worker_id?: Maybe<Order_By>;
  project_covid_yes_no_question_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Project_Covid_Certify_Worker_Answer_Min_Fields = {
   __typename?: 'project_covid_certify_worker_answer_min_fields';
  project_covid_certify_worker_id?: Maybe<Scalars['uuid']>;
  project_covid_yes_no_question_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "project_covid_certify_worker_answer" */
export type Project_Covid_Certify_Worker_Answer_Min_Order_By = {
  project_covid_certify_worker_id?: Maybe<Order_By>;
  project_covid_yes_no_question_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "project_covid_certify_worker_answer" */
export type Project_Covid_Certify_Worker_Answer_Mutation_Response = {
   __typename?: 'project_covid_certify_worker_answer_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Project_Covid_Certify_Worker_Answer>;
};

/** input type for inserting object relation for remote table "project_covid_certify_worker_answer" */
export type Project_Covid_Certify_Worker_Answer_Obj_Rel_Insert_Input = {
  data: Project_Covid_Certify_Worker_Answer_Insert_Input;
  on_conflict?: Maybe<Project_Covid_Certify_Worker_Answer_On_Conflict>;
};

/** on conflict condition type for table "project_covid_certify_worker_answer" */
export type Project_Covid_Certify_Worker_Answer_On_Conflict = {
  constraint: Project_Covid_Certify_Worker_Answer_Constraint;
  update_columns: Array<Project_Covid_Certify_Worker_Answer_Update_Column>;
  where?: Maybe<Project_Covid_Certify_Worker_Answer_Bool_Exp>;
};

/** ordering options when selecting data from "project_covid_certify_worker_answer" */
export type Project_Covid_Certify_Worker_Answer_Order_By = {
  answered_yes?: Maybe<Order_By>;
  project_covid_certify_worker?: Maybe<Project_Covid_Certify_Worker_Order_By>;
  project_covid_certify_worker_id?: Maybe<Order_By>;
  project_covid_yes_no_question?: Maybe<Project_Covid_Yes_No_Question_Order_By>;
  project_covid_yes_no_question_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "project_covid_certify_worker_answer" */
export type Project_Covid_Certify_Worker_Answer_Pk_Columns_Input = {
  project_covid_certify_worker_id: Scalars['uuid'];
  project_covid_yes_no_question_id: Scalars['uuid'];
};

/** select columns of table "project_covid_certify_worker_answer" */
export enum Project_Covid_Certify_Worker_Answer_Select_Column {
  /** column name */
  AnsweredYes = 'answered_yes',
  /** column name */
  ProjectCovidCertifyWorkerId = 'project_covid_certify_worker_id',
  /** column name */
  ProjectCovidYesNoQuestionId = 'project_covid_yes_no_question_id'
}

/** input type for updating data in table "project_covid_certify_worker_answer" */
export type Project_Covid_Certify_Worker_Answer_Set_Input = {
  answered_yes?: Maybe<Scalars['Boolean']>;
  project_covid_certify_worker_id?: Maybe<Scalars['uuid']>;
  project_covid_yes_no_question_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "project_covid_certify_worker_answer" */
export enum Project_Covid_Certify_Worker_Answer_Update_Column {
  /** column name */
  AnsweredYes = 'answered_yes',
  /** column name */
  ProjectCovidCertifyWorkerId = 'project_covid_certify_worker_id',
  /** column name */
  ProjectCovidYesNoQuestionId = 'project_covid_yes_no_question_id'
}

/** input type for inserting array relation for remote table "project_covid_certify_worker" */
export type Project_Covid_Certify_Worker_Arr_Rel_Insert_Input = {
  data: Array<Project_Covid_Certify_Worker_Insert_Input>;
  on_conflict?: Maybe<Project_Covid_Certify_Worker_On_Conflict>;
};

/**
 * Boolean expression to filter rows from the table "project_covid_certify_worker".
 * All fields are combined with a logical 'AND'.
 */
export type Project_Covid_Certify_Worker_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Project_Covid_Certify_Worker_Bool_Exp>>>;
  _not?: Maybe<Project_Covid_Certify_Worker_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Project_Covid_Certify_Worker_Bool_Exp>>>;
  cleared_at?: Maybe<Timestamptz_Comparison_Exp>;
  cleared_by_project_employee_id?: Maybe<Uuid_Comparison_Exp>;
  cleared_project_covid_certify_worker?: Maybe<Cleared_Project_Covid_Certify_Worker_Bool_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  crew_certify_id?: Maybe<Uuid_Comparison_Exp>;
  external_id?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  passed?: Maybe<Boolean_Comparison_Exp>;
  pending_project_worker_id?: Maybe<Uuid_Comparison_Exp>;
  project_covid_certified_worker_answers?: Maybe<Project_Covid_Certify_Worker_Answer_Bool_Exp>;
  project_covid_crew_certify?: Maybe<Project_Covid_Crew_Certify_Bool_Exp>;
  project_worker?: Maybe<Project_Worker_Bool_Exp>;
  project_worker_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "project_covid_certify_worker" */
export enum Project_Covid_Certify_Worker_Constraint {
  /** unique or primary key constraint */
  ProjectCovidCertifiedWorkerCrewCertifyIdProjectWorkerI = 'project_covid_certified_worker_crew_certify_id_project_worker_i',
  /** unique or primary key constraint */
  ProjectCovidCertifiedWorkerExternalIdKey = 'project_covid_certified_worker_external_id_key',
  /** unique or primary key constraint */
  ProjectCovidCertifiedWorkerPkey = 'project_covid_certified_worker_pkey',
  /** unique or primary key constraint */
  ProjectCovidCertifyWorkerCrewCertifyIdPendingProjectWo = 'project_covid_certify_worker_crew_certify_id_pending_project_wo'
}

/** input type for inserting data into table "project_covid_certify_worker" */
export type Project_Covid_Certify_Worker_Insert_Input = {
  cleared_at?: Maybe<Scalars['timestamptz']>;
  cleared_by_project_employee_id?: Maybe<Scalars['uuid']>;
  cleared_project_covid_certify_worker?: Maybe<Cleared_Project_Covid_Certify_Worker_Obj_Rel_Insert_Input>;
  created_at?: Maybe<Scalars['timestamptz']>;
  crew_certify_id?: Maybe<Scalars['uuid']>;
  external_id?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  passed?: Maybe<Scalars['Boolean']>;
  pending_project_worker_id?: Maybe<Scalars['uuid']>;
  project_covid_certified_worker_answers?: Maybe<Project_Covid_Certify_Worker_Answer_Arr_Rel_Insert_Input>;
  project_covid_crew_certify?: Maybe<Project_Covid_Crew_Certify_Obj_Rel_Insert_Input>;
  project_worker?: Maybe<Project_Worker_Obj_Rel_Insert_Input>;
  project_worker_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Project_Covid_Certify_Worker_Max_Fields = {
   __typename?: 'project_covid_certify_worker_max_fields';
  cleared_at?: Maybe<Scalars['timestamptz']>;
  cleared_by_project_employee_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  crew_certify_id?: Maybe<Scalars['uuid']>;
  external_id?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  pending_project_worker_id?: Maybe<Scalars['uuid']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "project_covid_certify_worker" */
export type Project_Covid_Certify_Worker_Max_Order_By = {
  cleared_at?: Maybe<Order_By>;
  cleared_by_project_employee_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  crew_certify_id?: Maybe<Order_By>;
  external_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  pending_project_worker_id?: Maybe<Order_By>;
  project_worker_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Project_Covid_Certify_Worker_Min_Fields = {
   __typename?: 'project_covid_certify_worker_min_fields';
  cleared_at?: Maybe<Scalars['timestamptz']>;
  cleared_by_project_employee_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  crew_certify_id?: Maybe<Scalars['uuid']>;
  external_id?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  pending_project_worker_id?: Maybe<Scalars['uuid']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "project_covid_certify_worker" */
export type Project_Covid_Certify_Worker_Min_Order_By = {
  cleared_at?: Maybe<Order_By>;
  cleared_by_project_employee_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  crew_certify_id?: Maybe<Order_By>;
  external_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  pending_project_worker_id?: Maybe<Order_By>;
  project_worker_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "project_covid_certify_worker" */
export type Project_Covid_Certify_Worker_Mutation_Response = {
   __typename?: 'project_covid_certify_worker_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Project_Covid_Certify_Worker>;
};

/** input type for inserting object relation for remote table "project_covid_certify_worker" */
export type Project_Covid_Certify_Worker_Obj_Rel_Insert_Input = {
  data: Project_Covid_Certify_Worker_Insert_Input;
  on_conflict?: Maybe<Project_Covid_Certify_Worker_On_Conflict>;
};

/** on conflict condition type for table "project_covid_certify_worker" */
export type Project_Covid_Certify_Worker_On_Conflict = {
  constraint: Project_Covid_Certify_Worker_Constraint;
  update_columns: Array<Project_Covid_Certify_Worker_Update_Column>;
  where?: Maybe<Project_Covid_Certify_Worker_Bool_Exp>;
};

/** ordering options when selecting data from "project_covid_certify_worker" */
export type Project_Covid_Certify_Worker_Order_By = {
  cleared_at?: Maybe<Order_By>;
  cleared_by_project_employee_id?: Maybe<Order_By>;
  cleared_project_covid_certify_worker?: Maybe<Cleared_Project_Covid_Certify_Worker_Order_By>;
  created_at?: Maybe<Order_By>;
  crew_certify_id?: Maybe<Order_By>;
  external_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  passed?: Maybe<Order_By>;
  pending_project_worker_id?: Maybe<Order_By>;
  project_covid_certified_worker_answers_aggregate?: Maybe<Project_Covid_Certify_Worker_Answer_Aggregate_Order_By>;
  project_covid_crew_certify?: Maybe<Project_Covid_Crew_Certify_Order_By>;
  project_worker?: Maybe<Project_Worker_Order_By>;
  project_worker_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "project_covid_certify_worker" */
export type Project_Covid_Certify_Worker_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "project_covid_certify_worker" */
export enum Project_Covid_Certify_Worker_Select_Column {
  /** column name */
  ClearedAt = 'cleared_at',
  /** column name */
  ClearedByProjectEmployeeId = 'cleared_by_project_employee_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CrewCertifyId = 'crew_certify_id',
  /** column name */
  ExternalId = 'external_id',
  /** column name */
  Id = 'id',
  /** column name */
  Passed = 'passed',
  /** column name */
  PendingProjectWorkerId = 'pending_project_worker_id',
  /** column name */
  ProjectWorkerId = 'project_worker_id'
}

/** input type for updating data in table "project_covid_certify_worker" */
export type Project_Covid_Certify_Worker_Set_Input = {
  cleared_at?: Maybe<Scalars['timestamptz']>;
  cleared_by_project_employee_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  crew_certify_id?: Maybe<Scalars['uuid']>;
  external_id?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  passed?: Maybe<Scalars['Boolean']>;
  pending_project_worker_id?: Maybe<Scalars['uuid']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "project_covid_certify_worker" */
export enum Project_Covid_Certify_Worker_Update_Column {
  /** column name */
  ClearedAt = 'cleared_at',
  /** column name */
  ClearedByProjectEmployeeId = 'cleared_by_project_employee_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CrewCertifyId = 'crew_certify_id',
  /** column name */
  ExternalId = 'external_id',
  /** column name */
  Id = 'id',
  /** column name */
  Passed = 'passed',
  /** column name */
  PendingProjectWorkerId = 'pending_project_worker_id',
  /** column name */
  ProjectWorkerId = 'project_worker_id'
}

/** columns and relationships of "project_covid_config" */
export type Project_Covid_Config = {
   __typename?: 'project_covid_config';
  /** An object relationship */
  contact_project_employee?: Maybe<Project_Employee>;
  contact_project_employee_id?: Maybe<Scalars['uuid']>;
  created_at: Scalars['timestamptz'];
  /** An object relationship */
  project: Project;
  /** An array relationship */
  project_covid_notify_employees: Array<Project_Covid_Notify_Employee>;
  /** An aggregated array relationship */
  project_covid_notify_employees_aggregate: Project_Covid_Notify_Employee_Aggregate;
  /** An array relationship */
  project_covid_tested_positive_questions: Array<Project_Covid_Tested_Positive_Question>;
  /** An aggregated array relationship */
  project_covid_tested_positive_questions_aggregate: Project_Covid_Tested_Positive_Question_Aggregate;
  project_id: Scalars['uuid'];
  qr_code_url: Scalars['String'];
  /** An object relationship */
  requirements: Text_Translation;
  requirements_id: Scalars['uuid'];
  requirements_text: Scalars['String'];
  updated_at: Scalars['timestamptz'];
  worker_restriction_length: Scalars['interval'];
};


/** columns and relationships of "project_covid_config" */
export type Project_Covid_ConfigProject_Covid_Notify_EmployeesArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Notify_Employee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Notify_Employee_Order_By>>;
  where?: Maybe<Project_Covid_Notify_Employee_Bool_Exp>;
};


/** columns and relationships of "project_covid_config" */
export type Project_Covid_ConfigProject_Covid_Notify_Employees_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Notify_Employee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Notify_Employee_Order_By>>;
  where?: Maybe<Project_Covid_Notify_Employee_Bool_Exp>;
};


/** columns and relationships of "project_covid_config" */
export type Project_Covid_ConfigProject_Covid_Tested_Positive_QuestionsArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Tested_Positive_Question_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Tested_Positive_Question_Order_By>>;
  where?: Maybe<Project_Covid_Tested_Positive_Question_Bool_Exp>;
};


/** columns and relationships of "project_covid_config" */
export type Project_Covid_ConfigProject_Covid_Tested_Positive_Questions_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Tested_Positive_Question_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Tested_Positive_Question_Order_By>>;
  where?: Maybe<Project_Covid_Tested_Positive_Question_Bool_Exp>;
};

/** aggregated selection of "project_covid_config" */
export type Project_Covid_Config_Aggregate = {
   __typename?: 'project_covid_config_aggregate';
  aggregate?: Maybe<Project_Covid_Config_Aggregate_Fields>;
  nodes: Array<Project_Covid_Config>;
};

/** aggregate fields of "project_covid_config" */
export type Project_Covid_Config_Aggregate_Fields = {
   __typename?: 'project_covid_config_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Project_Covid_Config_Max_Fields>;
  min?: Maybe<Project_Covid_Config_Min_Fields>;
};


/** aggregate fields of "project_covid_config" */
export type Project_Covid_Config_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Project_Covid_Config_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "project_covid_config" */
export type Project_Covid_Config_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Project_Covid_Config_Max_Order_By>;
  min?: Maybe<Project_Covid_Config_Min_Order_By>;
};

/** input type for inserting array relation for remote table "project_covid_config" */
export type Project_Covid_Config_Arr_Rel_Insert_Input = {
  data: Array<Project_Covid_Config_Insert_Input>;
  on_conflict?: Maybe<Project_Covid_Config_On_Conflict>;
};

/** Boolean expression to filter rows from the table "project_covid_config". All fields are combined with a logical 'AND'. */
export type Project_Covid_Config_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Project_Covid_Config_Bool_Exp>>>;
  _not?: Maybe<Project_Covid_Config_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Project_Covid_Config_Bool_Exp>>>;
  contact_project_employee?: Maybe<Project_Employee_Bool_Exp>;
  contact_project_employee_id?: Maybe<Uuid_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_covid_notify_employees?: Maybe<Project_Covid_Notify_Employee_Bool_Exp>;
  project_covid_tested_positive_questions?: Maybe<Project_Covid_Tested_Positive_Question_Bool_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  qr_code_url?: Maybe<String_Comparison_Exp>;
  requirements?: Maybe<Text_Translation_Bool_Exp>;
  requirements_id?: Maybe<Uuid_Comparison_Exp>;
  requirements_text?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  worker_restriction_length?: Maybe<Interval_Comparison_Exp>;
};

/** unique or primary key constraints on table "project_covid_config" */
export enum Project_Covid_Config_Constraint {
  /** unique or primary key constraint */
  ProjectCovidConfigPkey = 'project_covid_config_pkey',
  /** unique or primary key constraint */
  ProjectCovidConfigProjectIdKey = 'project_covid_config_project_id_key'
}

/** input type for inserting data into table "project_covid_config" */
export type Project_Covid_Config_Insert_Input = {
  contact_project_employee?: Maybe<Project_Employee_Obj_Rel_Insert_Input>;
  contact_project_employee_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_covid_notify_employees?: Maybe<Project_Covid_Notify_Employee_Arr_Rel_Insert_Input>;
  project_covid_tested_positive_questions?: Maybe<Project_Covid_Tested_Positive_Question_Arr_Rel_Insert_Input>;
  project_id?: Maybe<Scalars['uuid']>;
  qr_code_url?: Maybe<Scalars['String']>;
  requirements?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  requirements_id?: Maybe<Scalars['uuid']>;
  requirements_text?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  worker_restriction_length?: Maybe<Scalars['interval']>;
};

/** aggregate max on columns */
export type Project_Covid_Config_Max_Fields = {
   __typename?: 'project_covid_config_max_fields';
  contact_project_employee_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  project_id?: Maybe<Scalars['uuid']>;
  qr_code_url?: Maybe<Scalars['String']>;
  requirements_id?: Maybe<Scalars['uuid']>;
  requirements_text?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** order by max() on columns of table "project_covid_config" */
export type Project_Covid_Config_Max_Order_By = {
  contact_project_employee_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  qr_code_url?: Maybe<Order_By>;
  requirements_id?: Maybe<Order_By>;
  requirements_text?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Project_Covid_Config_Min_Fields = {
   __typename?: 'project_covid_config_min_fields';
  contact_project_employee_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  project_id?: Maybe<Scalars['uuid']>;
  qr_code_url?: Maybe<Scalars['String']>;
  requirements_id?: Maybe<Scalars['uuid']>;
  requirements_text?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** order by min() on columns of table "project_covid_config" */
export type Project_Covid_Config_Min_Order_By = {
  contact_project_employee_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  qr_code_url?: Maybe<Order_By>;
  requirements_id?: Maybe<Order_By>;
  requirements_text?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** response of any mutation on the table "project_covid_config" */
export type Project_Covid_Config_Mutation_Response = {
   __typename?: 'project_covid_config_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Project_Covid_Config>;
};

/** input type for inserting object relation for remote table "project_covid_config" */
export type Project_Covid_Config_Obj_Rel_Insert_Input = {
  data: Project_Covid_Config_Insert_Input;
  on_conflict?: Maybe<Project_Covid_Config_On_Conflict>;
};

/** on conflict condition type for table "project_covid_config" */
export type Project_Covid_Config_On_Conflict = {
  constraint: Project_Covid_Config_Constraint;
  update_columns: Array<Project_Covid_Config_Update_Column>;
  where?: Maybe<Project_Covid_Config_Bool_Exp>;
};

/** ordering options when selecting data from "project_covid_config" */
export type Project_Covid_Config_Order_By = {
  contact_project_employee?: Maybe<Project_Employee_Order_By>;
  contact_project_employee_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  project?: Maybe<Project_Order_By>;
  project_covid_notify_employees_aggregate?: Maybe<Project_Covid_Notify_Employee_Aggregate_Order_By>;
  project_covid_tested_positive_questions_aggregate?: Maybe<Project_Covid_Tested_Positive_Question_Aggregate_Order_By>;
  project_id?: Maybe<Order_By>;
  qr_code_url?: Maybe<Order_By>;
  requirements?: Maybe<Text_Translation_Order_By>;
  requirements_id?: Maybe<Order_By>;
  requirements_text?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  worker_restriction_length?: Maybe<Order_By>;
};

/** primary key columns input for table: "project_covid_config" */
export type Project_Covid_Config_Pk_Columns_Input = {
  project_id: Scalars['uuid'];
};

/** select columns of table "project_covid_config" */
export enum Project_Covid_Config_Select_Column {
  /** column name */
  ContactProjectEmployeeId = 'contact_project_employee_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  QrCodeUrl = 'qr_code_url',
  /** column name */
  RequirementsId = 'requirements_id',
  /** column name */
  RequirementsText = 'requirements_text',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  WorkerRestrictionLength = 'worker_restriction_length'
}

/** input type for updating data in table "project_covid_config" */
export type Project_Covid_Config_Set_Input = {
  contact_project_employee_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  project_id?: Maybe<Scalars['uuid']>;
  qr_code_url?: Maybe<Scalars['String']>;
  requirements_id?: Maybe<Scalars['uuid']>;
  requirements_text?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  worker_restriction_length?: Maybe<Scalars['interval']>;
};

/** update columns of table "project_covid_config" */
export enum Project_Covid_Config_Update_Column {
  /** column name */
  ContactProjectEmployeeId = 'contact_project_employee_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  QrCodeUrl = 'qr_code_url',
  /** column name */
  RequirementsId = 'requirements_id',
  /** column name */
  RequirementsText = 'requirements_text',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  WorkerRestrictionLength = 'worker_restriction_length'
}

/** columns and relationships of "project_covid_crew_certify" */
export type Project_Covid_Crew_Certify = {
   __typename?: 'project_covid_crew_certify';
  created_at: Scalars['timestamptz'];
  id: Scalars['uuid'];
  /** An array relationship */
  project_covid_certify_workers: Array<Project_Covid_Certify_Worker>;
  /** An aggregated array relationship */
  project_covid_certify_workers_aggregate: Project_Covid_Certify_Worker_Aggregate;
  /** An object relationship */
  project_crew?: Maybe<Project_Crew>;
  project_crew_id?: Maybe<Scalars['uuid']>;
  submitter_pending_project_worker_id?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  submitter_project_worker?: Maybe<Project_Worker>;
  submitter_project_worker_id?: Maybe<Scalars['uuid']>;
};


/** columns and relationships of "project_covid_crew_certify" */
export type Project_Covid_Crew_CertifyProject_Covid_Certify_WorkersArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Certify_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Certify_Worker_Order_By>>;
  where?: Maybe<Project_Covid_Certify_Worker_Bool_Exp>;
};


/** columns and relationships of "project_covid_crew_certify" */
export type Project_Covid_Crew_CertifyProject_Covid_Certify_Workers_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Certify_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Certify_Worker_Order_By>>;
  where?: Maybe<Project_Covid_Certify_Worker_Bool_Exp>;
};

/** aggregated selection of "project_covid_crew_certify" */
export type Project_Covid_Crew_Certify_Aggregate = {
   __typename?: 'project_covid_crew_certify_aggregate';
  aggregate?: Maybe<Project_Covid_Crew_Certify_Aggregate_Fields>;
  nodes: Array<Project_Covid_Crew_Certify>;
};

/** aggregate fields of "project_covid_crew_certify" */
export type Project_Covid_Crew_Certify_Aggregate_Fields = {
   __typename?: 'project_covid_crew_certify_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Project_Covid_Crew_Certify_Max_Fields>;
  min?: Maybe<Project_Covid_Crew_Certify_Min_Fields>;
};


/** aggregate fields of "project_covid_crew_certify" */
export type Project_Covid_Crew_Certify_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Project_Covid_Crew_Certify_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "project_covid_crew_certify" */
export type Project_Covid_Crew_Certify_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Project_Covid_Crew_Certify_Max_Order_By>;
  min?: Maybe<Project_Covid_Crew_Certify_Min_Order_By>;
};

/** input type for inserting array relation for remote table "project_covid_crew_certify" */
export type Project_Covid_Crew_Certify_Arr_Rel_Insert_Input = {
  data: Array<Project_Covid_Crew_Certify_Insert_Input>;
  on_conflict?: Maybe<Project_Covid_Crew_Certify_On_Conflict>;
};

/** Boolean expression to filter rows from the table "project_covid_crew_certify". All fields are combined with a logical 'AND'. */
export type Project_Covid_Crew_Certify_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Project_Covid_Crew_Certify_Bool_Exp>>>;
  _not?: Maybe<Project_Covid_Crew_Certify_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Project_Covid_Crew_Certify_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  project_covid_certify_workers?: Maybe<Project_Covid_Certify_Worker_Bool_Exp>;
  project_crew?: Maybe<Project_Crew_Bool_Exp>;
  project_crew_id?: Maybe<Uuid_Comparison_Exp>;
  submitter_pending_project_worker_id?: Maybe<Uuid_Comparison_Exp>;
  submitter_project_worker?: Maybe<Project_Worker_Bool_Exp>;
  submitter_project_worker_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "project_covid_crew_certify" */
export enum Project_Covid_Crew_Certify_Constraint {
  /** unique or primary key constraint */
  ProjectCovidCrewCertifyPkey = 'project_covid_crew_certify_pkey'
}

/** input type for inserting data into table "project_covid_crew_certify" */
export type Project_Covid_Crew_Certify_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_covid_certify_workers?: Maybe<Project_Covid_Certify_Worker_Arr_Rel_Insert_Input>;
  project_crew?: Maybe<Project_Crew_Obj_Rel_Insert_Input>;
  project_crew_id?: Maybe<Scalars['uuid']>;
  submitter_pending_project_worker_id?: Maybe<Scalars['uuid']>;
  submitter_project_worker?: Maybe<Project_Worker_Obj_Rel_Insert_Input>;
  submitter_project_worker_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Project_Covid_Crew_Certify_Max_Fields = {
   __typename?: 'project_covid_crew_certify_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_crew_id?: Maybe<Scalars['uuid']>;
  submitter_pending_project_worker_id?: Maybe<Scalars['uuid']>;
  submitter_project_worker_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "project_covid_crew_certify" */
export type Project_Covid_Crew_Certify_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_crew_id?: Maybe<Order_By>;
  submitter_pending_project_worker_id?: Maybe<Order_By>;
  submitter_project_worker_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Project_Covid_Crew_Certify_Min_Fields = {
   __typename?: 'project_covid_crew_certify_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_crew_id?: Maybe<Scalars['uuid']>;
  submitter_pending_project_worker_id?: Maybe<Scalars['uuid']>;
  submitter_project_worker_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "project_covid_crew_certify" */
export type Project_Covid_Crew_Certify_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_crew_id?: Maybe<Order_By>;
  submitter_pending_project_worker_id?: Maybe<Order_By>;
  submitter_project_worker_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "project_covid_crew_certify" */
export type Project_Covid_Crew_Certify_Mutation_Response = {
   __typename?: 'project_covid_crew_certify_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Project_Covid_Crew_Certify>;
};

/** input type for inserting object relation for remote table "project_covid_crew_certify" */
export type Project_Covid_Crew_Certify_Obj_Rel_Insert_Input = {
  data: Project_Covid_Crew_Certify_Insert_Input;
  on_conflict?: Maybe<Project_Covid_Crew_Certify_On_Conflict>;
};

/** on conflict condition type for table "project_covid_crew_certify" */
export type Project_Covid_Crew_Certify_On_Conflict = {
  constraint: Project_Covid_Crew_Certify_Constraint;
  update_columns: Array<Project_Covid_Crew_Certify_Update_Column>;
  where?: Maybe<Project_Covid_Crew_Certify_Bool_Exp>;
};

/** ordering options when selecting data from "project_covid_crew_certify" */
export type Project_Covid_Crew_Certify_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_covid_certify_workers_aggregate?: Maybe<Project_Covid_Certify_Worker_Aggregate_Order_By>;
  project_crew?: Maybe<Project_Crew_Order_By>;
  project_crew_id?: Maybe<Order_By>;
  submitter_pending_project_worker_id?: Maybe<Order_By>;
  submitter_project_worker?: Maybe<Project_Worker_Order_By>;
  submitter_project_worker_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "project_covid_crew_certify" */
export type Project_Covid_Crew_Certify_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "project_covid_crew_certify" */
export enum Project_Covid_Crew_Certify_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectCrewId = 'project_crew_id',
  /** column name */
  SubmitterPendingProjectWorkerId = 'submitter_pending_project_worker_id',
  /** column name */
  SubmitterProjectWorkerId = 'submitter_project_worker_id'
}

/** input type for updating data in table "project_covid_crew_certify" */
export type Project_Covid_Crew_Certify_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_crew_id?: Maybe<Scalars['uuid']>;
  submitter_pending_project_worker_id?: Maybe<Scalars['uuid']>;
  submitter_project_worker_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "project_covid_crew_certify" */
export enum Project_Covid_Crew_Certify_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectCrewId = 'project_crew_id',
  /** column name */
  SubmitterPendingProjectWorkerId = 'submitter_pending_project_worker_id',
  /** column name */
  SubmitterProjectWorkerId = 'submitter_project_worker_id'
}

/** columns and relationships of "project_covid_guest_certification" */
export type Project_Covid_Guest_Certification = {
   __typename?: 'project_covid_guest_certification';
  company_name?: Maybe<Scalars['String']>;
  created_at: Scalars['timestamptz'];
  external_id?: Maybe<Scalars['String']>;
  id: Scalars['uuid'];
  name: Scalars['String'];
  passed: Scalars['Boolean'];
  /** An object relationship */
  project: Project;
  /** An array relationship */
  project_covid_guest_certification_answers: Array<Project_Covid_Guest_Certification_Answer>;
  /** An aggregated array relationship */
  project_covid_guest_certification_answers_aggregate: Project_Covid_Guest_Certification_Answer_Aggregate;
  project_id: Scalars['uuid'];
  /** An object relationship */
  subcontractor?: Maybe<Subcontractor>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};


/** columns and relationships of "project_covid_guest_certification" */
export type Project_Covid_Guest_CertificationProject_Covid_Guest_Certification_AnswersArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Guest_Certification_Answer_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Guest_Certification_Answer_Order_By>>;
  where?: Maybe<Project_Covid_Guest_Certification_Answer_Bool_Exp>;
};


/** columns and relationships of "project_covid_guest_certification" */
export type Project_Covid_Guest_CertificationProject_Covid_Guest_Certification_Answers_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Guest_Certification_Answer_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Guest_Certification_Answer_Order_By>>;
  where?: Maybe<Project_Covid_Guest_Certification_Answer_Bool_Exp>;
};

/** aggregated selection of "project_covid_guest_certification" */
export type Project_Covid_Guest_Certification_Aggregate = {
   __typename?: 'project_covid_guest_certification_aggregate';
  aggregate?: Maybe<Project_Covid_Guest_Certification_Aggregate_Fields>;
  nodes: Array<Project_Covid_Guest_Certification>;
};

/** aggregate fields of "project_covid_guest_certification" */
export type Project_Covid_Guest_Certification_Aggregate_Fields = {
   __typename?: 'project_covid_guest_certification_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Project_Covid_Guest_Certification_Max_Fields>;
  min?: Maybe<Project_Covid_Guest_Certification_Min_Fields>;
};


/** aggregate fields of "project_covid_guest_certification" */
export type Project_Covid_Guest_Certification_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Project_Covid_Guest_Certification_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "project_covid_guest_certification" */
export type Project_Covid_Guest_Certification_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Project_Covid_Guest_Certification_Max_Order_By>;
  min?: Maybe<Project_Covid_Guest_Certification_Min_Order_By>;
};

/** columns and relationships of "project_covid_guest_certification_answer" */
export type Project_Covid_Guest_Certification_Answer = {
   __typename?: 'project_covid_guest_certification_answer';
  answered_yes: Scalars['Boolean'];
  id: Scalars['uuid'];
  /** An object relationship */
  project_covid_guest_certification: Project_Covid_Guest_Certification;
  project_covid_guest_certification_id: Scalars['uuid'];
  /** An object relationship */
  project_covid_yes_no_question: Project_Covid_Yes_No_Question;
  project_covid_yes_no_question_id: Scalars['uuid'];
};

/** aggregated selection of "project_covid_guest_certification_answer" */
export type Project_Covid_Guest_Certification_Answer_Aggregate = {
   __typename?: 'project_covid_guest_certification_answer_aggregate';
  aggregate?: Maybe<Project_Covid_Guest_Certification_Answer_Aggregate_Fields>;
  nodes: Array<Project_Covid_Guest_Certification_Answer>;
};

/** aggregate fields of "project_covid_guest_certification_answer" */
export type Project_Covid_Guest_Certification_Answer_Aggregate_Fields = {
   __typename?: 'project_covid_guest_certification_answer_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Project_Covid_Guest_Certification_Answer_Max_Fields>;
  min?: Maybe<Project_Covid_Guest_Certification_Answer_Min_Fields>;
};


/** aggregate fields of "project_covid_guest_certification_answer" */
export type Project_Covid_Guest_Certification_Answer_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Project_Covid_Guest_Certification_Answer_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "project_covid_guest_certification_answer" */
export type Project_Covid_Guest_Certification_Answer_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Project_Covid_Guest_Certification_Answer_Max_Order_By>;
  min?: Maybe<Project_Covid_Guest_Certification_Answer_Min_Order_By>;
};

/** input type for inserting array relation for remote table "project_covid_guest_certification_answer" */
export type Project_Covid_Guest_Certification_Answer_Arr_Rel_Insert_Input = {
  data: Array<Project_Covid_Guest_Certification_Answer_Insert_Input>;
  on_conflict?: Maybe<Project_Covid_Guest_Certification_Answer_On_Conflict>;
};

/**
 * Boolean expression to filter rows from the table
 * "project_covid_guest_certification_answer". All fields are combined with a logical 'AND'.
 */
export type Project_Covid_Guest_Certification_Answer_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Project_Covid_Guest_Certification_Answer_Bool_Exp>>>;
  _not?: Maybe<Project_Covid_Guest_Certification_Answer_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Project_Covid_Guest_Certification_Answer_Bool_Exp>>>;
  answered_yes?: Maybe<Boolean_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  project_covid_guest_certification?: Maybe<Project_Covid_Guest_Certification_Bool_Exp>;
  project_covid_guest_certification_id?: Maybe<Uuid_Comparison_Exp>;
  project_covid_yes_no_question?: Maybe<Project_Covid_Yes_No_Question_Bool_Exp>;
  project_covid_yes_no_question_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "project_covid_guest_certification_answer" */
export enum Project_Covid_Guest_Certification_Answer_Constraint {
  /** unique or primary key constraint */
  ProjectCovidGuestCertificationAnswerPkey = 'project_covid_guest_certification_answer_pkey'
}

/** input type for inserting data into table "project_covid_guest_certification_answer" */
export type Project_Covid_Guest_Certification_Answer_Insert_Input = {
  answered_yes?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['uuid']>;
  project_covid_guest_certification?: Maybe<Project_Covid_Guest_Certification_Obj_Rel_Insert_Input>;
  project_covid_guest_certification_id?: Maybe<Scalars['uuid']>;
  project_covid_yes_no_question?: Maybe<Project_Covid_Yes_No_Question_Obj_Rel_Insert_Input>;
  project_covid_yes_no_question_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Project_Covid_Guest_Certification_Answer_Max_Fields = {
   __typename?: 'project_covid_guest_certification_answer_max_fields';
  id?: Maybe<Scalars['uuid']>;
  project_covid_guest_certification_id?: Maybe<Scalars['uuid']>;
  project_covid_yes_no_question_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "project_covid_guest_certification_answer" */
export type Project_Covid_Guest_Certification_Answer_Max_Order_By = {
  id?: Maybe<Order_By>;
  project_covid_guest_certification_id?: Maybe<Order_By>;
  project_covid_yes_no_question_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Project_Covid_Guest_Certification_Answer_Min_Fields = {
   __typename?: 'project_covid_guest_certification_answer_min_fields';
  id?: Maybe<Scalars['uuid']>;
  project_covid_guest_certification_id?: Maybe<Scalars['uuid']>;
  project_covid_yes_no_question_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "project_covid_guest_certification_answer" */
export type Project_Covid_Guest_Certification_Answer_Min_Order_By = {
  id?: Maybe<Order_By>;
  project_covid_guest_certification_id?: Maybe<Order_By>;
  project_covid_yes_no_question_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "project_covid_guest_certification_answer" */
export type Project_Covid_Guest_Certification_Answer_Mutation_Response = {
   __typename?: 'project_covid_guest_certification_answer_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Project_Covid_Guest_Certification_Answer>;
};

/** input type for inserting object relation for remote table "project_covid_guest_certification_answer" */
export type Project_Covid_Guest_Certification_Answer_Obj_Rel_Insert_Input = {
  data: Project_Covid_Guest_Certification_Answer_Insert_Input;
  on_conflict?: Maybe<Project_Covid_Guest_Certification_Answer_On_Conflict>;
};

/** on conflict condition type for table "project_covid_guest_certification_answer" */
export type Project_Covid_Guest_Certification_Answer_On_Conflict = {
  constraint: Project_Covid_Guest_Certification_Answer_Constraint;
  update_columns: Array<Project_Covid_Guest_Certification_Answer_Update_Column>;
  where?: Maybe<Project_Covid_Guest_Certification_Answer_Bool_Exp>;
};

/** ordering options when selecting data from "project_covid_guest_certification_answer" */
export type Project_Covid_Guest_Certification_Answer_Order_By = {
  answered_yes?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_covid_guest_certification?: Maybe<Project_Covid_Guest_Certification_Order_By>;
  project_covid_guest_certification_id?: Maybe<Order_By>;
  project_covid_yes_no_question?: Maybe<Project_Covid_Yes_No_Question_Order_By>;
  project_covid_yes_no_question_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "project_covid_guest_certification_answer" */
export type Project_Covid_Guest_Certification_Answer_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "project_covid_guest_certification_answer" */
export enum Project_Covid_Guest_Certification_Answer_Select_Column {
  /** column name */
  AnsweredYes = 'answered_yes',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectCovidGuestCertificationId = 'project_covid_guest_certification_id',
  /** column name */
  ProjectCovidYesNoQuestionId = 'project_covid_yes_no_question_id'
}

/** input type for updating data in table "project_covid_guest_certification_answer" */
export type Project_Covid_Guest_Certification_Answer_Set_Input = {
  answered_yes?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['uuid']>;
  project_covid_guest_certification_id?: Maybe<Scalars['uuid']>;
  project_covid_yes_no_question_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "project_covid_guest_certification_answer" */
export enum Project_Covid_Guest_Certification_Answer_Update_Column {
  /** column name */
  AnsweredYes = 'answered_yes',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectCovidGuestCertificationId = 'project_covid_guest_certification_id',
  /** column name */
  ProjectCovidYesNoQuestionId = 'project_covid_yes_no_question_id'
}

/** input type for inserting array relation for remote table "project_covid_guest_certification" */
export type Project_Covid_Guest_Certification_Arr_Rel_Insert_Input = {
  data: Array<Project_Covid_Guest_Certification_Insert_Input>;
  on_conflict?: Maybe<Project_Covid_Guest_Certification_On_Conflict>;
};

/**
 * Boolean expression to filter rows from the table
 * "project_covid_guest_certification". All fields are combined with a logical 'AND'.
 */
export type Project_Covid_Guest_Certification_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Project_Covid_Guest_Certification_Bool_Exp>>>;
  _not?: Maybe<Project_Covid_Guest_Certification_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Project_Covid_Guest_Certification_Bool_Exp>>>;
  company_name?: Maybe<String_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  external_id?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  passed?: Maybe<Boolean_Comparison_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_covid_guest_certification_answers?: Maybe<Project_Covid_Guest_Certification_Answer_Bool_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  subcontractor?: Maybe<Subcontractor_Bool_Exp>;
  subcontractor_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "project_covid_guest_certification" */
export enum Project_Covid_Guest_Certification_Constraint {
  /** unique or primary key constraint */
  CovidGuestCertificationPkey = 'covid_guest_certification_pkey',
  /** unique or primary key constraint */
  ProjectCovidGuestCertificationExternalIdKey = 'project_covid_guest_certification_external_id_key'
}

/** input type for inserting data into table "project_covid_guest_certification" */
export type Project_Covid_Guest_Certification_Insert_Input = {
  company_name?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  external_id?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  passed?: Maybe<Scalars['Boolean']>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_covid_guest_certification_answers?: Maybe<Project_Covid_Guest_Certification_Answer_Arr_Rel_Insert_Input>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor?: Maybe<Subcontractor_Obj_Rel_Insert_Input>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Project_Covid_Guest_Certification_Max_Fields = {
   __typename?: 'project_covid_guest_certification_max_fields';
  company_name?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  external_id?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "project_covid_guest_certification" */
export type Project_Covid_Guest_Certification_Max_Order_By = {
  company_name?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  external_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Project_Covid_Guest_Certification_Min_Fields = {
   __typename?: 'project_covid_guest_certification_min_fields';
  company_name?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  external_id?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "project_covid_guest_certification" */
export type Project_Covid_Guest_Certification_Min_Order_By = {
  company_name?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  external_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "project_covid_guest_certification" */
export type Project_Covid_Guest_Certification_Mutation_Response = {
   __typename?: 'project_covid_guest_certification_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Project_Covid_Guest_Certification>;
};

/** input type for inserting object relation for remote table "project_covid_guest_certification" */
export type Project_Covid_Guest_Certification_Obj_Rel_Insert_Input = {
  data: Project_Covid_Guest_Certification_Insert_Input;
  on_conflict?: Maybe<Project_Covid_Guest_Certification_On_Conflict>;
};

/** on conflict condition type for table "project_covid_guest_certification" */
export type Project_Covid_Guest_Certification_On_Conflict = {
  constraint: Project_Covid_Guest_Certification_Constraint;
  update_columns: Array<Project_Covid_Guest_Certification_Update_Column>;
  where?: Maybe<Project_Covid_Guest_Certification_Bool_Exp>;
};

/** ordering options when selecting data from "project_covid_guest_certification" */
export type Project_Covid_Guest_Certification_Order_By = {
  company_name?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  external_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  passed?: Maybe<Order_By>;
  project?: Maybe<Project_Order_By>;
  project_covid_guest_certification_answers_aggregate?: Maybe<Project_Covid_Guest_Certification_Answer_Aggregate_Order_By>;
  project_id?: Maybe<Order_By>;
  subcontractor?: Maybe<Subcontractor_Order_By>;
  subcontractor_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "project_covid_guest_certification" */
export type Project_Covid_Guest_Certification_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "project_covid_guest_certification" */
export enum Project_Covid_Guest_Certification_Select_Column {
  /** column name */
  CompanyName = 'company_name',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  ExternalId = 'external_id',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  Passed = 'passed',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  SubcontractorId = 'subcontractor_id'
}

/** input type for updating data in table "project_covid_guest_certification" */
export type Project_Covid_Guest_Certification_Set_Input = {
  company_name?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  external_id?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  passed?: Maybe<Scalars['Boolean']>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "project_covid_guest_certification" */
export enum Project_Covid_Guest_Certification_Update_Column {
  /** column name */
  CompanyName = 'company_name',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  ExternalId = 'external_id',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  Passed = 'passed',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  SubcontractorId = 'subcontractor_id'
}

/** columns and relationships of "project_covid_notify_employee" */
export type Project_Covid_Notify_Employee = {
   __typename?: 'project_covid_notify_employee';
  created_at: Scalars['timestamptz'];
  id: Scalars['uuid'];
  /** An object relationship */
  project_covid_config: Project_Covid_Config;
  /** An object relationship */
  project_employee: Project_Employee;
  project_employee_id: Scalars['uuid'];
  project_id: Scalars['uuid'];
};

/** aggregated selection of "project_covid_notify_employee" */
export type Project_Covid_Notify_Employee_Aggregate = {
   __typename?: 'project_covid_notify_employee_aggregate';
  aggregate?: Maybe<Project_Covid_Notify_Employee_Aggregate_Fields>;
  nodes: Array<Project_Covid_Notify_Employee>;
};

/** aggregate fields of "project_covid_notify_employee" */
export type Project_Covid_Notify_Employee_Aggregate_Fields = {
   __typename?: 'project_covid_notify_employee_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Project_Covid_Notify_Employee_Max_Fields>;
  min?: Maybe<Project_Covid_Notify_Employee_Min_Fields>;
};


/** aggregate fields of "project_covid_notify_employee" */
export type Project_Covid_Notify_Employee_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Project_Covid_Notify_Employee_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "project_covid_notify_employee" */
export type Project_Covid_Notify_Employee_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Project_Covid_Notify_Employee_Max_Order_By>;
  min?: Maybe<Project_Covid_Notify_Employee_Min_Order_By>;
};

/** input type for inserting array relation for remote table "project_covid_notify_employee" */
export type Project_Covid_Notify_Employee_Arr_Rel_Insert_Input = {
  data: Array<Project_Covid_Notify_Employee_Insert_Input>;
  on_conflict?: Maybe<Project_Covid_Notify_Employee_On_Conflict>;
};

/**
 * Boolean expression to filter rows from the table
 * "project_covid_notify_employee". All fields are combined with a logical 'AND'.
 */
export type Project_Covid_Notify_Employee_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Project_Covid_Notify_Employee_Bool_Exp>>>;
  _not?: Maybe<Project_Covid_Notify_Employee_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Project_Covid_Notify_Employee_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  project_covid_config?: Maybe<Project_Covid_Config_Bool_Exp>;
  project_employee?: Maybe<Project_Employee_Bool_Exp>;
  project_employee_id?: Maybe<Uuid_Comparison_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "project_covid_notify_employee" */
export enum Project_Covid_Notify_Employee_Constraint {
  /** unique or primary key constraint */
  ProjectCovidNotifyEmployeePkey = 'project_covid_notify_employee_pkey',
  /** unique or primary key constraint */
  ProjectCovidNotifyEmployeeProjectIdProjectEmployeeIKey = 'project_covid_notify_employee_project_id_project_employee_i_key'
}

/** input type for inserting data into table "project_covid_notify_employee" */
export type Project_Covid_Notify_Employee_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_covid_config?: Maybe<Project_Covid_Config_Obj_Rel_Insert_Input>;
  project_employee?: Maybe<Project_Employee_Obj_Rel_Insert_Input>;
  project_employee_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Project_Covid_Notify_Employee_Max_Fields = {
   __typename?: 'project_covid_notify_employee_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_employee_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "project_covid_notify_employee" */
export type Project_Covid_Notify_Employee_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_employee_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Project_Covid_Notify_Employee_Min_Fields = {
   __typename?: 'project_covid_notify_employee_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_employee_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "project_covid_notify_employee" */
export type Project_Covid_Notify_Employee_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_employee_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "project_covid_notify_employee" */
export type Project_Covid_Notify_Employee_Mutation_Response = {
   __typename?: 'project_covid_notify_employee_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Project_Covid_Notify_Employee>;
};

/** input type for inserting object relation for remote table "project_covid_notify_employee" */
export type Project_Covid_Notify_Employee_Obj_Rel_Insert_Input = {
  data: Project_Covid_Notify_Employee_Insert_Input;
  on_conflict?: Maybe<Project_Covid_Notify_Employee_On_Conflict>;
};

/** on conflict condition type for table "project_covid_notify_employee" */
export type Project_Covid_Notify_Employee_On_Conflict = {
  constraint: Project_Covid_Notify_Employee_Constraint;
  update_columns: Array<Project_Covid_Notify_Employee_Update_Column>;
  where?: Maybe<Project_Covid_Notify_Employee_Bool_Exp>;
};

/** ordering options when selecting data from "project_covid_notify_employee" */
export type Project_Covid_Notify_Employee_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_covid_config?: Maybe<Project_Covid_Config_Order_By>;
  project_employee?: Maybe<Project_Employee_Order_By>;
  project_employee_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "project_covid_notify_employee" */
export type Project_Covid_Notify_Employee_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "project_covid_notify_employee" */
export enum Project_Covid_Notify_Employee_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectEmployeeId = 'project_employee_id',
  /** column name */
  ProjectId = 'project_id'
}

/** input type for updating data in table "project_covid_notify_employee" */
export type Project_Covid_Notify_Employee_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_employee_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "project_covid_notify_employee" */
export enum Project_Covid_Notify_Employee_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectEmployeeId = 'project_employee_id',
  /** column name */
  ProjectId = 'project_id'
}

/** columns and relationships of "project_covid_tested_positive_answer" */
export type Project_Covid_Tested_Positive_Answer = {
   __typename?: 'project_covid_tested_positive_answer';
  /** An object relationship */
  answer: Text_Translation;
  answer_id: Scalars['uuid'];
  answer_text?: Maybe<Scalars['String']>;
  created_at: Scalars['timestamptz'];
  id: Scalars['uuid'];
  /** An object relationship */
  project_covid_tested_positive_question: Project_Covid_Tested_Positive_Question;
  project_covid_tested_positive_question_id: Scalars['uuid'];
  /** An object relationship */
  project_covid_tested_positive_worker: Project_Covid_Tested_Positive_Worker;
  project_covid_tested_positive_worker_id: Scalars['uuid'];
};

/** aggregated selection of "project_covid_tested_positive_answer" */
export type Project_Covid_Tested_Positive_Answer_Aggregate = {
   __typename?: 'project_covid_tested_positive_answer_aggregate';
  aggregate?: Maybe<Project_Covid_Tested_Positive_Answer_Aggregate_Fields>;
  nodes: Array<Project_Covid_Tested_Positive_Answer>;
};

/** aggregate fields of "project_covid_tested_positive_answer" */
export type Project_Covid_Tested_Positive_Answer_Aggregate_Fields = {
   __typename?: 'project_covid_tested_positive_answer_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Project_Covid_Tested_Positive_Answer_Max_Fields>;
  min?: Maybe<Project_Covid_Tested_Positive_Answer_Min_Fields>;
};


/** aggregate fields of "project_covid_tested_positive_answer" */
export type Project_Covid_Tested_Positive_Answer_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Project_Covid_Tested_Positive_Answer_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "project_covid_tested_positive_answer" */
export type Project_Covid_Tested_Positive_Answer_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Project_Covid_Tested_Positive_Answer_Max_Order_By>;
  min?: Maybe<Project_Covid_Tested_Positive_Answer_Min_Order_By>;
};

/** input type for inserting array relation for remote table "project_covid_tested_positive_answer" */
export type Project_Covid_Tested_Positive_Answer_Arr_Rel_Insert_Input = {
  data: Array<Project_Covid_Tested_Positive_Answer_Insert_Input>;
  on_conflict?: Maybe<Project_Covid_Tested_Positive_Answer_On_Conflict>;
};

/**
 * Boolean expression to filter rows from the table
 * "project_covid_tested_positive_answer". All fields are combined with a logical 'AND'.
 */
export type Project_Covid_Tested_Positive_Answer_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Project_Covid_Tested_Positive_Answer_Bool_Exp>>>;
  _not?: Maybe<Project_Covid_Tested_Positive_Answer_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Project_Covid_Tested_Positive_Answer_Bool_Exp>>>;
  answer?: Maybe<Text_Translation_Bool_Exp>;
  answer_id?: Maybe<Uuid_Comparison_Exp>;
  answer_text?: Maybe<String_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  project_covid_tested_positive_question?: Maybe<Project_Covid_Tested_Positive_Question_Bool_Exp>;
  project_covid_tested_positive_question_id?: Maybe<Uuid_Comparison_Exp>;
  project_covid_tested_positive_worker?: Maybe<Project_Covid_Tested_Positive_Worker_Bool_Exp>;
  project_covid_tested_positive_worker_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "project_covid_tested_positive_answer" */
export enum Project_Covid_Tested_Positive_Answer_Constraint {
  /** unique or primary key constraint */
  ProjectCovidTestedPositiveAnswerPkey = 'project_covid_tested_positive_answer_pkey'
}

/** input type for inserting data into table "project_covid_tested_positive_answer" */
export type Project_Covid_Tested_Positive_Answer_Insert_Input = {
  answer?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  answer_id?: Maybe<Scalars['uuid']>;
  answer_text?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_covid_tested_positive_question?: Maybe<Project_Covid_Tested_Positive_Question_Obj_Rel_Insert_Input>;
  project_covid_tested_positive_question_id?: Maybe<Scalars['uuid']>;
  project_covid_tested_positive_worker?: Maybe<Project_Covid_Tested_Positive_Worker_Obj_Rel_Insert_Input>;
  project_covid_tested_positive_worker_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Project_Covid_Tested_Positive_Answer_Max_Fields = {
   __typename?: 'project_covid_tested_positive_answer_max_fields';
  answer_id?: Maybe<Scalars['uuid']>;
  answer_text?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_covid_tested_positive_question_id?: Maybe<Scalars['uuid']>;
  project_covid_tested_positive_worker_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "project_covid_tested_positive_answer" */
export type Project_Covid_Tested_Positive_Answer_Max_Order_By = {
  answer_id?: Maybe<Order_By>;
  answer_text?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_covid_tested_positive_question_id?: Maybe<Order_By>;
  project_covid_tested_positive_worker_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Project_Covid_Tested_Positive_Answer_Min_Fields = {
   __typename?: 'project_covid_tested_positive_answer_min_fields';
  answer_id?: Maybe<Scalars['uuid']>;
  answer_text?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_covid_tested_positive_question_id?: Maybe<Scalars['uuid']>;
  project_covid_tested_positive_worker_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "project_covid_tested_positive_answer" */
export type Project_Covid_Tested_Positive_Answer_Min_Order_By = {
  answer_id?: Maybe<Order_By>;
  answer_text?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_covid_tested_positive_question_id?: Maybe<Order_By>;
  project_covid_tested_positive_worker_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "project_covid_tested_positive_answer" */
export type Project_Covid_Tested_Positive_Answer_Mutation_Response = {
   __typename?: 'project_covid_tested_positive_answer_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Project_Covid_Tested_Positive_Answer>;
};

/** input type for inserting object relation for remote table "project_covid_tested_positive_answer" */
export type Project_Covid_Tested_Positive_Answer_Obj_Rel_Insert_Input = {
  data: Project_Covid_Tested_Positive_Answer_Insert_Input;
  on_conflict?: Maybe<Project_Covid_Tested_Positive_Answer_On_Conflict>;
};

/** on conflict condition type for table "project_covid_tested_positive_answer" */
export type Project_Covid_Tested_Positive_Answer_On_Conflict = {
  constraint: Project_Covid_Tested_Positive_Answer_Constraint;
  update_columns: Array<Project_Covid_Tested_Positive_Answer_Update_Column>;
  where?: Maybe<Project_Covid_Tested_Positive_Answer_Bool_Exp>;
};

/** ordering options when selecting data from "project_covid_tested_positive_answer" */
export type Project_Covid_Tested_Positive_Answer_Order_By = {
  answer?: Maybe<Text_Translation_Order_By>;
  answer_id?: Maybe<Order_By>;
  answer_text?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_covid_tested_positive_question?: Maybe<Project_Covid_Tested_Positive_Question_Order_By>;
  project_covid_tested_positive_question_id?: Maybe<Order_By>;
  project_covid_tested_positive_worker?: Maybe<Project_Covid_Tested_Positive_Worker_Order_By>;
  project_covid_tested_positive_worker_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "project_covid_tested_positive_answer" */
export type Project_Covid_Tested_Positive_Answer_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "project_covid_tested_positive_answer" */
export enum Project_Covid_Tested_Positive_Answer_Select_Column {
  /** column name */
  AnswerId = 'answer_id',
  /** column name */
  AnswerText = 'answer_text',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectCovidTestedPositiveQuestionId = 'project_covid_tested_positive_question_id',
  /** column name */
  ProjectCovidTestedPositiveWorkerId = 'project_covid_tested_positive_worker_id'
}

/** input type for updating data in table "project_covid_tested_positive_answer" */
export type Project_Covid_Tested_Positive_Answer_Set_Input = {
  answer_id?: Maybe<Scalars['uuid']>;
  answer_text?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_covid_tested_positive_question_id?: Maybe<Scalars['uuid']>;
  project_covid_tested_positive_worker_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "project_covid_tested_positive_answer" */
export enum Project_Covid_Tested_Positive_Answer_Update_Column {
  /** column name */
  AnswerId = 'answer_id',
  /** column name */
  AnswerText = 'answer_text',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectCovidTestedPositiveQuestionId = 'project_covid_tested_positive_question_id',
  /** column name */
  ProjectCovidTestedPositiveWorkerId = 'project_covid_tested_positive_worker_id'
}

/** columns and relationships of "project_covid_tested_positive_question" */
export type Project_Covid_Tested_Positive_Question = {
   __typename?: 'project_covid_tested_positive_question';
  id: Scalars['uuid'];
  /** An object relationship */
  project_covid_config: Project_Covid_Config;
  /** An array relationship */
  project_covid_tested_positive_answers: Array<Project_Covid_Tested_Positive_Answer>;
  /** An aggregated array relationship */
  project_covid_tested_positive_answers_aggregate: Project_Covid_Tested_Positive_Answer_Aggregate;
  project_id: Scalars['uuid'];
  /** An object relationship */
  question: Text_Translation;
  question_id: Scalars['uuid'];
  question_text?: Maybe<Scalars['String']>;
  sort_id: Scalars['uuid'];
};


/** columns and relationships of "project_covid_tested_positive_question" */
export type Project_Covid_Tested_Positive_QuestionProject_Covid_Tested_Positive_AnswersArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Tested_Positive_Answer_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Tested_Positive_Answer_Order_By>>;
  where?: Maybe<Project_Covid_Tested_Positive_Answer_Bool_Exp>;
};


/** columns and relationships of "project_covid_tested_positive_question" */
export type Project_Covid_Tested_Positive_QuestionProject_Covid_Tested_Positive_Answers_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Tested_Positive_Answer_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Tested_Positive_Answer_Order_By>>;
  where?: Maybe<Project_Covid_Tested_Positive_Answer_Bool_Exp>;
};

/** aggregated selection of "project_covid_tested_positive_question" */
export type Project_Covid_Tested_Positive_Question_Aggregate = {
   __typename?: 'project_covid_tested_positive_question_aggregate';
  aggregate?: Maybe<Project_Covid_Tested_Positive_Question_Aggregate_Fields>;
  nodes: Array<Project_Covid_Tested_Positive_Question>;
};

/** aggregate fields of "project_covid_tested_positive_question" */
export type Project_Covid_Tested_Positive_Question_Aggregate_Fields = {
   __typename?: 'project_covid_tested_positive_question_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Project_Covid_Tested_Positive_Question_Max_Fields>;
  min?: Maybe<Project_Covid_Tested_Positive_Question_Min_Fields>;
};


/** aggregate fields of "project_covid_tested_positive_question" */
export type Project_Covid_Tested_Positive_Question_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Project_Covid_Tested_Positive_Question_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "project_covid_tested_positive_question" */
export type Project_Covid_Tested_Positive_Question_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Project_Covid_Tested_Positive_Question_Max_Order_By>;
  min?: Maybe<Project_Covid_Tested_Positive_Question_Min_Order_By>;
};

/** input type for inserting array relation for remote table "project_covid_tested_positive_question" */
export type Project_Covid_Tested_Positive_Question_Arr_Rel_Insert_Input = {
  data: Array<Project_Covid_Tested_Positive_Question_Insert_Input>;
  on_conflict?: Maybe<Project_Covid_Tested_Positive_Question_On_Conflict>;
};

/**
 * Boolean expression to filter rows from the table
 * "project_covid_tested_positive_question". All fields are combined with a logical 'AND'.
 */
export type Project_Covid_Tested_Positive_Question_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Project_Covid_Tested_Positive_Question_Bool_Exp>>>;
  _not?: Maybe<Project_Covid_Tested_Positive_Question_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Project_Covid_Tested_Positive_Question_Bool_Exp>>>;
  id?: Maybe<Uuid_Comparison_Exp>;
  project_covid_config?: Maybe<Project_Covid_Config_Bool_Exp>;
  project_covid_tested_positive_answers?: Maybe<Project_Covid_Tested_Positive_Answer_Bool_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  question?: Maybe<Text_Translation_Bool_Exp>;
  question_id?: Maybe<Uuid_Comparison_Exp>;
  question_text?: Maybe<String_Comparison_Exp>;
  sort_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "project_covid_tested_positive_question" */
export enum Project_Covid_Tested_Positive_Question_Constraint {
  /** unique or primary key constraint */
  ProjectCovidTestedPositiveQuestionPkey = 'project_covid_tested_positive_question_pkey',
  /** unique or primary key constraint */
  ProjectCovidTestedPositiveQuestionQuestionProjectIdKey = 'project_covid_tested_positive_question_question_project_id_key',
  /** unique or primary key constraint */
  ProjectCovidTestedPositiveQuestionSortIdKey = 'project_covid_tested_positive_question_sort_id_key'
}

/** input type for inserting data into table "project_covid_tested_positive_question" */
export type Project_Covid_Tested_Positive_Question_Insert_Input = {
  id?: Maybe<Scalars['uuid']>;
  project_covid_config?: Maybe<Project_Covid_Config_Obj_Rel_Insert_Input>;
  project_covid_tested_positive_answers?: Maybe<Project_Covid_Tested_Positive_Answer_Arr_Rel_Insert_Input>;
  project_id?: Maybe<Scalars['uuid']>;
  question?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  question_id?: Maybe<Scalars['uuid']>;
  question_text?: Maybe<Scalars['String']>;
  sort_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Project_Covid_Tested_Positive_Question_Max_Fields = {
   __typename?: 'project_covid_tested_positive_question_max_fields';
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  question_id?: Maybe<Scalars['uuid']>;
  question_text?: Maybe<Scalars['String']>;
  sort_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "project_covid_tested_positive_question" */
export type Project_Covid_Tested_Positive_Question_Max_Order_By = {
  id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  question_id?: Maybe<Order_By>;
  question_text?: Maybe<Order_By>;
  sort_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Project_Covid_Tested_Positive_Question_Min_Fields = {
   __typename?: 'project_covid_tested_positive_question_min_fields';
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  question_id?: Maybe<Scalars['uuid']>;
  question_text?: Maybe<Scalars['String']>;
  sort_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "project_covid_tested_positive_question" */
export type Project_Covid_Tested_Positive_Question_Min_Order_By = {
  id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  question_id?: Maybe<Order_By>;
  question_text?: Maybe<Order_By>;
  sort_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "project_covid_tested_positive_question" */
export type Project_Covid_Tested_Positive_Question_Mutation_Response = {
   __typename?: 'project_covid_tested_positive_question_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Project_Covid_Tested_Positive_Question>;
};

/** input type for inserting object relation for remote table "project_covid_tested_positive_question" */
export type Project_Covid_Tested_Positive_Question_Obj_Rel_Insert_Input = {
  data: Project_Covid_Tested_Positive_Question_Insert_Input;
  on_conflict?: Maybe<Project_Covid_Tested_Positive_Question_On_Conflict>;
};

/** on conflict condition type for table "project_covid_tested_positive_question" */
export type Project_Covid_Tested_Positive_Question_On_Conflict = {
  constraint: Project_Covid_Tested_Positive_Question_Constraint;
  update_columns: Array<Project_Covid_Tested_Positive_Question_Update_Column>;
  where?: Maybe<Project_Covid_Tested_Positive_Question_Bool_Exp>;
};

/** ordering options when selecting data from "project_covid_tested_positive_question" */
export type Project_Covid_Tested_Positive_Question_Order_By = {
  id?: Maybe<Order_By>;
  project_covid_config?: Maybe<Project_Covid_Config_Order_By>;
  project_covid_tested_positive_answers_aggregate?: Maybe<Project_Covid_Tested_Positive_Answer_Aggregate_Order_By>;
  project_id?: Maybe<Order_By>;
  question?: Maybe<Text_Translation_Order_By>;
  question_id?: Maybe<Order_By>;
  question_text?: Maybe<Order_By>;
  sort_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "project_covid_tested_positive_question" */
export type Project_Covid_Tested_Positive_Question_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "project_covid_tested_positive_question" */
export enum Project_Covid_Tested_Positive_Question_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  QuestionId = 'question_id',
  /** column name */
  QuestionText = 'question_text',
  /** column name */
  SortId = 'sort_id'
}

/** input type for updating data in table "project_covid_tested_positive_question" */
export type Project_Covid_Tested_Positive_Question_Set_Input = {
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  question_id?: Maybe<Scalars['uuid']>;
  question_text?: Maybe<Scalars['String']>;
  sort_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "project_covid_tested_positive_question" */
export enum Project_Covid_Tested_Positive_Question_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  QuestionId = 'question_id',
  /** column name */
  QuestionText = 'question_text',
  /** column name */
  SortId = 'sort_id'
}

/** columns and relationships of "project_covid_tested_positive_worker" */
export type Project_Covid_Tested_Positive_Worker = {
   __typename?: 'project_covid_tested_positive_worker';
  cleared_at?: Maybe<Scalars['timestamptz']>;
  cleared_by_project_employee_id?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  cleared_project_covid_tested_positive_worker?: Maybe<Cleared_Project_Covid_Tested_Positive_Worker>;
  created_at: Scalars['timestamptz'];
  external_id: Scalars['String'];
  id: Scalars['uuid'];
  pending_project_worker_id?: Maybe<Scalars['uuid']>;
  /** An array relationship */
  project_covid_tested_positive_answers: Array<Project_Covid_Tested_Positive_Answer>;
  /** An aggregated array relationship */
  project_covid_tested_positive_answers_aggregate: Project_Covid_Tested_Positive_Answer_Aggregate;
  /** An object relationship */
  project_worker?: Maybe<Project_Worker>;
  project_worker_id?: Maybe<Scalars['uuid']>;
};


/** columns and relationships of "project_covid_tested_positive_worker" */
export type Project_Covid_Tested_Positive_WorkerProject_Covid_Tested_Positive_AnswersArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Tested_Positive_Answer_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Tested_Positive_Answer_Order_By>>;
  where?: Maybe<Project_Covid_Tested_Positive_Answer_Bool_Exp>;
};


/** columns and relationships of "project_covid_tested_positive_worker" */
export type Project_Covid_Tested_Positive_WorkerProject_Covid_Tested_Positive_Answers_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Tested_Positive_Answer_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Tested_Positive_Answer_Order_By>>;
  where?: Maybe<Project_Covid_Tested_Positive_Answer_Bool_Exp>;
};

/** aggregated selection of "project_covid_tested_positive_worker" */
export type Project_Covid_Tested_Positive_Worker_Aggregate = {
   __typename?: 'project_covid_tested_positive_worker_aggregate';
  aggregate?: Maybe<Project_Covid_Tested_Positive_Worker_Aggregate_Fields>;
  nodes: Array<Project_Covid_Tested_Positive_Worker>;
};

/** aggregate fields of "project_covid_tested_positive_worker" */
export type Project_Covid_Tested_Positive_Worker_Aggregate_Fields = {
   __typename?: 'project_covid_tested_positive_worker_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Project_Covid_Tested_Positive_Worker_Max_Fields>;
  min?: Maybe<Project_Covid_Tested_Positive_Worker_Min_Fields>;
};


/** aggregate fields of "project_covid_tested_positive_worker" */
export type Project_Covid_Tested_Positive_Worker_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Project_Covid_Tested_Positive_Worker_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "project_covid_tested_positive_worker" */
export type Project_Covid_Tested_Positive_Worker_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Project_Covid_Tested_Positive_Worker_Max_Order_By>;
  min?: Maybe<Project_Covid_Tested_Positive_Worker_Min_Order_By>;
};

/** input type for inserting array relation for remote table "project_covid_tested_positive_worker" */
export type Project_Covid_Tested_Positive_Worker_Arr_Rel_Insert_Input = {
  data: Array<Project_Covid_Tested_Positive_Worker_Insert_Input>;
  on_conflict?: Maybe<Project_Covid_Tested_Positive_Worker_On_Conflict>;
};

/**
 * Boolean expression to filter rows from the table
 * "project_covid_tested_positive_worker". All fields are combined with a logical 'AND'.
 */
export type Project_Covid_Tested_Positive_Worker_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Project_Covid_Tested_Positive_Worker_Bool_Exp>>>;
  _not?: Maybe<Project_Covid_Tested_Positive_Worker_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Project_Covid_Tested_Positive_Worker_Bool_Exp>>>;
  cleared_at?: Maybe<Timestamptz_Comparison_Exp>;
  cleared_by_project_employee_id?: Maybe<Uuid_Comparison_Exp>;
  cleared_project_covid_tested_positive_worker?: Maybe<Cleared_Project_Covid_Tested_Positive_Worker_Bool_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  external_id?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  pending_project_worker_id?: Maybe<Uuid_Comparison_Exp>;
  project_covid_tested_positive_answers?: Maybe<Project_Covid_Tested_Positive_Answer_Bool_Exp>;
  project_worker?: Maybe<Project_Worker_Bool_Exp>;
  project_worker_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "project_covid_tested_positive_worker" */
export enum Project_Covid_Tested_Positive_Worker_Constraint {
  /** unique or primary key constraint */
  ProjectCovidTestedPositiveWorkerExternalIdKey = 'project_covid_tested_positive_worker_external_id_key',
  /** unique or primary key constraint */
  ProjectWorkerCovidPositiveFormPkey = 'project_worker_covid_positive_form_pkey'
}

/** input type for inserting data into table "project_covid_tested_positive_worker" */
export type Project_Covid_Tested_Positive_Worker_Insert_Input = {
  cleared_at?: Maybe<Scalars['timestamptz']>;
  cleared_by_project_employee_id?: Maybe<Scalars['uuid']>;
  cleared_project_covid_tested_positive_worker?: Maybe<Cleared_Project_Covid_Tested_Positive_Worker_Obj_Rel_Insert_Input>;
  created_at?: Maybe<Scalars['timestamptz']>;
  external_id?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  pending_project_worker_id?: Maybe<Scalars['uuid']>;
  project_covid_tested_positive_answers?: Maybe<Project_Covid_Tested_Positive_Answer_Arr_Rel_Insert_Input>;
  project_worker?: Maybe<Project_Worker_Obj_Rel_Insert_Input>;
  project_worker_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Project_Covid_Tested_Positive_Worker_Max_Fields = {
   __typename?: 'project_covid_tested_positive_worker_max_fields';
  cleared_at?: Maybe<Scalars['timestamptz']>;
  cleared_by_project_employee_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  external_id?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  pending_project_worker_id?: Maybe<Scalars['uuid']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "project_covid_tested_positive_worker" */
export type Project_Covid_Tested_Positive_Worker_Max_Order_By = {
  cleared_at?: Maybe<Order_By>;
  cleared_by_project_employee_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  external_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  pending_project_worker_id?: Maybe<Order_By>;
  project_worker_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Project_Covid_Tested_Positive_Worker_Min_Fields = {
   __typename?: 'project_covid_tested_positive_worker_min_fields';
  cleared_at?: Maybe<Scalars['timestamptz']>;
  cleared_by_project_employee_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  external_id?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  pending_project_worker_id?: Maybe<Scalars['uuid']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "project_covid_tested_positive_worker" */
export type Project_Covid_Tested_Positive_Worker_Min_Order_By = {
  cleared_at?: Maybe<Order_By>;
  cleared_by_project_employee_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  external_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  pending_project_worker_id?: Maybe<Order_By>;
  project_worker_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "project_covid_tested_positive_worker" */
export type Project_Covid_Tested_Positive_Worker_Mutation_Response = {
   __typename?: 'project_covid_tested_positive_worker_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Project_Covid_Tested_Positive_Worker>;
};

/** input type for inserting object relation for remote table "project_covid_tested_positive_worker" */
export type Project_Covid_Tested_Positive_Worker_Obj_Rel_Insert_Input = {
  data: Project_Covid_Tested_Positive_Worker_Insert_Input;
  on_conflict?: Maybe<Project_Covid_Tested_Positive_Worker_On_Conflict>;
};

/** on conflict condition type for table "project_covid_tested_positive_worker" */
export type Project_Covid_Tested_Positive_Worker_On_Conflict = {
  constraint: Project_Covid_Tested_Positive_Worker_Constraint;
  update_columns: Array<Project_Covid_Tested_Positive_Worker_Update_Column>;
  where?: Maybe<Project_Covid_Tested_Positive_Worker_Bool_Exp>;
};

/** ordering options when selecting data from "project_covid_tested_positive_worker" */
export type Project_Covid_Tested_Positive_Worker_Order_By = {
  cleared_at?: Maybe<Order_By>;
  cleared_by_project_employee_id?: Maybe<Order_By>;
  cleared_project_covid_tested_positive_worker?: Maybe<Cleared_Project_Covid_Tested_Positive_Worker_Order_By>;
  created_at?: Maybe<Order_By>;
  external_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  pending_project_worker_id?: Maybe<Order_By>;
  project_covid_tested_positive_answers_aggregate?: Maybe<Project_Covid_Tested_Positive_Answer_Aggregate_Order_By>;
  project_worker?: Maybe<Project_Worker_Order_By>;
  project_worker_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "project_covid_tested_positive_worker" */
export type Project_Covid_Tested_Positive_Worker_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "project_covid_tested_positive_worker" */
export enum Project_Covid_Tested_Positive_Worker_Select_Column {
  /** column name */
  ClearedAt = 'cleared_at',
  /** column name */
  ClearedByProjectEmployeeId = 'cleared_by_project_employee_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  ExternalId = 'external_id',
  /** column name */
  Id = 'id',
  /** column name */
  PendingProjectWorkerId = 'pending_project_worker_id',
  /** column name */
  ProjectWorkerId = 'project_worker_id'
}

/** input type for updating data in table "project_covid_tested_positive_worker" */
export type Project_Covid_Tested_Positive_Worker_Set_Input = {
  cleared_at?: Maybe<Scalars['timestamptz']>;
  cleared_by_project_employee_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  external_id?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  pending_project_worker_id?: Maybe<Scalars['uuid']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "project_covid_tested_positive_worker" */
export enum Project_Covid_Tested_Positive_Worker_Update_Column {
  /** column name */
  ClearedAt = 'cleared_at',
  /** column name */
  ClearedByProjectEmployeeId = 'cleared_by_project_employee_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  ExternalId = 'external_id',
  /** column name */
  Id = 'id',
  /** column name */
  PendingProjectWorkerId = 'pending_project_worker_id',
  /** column name */
  ProjectWorkerId = 'project_worker_id'
}

/** columns and relationships of "project_covid_yes_no_question" */
export type Project_Covid_Yes_No_Question = {
   __typename?: 'project_covid_yes_no_question';
  answer_is_yes: Scalars['Boolean'];
  created_at: Scalars['timestamptz'];
  deleted_at?: Maybe<Scalars['timestamptz']>;
  id: Scalars['uuid'];
  /** An object relationship */
  project: Project;
  /** An array relationship */
  project_covid_certify_worker_answers: Array<Project_Covid_Certify_Worker_Answer>;
  /** An aggregated array relationship */
  project_covid_certify_worker_answers_aggregate: Project_Covid_Certify_Worker_Answer_Aggregate;
  project_id: Scalars['uuid'];
  /** An object relationship */
  question: Text_Translation;
  question_id: Scalars['uuid'];
  question_text?: Maybe<Scalars['String']>;
  updated_at: Scalars['timestamptz'];
};


/** columns and relationships of "project_covid_yes_no_question" */
export type Project_Covid_Yes_No_QuestionProject_Covid_Certify_Worker_AnswersArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Certify_Worker_Answer_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Certify_Worker_Answer_Order_By>>;
  where?: Maybe<Project_Covid_Certify_Worker_Answer_Bool_Exp>;
};


/** columns and relationships of "project_covid_yes_no_question" */
export type Project_Covid_Yes_No_QuestionProject_Covid_Certify_Worker_Answers_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Certify_Worker_Answer_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Certify_Worker_Answer_Order_By>>;
  where?: Maybe<Project_Covid_Certify_Worker_Answer_Bool_Exp>;
};

/** aggregated selection of "project_covid_yes_no_question" */
export type Project_Covid_Yes_No_Question_Aggregate = {
   __typename?: 'project_covid_yes_no_question_aggregate';
  aggregate?: Maybe<Project_Covid_Yes_No_Question_Aggregate_Fields>;
  nodes: Array<Project_Covid_Yes_No_Question>;
};

/** aggregate fields of "project_covid_yes_no_question" */
export type Project_Covid_Yes_No_Question_Aggregate_Fields = {
   __typename?: 'project_covid_yes_no_question_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Project_Covid_Yes_No_Question_Max_Fields>;
  min?: Maybe<Project_Covid_Yes_No_Question_Min_Fields>;
};


/** aggregate fields of "project_covid_yes_no_question" */
export type Project_Covid_Yes_No_Question_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Project_Covid_Yes_No_Question_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "project_covid_yes_no_question" */
export type Project_Covid_Yes_No_Question_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Project_Covid_Yes_No_Question_Max_Order_By>;
  min?: Maybe<Project_Covid_Yes_No_Question_Min_Order_By>;
};

/** input type for inserting array relation for remote table "project_covid_yes_no_question" */
export type Project_Covid_Yes_No_Question_Arr_Rel_Insert_Input = {
  data: Array<Project_Covid_Yes_No_Question_Insert_Input>;
  on_conflict?: Maybe<Project_Covid_Yes_No_Question_On_Conflict>;
};

/**
 * Boolean expression to filter rows from the table
 * "project_covid_yes_no_question". All fields are combined with a logical 'AND'.
 */
export type Project_Covid_Yes_No_Question_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Project_Covid_Yes_No_Question_Bool_Exp>>>;
  _not?: Maybe<Project_Covid_Yes_No_Question_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Project_Covid_Yes_No_Question_Bool_Exp>>>;
  answer_is_yes?: Maybe<Boolean_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  deleted_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_covid_certify_worker_answers?: Maybe<Project_Covid_Certify_Worker_Answer_Bool_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  question?: Maybe<Text_Translation_Bool_Exp>;
  question_id?: Maybe<Uuid_Comparison_Exp>;
  question_text?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "project_covid_yes_no_question" */
export enum Project_Covid_Yes_No_Question_Constraint {
  /** unique or primary key constraint */
  ProjectCovidYesNoQuestionPkey = 'project_covid_yes_no_question_pkey',
  /** unique or primary key constraint */
  ProjectCovidYesNoQuestionQuestionProjectIdKey = 'project_covid_yes_no_question_question_project_id_key'
}

/** input type for inserting data into table "project_covid_yes_no_question" */
export type Project_Covid_Yes_No_Question_Insert_Input = {
  answer_is_yes?: Maybe<Scalars['Boolean']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  deleted_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_covid_certify_worker_answers?: Maybe<Project_Covid_Certify_Worker_Answer_Arr_Rel_Insert_Input>;
  project_id?: Maybe<Scalars['uuid']>;
  question?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  question_id?: Maybe<Scalars['uuid']>;
  question_text?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate max on columns */
export type Project_Covid_Yes_No_Question_Max_Fields = {
   __typename?: 'project_covid_yes_no_question_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  deleted_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  question_id?: Maybe<Scalars['uuid']>;
  question_text?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** order by max() on columns of table "project_covid_yes_no_question" */
export type Project_Covid_Yes_No_Question_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  deleted_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  question_id?: Maybe<Order_By>;
  question_text?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Project_Covid_Yes_No_Question_Min_Fields = {
   __typename?: 'project_covid_yes_no_question_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  deleted_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  question_id?: Maybe<Scalars['uuid']>;
  question_text?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** order by min() on columns of table "project_covid_yes_no_question" */
export type Project_Covid_Yes_No_Question_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  deleted_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  question_id?: Maybe<Order_By>;
  question_text?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** response of any mutation on the table "project_covid_yes_no_question" */
export type Project_Covid_Yes_No_Question_Mutation_Response = {
   __typename?: 'project_covid_yes_no_question_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Project_Covid_Yes_No_Question>;
};

/** input type for inserting object relation for remote table "project_covid_yes_no_question" */
export type Project_Covid_Yes_No_Question_Obj_Rel_Insert_Input = {
  data: Project_Covid_Yes_No_Question_Insert_Input;
  on_conflict?: Maybe<Project_Covid_Yes_No_Question_On_Conflict>;
};

/** on conflict condition type for table "project_covid_yes_no_question" */
export type Project_Covid_Yes_No_Question_On_Conflict = {
  constraint: Project_Covid_Yes_No_Question_Constraint;
  update_columns: Array<Project_Covid_Yes_No_Question_Update_Column>;
  where?: Maybe<Project_Covid_Yes_No_Question_Bool_Exp>;
};

/** ordering options when selecting data from "project_covid_yes_no_question" */
export type Project_Covid_Yes_No_Question_Order_By = {
  answer_is_yes?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  deleted_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project?: Maybe<Project_Order_By>;
  project_covid_certify_worker_answers_aggregate?: Maybe<Project_Covid_Certify_Worker_Answer_Aggregate_Order_By>;
  project_id?: Maybe<Order_By>;
  question?: Maybe<Text_Translation_Order_By>;
  question_id?: Maybe<Order_By>;
  question_text?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** primary key columns input for table: "project_covid_yes_no_question" */
export type Project_Covid_Yes_No_Question_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "project_covid_yes_no_question" */
export enum Project_Covid_Yes_No_Question_Select_Column {
  /** column name */
  AnswerIsYes = 'answer_is_yes',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DeletedAt = 'deleted_at',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  QuestionId = 'question_id',
  /** column name */
  QuestionText = 'question_text',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** input type for updating data in table "project_covid_yes_no_question" */
export type Project_Covid_Yes_No_Question_Set_Input = {
  answer_is_yes?: Maybe<Scalars['Boolean']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  deleted_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  question_id?: Maybe<Scalars['uuid']>;
  question_text?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** update columns of table "project_covid_yes_no_question" */
export enum Project_Covid_Yes_No_Question_Update_Column {
  /** column name */
  AnswerIsYes = 'answer_is_yes',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DeletedAt = 'deleted_at',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  QuestionId = 'question_id',
  /** column name */
  QuestionText = 'question_text',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** columns and relationships of "project_crew" */
export type Project_Crew = {
   __typename?: 'project_crew';
  created_at: Scalars['timestamptz'];
  id: Scalars['uuid'];
  /** An object relationship */
  lead_foreman_project_worker?: Maybe<Project_Worker>;
  lead_foreman_project_worker_id?: Maybe<Scalars['uuid']>;
  name: Scalars['String'];
  /** An object relationship */
  project: Project;
  project_id: Scalars['uuid'];
  /** An array relationship */
  project_workers: Array<Project_Worker>;
  /** An aggregated array relationship */
  project_workers_aggregate: Project_Worker_Aggregate;
  /** An object relationship */
  subcontractor: Subcontractor;
  subcontractor_id: Scalars['uuid'];
};


/** columns and relationships of "project_crew" */
export type Project_CrewProject_WorkersArgs = {
  distinct_on?: Maybe<Array<Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Worker_Order_By>>;
  where?: Maybe<Project_Worker_Bool_Exp>;
};


/** columns and relationships of "project_crew" */
export type Project_CrewProject_Workers_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Worker_Order_By>>;
  where?: Maybe<Project_Worker_Bool_Exp>;
};

/** aggregated selection of "project_crew" */
export type Project_Crew_Aggregate = {
   __typename?: 'project_crew_aggregate';
  aggregate?: Maybe<Project_Crew_Aggregate_Fields>;
  nodes: Array<Project_Crew>;
};

/** aggregate fields of "project_crew" */
export type Project_Crew_Aggregate_Fields = {
   __typename?: 'project_crew_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Project_Crew_Max_Fields>;
  min?: Maybe<Project_Crew_Min_Fields>;
};


/** aggregate fields of "project_crew" */
export type Project_Crew_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Project_Crew_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "project_crew" */
export type Project_Crew_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Project_Crew_Max_Order_By>;
  min?: Maybe<Project_Crew_Min_Order_By>;
};

/** input type for inserting array relation for remote table "project_crew" */
export type Project_Crew_Arr_Rel_Insert_Input = {
  data: Array<Project_Crew_Insert_Input>;
  on_conflict?: Maybe<Project_Crew_On_Conflict>;
};

/** Boolean expression to filter rows from the table "project_crew". All fields are combined with a logical 'AND'. */
export type Project_Crew_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Project_Crew_Bool_Exp>>>;
  _not?: Maybe<Project_Crew_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Project_Crew_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  lead_foreman_project_worker?: Maybe<Project_Worker_Bool_Exp>;
  lead_foreman_project_worker_id?: Maybe<Uuid_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  project_workers?: Maybe<Project_Worker_Bool_Exp>;
  subcontractor?: Maybe<Subcontractor_Bool_Exp>;
  subcontractor_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "project_crew" */
export enum Project_Crew_Constraint {
  /** unique or primary key constraint */
  ProjectCrewPkey = 'project_crew_pkey',
  /** unique or primary key constraint */
  ProjectCrewProjectIdSubcontractorIdLeadForemanProjectW = 'project_crew_project_id_subcontractor_id_lead_foreman_project_w'
}

/** input type for inserting data into table "project_crew" */
export type Project_Crew_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  lead_foreman_project_worker?: Maybe<Project_Worker_Obj_Rel_Insert_Input>;
  lead_foreman_project_worker_id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_id?: Maybe<Scalars['uuid']>;
  project_workers?: Maybe<Project_Worker_Arr_Rel_Insert_Input>;
  subcontractor?: Maybe<Subcontractor_Obj_Rel_Insert_Input>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Project_Crew_Max_Fields = {
   __typename?: 'project_crew_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  lead_foreman_project_worker_id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "project_crew" */
export type Project_Crew_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  lead_foreman_project_worker_id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Project_Crew_Min_Fields = {
   __typename?: 'project_crew_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  lead_foreman_project_worker_id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "project_crew" */
export type Project_Crew_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  lead_foreman_project_worker_id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "project_crew" */
export type Project_Crew_Mutation_Response = {
   __typename?: 'project_crew_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Project_Crew>;
};

/** input type for inserting object relation for remote table "project_crew" */
export type Project_Crew_Obj_Rel_Insert_Input = {
  data: Project_Crew_Insert_Input;
  on_conflict?: Maybe<Project_Crew_On_Conflict>;
};

/** on conflict condition type for table "project_crew" */
export type Project_Crew_On_Conflict = {
  constraint: Project_Crew_Constraint;
  update_columns: Array<Project_Crew_Update_Column>;
  where?: Maybe<Project_Crew_Bool_Exp>;
};

/** ordering options when selecting data from "project_crew" */
export type Project_Crew_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  lead_foreman_project_worker?: Maybe<Project_Worker_Order_By>;
  lead_foreman_project_worker_id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  project?: Maybe<Project_Order_By>;
  project_id?: Maybe<Order_By>;
  project_workers_aggregate?: Maybe<Project_Worker_Aggregate_Order_By>;
  subcontractor?: Maybe<Subcontractor_Order_By>;
  subcontractor_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "project_crew" */
export type Project_Crew_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "project_crew" */
export enum Project_Crew_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  LeadForemanProjectWorkerId = 'lead_foreman_project_worker_id',
  /** column name */
  Name = 'name',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  SubcontractorId = 'subcontractor_id'
}

/** input type for updating data in table "project_crew" */
export type Project_Crew_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  lead_foreman_project_worker_id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "project_crew" */
export enum Project_Crew_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  LeadForemanProjectWorkerId = 'lead_foreman_project_worker_id',
  /** column name */
  Name = 'name',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  SubcontractorId = 'subcontractor_id'
}

/** columns and relationships of "project_employee" */
export type Project_Employee = {
   __typename?: 'project_employee';
  created_at: Scalars['timestamptz'];
  /** An object relationship */
  employee: General_Contractor_Employee;
  employee_id: Scalars['uuid'];
  id: Scalars['uuid'];
  /** An object relationship */
  project: Project;
  /** An array relationship */
  project_covid_notify_employees: Array<Project_Covid_Notify_Employee>;
  /** An aggregated array relationship */
  project_covid_notify_employees_aggregate: Project_Covid_Notify_Employee_Aggregate;
  project_id: Scalars['uuid'];
};


/** columns and relationships of "project_employee" */
export type Project_EmployeeProject_Covid_Notify_EmployeesArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Notify_Employee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Notify_Employee_Order_By>>;
  where?: Maybe<Project_Covid_Notify_Employee_Bool_Exp>;
};


/** columns and relationships of "project_employee" */
export type Project_EmployeeProject_Covid_Notify_Employees_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Notify_Employee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Notify_Employee_Order_By>>;
  where?: Maybe<Project_Covid_Notify_Employee_Bool_Exp>;
};

/** aggregated selection of "project_employee" */
export type Project_Employee_Aggregate = {
   __typename?: 'project_employee_aggregate';
  aggregate?: Maybe<Project_Employee_Aggregate_Fields>;
  nodes: Array<Project_Employee>;
};

/** aggregate fields of "project_employee" */
export type Project_Employee_Aggregate_Fields = {
   __typename?: 'project_employee_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Project_Employee_Max_Fields>;
  min?: Maybe<Project_Employee_Min_Fields>;
};


/** aggregate fields of "project_employee" */
export type Project_Employee_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Project_Employee_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "project_employee" */
export type Project_Employee_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Project_Employee_Max_Order_By>;
  min?: Maybe<Project_Employee_Min_Order_By>;
};

/** input type for inserting array relation for remote table "project_employee" */
export type Project_Employee_Arr_Rel_Insert_Input = {
  data: Array<Project_Employee_Insert_Input>;
  on_conflict?: Maybe<Project_Employee_On_Conflict>;
};

/** Boolean expression to filter rows from the table "project_employee". All fields are combined with a logical 'AND'. */
export type Project_Employee_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Project_Employee_Bool_Exp>>>;
  _not?: Maybe<Project_Employee_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Project_Employee_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  employee?: Maybe<General_Contractor_Employee_Bool_Exp>;
  employee_id?: Maybe<Uuid_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_covid_notify_employees?: Maybe<Project_Covid_Notify_Employee_Bool_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "project_employee" */
export enum Project_Employee_Constraint {
  /** unique or primary key constraint */
  ProjectEmployeePkey = 'project_employee_pkey',
  /** unique or primary key constraint */
  ProjectEmployeeProjectIdEmployeeIdKey = 'project_employee_project_id_employee_id_key'
}

/** input type for inserting data into table "project_employee" */
export type Project_Employee_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  employee?: Maybe<General_Contractor_Employee_Obj_Rel_Insert_Input>;
  employee_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_covid_notify_employees?: Maybe<Project_Covid_Notify_Employee_Arr_Rel_Insert_Input>;
  project_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Project_Employee_Max_Fields = {
   __typename?: 'project_employee_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  employee_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "project_employee" */
export type Project_Employee_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  employee_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Project_Employee_Min_Fields = {
   __typename?: 'project_employee_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  employee_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "project_employee" */
export type Project_Employee_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  employee_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "project_employee" */
export type Project_Employee_Mutation_Response = {
   __typename?: 'project_employee_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Project_Employee>;
};

/** input type for inserting object relation for remote table "project_employee" */
export type Project_Employee_Obj_Rel_Insert_Input = {
  data: Project_Employee_Insert_Input;
  on_conflict?: Maybe<Project_Employee_On_Conflict>;
};

/** on conflict condition type for table "project_employee" */
export type Project_Employee_On_Conflict = {
  constraint: Project_Employee_Constraint;
  update_columns: Array<Project_Employee_Update_Column>;
  where?: Maybe<Project_Employee_Bool_Exp>;
};

/** ordering options when selecting data from "project_employee" */
export type Project_Employee_Order_By = {
  created_at?: Maybe<Order_By>;
  employee?: Maybe<General_Contractor_Employee_Order_By>;
  employee_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project?: Maybe<Project_Order_By>;
  project_covid_notify_employees_aggregate?: Maybe<Project_Covid_Notify_Employee_Aggregate_Order_By>;
  project_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "project_employee" */
export type Project_Employee_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "project_employee" */
export enum Project_Employee_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  EmployeeId = 'employee_id',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectId = 'project_id'
}

/** input type for updating data in table "project_employee" */
export type Project_Employee_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  employee_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "project_employee" */
export enum Project_Employee_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  EmployeeId = 'employee_id',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectId = 'project_id'
}

/** columns and relationships of "project_hazard" */
export type Project_Hazard = {
   __typename?: 'project_hazard';
  created_at?: Maybe<Scalars['timestamptz']>;
  /** An object relationship */
  description: Text_Translation;
  description_id: Scalars['uuid'];
  description_text: Scalars['String'];
  expiry_date: Scalars['timestamptz'];
  id: Scalars['uuid'];
  /** An array relationship */
  images: Array<Image>;
  /** An aggregated array relationship */
  images_aggregate: Image_Aggregate;
  /** An object relationship */
  project?: Maybe<Project>;
  /** An array relationship */
  project_hazard_subcontractors: Array<Project_Hazard_Subcontractor>;
  /** An aggregated array relationship */
  project_hazard_subcontractors_aggregate: Project_Hazard_Subcontractor_Aggregate;
  project_id?: Maybe<Scalars['uuid']>;
  /** An array relationship */
  report_project_hazards: Array<Report_Project_Hazard>;
  /** An aggregated array relationship */
  report_project_hazards_aggregate: Report_Project_Hazard_Aggregate;
};


/** columns and relationships of "project_hazard" */
export type Project_HazardImagesArgs = {
  distinct_on?: Maybe<Array<Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Image_Order_By>>;
  where?: Maybe<Image_Bool_Exp>;
};


/** columns and relationships of "project_hazard" */
export type Project_HazardImages_AggregateArgs = {
  distinct_on?: Maybe<Array<Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Image_Order_By>>;
  where?: Maybe<Image_Bool_Exp>;
};


/** columns and relationships of "project_hazard" */
export type Project_HazardProject_Hazard_SubcontractorsArgs = {
  distinct_on?: Maybe<Array<Project_Hazard_Subcontractor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Hazard_Subcontractor_Order_By>>;
  where?: Maybe<Project_Hazard_Subcontractor_Bool_Exp>;
};


/** columns and relationships of "project_hazard" */
export type Project_HazardProject_Hazard_Subcontractors_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Hazard_Subcontractor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Hazard_Subcontractor_Order_By>>;
  where?: Maybe<Project_Hazard_Subcontractor_Bool_Exp>;
};


/** columns and relationships of "project_hazard" */
export type Project_HazardReport_Project_HazardsArgs = {
  distinct_on?: Maybe<Array<Report_Project_Hazard_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Project_Hazard_Order_By>>;
  where?: Maybe<Report_Project_Hazard_Bool_Exp>;
};


/** columns and relationships of "project_hazard" */
export type Project_HazardReport_Project_Hazards_AggregateArgs = {
  distinct_on?: Maybe<Array<Report_Project_Hazard_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Project_Hazard_Order_By>>;
  where?: Maybe<Report_Project_Hazard_Bool_Exp>;
};

/** aggregated selection of "project_hazard" */
export type Project_Hazard_Aggregate = {
   __typename?: 'project_hazard_aggregate';
  aggregate?: Maybe<Project_Hazard_Aggregate_Fields>;
  nodes: Array<Project_Hazard>;
};

/** aggregate fields of "project_hazard" */
export type Project_Hazard_Aggregate_Fields = {
   __typename?: 'project_hazard_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Project_Hazard_Max_Fields>;
  min?: Maybe<Project_Hazard_Min_Fields>;
};


/** aggregate fields of "project_hazard" */
export type Project_Hazard_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Project_Hazard_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "project_hazard" */
export type Project_Hazard_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Project_Hazard_Max_Order_By>;
  min?: Maybe<Project_Hazard_Min_Order_By>;
};

/** input type for inserting array relation for remote table "project_hazard" */
export type Project_Hazard_Arr_Rel_Insert_Input = {
  data: Array<Project_Hazard_Insert_Input>;
  on_conflict?: Maybe<Project_Hazard_On_Conflict>;
};

/** Boolean expression to filter rows from the table "project_hazard". All fields are combined with a logical 'AND'. */
export type Project_Hazard_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Project_Hazard_Bool_Exp>>>;
  _not?: Maybe<Project_Hazard_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Project_Hazard_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  description?: Maybe<Text_Translation_Bool_Exp>;
  description_id?: Maybe<Uuid_Comparison_Exp>;
  description_text?: Maybe<String_Comparison_Exp>;
  expiry_date?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  images?: Maybe<Image_Bool_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_hazard_subcontractors?: Maybe<Project_Hazard_Subcontractor_Bool_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  report_project_hazards?: Maybe<Report_Project_Hazard_Bool_Exp>;
};

/** unique or primary key constraints on table "project_hazard" */
export enum Project_Hazard_Constraint {
  /** unique or primary key constraint */
  ProjectHazardIdKey = 'project_hazard_id_key',
  /** unique or primary key constraint */
  ProjectHazardPkey = 'project_hazard_pkey'
}

/** input type for inserting data into table "project_hazard" */
export type Project_Hazard_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  description_id?: Maybe<Scalars['uuid']>;
  description_text?: Maybe<Scalars['String']>;
  expiry_date?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  images?: Maybe<Image_Arr_Rel_Insert_Input>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_hazard_subcontractors?: Maybe<Project_Hazard_Subcontractor_Arr_Rel_Insert_Input>;
  project_id?: Maybe<Scalars['uuid']>;
  report_project_hazards?: Maybe<Report_Project_Hazard_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Project_Hazard_Max_Fields = {
   __typename?: 'project_hazard_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  description_id?: Maybe<Scalars['uuid']>;
  description_text?: Maybe<Scalars['String']>;
  expiry_date?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "project_hazard" */
export type Project_Hazard_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  description_id?: Maybe<Order_By>;
  description_text?: Maybe<Order_By>;
  expiry_date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Project_Hazard_Min_Fields = {
   __typename?: 'project_hazard_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  description_id?: Maybe<Scalars['uuid']>;
  description_text?: Maybe<Scalars['String']>;
  expiry_date?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "project_hazard" */
export type Project_Hazard_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  description_id?: Maybe<Order_By>;
  description_text?: Maybe<Order_By>;
  expiry_date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "project_hazard" */
export type Project_Hazard_Mutation_Response = {
   __typename?: 'project_hazard_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Project_Hazard>;
};

/** input type for inserting object relation for remote table "project_hazard" */
export type Project_Hazard_Obj_Rel_Insert_Input = {
  data: Project_Hazard_Insert_Input;
  on_conflict?: Maybe<Project_Hazard_On_Conflict>;
};

/** on conflict condition type for table "project_hazard" */
export type Project_Hazard_On_Conflict = {
  constraint: Project_Hazard_Constraint;
  update_columns: Array<Project_Hazard_Update_Column>;
  where?: Maybe<Project_Hazard_Bool_Exp>;
};

/** ordering options when selecting data from "project_hazard" */
export type Project_Hazard_Order_By = {
  created_at?: Maybe<Order_By>;
  description?: Maybe<Text_Translation_Order_By>;
  description_id?: Maybe<Order_By>;
  description_text?: Maybe<Order_By>;
  expiry_date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  images_aggregate?: Maybe<Image_Aggregate_Order_By>;
  project?: Maybe<Project_Order_By>;
  project_hazard_subcontractors_aggregate?: Maybe<Project_Hazard_Subcontractor_Aggregate_Order_By>;
  project_id?: Maybe<Order_By>;
  report_project_hazards_aggregate?: Maybe<Report_Project_Hazard_Aggregate_Order_By>;
};

/** primary key columns input for table: "project_hazard" */
export type Project_Hazard_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "project_hazard" */
export enum Project_Hazard_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DescriptionId = 'description_id',
  /** column name */
  DescriptionText = 'description_text',
  /** column name */
  ExpiryDate = 'expiry_date',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectId = 'project_id'
}

/** input type for updating data in table "project_hazard" */
export type Project_Hazard_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  description_id?: Maybe<Scalars['uuid']>;
  description_text?: Maybe<Scalars['String']>;
  expiry_date?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
};

/** columns and relationships of "project_hazard_subcontractor" */
export type Project_Hazard_Subcontractor = {
   __typename?: 'project_hazard_subcontractor';
  created_at: Scalars['timestamptz'];
  /** An object relationship */
  project_hazard: Project_Hazard;
  project_hazard_id: Scalars['uuid'];
  /** An object relationship */
  subcontractor: Subcontractor;
  subcontractor_id: Scalars['uuid'];
};

/** aggregated selection of "project_hazard_subcontractor" */
export type Project_Hazard_Subcontractor_Aggregate = {
   __typename?: 'project_hazard_subcontractor_aggregate';
  aggregate?: Maybe<Project_Hazard_Subcontractor_Aggregate_Fields>;
  nodes: Array<Project_Hazard_Subcontractor>;
};

/** aggregate fields of "project_hazard_subcontractor" */
export type Project_Hazard_Subcontractor_Aggregate_Fields = {
   __typename?: 'project_hazard_subcontractor_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Project_Hazard_Subcontractor_Max_Fields>;
  min?: Maybe<Project_Hazard_Subcontractor_Min_Fields>;
};


/** aggregate fields of "project_hazard_subcontractor" */
export type Project_Hazard_Subcontractor_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Project_Hazard_Subcontractor_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "project_hazard_subcontractor" */
export type Project_Hazard_Subcontractor_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Project_Hazard_Subcontractor_Max_Order_By>;
  min?: Maybe<Project_Hazard_Subcontractor_Min_Order_By>;
};

/** input type for inserting array relation for remote table "project_hazard_subcontractor" */
export type Project_Hazard_Subcontractor_Arr_Rel_Insert_Input = {
  data: Array<Project_Hazard_Subcontractor_Insert_Input>;
  on_conflict?: Maybe<Project_Hazard_Subcontractor_On_Conflict>;
};

/**
 * Boolean expression to filter rows from the table "project_hazard_subcontractor".
 * All fields are combined with a logical 'AND'.
 */
export type Project_Hazard_Subcontractor_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Project_Hazard_Subcontractor_Bool_Exp>>>;
  _not?: Maybe<Project_Hazard_Subcontractor_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Project_Hazard_Subcontractor_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  project_hazard?: Maybe<Project_Hazard_Bool_Exp>;
  project_hazard_id?: Maybe<Uuid_Comparison_Exp>;
  subcontractor?: Maybe<Subcontractor_Bool_Exp>;
  subcontractor_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "project_hazard_subcontractor" */
export enum Project_Hazard_Subcontractor_Constraint {
  /** unique or primary key constraint */
  ProjectHazardSubcontractorPkey = 'project_hazard_subcontractor_pkey'
}

/** input type for inserting data into table "project_hazard_subcontractor" */
export type Project_Hazard_Subcontractor_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  project_hazard?: Maybe<Project_Hazard_Obj_Rel_Insert_Input>;
  project_hazard_id?: Maybe<Scalars['uuid']>;
  subcontractor?: Maybe<Subcontractor_Obj_Rel_Insert_Input>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Project_Hazard_Subcontractor_Max_Fields = {
   __typename?: 'project_hazard_subcontractor_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  project_hazard_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "project_hazard_subcontractor" */
export type Project_Hazard_Subcontractor_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  project_hazard_id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Project_Hazard_Subcontractor_Min_Fields = {
   __typename?: 'project_hazard_subcontractor_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  project_hazard_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "project_hazard_subcontractor" */
export type Project_Hazard_Subcontractor_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  project_hazard_id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "project_hazard_subcontractor" */
export type Project_Hazard_Subcontractor_Mutation_Response = {
   __typename?: 'project_hazard_subcontractor_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Project_Hazard_Subcontractor>;
};

/** input type for inserting object relation for remote table "project_hazard_subcontractor" */
export type Project_Hazard_Subcontractor_Obj_Rel_Insert_Input = {
  data: Project_Hazard_Subcontractor_Insert_Input;
  on_conflict?: Maybe<Project_Hazard_Subcontractor_On_Conflict>;
};

/** on conflict condition type for table "project_hazard_subcontractor" */
export type Project_Hazard_Subcontractor_On_Conflict = {
  constraint: Project_Hazard_Subcontractor_Constraint;
  update_columns: Array<Project_Hazard_Subcontractor_Update_Column>;
  where?: Maybe<Project_Hazard_Subcontractor_Bool_Exp>;
};

/** ordering options when selecting data from "project_hazard_subcontractor" */
export type Project_Hazard_Subcontractor_Order_By = {
  created_at?: Maybe<Order_By>;
  project_hazard?: Maybe<Project_Hazard_Order_By>;
  project_hazard_id?: Maybe<Order_By>;
  subcontractor?: Maybe<Subcontractor_Order_By>;
  subcontractor_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "project_hazard_subcontractor" */
export type Project_Hazard_Subcontractor_Pk_Columns_Input = {
  project_hazard_id: Scalars['uuid'];
  subcontractor_id: Scalars['uuid'];
};

/** select columns of table "project_hazard_subcontractor" */
export enum Project_Hazard_Subcontractor_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  ProjectHazardId = 'project_hazard_id',
  /** column name */
  SubcontractorId = 'subcontractor_id'
}

/** input type for updating data in table "project_hazard_subcontractor" */
export type Project_Hazard_Subcontractor_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  project_hazard_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "project_hazard_subcontractor" */
export enum Project_Hazard_Subcontractor_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  ProjectHazardId = 'project_hazard_id',
  /** column name */
  SubcontractorId = 'subcontractor_id'
}

/** update columns of table "project_hazard" */
export enum Project_Hazard_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DescriptionId = 'description_id',
  /** column name */
  DescriptionText = 'description_text',
  /** column name */
  ExpiryDate = 'expiry_date',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectId = 'project_id'
}

/** input type for inserting data into table "project" */
export type Project_Insert_Input = {
  address?: Maybe<Address_Obj_Rel_Insert_Input>;
  address_id?: Maybe<Scalars['uuid']>;
  chats?: Maybe<Chat_Arr_Rel_Insert_Input>;
  completed?: Maybe<Scalars['Boolean']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_reports?: Maybe<Daily_Report_Arr_Rel_Insert_Input>;
  dashboard_updated_at?: Maybe<Scalars['timestamptz']>;
  external_id?: Maybe<Scalars['String']>;
  general_contractor?: Maybe<General_Contractor_Obj_Rel_Insert_Input>;
  general_contractor_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  is_dashboard_active?: Maybe<Scalars['Boolean']>;
  is_sitedelivery_active?: Maybe<Scalars['Boolean']>;
  is_sitedelivery_on?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  pemit_contact_project_employee_id?: Maybe<Scalars['uuid']>;
  permit_contact_project_employee?: Maybe<Project_Employee_Obj_Rel_Insert_Input>;
  permits?: Maybe<Permit_Arr_Rel_Insert_Input>;
  procore_project_data?: Maybe<Procore_Project_Data_Obj_Rel_Insert_Input>;
  project_completion_automated_notifications?: Maybe<Project_Completion_Automated_Notification_Arr_Rel_Insert_Input>;
  project_covid_config?: Maybe<Project_Covid_Config_Obj_Rel_Insert_Input>;
  project_covid_guest_certifications?: Maybe<Project_Covid_Guest_Certification_Arr_Rel_Insert_Input>;
  project_covid_yes_no_questions?: Maybe<Project_Covid_Yes_No_Question_Arr_Rel_Insert_Input>;
  project_crews?: Maybe<Project_Crew_Arr_Rel_Insert_Input>;
  project_employees?: Maybe<Project_Employee_Arr_Rel_Insert_Input>;
  project_hazards?: Maybe<Project_Hazard_Arr_Rel_Insert_Input>;
  project_report_settings?: Maybe<Project_Report_Settings_Obj_Rel_Insert_Input>;
  project_subcontractors?: Maybe<Project_Subcontractor_Arr_Rel_Insert_Input>;
  project_workers?: Maybe<Project_Worker_Arr_Rel_Insert_Input>;
  qr_code_url?: Maybe<Scalars['String']>;
  reports?: Maybe<Report_Arr_Rel_Insert_Input>;
  safety_report_awareness_disabled?: Maybe<Scalars['Boolean']>;
  todos?: Maybe<Todo_Arr_Rel_Insert_Input>;
  toolbox_talks?: Maybe<Toolbox_Talk_Arr_Rel_Insert_Input>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  user_notifications?: Maybe<User_Notification_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Project_Max_Fields = {
   __typename?: 'project_max_fields';
  address_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  dashboard_updated_at?: Maybe<Scalars['timestamptz']>;
  external_id?: Maybe<Scalars['String']>;
  general_contractor_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  pemit_contact_project_employee_id?: Maybe<Scalars['uuid']>;
  qr_code_url?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** order by max() on columns of table "project" */
export type Project_Max_Order_By = {
  address_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  dashboard_updated_at?: Maybe<Order_By>;
  external_id?: Maybe<Order_By>;
  general_contractor_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  pemit_contact_project_employee_id?: Maybe<Order_By>;
  qr_code_url?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Project_Min_Fields = {
   __typename?: 'project_min_fields';
  address_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  dashboard_updated_at?: Maybe<Scalars['timestamptz']>;
  external_id?: Maybe<Scalars['String']>;
  general_contractor_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  pemit_contact_project_employee_id?: Maybe<Scalars['uuid']>;
  qr_code_url?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** order by min() on columns of table "project" */
export type Project_Min_Order_By = {
  address_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  dashboard_updated_at?: Maybe<Order_By>;
  external_id?: Maybe<Order_By>;
  general_contractor_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  pemit_contact_project_employee_id?: Maybe<Order_By>;
  qr_code_url?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** response of any mutation on the table "project" */
export type Project_Mutation_Response = {
   __typename?: 'project_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Project>;
};

/** input type for inserting object relation for remote table "project" */
export type Project_Obj_Rel_Insert_Input = {
  data: Project_Insert_Input;
  on_conflict?: Maybe<Project_On_Conflict>;
};

/** on conflict condition type for table "project" */
export type Project_On_Conflict = {
  constraint: Project_Constraint;
  update_columns: Array<Project_Update_Column>;
  where?: Maybe<Project_Bool_Exp>;
};

/** ordering options when selecting data from "project" */
export type Project_Order_By = {
  address?: Maybe<Address_Order_By>;
  address_id?: Maybe<Order_By>;
  chats_aggregate?: Maybe<Chat_Aggregate_Order_By>;
  completed?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  daily_reports_aggregate?: Maybe<Daily_Report_Aggregate_Order_By>;
  dashboard_updated_at?: Maybe<Order_By>;
  external_id?: Maybe<Order_By>;
  general_contractor?: Maybe<General_Contractor_Order_By>;
  general_contractor_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  is_dashboard_active?: Maybe<Order_By>;
  is_sitedelivery_active?: Maybe<Order_By>;
  is_sitedelivery_on?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  pemit_contact_project_employee_id?: Maybe<Order_By>;
  permit_contact_project_employee?: Maybe<Project_Employee_Order_By>;
  permits_aggregate?: Maybe<Permit_Aggregate_Order_By>;
  procore_project_data?: Maybe<Procore_Project_Data_Order_By>;
  project_completion_automated_notifications_aggregate?: Maybe<Project_Completion_Automated_Notification_Aggregate_Order_By>;
  project_covid_config?: Maybe<Project_Covid_Config_Order_By>;
  project_covid_guest_certifications_aggregate?: Maybe<Project_Covid_Guest_Certification_Aggregate_Order_By>;
  project_covid_yes_no_questions_aggregate?: Maybe<Project_Covid_Yes_No_Question_Aggregate_Order_By>;
  project_crews_aggregate?: Maybe<Project_Crew_Aggregate_Order_By>;
  project_employees_aggregate?: Maybe<Project_Employee_Aggregate_Order_By>;
  project_hazards_aggregate?: Maybe<Project_Hazard_Aggregate_Order_By>;
  project_report_settings?: Maybe<Project_Report_Settings_Order_By>;
  project_subcontractors_aggregate?: Maybe<Project_Subcontractor_Aggregate_Order_By>;
  project_workers_aggregate?: Maybe<Project_Worker_Aggregate_Order_By>;
  qr_code_url?: Maybe<Order_By>;
  reports_aggregate?: Maybe<Report_Aggregate_Order_By>;
  safety_report_awareness_disabled?: Maybe<Order_By>;
  todos_aggregate?: Maybe<Todo_Aggregate_Order_By>;
  toolbox_talks_aggregate?: Maybe<Toolbox_Talk_Aggregate_Order_By>;
  updated_at?: Maybe<Order_By>;
  user_notifications_aggregate?: Maybe<User_Notification_Aggregate_Order_By>;
};

/** primary key columns input for table: "project" */
export type Project_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** columns and relationships of "project_post" */
export type Project_Post = {
   __typename?: 'project_post';
  author_id: Scalars['uuid'];
  created_at: Scalars['timestamptz'];
  description: Scalars['String'];
  description_id?: Maybe<Scalars['uuid']>;
  expiry_date: Scalars['timestamptz'];
  /** An object relationship */
  general_contractor_employee: General_Contractor_Employee;
  id: Scalars['uuid'];
  /** An array relationship */
  images: Array<Image>;
  /** An aggregated array relationship */
  images_aggregate: Image_Aggregate;
  /** An array relationship */
  pdfs: Array<Pdf>;
  /** An aggregated array relationship */
  pdfs_aggregate: Pdf_Aggregate;
  /** An object relationship */
  project?: Maybe<Project>;
  project_id?: Maybe<Scalars['uuid']>;
  /** An array relationship */
  project_post_workers: Array<Project_Post_Workers>;
  /** An aggregated array relationship */
  project_post_workers_aggregate: Project_Post_Workers_Aggregate;
  /** An array relationship */
  report_project_posts: Array<Report_Project_Post>;
  /** An aggregated array relationship */
  report_project_posts_aggregate: Report_Project_Post_Aggregate;
  show_in_report: Scalars['Boolean'];
  /** An object relationship */
  text_translation?: Maybe<Text_Translation>;
  title: Scalars['String'];
  type: Scalars['String'];
};


/** columns and relationships of "project_post" */
export type Project_PostImagesArgs = {
  distinct_on?: Maybe<Array<Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Image_Order_By>>;
  where?: Maybe<Image_Bool_Exp>;
};


/** columns and relationships of "project_post" */
export type Project_PostImages_AggregateArgs = {
  distinct_on?: Maybe<Array<Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Image_Order_By>>;
  where?: Maybe<Image_Bool_Exp>;
};


/** columns and relationships of "project_post" */
export type Project_PostPdfsArgs = {
  distinct_on?: Maybe<Array<Pdf_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Pdf_Order_By>>;
  where?: Maybe<Pdf_Bool_Exp>;
};


/** columns and relationships of "project_post" */
export type Project_PostPdfs_AggregateArgs = {
  distinct_on?: Maybe<Array<Pdf_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Pdf_Order_By>>;
  where?: Maybe<Pdf_Bool_Exp>;
};


/** columns and relationships of "project_post" */
export type Project_PostProject_Post_WorkersArgs = {
  distinct_on?: Maybe<Array<Project_Post_Workers_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Post_Workers_Order_By>>;
  where?: Maybe<Project_Post_Workers_Bool_Exp>;
};


/** columns and relationships of "project_post" */
export type Project_PostProject_Post_Workers_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Post_Workers_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Post_Workers_Order_By>>;
  where?: Maybe<Project_Post_Workers_Bool_Exp>;
};


/** columns and relationships of "project_post" */
export type Project_PostReport_Project_PostsArgs = {
  distinct_on?: Maybe<Array<Report_Project_Post_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Project_Post_Order_By>>;
  where?: Maybe<Report_Project_Post_Bool_Exp>;
};


/** columns and relationships of "project_post" */
export type Project_PostReport_Project_Posts_AggregateArgs = {
  distinct_on?: Maybe<Array<Report_Project_Post_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Project_Post_Order_By>>;
  where?: Maybe<Report_Project_Post_Bool_Exp>;
};

/** aggregated selection of "project_post" */
export type Project_Post_Aggregate = {
   __typename?: 'project_post_aggregate';
  aggregate?: Maybe<Project_Post_Aggregate_Fields>;
  nodes: Array<Project_Post>;
};

/** aggregate fields of "project_post" */
export type Project_Post_Aggregate_Fields = {
   __typename?: 'project_post_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Project_Post_Max_Fields>;
  min?: Maybe<Project_Post_Min_Fields>;
};


/** aggregate fields of "project_post" */
export type Project_Post_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Project_Post_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "project_post" */
export type Project_Post_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Project_Post_Max_Order_By>;
  min?: Maybe<Project_Post_Min_Order_By>;
};

/** input type for inserting array relation for remote table "project_post" */
export type Project_Post_Arr_Rel_Insert_Input = {
  data: Array<Project_Post_Insert_Input>;
  on_conflict?: Maybe<Project_Post_On_Conflict>;
};

/** Boolean expression to filter rows from the table "project_post". All fields are combined with a logical 'AND'. */
export type Project_Post_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Project_Post_Bool_Exp>>>;
  _not?: Maybe<Project_Post_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Project_Post_Bool_Exp>>>;
  author_id?: Maybe<Uuid_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  description?: Maybe<String_Comparison_Exp>;
  description_id?: Maybe<Uuid_Comparison_Exp>;
  expiry_date?: Maybe<Timestamptz_Comparison_Exp>;
  general_contractor_employee?: Maybe<General_Contractor_Employee_Bool_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  images?: Maybe<Image_Bool_Exp>;
  pdfs?: Maybe<Pdf_Bool_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  project_post_workers?: Maybe<Project_Post_Workers_Bool_Exp>;
  report_project_posts?: Maybe<Report_Project_Post_Bool_Exp>;
  show_in_report?: Maybe<Boolean_Comparison_Exp>;
  text_translation?: Maybe<Text_Translation_Bool_Exp>;
  title?: Maybe<String_Comparison_Exp>;
  type?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "project_post" */
export enum Project_Post_Constraint {
  /** unique or primary key constraint */
  PostsPkey = 'posts_pkey',
  /** unique or primary key constraint */
  ProjectPostsIdKey = 'project_posts_id_key'
}

/** columns and relationships of "project_post_GCs" */
export type Project_Post_GCs = {
   __typename?: 'project_post_GCs';
  created_at: Scalars['timestamptz'];
  general_contractor_id: Scalars['uuid'];
  project_post_id: Scalars['uuid'];
};

/** aggregated selection of "project_post_GCs" */
export type Project_Post_GCs_Aggregate = {
   __typename?: 'project_post_GCs_aggregate';
  aggregate?: Maybe<Project_Post_GCs_Aggregate_Fields>;
  nodes: Array<Project_Post_GCs>;
};

/** aggregate fields of "project_post_GCs" */
export type Project_Post_GCs_Aggregate_Fields = {
   __typename?: 'project_post_GCs_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Project_Post_GCs_Max_Fields>;
  min?: Maybe<Project_Post_GCs_Min_Fields>;
};


/** aggregate fields of "project_post_GCs" */
export type Project_Post_GCs_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Project_Post_GCs_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "project_post_GCs" */
export type Project_Post_GCs_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Project_Post_GCs_Max_Order_By>;
  min?: Maybe<Project_Post_GCs_Min_Order_By>;
};

/** input type for inserting array relation for remote table "project_post_GCs" */
export type Project_Post_GCs_Arr_Rel_Insert_Input = {
  data: Array<Project_Post_GCs_Insert_Input>;
  on_conflict?: Maybe<Project_Post_GCs_On_Conflict>;
};

/** Boolean expression to filter rows from the table "project_post_GCs". All fields are combined with a logical 'AND'. */
export type Project_Post_GCs_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Project_Post_GCs_Bool_Exp>>>;
  _not?: Maybe<Project_Post_GCs_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Project_Post_GCs_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  general_contractor_id?: Maybe<Uuid_Comparison_Exp>;
  project_post_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "project_post_GCs" */
export enum Project_Post_GCs_Constraint {
  /** unique or primary key constraint */
  ProjectPostGCsPkey = 'project_post_GCs_pkey'
}

/** input type for inserting data into table "project_post_GCs" */
export type Project_Post_GCs_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  general_contractor_id?: Maybe<Scalars['uuid']>;
  project_post_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Project_Post_GCs_Max_Fields = {
   __typename?: 'project_post_GCs_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  general_contractor_id?: Maybe<Scalars['uuid']>;
  project_post_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "project_post_GCs" */
export type Project_Post_GCs_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  general_contractor_id?: Maybe<Order_By>;
  project_post_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Project_Post_GCs_Min_Fields = {
   __typename?: 'project_post_GCs_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  general_contractor_id?: Maybe<Scalars['uuid']>;
  project_post_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "project_post_GCs" */
export type Project_Post_GCs_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  general_contractor_id?: Maybe<Order_By>;
  project_post_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "project_post_GCs" */
export type Project_Post_GCs_Mutation_Response = {
   __typename?: 'project_post_GCs_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Project_Post_GCs>;
};

/** input type for inserting object relation for remote table "project_post_GCs" */
export type Project_Post_GCs_Obj_Rel_Insert_Input = {
  data: Project_Post_GCs_Insert_Input;
  on_conflict?: Maybe<Project_Post_GCs_On_Conflict>;
};

/** on conflict condition type for table "project_post_GCs" */
export type Project_Post_GCs_On_Conflict = {
  constraint: Project_Post_GCs_Constraint;
  update_columns: Array<Project_Post_GCs_Update_Column>;
  where?: Maybe<Project_Post_GCs_Bool_Exp>;
};

/** ordering options when selecting data from "project_post_GCs" */
export type Project_Post_GCs_Order_By = {
  created_at?: Maybe<Order_By>;
  general_contractor_id?: Maybe<Order_By>;
  project_post_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "project_post_GCs" */
export type Project_Post_GCs_Pk_Columns_Input = {
  general_contractor_id: Scalars['uuid'];
  project_post_id: Scalars['uuid'];
};

/** select columns of table "project_post_GCs" */
export enum Project_Post_GCs_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  GeneralContractorId = 'general_contractor_id',
  /** column name */
  ProjectPostId = 'project_post_id'
}

/** input type for updating data in table "project_post_GCs" */
export type Project_Post_GCs_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  general_contractor_id?: Maybe<Scalars['uuid']>;
  project_post_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "project_post_GCs" */
export enum Project_Post_GCs_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  GeneralContractorId = 'general_contractor_id',
  /** column name */
  ProjectPostId = 'project_post_id'
}

/** input type for inserting data into table "project_post" */
export type Project_Post_Insert_Input = {
  author_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  description_id?: Maybe<Scalars['uuid']>;
  expiry_date?: Maybe<Scalars['timestamptz']>;
  general_contractor_employee?: Maybe<General_Contractor_Employee_Obj_Rel_Insert_Input>;
  id?: Maybe<Scalars['uuid']>;
  images?: Maybe<Image_Arr_Rel_Insert_Input>;
  pdfs?: Maybe<Pdf_Arr_Rel_Insert_Input>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_id?: Maybe<Scalars['uuid']>;
  project_post_workers?: Maybe<Project_Post_Workers_Arr_Rel_Insert_Input>;
  report_project_posts?: Maybe<Report_Project_Post_Arr_Rel_Insert_Input>;
  show_in_report?: Maybe<Scalars['Boolean']>;
  text_translation?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  title?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Project_Post_Max_Fields = {
   __typename?: 'project_post_max_fields';
  author_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  description_id?: Maybe<Scalars['uuid']>;
  expiry_date?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  title?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "project_post" */
export type Project_Post_Max_Order_By = {
  author_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  description_id?: Maybe<Order_By>;
  expiry_date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  title?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Project_Post_Min_Fields = {
   __typename?: 'project_post_min_fields';
  author_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  description_id?: Maybe<Scalars['uuid']>;
  expiry_date?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  title?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "project_post" */
export type Project_Post_Min_Order_By = {
  author_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  description_id?: Maybe<Order_By>;
  expiry_date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  title?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
};

/** response of any mutation on the table "project_post" */
export type Project_Post_Mutation_Response = {
   __typename?: 'project_post_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Project_Post>;
};

/** input type for inserting object relation for remote table "project_post" */
export type Project_Post_Obj_Rel_Insert_Input = {
  data: Project_Post_Insert_Input;
  on_conflict?: Maybe<Project_Post_On_Conflict>;
};

/** on conflict condition type for table "project_post" */
export type Project_Post_On_Conflict = {
  constraint: Project_Post_Constraint;
  update_columns: Array<Project_Post_Update_Column>;
  where?: Maybe<Project_Post_Bool_Exp>;
};

/** ordering options when selecting data from "project_post" */
export type Project_Post_Order_By = {
  author_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  description_id?: Maybe<Order_By>;
  expiry_date?: Maybe<Order_By>;
  general_contractor_employee?: Maybe<General_Contractor_Employee_Order_By>;
  id?: Maybe<Order_By>;
  images_aggregate?: Maybe<Image_Aggregate_Order_By>;
  pdfs_aggregate?: Maybe<Pdf_Aggregate_Order_By>;
  project?: Maybe<Project_Order_By>;
  project_id?: Maybe<Order_By>;
  project_post_workers_aggregate?: Maybe<Project_Post_Workers_Aggregate_Order_By>;
  report_project_posts_aggregate?: Maybe<Report_Project_Post_Aggregate_Order_By>;
  show_in_report?: Maybe<Order_By>;
  text_translation?: Maybe<Text_Translation_Order_By>;
  title?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
};

/** primary key columns input for table: "project_post" */
export type Project_Post_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "project_post" */
export enum Project_Post_Select_Column {
  /** column name */
  AuthorId = 'author_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Description = 'description',
  /** column name */
  DescriptionId = 'description_id',
  /** column name */
  ExpiryDate = 'expiry_date',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  ShowInReport = 'show_in_report',
  /** column name */
  Title = 'title',
  /** column name */
  Type = 'type'
}

/** input type for updating data in table "project_post" */
export type Project_Post_Set_Input = {
  author_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  description_id?: Maybe<Scalars['uuid']>;
  expiry_date?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  show_in_report?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

/** update columns of table "project_post" */
export enum Project_Post_Update_Column {
  /** column name */
  AuthorId = 'author_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Description = 'description',
  /** column name */
  DescriptionId = 'description_id',
  /** column name */
  ExpiryDate = 'expiry_date',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  ShowInReport = 'show_in_report',
  /** column name */
  Title = 'title',
  /** column name */
  Type = 'type'
}

/** columns and relationships of "project_post_workers" */
export type Project_Post_Workers = {
   __typename?: 'project_post_workers';
  created_at: Scalars['timestamptz'];
  project_post_id: Scalars['uuid'];
  worker_id: Scalars['uuid'];
};

/** aggregated selection of "project_post_workers" */
export type Project_Post_Workers_Aggregate = {
   __typename?: 'project_post_workers_aggregate';
  aggregate?: Maybe<Project_Post_Workers_Aggregate_Fields>;
  nodes: Array<Project_Post_Workers>;
};

/** aggregate fields of "project_post_workers" */
export type Project_Post_Workers_Aggregate_Fields = {
   __typename?: 'project_post_workers_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Project_Post_Workers_Max_Fields>;
  min?: Maybe<Project_Post_Workers_Min_Fields>;
};


/** aggregate fields of "project_post_workers" */
export type Project_Post_Workers_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Project_Post_Workers_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "project_post_workers" */
export type Project_Post_Workers_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Project_Post_Workers_Max_Order_By>;
  min?: Maybe<Project_Post_Workers_Min_Order_By>;
};

/** input type for inserting array relation for remote table "project_post_workers" */
export type Project_Post_Workers_Arr_Rel_Insert_Input = {
  data: Array<Project_Post_Workers_Insert_Input>;
  on_conflict?: Maybe<Project_Post_Workers_On_Conflict>;
};

/** Boolean expression to filter rows from the table "project_post_workers". All fields are combined with a logical 'AND'. */
export type Project_Post_Workers_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Project_Post_Workers_Bool_Exp>>>;
  _not?: Maybe<Project_Post_Workers_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Project_Post_Workers_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  project_post_id?: Maybe<Uuid_Comparison_Exp>;
  worker_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "project_post_workers" */
export enum Project_Post_Workers_Constraint {
  /** unique or primary key constraint */
  ProjectPostWorkersPkey = 'project_post_workers_pkey'
}

/** input type for inserting data into table "project_post_workers" */
export type Project_Post_Workers_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  project_post_id?: Maybe<Scalars['uuid']>;
  worker_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Project_Post_Workers_Max_Fields = {
   __typename?: 'project_post_workers_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  project_post_id?: Maybe<Scalars['uuid']>;
  worker_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "project_post_workers" */
export type Project_Post_Workers_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  project_post_id?: Maybe<Order_By>;
  worker_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Project_Post_Workers_Min_Fields = {
   __typename?: 'project_post_workers_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  project_post_id?: Maybe<Scalars['uuid']>;
  worker_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "project_post_workers" */
export type Project_Post_Workers_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  project_post_id?: Maybe<Order_By>;
  worker_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "project_post_workers" */
export type Project_Post_Workers_Mutation_Response = {
   __typename?: 'project_post_workers_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Project_Post_Workers>;
};

/** input type for inserting object relation for remote table "project_post_workers" */
export type Project_Post_Workers_Obj_Rel_Insert_Input = {
  data: Project_Post_Workers_Insert_Input;
  on_conflict?: Maybe<Project_Post_Workers_On_Conflict>;
};

/** on conflict condition type for table "project_post_workers" */
export type Project_Post_Workers_On_Conflict = {
  constraint: Project_Post_Workers_Constraint;
  update_columns: Array<Project_Post_Workers_Update_Column>;
  where?: Maybe<Project_Post_Workers_Bool_Exp>;
};

/** ordering options when selecting data from "project_post_workers" */
export type Project_Post_Workers_Order_By = {
  created_at?: Maybe<Order_By>;
  project_post_id?: Maybe<Order_By>;
  worker_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "project_post_workers" */
export type Project_Post_Workers_Pk_Columns_Input = {
  project_post_id: Scalars['uuid'];
  worker_id: Scalars['uuid'];
};

/** select columns of table "project_post_workers" */
export enum Project_Post_Workers_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  ProjectPostId = 'project_post_id',
  /** column name */
  WorkerId = 'worker_id'
}

/** input type for updating data in table "project_post_workers" */
export type Project_Post_Workers_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  project_post_id?: Maybe<Scalars['uuid']>;
  worker_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "project_post_workers" */
export enum Project_Post_Workers_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  ProjectPostId = 'project_post_id',
  /** column name */
  WorkerId = 'worker_id'
}

/** columns and relationships of "project_report_settings" */
export type Project_Report_Settings = {
   __typename?: 'project_report_settings';
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_report_frequency: Scalars['String'];
  gc_daily_reports: Scalars['Boolean'];
  gc_weekly_reports: Scalars['Boolean'];
  id: Scalars['uuid'];
  project_id: Scalars['uuid'];
  safety_report_frequency: Scalars['String'];
  toolbox_talk_frequency: Scalars['String'];
};

/** aggregated selection of "project_report_settings" */
export type Project_Report_Settings_Aggregate = {
   __typename?: 'project_report_settings_aggregate';
  aggregate?: Maybe<Project_Report_Settings_Aggregate_Fields>;
  nodes: Array<Project_Report_Settings>;
};

/** aggregate fields of "project_report_settings" */
export type Project_Report_Settings_Aggregate_Fields = {
   __typename?: 'project_report_settings_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Project_Report_Settings_Max_Fields>;
  min?: Maybe<Project_Report_Settings_Min_Fields>;
};


/** aggregate fields of "project_report_settings" */
export type Project_Report_Settings_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Project_Report_Settings_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "project_report_settings" */
export type Project_Report_Settings_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Project_Report_Settings_Max_Order_By>;
  min?: Maybe<Project_Report_Settings_Min_Order_By>;
};

/** input type for inserting array relation for remote table "project_report_settings" */
export type Project_Report_Settings_Arr_Rel_Insert_Input = {
  data: Array<Project_Report_Settings_Insert_Input>;
  on_conflict?: Maybe<Project_Report_Settings_On_Conflict>;
};

/** Boolean expression to filter rows from the table "project_report_settings". All fields are combined with a logical 'AND'. */
export type Project_Report_Settings_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Project_Report_Settings_Bool_Exp>>>;
  _not?: Maybe<Project_Report_Settings_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Project_Report_Settings_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  daily_report_frequency?: Maybe<String_Comparison_Exp>;
  gc_daily_reports?: Maybe<Boolean_Comparison_Exp>;
  gc_weekly_reports?: Maybe<Boolean_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  safety_report_frequency?: Maybe<String_Comparison_Exp>;
  toolbox_talk_frequency?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "project_report_settings" */
export enum Project_Report_Settings_Constraint {
  /** unique or primary key constraint */
  ProjectReportSettingsIdKey = 'project_report_settings_id_key',
  /** unique or primary key constraint */
  ProjectReportSettingsPkey = 'project_report_settings_pkey'
}

/** input type for inserting data into table "project_report_settings" */
export type Project_Report_Settings_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_report_frequency?: Maybe<Scalars['String']>;
  gc_daily_reports?: Maybe<Scalars['Boolean']>;
  gc_weekly_reports?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  safety_report_frequency?: Maybe<Scalars['String']>;
  toolbox_talk_frequency?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Project_Report_Settings_Max_Fields = {
   __typename?: 'project_report_settings_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_report_frequency?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  safety_report_frequency?: Maybe<Scalars['String']>;
  toolbox_talk_frequency?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "project_report_settings" */
export type Project_Report_Settings_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  daily_report_frequency?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  safety_report_frequency?: Maybe<Order_By>;
  toolbox_talk_frequency?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Project_Report_Settings_Min_Fields = {
   __typename?: 'project_report_settings_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_report_frequency?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  safety_report_frequency?: Maybe<Scalars['String']>;
  toolbox_talk_frequency?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "project_report_settings" */
export type Project_Report_Settings_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  daily_report_frequency?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  safety_report_frequency?: Maybe<Order_By>;
  toolbox_talk_frequency?: Maybe<Order_By>;
};

/** response of any mutation on the table "project_report_settings" */
export type Project_Report_Settings_Mutation_Response = {
   __typename?: 'project_report_settings_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Project_Report_Settings>;
};

/** input type for inserting object relation for remote table "project_report_settings" */
export type Project_Report_Settings_Obj_Rel_Insert_Input = {
  data: Project_Report_Settings_Insert_Input;
  on_conflict?: Maybe<Project_Report_Settings_On_Conflict>;
};

/** on conflict condition type for table "project_report_settings" */
export type Project_Report_Settings_On_Conflict = {
  constraint: Project_Report_Settings_Constraint;
  update_columns: Array<Project_Report_Settings_Update_Column>;
  where?: Maybe<Project_Report_Settings_Bool_Exp>;
};

/** ordering options when selecting data from "project_report_settings" */
export type Project_Report_Settings_Order_By = {
  created_at?: Maybe<Order_By>;
  daily_report_frequency?: Maybe<Order_By>;
  gc_daily_reports?: Maybe<Order_By>;
  gc_weekly_reports?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  safety_report_frequency?: Maybe<Order_By>;
  toolbox_talk_frequency?: Maybe<Order_By>;
};

/** primary key columns input for table: "project_report_settings" */
export type Project_Report_Settings_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "project_report_settings" */
export enum Project_Report_Settings_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DailyReportFrequency = 'daily_report_frequency',
  /** column name */
  GcDailyReports = 'gc_daily_reports',
  /** column name */
  GcWeeklyReports = 'gc_weekly_reports',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  SafetyReportFrequency = 'safety_report_frequency',
  /** column name */
  ToolboxTalkFrequency = 'toolbox_talk_frequency'
}

/** input type for updating data in table "project_report_settings" */
export type Project_Report_Settings_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_report_frequency?: Maybe<Scalars['String']>;
  gc_daily_reports?: Maybe<Scalars['Boolean']>;
  gc_weekly_reports?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  safety_report_frequency?: Maybe<Scalars['String']>;
  toolbox_talk_frequency?: Maybe<Scalars['String']>;
};

/** update columns of table "project_report_settings" */
export enum Project_Report_Settings_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DailyReportFrequency = 'daily_report_frequency',
  /** column name */
  GcDailyReports = 'gc_daily_reports',
  /** column name */
  GcWeeklyReports = 'gc_weekly_reports',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  SafetyReportFrequency = 'safety_report_frequency',
  /** column name */
  ToolboxTalkFrequency = 'toolbox_talk_frequency'
}

/** select columns of table "project" */
export enum Project_Select_Column {
  /** column name */
  AddressId = 'address_id',
  /** column name */
  Completed = 'completed',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DashboardUpdatedAt = 'dashboard_updated_at',
  /** column name */
  ExternalId = 'external_id',
  /** column name */
  GeneralContractorId = 'general_contractor_id',
  /** column name */
  Id = 'id',
  /** column name */
  IsDashboardActive = 'is_dashboard_active',
  /** column name */
  IsSitedeliveryActive = 'is_sitedelivery_active',
  /** column name */
  IsSitedeliveryOn = 'is_sitedelivery_on',
  /** column name */
  Name = 'name',
  /** column name */
  PemitContactProjectEmployeeId = 'pemit_contact_project_employee_id',
  /** column name */
  QrCodeUrl = 'qr_code_url',
  /** column name */
  SafetyReportAwarenessDisabled = 'safety_report_awareness_disabled',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** input type for updating data in table "project" */
export type Project_Set_Input = {
  address_id?: Maybe<Scalars['uuid']>;
  completed?: Maybe<Scalars['Boolean']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  dashboard_updated_at?: Maybe<Scalars['timestamptz']>;
  external_id?: Maybe<Scalars['String']>;
  general_contractor_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  is_dashboard_active?: Maybe<Scalars['Boolean']>;
  is_sitedelivery_active?: Maybe<Scalars['Boolean']>;
  is_sitedelivery_on?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  pemit_contact_project_employee_id?: Maybe<Scalars['uuid']>;
  qr_code_url?: Maybe<Scalars['String']>;
  safety_report_awareness_disabled?: Maybe<Scalars['Boolean']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** columns and relationships of "project_site_notification" */
export type Project_Site_Notification = {
   __typename?: 'project_site_notification';
  created_at: Scalars['timestamptz'];
  id: Scalars['uuid'];
  /** An object relationship */
  message: Text_Translation;
  message_id: Scalars['uuid'];
  message_text: Scalars['String'];
  /** An object relationship */
  project: Project;
  project_id: Scalars['uuid'];
};

/** aggregated selection of "project_site_notification" */
export type Project_Site_Notification_Aggregate = {
   __typename?: 'project_site_notification_aggregate';
  aggregate?: Maybe<Project_Site_Notification_Aggregate_Fields>;
  nodes: Array<Project_Site_Notification>;
};

/** aggregate fields of "project_site_notification" */
export type Project_Site_Notification_Aggregate_Fields = {
   __typename?: 'project_site_notification_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Project_Site_Notification_Max_Fields>;
  min?: Maybe<Project_Site_Notification_Min_Fields>;
};


/** aggregate fields of "project_site_notification" */
export type Project_Site_Notification_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Project_Site_Notification_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "project_site_notification" */
export type Project_Site_Notification_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Project_Site_Notification_Max_Order_By>;
  min?: Maybe<Project_Site_Notification_Min_Order_By>;
};

/** input type for inserting array relation for remote table "project_site_notification" */
export type Project_Site_Notification_Arr_Rel_Insert_Input = {
  data: Array<Project_Site_Notification_Insert_Input>;
  on_conflict?: Maybe<Project_Site_Notification_On_Conflict>;
};

/** Boolean expression to filter rows from the table "project_site_notification". All fields are combined with a logical 'AND'. */
export type Project_Site_Notification_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Project_Site_Notification_Bool_Exp>>>;
  _not?: Maybe<Project_Site_Notification_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Project_Site_Notification_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  message?: Maybe<Text_Translation_Bool_Exp>;
  message_id?: Maybe<Uuid_Comparison_Exp>;
  message_text?: Maybe<String_Comparison_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "project_site_notification" */
export enum Project_Site_Notification_Constraint {
  /** unique or primary key constraint */
  ProjectSiteNotificationPkey = 'project_site_notification_pkey'
}

/** input type for inserting data into table "project_site_notification" */
export type Project_Site_Notification_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  message?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  message_id?: Maybe<Scalars['uuid']>;
  message_text?: Maybe<Scalars['String']>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Project_Site_Notification_Max_Fields = {
   __typename?: 'project_site_notification_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  message_id?: Maybe<Scalars['uuid']>;
  message_text?: Maybe<Scalars['String']>;
  project_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "project_site_notification" */
export type Project_Site_Notification_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  message_id?: Maybe<Order_By>;
  message_text?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Project_Site_Notification_Min_Fields = {
   __typename?: 'project_site_notification_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  message_id?: Maybe<Scalars['uuid']>;
  message_text?: Maybe<Scalars['String']>;
  project_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "project_site_notification" */
export type Project_Site_Notification_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  message_id?: Maybe<Order_By>;
  message_text?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "project_site_notification" */
export type Project_Site_Notification_Mutation_Response = {
   __typename?: 'project_site_notification_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Project_Site_Notification>;
};

/** input type for inserting object relation for remote table "project_site_notification" */
export type Project_Site_Notification_Obj_Rel_Insert_Input = {
  data: Project_Site_Notification_Insert_Input;
  on_conflict?: Maybe<Project_Site_Notification_On_Conflict>;
};

/** on conflict condition type for table "project_site_notification" */
export type Project_Site_Notification_On_Conflict = {
  constraint: Project_Site_Notification_Constraint;
  update_columns: Array<Project_Site_Notification_Update_Column>;
  where?: Maybe<Project_Site_Notification_Bool_Exp>;
};

/** ordering options when selecting data from "project_site_notification" */
export type Project_Site_Notification_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  message?: Maybe<Text_Translation_Order_By>;
  message_id?: Maybe<Order_By>;
  message_text?: Maybe<Order_By>;
  project?: Maybe<Project_Order_By>;
  project_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "project_site_notification" */
export type Project_Site_Notification_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "project_site_notification" */
export enum Project_Site_Notification_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  MessageId = 'message_id',
  /** column name */
  MessageText = 'message_text',
  /** column name */
  ProjectId = 'project_id'
}

/** input type for updating data in table "project_site_notification" */
export type Project_Site_Notification_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  message_id?: Maybe<Scalars['uuid']>;
  message_text?: Maybe<Scalars['String']>;
  project_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "project_site_notification" */
export enum Project_Site_Notification_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  MessageId = 'message_id',
  /** column name */
  MessageText = 'message_text',
  /** column name */
  ProjectId = 'project_id'
}

/** columns and relationships of "project_subcontractor" */
export type Project_Subcontractor = {
   __typename?: 'project_subcontractor';
  created_at: Scalars['timestamptz'];
  /** An array relationship */
  daily_reports: Array<Daily_Report>;
  /** An aggregated array relationship */
  daily_reports_aggregate: Daily_Report_Aggregate;
  /** An object relationship */
  gc_disabled_project_subcontractor?: Maybe<Gc_Disabled_Project_Subcontractor>;
  id: Scalars['uuid'];
  /** An object relationship */
  procore_subcontractor?: Maybe<Procore_Subcontractor>;
  /** An object relationship */
  project: Project;
  /** An array relationship */
  project_crews: Array<Project_Crew>;
  /** An aggregated array relationship */
  project_crews_aggregate: Project_Crew_Aggregate;
  project_id: Scalars['uuid'];
  /** An object relationship */
  project_subcontractor_report_settings?: Maybe<Project_Subcontractor_Report_Settings>;
  /** An array relationship */
  project_workers: Array<Project_Worker>;
  /** An aggregated array relationship */
  project_workers_aggregate: Project_Worker_Aggregate;
  /** An array relationship */
  reports: Array<Report>;
  /** An aggregated array relationship */
  reports_aggregate: Report_Aggregate;
  /** An object relationship */
  subcontractor: Subcontractor;
  subcontractor_id: Scalars['uuid'];
  /** An array relationship */
  tasks: Array<Task>;
  /** An aggregated array relationship */
  tasks_aggregate: Task_Aggregate;
};


/** columns and relationships of "project_subcontractor" */
export type Project_SubcontractorDaily_ReportsArgs = {
  distinct_on?: Maybe<Array<Daily_Report_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Report_Order_By>>;
  where?: Maybe<Daily_Report_Bool_Exp>;
};


/** columns and relationships of "project_subcontractor" */
export type Project_SubcontractorDaily_Reports_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Report_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Report_Order_By>>;
  where?: Maybe<Daily_Report_Bool_Exp>;
};


/** columns and relationships of "project_subcontractor" */
export type Project_SubcontractorProject_CrewsArgs = {
  distinct_on?: Maybe<Array<Project_Crew_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Crew_Order_By>>;
  where?: Maybe<Project_Crew_Bool_Exp>;
};


/** columns and relationships of "project_subcontractor" */
export type Project_SubcontractorProject_Crews_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Crew_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Crew_Order_By>>;
  where?: Maybe<Project_Crew_Bool_Exp>;
};


/** columns and relationships of "project_subcontractor" */
export type Project_SubcontractorProject_WorkersArgs = {
  distinct_on?: Maybe<Array<Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Worker_Order_By>>;
  where?: Maybe<Project_Worker_Bool_Exp>;
};


/** columns and relationships of "project_subcontractor" */
export type Project_SubcontractorProject_Workers_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Worker_Order_By>>;
  where?: Maybe<Project_Worker_Bool_Exp>;
};


/** columns and relationships of "project_subcontractor" */
export type Project_SubcontractorReportsArgs = {
  distinct_on?: Maybe<Array<Report_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Order_By>>;
  where?: Maybe<Report_Bool_Exp>;
};


/** columns and relationships of "project_subcontractor" */
export type Project_SubcontractorReports_AggregateArgs = {
  distinct_on?: Maybe<Array<Report_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Order_By>>;
  where?: Maybe<Report_Bool_Exp>;
};


/** columns and relationships of "project_subcontractor" */
export type Project_SubcontractorTasksArgs = {
  distinct_on?: Maybe<Array<Task_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Order_By>>;
  where?: Maybe<Task_Bool_Exp>;
};


/** columns and relationships of "project_subcontractor" */
export type Project_SubcontractorTasks_AggregateArgs = {
  distinct_on?: Maybe<Array<Task_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Order_By>>;
  where?: Maybe<Task_Bool_Exp>;
};

/** aggregated selection of "project_subcontractor" */
export type Project_Subcontractor_Aggregate = {
   __typename?: 'project_subcontractor_aggregate';
  aggregate?: Maybe<Project_Subcontractor_Aggregate_Fields>;
  nodes: Array<Project_Subcontractor>;
};

/** aggregate fields of "project_subcontractor" */
export type Project_Subcontractor_Aggregate_Fields = {
   __typename?: 'project_subcontractor_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Project_Subcontractor_Max_Fields>;
  min?: Maybe<Project_Subcontractor_Min_Fields>;
};


/** aggregate fields of "project_subcontractor" */
export type Project_Subcontractor_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Project_Subcontractor_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "project_subcontractor" */
export type Project_Subcontractor_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Project_Subcontractor_Max_Order_By>;
  min?: Maybe<Project_Subcontractor_Min_Order_By>;
};

/** input type for inserting array relation for remote table "project_subcontractor" */
export type Project_Subcontractor_Arr_Rel_Insert_Input = {
  data: Array<Project_Subcontractor_Insert_Input>;
  on_conflict?: Maybe<Project_Subcontractor_On_Conflict>;
};

/** Boolean expression to filter rows from the table "project_subcontractor". All fields are combined with a logical 'AND'. */
export type Project_Subcontractor_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Project_Subcontractor_Bool_Exp>>>;
  _not?: Maybe<Project_Subcontractor_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Project_Subcontractor_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  daily_reports?: Maybe<Daily_Report_Bool_Exp>;
  gc_disabled_project_subcontractor?: Maybe<Gc_Disabled_Project_Subcontractor_Bool_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  procore_subcontractor?: Maybe<Procore_Subcontractor_Bool_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_crews?: Maybe<Project_Crew_Bool_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  project_subcontractor_report_settings?: Maybe<Project_Subcontractor_Report_Settings_Bool_Exp>;
  project_workers?: Maybe<Project_Worker_Bool_Exp>;
  reports?: Maybe<Report_Bool_Exp>;
  subcontractor?: Maybe<Subcontractor_Bool_Exp>;
  subcontractor_id?: Maybe<Uuid_Comparison_Exp>;
  tasks?: Maybe<Task_Bool_Exp>;
};

/** unique or primary key constraints on table "project_subcontractor" */
export enum Project_Subcontractor_Constraint {
  /** unique or primary key constraint */
  ProjectSubcontractorPkey = 'project_subcontractor_pkey',
  /** unique or primary key constraint */
  ProjectSubcontractorSubcontractorIdProjectIdKey = 'project_subcontractor_subcontractor_id_project_id_key'
}

/** input type for inserting data into table "project_subcontractor" */
export type Project_Subcontractor_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_reports?: Maybe<Daily_Report_Arr_Rel_Insert_Input>;
  gc_disabled_project_subcontractor?: Maybe<Gc_Disabled_Project_Subcontractor_Obj_Rel_Insert_Input>;
  id?: Maybe<Scalars['uuid']>;
  procore_subcontractor?: Maybe<Procore_Subcontractor_Obj_Rel_Insert_Input>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_crews?: Maybe<Project_Crew_Arr_Rel_Insert_Input>;
  project_id?: Maybe<Scalars['uuid']>;
  project_subcontractor_report_settings?: Maybe<Project_Subcontractor_Report_Settings_Obj_Rel_Insert_Input>;
  project_workers?: Maybe<Project_Worker_Arr_Rel_Insert_Input>;
  reports?: Maybe<Report_Arr_Rel_Insert_Input>;
  subcontractor?: Maybe<Subcontractor_Obj_Rel_Insert_Input>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  tasks?: Maybe<Task_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Project_Subcontractor_Max_Fields = {
   __typename?: 'project_subcontractor_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "project_subcontractor" */
export type Project_Subcontractor_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Project_Subcontractor_Min_Fields = {
   __typename?: 'project_subcontractor_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "project_subcontractor" */
export type Project_Subcontractor_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "project_subcontractor" */
export type Project_Subcontractor_Mutation_Response = {
   __typename?: 'project_subcontractor_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Project_Subcontractor>;
};

/** input type for inserting object relation for remote table "project_subcontractor" */
export type Project_Subcontractor_Obj_Rel_Insert_Input = {
  data: Project_Subcontractor_Insert_Input;
  on_conflict?: Maybe<Project_Subcontractor_On_Conflict>;
};

/** on conflict condition type for table "project_subcontractor" */
export type Project_Subcontractor_On_Conflict = {
  constraint: Project_Subcontractor_Constraint;
  update_columns: Array<Project_Subcontractor_Update_Column>;
  where?: Maybe<Project_Subcontractor_Bool_Exp>;
};

/** columns and relationships of "project_subcontractor_onsite_update" */
export type Project_Subcontractor_Onsite_Update = {
   __typename?: 'project_subcontractor_onsite_update';
  created_at: Scalars['timestamptz'];
  id: Scalars['uuid'];
  /** An object relationship */
  project: Project;
  project_id: Scalars['uuid'];
  /** An object relationship */
  subcontractor: Subcontractor;
  subcontractor_id: Scalars['uuid'];
  timestamp: Scalars['timestamptz'];
  type: Scalars['String'];
};

/** aggregated selection of "project_subcontractor_onsite_update" */
export type Project_Subcontractor_Onsite_Update_Aggregate = {
   __typename?: 'project_subcontractor_onsite_update_aggregate';
  aggregate?: Maybe<Project_Subcontractor_Onsite_Update_Aggregate_Fields>;
  nodes: Array<Project_Subcontractor_Onsite_Update>;
};

/** aggregate fields of "project_subcontractor_onsite_update" */
export type Project_Subcontractor_Onsite_Update_Aggregate_Fields = {
   __typename?: 'project_subcontractor_onsite_update_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Project_Subcontractor_Onsite_Update_Max_Fields>;
  min?: Maybe<Project_Subcontractor_Onsite_Update_Min_Fields>;
};


/** aggregate fields of "project_subcontractor_onsite_update" */
export type Project_Subcontractor_Onsite_Update_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Project_Subcontractor_Onsite_Update_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "project_subcontractor_onsite_update" */
export type Project_Subcontractor_Onsite_Update_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Project_Subcontractor_Onsite_Update_Max_Order_By>;
  min?: Maybe<Project_Subcontractor_Onsite_Update_Min_Order_By>;
};

/** input type for inserting array relation for remote table "project_subcontractor_onsite_update" */
export type Project_Subcontractor_Onsite_Update_Arr_Rel_Insert_Input = {
  data: Array<Project_Subcontractor_Onsite_Update_Insert_Input>;
  on_conflict?: Maybe<Project_Subcontractor_Onsite_Update_On_Conflict>;
};

/**
 * Boolean expression to filter rows from the table
 * "project_subcontractor_onsite_update". All fields are combined with a logical 'AND'.
 */
export type Project_Subcontractor_Onsite_Update_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Project_Subcontractor_Onsite_Update_Bool_Exp>>>;
  _not?: Maybe<Project_Subcontractor_Onsite_Update_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Project_Subcontractor_Onsite_Update_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  subcontractor?: Maybe<Subcontractor_Bool_Exp>;
  subcontractor_id?: Maybe<Uuid_Comparison_Exp>;
  timestamp?: Maybe<Timestamptz_Comparison_Exp>;
  type?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "project_subcontractor_onsite_update" */
export enum Project_Subcontractor_Onsite_Update_Constraint {
  /** unique or primary key constraint */
  ProjectOnsitePingsPkey = 'project_onsite_pings_pkey'
}

/** input type for inserting data into table "project_subcontractor_onsite_update" */
export type Project_Subcontractor_Onsite_Update_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor?: Maybe<Subcontractor_Obj_Rel_Insert_Input>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  timestamp?: Maybe<Scalars['timestamptz']>;
  type?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Project_Subcontractor_Onsite_Update_Max_Fields = {
   __typename?: 'project_subcontractor_onsite_update_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  timestamp?: Maybe<Scalars['timestamptz']>;
  type?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "project_subcontractor_onsite_update" */
export type Project_Subcontractor_Onsite_Update_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  timestamp?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Project_Subcontractor_Onsite_Update_Min_Fields = {
   __typename?: 'project_subcontractor_onsite_update_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  timestamp?: Maybe<Scalars['timestamptz']>;
  type?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "project_subcontractor_onsite_update" */
export type Project_Subcontractor_Onsite_Update_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  timestamp?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
};

/** response of any mutation on the table "project_subcontractor_onsite_update" */
export type Project_Subcontractor_Onsite_Update_Mutation_Response = {
   __typename?: 'project_subcontractor_onsite_update_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Project_Subcontractor_Onsite_Update>;
};

/** input type for inserting object relation for remote table "project_subcontractor_onsite_update" */
export type Project_Subcontractor_Onsite_Update_Obj_Rel_Insert_Input = {
  data: Project_Subcontractor_Onsite_Update_Insert_Input;
  on_conflict?: Maybe<Project_Subcontractor_Onsite_Update_On_Conflict>;
};

/** on conflict condition type for table "project_subcontractor_onsite_update" */
export type Project_Subcontractor_Onsite_Update_On_Conflict = {
  constraint: Project_Subcontractor_Onsite_Update_Constraint;
  update_columns: Array<Project_Subcontractor_Onsite_Update_Update_Column>;
  where?: Maybe<Project_Subcontractor_Onsite_Update_Bool_Exp>;
};

/** ordering options when selecting data from "project_subcontractor_onsite_update" */
export type Project_Subcontractor_Onsite_Update_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project?: Maybe<Project_Order_By>;
  project_id?: Maybe<Order_By>;
  subcontractor?: Maybe<Subcontractor_Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  timestamp?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
};

/** primary key columns input for table: "project_subcontractor_onsite_update" */
export type Project_Subcontractor_Onsite_Update_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "project_subcontractor_onsite_update" */
export enum Project_Subcontractor_Onsite_Update_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  Timestamp = 'timestamp',
  /** column name */
  Type = 'type'
}

/** input type for updating data in table "project_subcontractor_onsite_update" */
export type Project_Subcontractor_Onsite_Update_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  timestamp?: Maybe<Scalars['timestamptz']>;
  type?: Maybe<Scalars['String']>;
};

/** update columns of table "project_subcontractor_onsite_update" */
export enum Project_Subcontractor_Onsite_Update_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  Timestamp = 'timestamp',
  /** column name */
  Type = 'type'
}

/** ordering options when selecting data from "project_subcontractor" */
export type Project_Subcontractor_Order_By = {
  created_at?: Maybe<Order_By>;
  daily_reports_aggregate?: Maybe<Daily_Report_Aggregate_Order_By>;
  gc_disabled_project_subcontractor?: Maybe<Gc_Disabled_Project_Subcontractor_Order_By>;
  id?: Maybe<Order_By>;
  procore_subcontractor?: Maybe<Procore_Subcontractor_Order_By>;
  project?: Maybe<Project_Order_By>;
  project_crews_aggregate?: Maybe<Project_Crew_Aggregate_Order_By>;
  project_id?: Maybe<Order_By>;
  project_subcontractor_report_settings?: Maybe<Project_Subcontractor_Report_Settings_Order_By>;
  project_workers_aggregate?: Maybe<Project_Worker_Aggregate_Order_By>;
  reports_aggregate?: Maybe<Report_Aggregate_Order_By>;
  subcontractor?: Maybe<Subcontractor_Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  tasks_aggregate?: Maybe<Task_Aggregate_Order_By>;
};

/** primary key columns input for table: "project_subcontractor" */
export type Project_Subcontractor_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** columns and relationships of "project_subcontractor_report_settings" */
export type Project_Subcontractor_Report_Settings = {
   __typename?: 'project_subcontractor_report_settings';
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_reports_required: Scalars['Boolean'];
  id: Scalars['uuid'];
  /** An object relationship */
  project: Project;
  project_id: Scalars['uuid'];
  safety_reports_required: Scalars['Boolean'];
  /** An object relationship */
  subcontractor: Subcontractor;
  subcontractor_id: Scalars['uuid'];
  toolbox_talks_required: Scalars['Boolean'];
};

/** aggregated selection of "project_subcontractor_report_settings" */
export type Project_Subcontractor_Report_Settings_Aggregate = {
   __typename?: 'project_subcontractor_report_settings_aggregate';
  aggregate?: Maybe<Project_Subcontractor_Report_Settings_Aggregate_Fields>;
  nodes: Array<Project_Subcontractor_Report_Settings>;
};

/** aggregate fields of "project_subcontractor_report_settings" */
export type Project_Subcontractor_Report_Settings_Aggregate_Fields = {
   __typename?: 'project_subcontractor_report_settings_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Project_Subcontractor_Report_Settings_Max_Fields>;
  min?: Maybe<Project_Subcontractor_Report_Settings_Min_Fields>;
};


/** aggregate fields of "project_subcontractor_report_settings" */
export type Project_Subcontractor_Report_Settings_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Project_Subcontractor_Report_Settings_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "project_subcontractor_report_settings" */
export type Project_Subcontractor_Report_Settings_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Project_Subcontractor_Report_Settings_Max_Order_By>;
  min?: Maybe<Project_Subcontractor_Report_Settings_Min_Order_By>;
};

/** input type for inserting array relation for remote table "project_subcontractor_report_settings" */
export type Project_Subcontractor_Report_Settings_Arr_Rel_Insert_Input = {
  data: Array<Project_Subcontractor_Report_Settings_Insert_Input>;
  on_conflict?: Maybe<Project_Subcontractor_Report_Settings_On_Conflict>;
};

/**
 * Boolean expression to filter rows from the table
 * "project_subcontractor_report_settings". All fields are combined with a logical 'AND'.
 */
export type Project_Subcontractor_Report_Settings_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Project_Subcontractor_Report_Settings_Bool_Exp>>>;
  _not?: Maybe<Project_Subcontractor_Report_Settings_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Project_Subcontractor_Report_Settings_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  daily_reports_required?: Maybe<Boolean_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  safety_reports_required?: Maybe<Boolean_Comparison_Exp>;
  subcontractor?: Maybe<Subcontractor_Bool_Exp>;
  subcontractor_id?: Maybe<Uuid_Comparison_Exp>;
  toolbox_talks_required?: Maybe<Boolean_Comparison_Exp>;
};

/** unique or primary key constraints on table "project_subcontractor_report_settings" */
export enum Project_Subcontractor_Report_Settings_Constraint {
  /** unique or primary key constraint */
  ProjectSubcontractorReportSettingsIdKey = 'project_subcontractor_report_settings_id_key',
  /** unique or primary key constraint */
  ProjectSubcontractorReportSettingsPkey = 'project_subcontractor_report_settings_pkey'
}

/** input type for inserting data into table "project_subcontractor_report_settings" */
export type Project_Subcontractor_Report_Settings_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_reports_required?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['uuid']>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_id?: Maybe<Scalars['uuid']>;
  safety_reports_required?: Maybe<Scalars['Boolean']>;
  subcontractor?: Maybe<Subcontractor_Obj_Rel_Insert_Input>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  toolbox_talks_required?: Maybe<Scalars['Boolean']>;
};

/** aggregate max on columns */
export type Project_Subcontractor_Report_Settings_Max_Fields = {
   __typename?: 'project_subcontractor_report_settings_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "project_subcontractor_report_settings" */
export type Project_Subcontractor_Report_Settings_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Project_Subcontractor_Report_Settings_Min_Fields = {
   __typename?: 'project_subcontractor_report_settings_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "project_subcontractor_report_settings" */
export type Project_Subcontractor_Report_Settings_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "project_subcontractor_report_settings" */
export type Project_Subcontractor_Report_Settings_Mutation_Response = {
   __typename?: 'project_subcontractor_report_settings_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Project_Subcontractor_Report_Settings>;
};

/** input type for inserting object relation for remote table "project_subcontractor_report_settings" */
export type Project_Subcontractor_Report_Settings_Obj_Rel_Insert_Input = {
  data: Project_Subcontractor_Report_Settings_Insert_Input;
  on_conflict?: Maybe<Project_Subcontractor_Report_Settings_On_Conflict>;
};

/** on conflict condition type for table "project_subcontractor_report_settings" */
export type Project_Subcontractor_Report_Settings_On_Conflict = {
  constraint: Project_Subcontractor_Report_Settings_Constraint;
  update_columns: Array<Project_Subcontractor_Report_Settings_Update_Column>;
  where?: Maybe<Project_Subcontractor_Report_Settings_Bool_Exp>;
};

/** ordering options when selecting data from "project_subcontractor_report_settings" */
export type Project_Subcontractor_Report_Settings_Order_By = {
  created_at?: Maybe<Order_By>;
  daily_reports_required?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project?: Maybe<Project_Order_By>;
  project_id?: Maybe<Order_By>;
  safety_reports_required?: Maybe<Order_By>;
  subcontractor?: Maybe<Subcontractor_Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  toolbox_talks_required?: Maybe<Order_By>;
};

/** primary key columns input for table: "project_subcontractor_report_settings" */
export type Project_Subcontractor_Report_Settings_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "project_subcontractor_report_settings" */
export enum Project_Subcontractor_Report_Settings_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DailyReportsRequired = 'daily_reports_required',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  SafetyReportsRequired = 'safety_reports_required',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  ToolboxTalksRequired = 'toolbox_talks_required'
}

/** input type for updating data in table "project_subcontractor_report_settings" */
export type Project_Subcontractor_Report_Settings_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_reports_required?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  safety_reports_required?: Maybe<Scalars['Boolean']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  toolbox_talks_required?: Maybe<Scalars['Boolean']>;
};

/** update columns of table "project_subcontractor_report_settings" */
export enum Project_Subcontractor_Report_Settings_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DailyReportsRequired = 'daily_reports_required',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  SafetyReportsRequired = 'safety_reports_required',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  ToolboxTalksRequired = 'toolbox_talks_required'
}

/** select columns of table "project_subcontractor" */
export enum Project_Subcontractor_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  SubcontractorId = 'subcontractor_id'
}

/** input type for updating data in table "project_subcontractor" */
export type Project_Subcontractor_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "project_subcontractor" */
export enum Project_Subcontractor_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  SubcontractorId = 'subcontractor_id'
}

/** update columns of table "project" */
export enum Project_Update_Column {
  /** column name */
  AddressId = 'address_id',
  /** column name */
  Completed = 'completed',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DashboardUpdatedAt = 'dashboard_updated_at',
  /** column name */
  ExternalId = 'external_id',
  /** column name */
  GeneralContractorId = 'general_contractor_id',
  /** column name */
  Id = 'id',
  /** column name */
  IsDashboardActive = 'is_dashboard_active',
  /** column name */
  IsSitedeliveryActive = 'is_sitedelivery_active',
  /** column name */
  IsSitedeliveryOn = 'is_sitedelivery_on',
  /** column name */
  Name = 'name',
  /** column name */
  PemitContactProjectEmployeeId = 'pemit_contact_project_employee_id',
  /** column name */
  QrCodeUrl = 'qr_code_url',
  /** column name */
  SafetyReportAwarenessDisabled = 'safety_report_awareness_disabled',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** columns and relationships of "project_user" */
export type Project_User = {
   __typename?: 'project_user';
  created_at: Scalars['timestamptz'];
  /** An object relationship */
  employee?: Maybe<General_Contractor_Employee>;
  employee_id?: Maybe<Scalars['uuid']>;
  id: Scalars['uuid'];
  /** An object relationship */
  project_worker?: Maybe<Project_Worker>;
  project_worker_id?: Maybe<Scalars['uuid']>;
  /** An array relationship */
  todo_assignees: Array<Todo_Assignee>;
  /** An aggregated array relationship */
  todo_assignees_aggregate: Todo_Assignee_Aggregate;
  /** An array relationship */
  todo_notifyees: Array<Todo_Notifyee>;
  /** An aggregated array relationship */
  todo_notifyees_aggregate: Todo_Notifyee_Aggregate;
};


/** columns and relationships of "project_user" */
export type Project_UserTodo_AssigneesArgs = {
  distinct_on?: Maybe<Array<Todo_Assignee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Todo_Assignee_Order_By>>;
  where?: Maybe<Todo_Assignee_Bool_Exp>;
};


/** columns and relationships of "project_user" */
export type Project_UserTodo_Assignees_AggregateArgs = {
  distinct_on?: Maybe<Array<Todo_Assignee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Todo_Assignee_Order_By>>;
  where?: Maybe<Todo_Assignee_Bool_Exp>;
};


/** columns and relationships of "project_user" */
export type Project_UserTodo_NotifyeesArgs = {
  distinct_on?: Maybe<Array<Todo_Notifyee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Todo_Notifyee_Order_By>>;
  where?: Maybe<Todo_Notifyee_Bool_Exp>;
};


/** columns and relationships of "project_user" */
export type Project_UserTodo_Notifyees_AggregateArgs = {
  distinct_on?: Maybe<Array<Todo_Notifyee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Todo_Notifyee_Order_By>>;
  where?: Maybe<Todo_Notifyee_Bool_Exp>;
};

/** aggregated selection of "project_user" */
export type Project_User_Aggregate = {
   __typename?: 'project_user_aggregate';
  aggregate?: Maybe<Project_User_Aggregate_Fields>;
  nodes: Array<Project_User>;
};

/** aggregate fields of "project_user" */
export type Project_User_Aggregate_Fields = {
   __typename?: 'project_user_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Project_User_Max_Fields>;
  min?: Maybe<Project_User_Min_Fields>;
};


/** aggregate fields of "project_user" */
export type Project_User_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Project_User_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "project_user" */
export type Project_User_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Project_User_Max_Order_By>;
  min?: Maybe<Project_User_Min_Order_By>;
};

/** input type for inserting array relation for remote table "project_user" */
export type Project_User_Arr_Rel_Insert_Input = {
  data: Array<Project_User_Insert_Input>;
  on_conflict?: Maybe<Project_User_On_Conflict>;
};

/** Boolean expression to filter rows from the table "project_user". All fields are combined with a logical 'AND'. */
export type Project_User_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Project_User_Bool_Exp>>>;
  _not?: Maybe<Project_User_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Project_User_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  employee?: Maybe<General_Contractor_Employee_Bool_Exp>;
  employee_id?: Maybe<Uuid_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  project_worker?: Maybe<Project_Worker_Bool_Exp>;
  project_worker_id?: Maybe<Uuid_Comparison_Exp>;
  todo_assignees?: Maybe<Todo_Assignee_Bool_Exp>;
  todo_notifyees?: Maybe<Todo_Notifyee_Bool_Exp>;
};

/** unique or primary key constraints on table "project_user" */
export enum Project_User_Constraint {
  /** unique or primary key constraint */
  ProjectUserPkey = 'project_user_pkey'
}

/** input type for inserting data into table "project_user" */
export type Project_User_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  employee?: Maybe<General_Contractor_Employee_Obj_Rel_Insert_Input>;
  employee_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  project_worker?: Maybe<Project_Worker_Obj_Rel_Insert_Input>;
  project_worker_id?: Maybe<Scalars['uuid']>;
  todo_assignees?: Maybe<Todo_Assignee_Arr_Rel_Insert_Input>;
  todo_notifyees?: Maybe<Todo_Notifyee_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Project_User_Max_Fields = {
   __typename?: 'project_user_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  employee_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "project_user" */
export type Project_User_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  employee_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_worker_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Project_User_Min_Fields = {
   __typename?: 'project_user_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  employee_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "project_user" */
export type Project_User_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  employee_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_worker_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "project_user" */
export type Project_User_Mutation_Response = {
   __typename?: 'project_user_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Project_User>;
};

/** input type for inserting object relation for remote table "project_user" */
export type Project_User_Obj_Rel_Insert_Input = {
  data: Project_User_Insert_Input;
  on_conflict?: Maybe<Project_User_On_Conflict>;
};

/** on conflict condition type for table "project_user" */
export type Project_User_On_Conflict = {
  constraint: Project_User_Constraint;
  update_columns: Array<Project_User_Update_Column>;
  where?: Maybe<Project_User_Bool_Exp>;
};

/** ordering options when selecting data from "project_user" */
export type Project_User_Order_By = {
  created_at?: Maybe<Order_By>;
  employee?: Maybe<General_Contractor_Employee_Order_By>;
  employee_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_worker?: Maybe<Project_Worker_Order_By>;
  project_worker_id?: Maybe<Order_By>;
  todo_assignees_aggregate?: Maybe<Todo_Assignee_Aggregate_Order_By>;
  todo_notifyees_aggregate?: Maybe<Todo_Notifyee_Aggregate_Order_By>;
};

/** primary key columns input for table: "project_user" */
export type Project_User_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "project_user" */
export enum Project_User_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  EmployeeId = 'employee_id',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectWorkerId = 'project_worker_id'
}

/** input type for updating data in table "project_user" */
export type Project_User_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  employee_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "project_user" */
export enum Project_User_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  EmployeeId = 'employee_id',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectWorkerId = 'project_worker_id'
}

/** columns and relationships of "project_worker" */
export type Project_Worker = {
   __typename?: 'project_worker';
  /** An array relationship */
  auto_emails: Array<Auto_Email>;
  /** An aggregated array relationship */
  auto_emails_aggregate: Auto_Email_Aggregate;
  can_insert_report?: Maybe<Scalars['Boolean']>;
  /** An array relationship */
  chat_members: Array<Chat_Member>;
  /** An aggregated array relationship */
  chat_members_aggregate: Chat_Member_Aggregate;
  created_at: Scalars['timestamptz'];
  /** An array relationship */
  daily_report_project_workers: Array<Daily_Report_Project_Worker>;
  /** An aggregated array relationship */
  daily_report_project_workers_aggregate: Daily_Report_Project_Worker_Aggregate;
  /** An array relationship */
  daily_work_log_workers: Array<Daily_Work_Log_Worker>;
  /** An aggregated array relationship */
  daily_work_log_workers_aggregate: Daily_Work_Log_Worker_Aggregate;
  deleted_at?: Maybe<Scalars['timestamptz']>;
  hard_hat_number?: Maybe<Scalars['String']>;
  id: Scalars['uuid'];
  /** An array relationship */
  leading_project_crews: Array<Project_Crew>;
  /** An aggregated array relationship */
  leading_project_crews_aggregate: Project_Crew_Aggregate;
  /** An object relationship */
  orientation_signature_image?: Maybe<Image>;
  orientation_signature_image_id?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  project: Project;
  /** An array relationship */
  project_covid_certifies: Array<Project_Covid_Certify_Worker>;
  /** An aggregated array relationship */
  project_covid_certifies_aggregate: Project_Covid_Certify_Worker_Aggregate;
  /** An array relationship */
  project_covid_crew_certifies: Array<Project_Covid_Crew_Certify>;
  /** An aggregated array relationship */
  project_covid_crew_certifies_aggregate: Project_Covid_Crew_Certify_Aggregate;
  /** An array relationship */
  project_covid_tested_positives: Array<Project_Covid_Tested_Positive_Worker>;
  /** An aggregated array relationship */
  project_covid_tested_positives_aggregate: Project_Covid_Tested_Positive_Worker_Aggregate;
  /** An object relationship */
  project_crew?: Maybe<Project_Crew>;
  project_crew_id?: Maybe<Scalars['uuid']>;
  project_id: Scalars['uuid'];
  /** An array relationship */
  project_users: Array<Project_User>;
  /** An aggregated array relationship */
  project_users_aggregate: Project_User_Aggregate;
  /** An array relationship */
  project_worker_competencies: Array<Project_Worker_Competency>;
  /** An aggregated array relationship */
  project_worker_competencies_aggregate: Project_Worker_Competency_Aggregate;
  /** An array relationship */
  report_injuries: Array<Report_Injury>;
  /** An aggregated array relationship */
  report_injuries_aggregate: Report_Injury_Aggregate;
  /** An array relationship */
  reports: Array<Report_Project_Worker>;
  /** An aggregated array relationship */
  reports_aggregate: Report_Project_Worker_Aggregate;
  /** An object relationship */
  subcontractor: Subcontractor;
  subcontractor_id: Scalars['uuid'];
  /** An array relationship */
  submitted_daily_reports: Array<Daily_Report>;
  /** An aggregated array relationship */
  submitted_daily_reports_aggregate: Daily_Report_Aggregate;
  /** An array relationship */
  submitted_reports: Array<Report>;
  /** An aggregated array relationship */
  submitted_reports_aggregate: Report_Aggregate;
  /** An object relationship */
  title?: Maybe<Worker_Title>;
  title_id?: Maybe<Scalars['uuid']>;
  /** An array relationship */
  toolbox_talks: Array<Toolbox_Talk_Project_Worker>;
  /** An aggregated array relationship */
  toolbox_talks_aggregate: Toolbox_Talk_Project_Worker_Aggregate;
  /** An array relationship */
  toolbox_talks_led_by_project_worker: Array<Toolbox_Talk>;
  /** An aggregated array relationship */
  toolbox_talks_led_by_project_worker_aggregate: Toolbox_Talk_Aggregate;
  /** An array relationship */
  toolbox_talks_submitted: Array<Toolbox_Talk>;
  /** An aggregated array relationship */
  toolbox_talks_submitted_aggregate: Toolbox_Talk_Aggregate;
  updated_at: Scalars['timestamptz'];
  /** An object relationship */
  user?: Maybe<User>;
  /** An object relationship */
  worker: Worker;
  worker_id: Scalars['uuid'];
  worker_role: Scalars['String'];
  /** An object relationship */
  worker_role_detail: Worker_Role;
};


/** columns and relationships of "project_worker" */
export type Project_WorkerAuto_EmailsArgs = {
  distinct_on?: Maybe<Array<Auto_Email_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Auto_Email_Order_By>>;
  where?: Maybe<Auto_Email_Bool_Exp>;
};


/** columns and relationships of "project_worker" */
export type Project_WorkerAuto_Emails_AggregateArgs = {
  distinct_on?: Maybe<Array<Auto_Email_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Auto_Email_Order_By>>;
  where?: Maybe<Auto_Email_Bool_Exp>;
};


/** columns and relationships of "project_worker" */
export type Project_WorkerChat_MembersArgs = {
  distinct_on?: Maybe<Array<Chat_Member_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Member_Order_By>>;
  where?: Maybe<Chat_Member_Bool_Exp>;
};


/** columns and relationships of "project_worker" */
export type Project_WorkerChat_Members_AggregateArgs = {
  distinct_on?: Maybe<Array<Chat_Member_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Member_Order_By>>;
  where?: Maybe<Chat_Member_Bool_Exp>;
};


/** columns and relationships of "project_worker" */
export type Project_WorkerDaily_Report_Project_WorkersArgs = {
  distinct_on?: Maybe<Array<Daily_Report_Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Report_Project_Worker_Order_By>>;
  where?: Maybe<Daily_Report_Project_Worker_Bool_Exp>;
};


/** columns and relationships of "project_worker" */
export type Project_WorkerDaily_Report_Project_Workers_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Report_Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Report_Project_Worker_Order_By>>;
  where?: Maybe<Daily_Report_Project_Worker_Bool_Exp>;
};


/** columns and relationships of "project_worker" */
export type Project_WorkerDaily_Work_Log_WorkersArgs = {
  distinct_on?: Maybe<Array<Daily_Work_Log_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Work_Log_Worker_Order_By>>;
  where?: Maybe<Daily_Work_Log_Worker_Bool_Exp>;
};


/** columns and relationships of "project_worker" */
export type Project_WorkerDaily_Work_Log_Workers_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Work_Log_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Work_Log_Worker_Order_By>>;
  where?: Maybe<Daily_Work_Log_Worker_Bool_Exp>;
};


/** columns and relationships of "project_worker" */
export type Project_WorkerLeading_Project_CrewsArgs = {
  distinct_on?: Maybe<Array<Project_Crew_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Crew_Order_By>>;
  where?: Maybe<Project_Crew_Bool_Exp>;
};


/** columns and relationships of "project_worker" */
export type Project_WorkerLeading_Project_Crews_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Crew_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Crew_Order_By>>;
  where?: Maybe<Project_Crew_Bool_Exp>;
};


/** columns and relationships of "project_worker" */
export type Project_WorkerProject_Covid_CertifiesArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Certify_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Certify_Worker_Order_By>>;
  where?: Maybe<Project_Covid_Certify_Worker_Bool_Exp>;
};


/** columns and relationships of "project_worker" */
export type Project_WorkerProject_Covid_Certifies_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Certify_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Certify_Worker_Order_By>>;
  where?: Maybe<Project_Covid_Certify_Worker_Bool_Exp>;
};


/** columns and relationships of "project_worker" */
export type Project_WorkerProject_Covid_Crew_CertifiesArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Crew_Certify_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Crew_Certify_Order_By>>;
  where?: Maybe<Project_Covid_Crew_Certify_Bool_Exp>;
};


/** columns and relationships of "project_worker" */
export type Project_WorkerProject_Covid_Crew_Certifies_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Crew_Certify_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Crew_Certify_Order_By>>;
  where?: Maybe<Project_Covid_Crew_Certify_Bool_Exp>;
};


/** columns and relationships of "project_worker" */
export type Project_WorkerProject_Covid_Tested_PositivesArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Tested_Positive_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Tested_Positive_Worker_Order_By>>;
  where?: Maybe<Project_Covid_Tested_Positive_Worker_Bool_Exp>;
};


/** columns and relationships of "project_worker" */
export type Project_WorkerProject_Covid_Tested_Positives_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Tested_Positive_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Tested_Positive_Worker_Order_By>>;
  where?: Maybe<Project_Covid_Tested_Positive_Worker_Bool_Exp>;
};


/** columns and relationships of "project_worker" */
export type Project_WorkerProject_UsersArgs = {
  distinct_on?: Maybe<Array<Project_User_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_User_Order_By>>;
  where?: Maybe<Project_User_Bool_Exp>;
};


/** columns and relationships of "project_worker" */
export type Project_WorkerProject_Users_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_User_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_User_Order_By>>;
  where?: Maybe<Project_User_Bool_Exp>;
};


/** columns and relationships of "project_worker" */
export type Project_WorkerProject_Worker_CompetenciesArgs = {
  distinct_on?: Maybe<Array<Project_Worker_Competency_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Worker_Competency_Order_By>>;
  where?: Maybe<Project_Worker_Competency_Bool_Exp>;
};


/** columns and relationships of "project_worker" */
export type Project_WorkerProject_Worker_Competencies_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Worker_Competency_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Worker_Competency_Order_By>>;
  where?: Maybe<Project_Worker_Competency_Bool_Exp>;
};


/** columns and relationships of "project_worker" */
export type Project_WorkerReport_InjuriesArgs = {
  distinct_on?: Maybe<Array<Report_Injury_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Injury_Order_By>>;
  where?: Maybe<Report_Injury_Bool_Exp>;
};


/** columns and relationships of "project_worker" */
export type Project_WorkerReport_Injuries_AggregateArgs = {
  distinct_on?: Maybe<Array<Report_Injury_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Injury_Order_By>>;
  where?: Maybe<Report_Injury_Bool_Exp>;
};


/** columns and relationships of "project_worker" */
export type Project_WorkerReportsArgs = {
  distinct_on?: Maybe<Array<Report_Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Project_Worker_Order_By>>;
  where?: Maybe<Report_Project_Worker_Bool_Exp>;
};


/** columns and relationships of "project_worker" */
export type Project_WorkerReports_AggregateArgs = {
  distinct_on?: Maybe<Array<Report_Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Project_Worker_Order_By>>;
  where?: Maybe<Report_Project_Worker_Bool_Exp>;
};


/** columns and relationships of "project_worker" */
export type Project_WorkerSubmitted_Daily_ReportsArgs = {
  distinct_on?: Maybe<Array<Daily_Report_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Report_Order_By>>;
  where?: Maybe<Daily_Report_Bool_Exp>;
};


/** columns and relationships of "project_worker" */
export type Project_WorkerSubmitted_Daily_Reports_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Report_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Report_Order_By>>;
  where?: Maybe<Daily_Report_Bool_Exp>;
};


/** columns and relationships of "project_worker" */
export type Project_WorkerSubmitted_ReportsArgs = {
  distinct_on?: Maybe<Array<Report_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Order_By>>;
  where?: Maybe<Report_Bool_Exp>;
};


/** columns and relationships of "project_worker" */
export type Project_WorkerSubmitted_Reports_AggregateArgs = {
  distinct_on?: Maybe<Array<Report_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Order_By>>;
  where?: Maybe<Report_Bool_Exp>;
};


/** columns and relationships of "project_worker" */
export type Project_WorkerToolbox_TalksArgs = {
  distinct_on?: Maybe<Array<Toolbox_Talk_Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Toolbox_Talk_Project_Worker_Order_By>>;
  where?: Maybe<Toolbox_Talk_Project_Worker_Bool_Exp>;
};


/** columns and relationships of "project_worker" */
export type Project_WorkerToolbox_Talks_AggregateArgs = {
  distinct_on?: Maybe<Array<Toolbox_Talk_Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Toolbox_Talk_Project_Worker_Order_By>>;
  where?: Maybe<Toolbox_Talk_Project_Worker_Bool_Exp>;
};


/** columns and relationships of "project_worker" */
export type Project_WorkerToolbox_Talks_Led_By_Project_WorkerArgs = {
  distinct_on?: Maybe<Array<Toolbox_Talk_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Toolbox_Talk_Order_By>>;
  where?: Maybe<Toolbox_Talk_Bool_Exp>;
};


/** columns and relationships of "project_worker" */
export type Project_WorkerToolbox_Talks_Led_By_Project_Worker_AggregateArgs = {
  distinct_on?: Maybe<Array<Toolbox_Talk_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Toolbox_Talk_Order_By>>;
  where?: Maybe<Toolbox_Talk_Bool_Exp>;
};


/** columns and relationships of "project_worker" */
export type Project_WorkerToolbox_Talks_SubmittedArgs = {
  distinct_on?: Maybe<Array<Toolbox_Talk_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Toolbox_Talk_Order_By>>;
  where?: Maybe<Toolbox_Talk_Bool_Exp>;
};


/** columns and relationships of "project_worker" */
export type Project_WorkerToolbox_Talks_Submitted_AggregateArgs = {
  distinct_on?: Maybe<Array<Toolbox_Talk_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Toolbox_Talk_Order_By>>;
  where?: Maybe<Toolbox_Talk_Bool_Exp>;
};

/** aggregated selection of "project_worker" */
export type Project_Worker_Aggregate = {
   __typename?: 'project_worker_aggregate';
  aggregate?: Maybe<Project_Worker_Aggregate_Fields>;
  nodes: Array<Project_Worker>;
};

/** aggregate fields of "project_worker" */
export type Project_Worker_Aggregate_Fields = {
   __typename?: 'project_worker_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Project_Worker_Max_Fields>;
  min?: Maybe<Project_Worker_Min_Fields>;
};


/** aggregate fields of "project_worker" */
export type Project_Worker_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Project_Worker_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "project_worker" */
export type Project_Worker_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Project_Worker_Max_Order_By>;
  min?: Maybe<Project_Worker_Min_Order_By>;
};

/** input type for inserting array relation for remote table "project_worker" */
export type Project_Worker_Arr_Rel_Insert_Input = {
  data: Array<Project_Worker_Insert_Input>;
  on_conflict?: Maybe<Project_Worker_On_Conflict>;
};

/** Boolean expression to filter rows from the table "project_worker". All fields are combined with a logical 'AND'. */
export type Project_Worker_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Project_Worker_Bool_Exp>>>;
  _not?: Maybe<Project_Worker_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Project_Worker_Bool_Exp>>>;
  auto_emails?: Maybe<Auto_Email_Bool_Exp>;
  can_insert_report?: Maybe<Boolean_Comparison_Exp>;
  chat_members?: Maybe<Chat_Member_Bool_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  daily_report_project_workers?: Maybe<Daily_Report_Project_Worker_Bool_Exp>;
  daily_work_log_workers?: Maybe<Daily_Work_Log_Worker_Bool_Exp>;
  deleted_at?: Maybe<Timestamptz_Comparison_Exp>;
  hard_hat_number?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  leading_project_crews?: Maybe<Project_Crew_Bool_Exp>;
  orientation_signature_image?: Maybe<Image_Bool_Exp>;
  orientation_signature_image_id?: Maybe<Uuid_Comparison_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_covid_certifies?: Maybe<Project_Covid_Certify_Worker_Bool_Exp>;
  project_covid_crew_certifies?: Maybe<Project_Covid_Crew_Certify_Bool_Exp>;
  project_covid_tested_positives?: Maybe<Project_Covid_Tested_Positive_Worker_Bool_Exp>;
  project_crew?: Maybe<Project_Crew_Bool_Exp>;
  project_crew_id?: Maybe<Uuid_Comparison_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  project_users?: Maybe<Project_User_Bool_Exp>;
  project_worker_competencies?: Maybe<Project_Worker_Competency_Bool_Exp>;
  report_injuries?: Maybe<Report_Injury_Bool_Exp>;
  reports?: Maybe<Report_Project_Worker_Bool_Exp>;
  subcontractor?: Maybe<Subcontractor_Bool_Exp>;
  subcontractor_id?: Maybe<Uuid_Comparison_Exp>;
  submitted_daily_reports?: Maybe<Daily_Report_Bool_Exp>;
  submitted_reports?: Maybe<Report_Bool_Exp>;
  title?: Maybe<Worker_Title_Bool_Exp>;
  title_id?: Maybe<Uuid_Comparison_Exp>;
  toolbox_talks?: Maybe<Toolbox_Talk_Project_Worker_Bool_Exp>;
  toolbox_talks_led_by_project_worker?: Maybe<Toolbox_Talk_Bool_Exp>;
  toolbox_talks_submitted?: Maybe<Toolbox_Talk_Bool_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  user?: Maybe<User_Bool_Exp>;
  worker?: Maybe<Worker_Bool_Exp>;
  worker_id?: Maybe<Uuid_Comparison_Exp>;
  worker_role?: Maybe<String_Comparison_Exp>;
  worker_role_detail?: Maybe<Worker_Role_Bool_Exp>;
};

/** columns and relationships of "project_worker_competency" */
export type Project_Worker_Competency = {
   __typename?: 'project_worker_competency';
  created_at: Scalars['timestamptz'];
  description: Scalars['String'];
  /** An object relationship */
  project_worker: Project_Worker;
  project_worker_id: Scalars['uuid'];
};

/** aggregated selection of "project_worker_competency" */
export type Project_Worker_Competency_Aggregate = {
   __typename?: 'project_worker_competency_aggregate';
  aggregate?: Maybe<Project_Worker_Competency_Aggregate_Fields>;
  nodes: Array<Project_Worker_Competency>;
};

/** aggregate fields of "project_worker_competency" */
export type Project_Worker_Competency_Aggregate_Fields = {
   __typename?: 'project_worker_competency_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Project_Worker_Competency_Max_Fields>;
  min?: Maybe<Project_Worker_Competency_Min_Fields>;
};


/** aggregate fields of "project_worker_competency" */
export type Project_Worker_Competency_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Project_Worker_Competency_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "project_worker_competency" */
export type Project_Worker_Competency_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Project_Worker_Competency_Max_Order_By>;
  min?: Maybe<Project_Worker_Competency_Min_Order_By>;
};

/** input type for inserting array relation for remote table "project_worker_competency" */
export type Project_Worker_Competency_Arr_Rel_Insert_Input = {
  data: Array<Project_Worker_Competency_Insert_Input>;
  on_conflict?: Maybe<Project_Worker_Competency_On_Conflict>;
};

/** Boolean expression to filter rows from the table "project_worker_competency". All fields are combined with a logical 'AND'. */
export type Project_Worker_Competency_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Project_Worker_Competency_Bool_Exp>>>;
  _not?: Maybe<Project_Worker_Competency_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Project_Worker_Competency_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  description?: Maybe<String_Comparison_Exp>;
  project_worker?: Maybe<Project_Worker_Bool_Exp>;
  project_worker_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "project_worker_competency" */
export enum Project_Worker_Competency_Constraint {
  /** unique or primary key constraint */
  ProjectWorkerCompetencyPkey = 'project_worker_competency_pkey'
}

/** input type for inserting data into table "project_worker_competency" */
export type Project_Worker_Competency_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  project_worker?: Maybe<Project_Worker_Obj_Rel_Insert_Input>;
  project_worker_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Project_Worker_Competency_Max_Fields = {
   __typename?: 'project_worker_competency_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "project_worker_competency" */
export type Project_Worker_Competency_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  project_worker_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Project_Worker_Competency_Min_Fields = {
   __typename?: 'project_worker_competency_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "project_worker_competency" */
export type Project_Worker_Competency_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  project_worker_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "project_worker_competency" */
export type Project_Worker_Competency_Mutation_Response = {
   __typename?: 'project_worker_competency_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Project_Worker_Competency>;
};

/** input type for inserting object relation for remote table "project_worker_competency" */
export type Project_Worker_Competency_Obj_Rel_Insert_Input = {
  data: Project_Worker_Competency_Insert_Input;
  on_conflict?: Maybe<Project_Worker_Competency_On_Conflict>;
};

/** on conflict condition type for table "project_worker_competency" */
export type Project_Worker_Competency_On_Conflict = {
  constraint: Project_Worker_Competency_Constraint;
  update_columns: Array<Project_Worker_Competency_Update_Column>;
  where?: Maybe<Project_Worker_Competency_Bool_Exp>;
};

/** ordering options when selecting data from "project_worker_competency" */
export type Project_Worker_Competency_Order_By = {
  created_at?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  project_worker?: Maybe<Project_Worker_Order_By>;
  project_worker_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "project_worker_competency" */
export type Project_Worker_Competency_Pk_Columns_Input = {
  description: Scalars['String'];
  project_worker_id: Scalars['uuid'];
};

/** select columns of table "project_worker_competency" */
export enum Project_Worker_Competency_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Description = 'description',
  /** column name */
  ProjectWorkerId = 'project_worker_id'
}

/** input type for updating data in table "project_worker_competency" */
export type Project_Worker_Competency_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "project_worker_competency" */
export enum Project_Worker_Competency_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Description = 'description',
  /** column name */
  ProjectWorkerId = 'project_worker_id'
}

/** unique or primary key constraints on table "project_worker" */
export enum Project_Worker_Constraint {
  /** unique or primary key constraint */
  ProjectWorkerIdKey = 'project_worker_id_key',
  /** unique or primary key constraint */
  ProjectWorkerPkey = 'project_worker_pkey',
  /** unique or primary key constraint */
  ProjectWorkerProjectIdWorkerIdKey = 'project_worker_project_id_worker_id_key'
}

/** input type for inserting data into table "project_worker" */
export type Project_Worker_Insert_Input = {
  auto_emails?: Maybe<Auto_Email_Arr_Rel_Insert_Input>;
  can_insert_report?: Maybe<Scalars['Boolean']>;
  chat_members?: Maybe<Chat_Member_Arr_Rel_Insert_Input>;
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_report_project_workers?: Maybe<Daily_Report_Project_Worker_Arr_Rel_Insert_Input>;
  daily_work_log_workers?: Maybe<Daily_Work_Log_Worker_Arr_Rel_Insert_Input>;
  deleted_at?: Maybe<Scalars['timestamptz']>;
  hard_hat_number?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  leading_project_crews?: Maybe<Project_Crew_Arr_Rel_Insert_Input>;
  orientation_signature_image?: Maybe<Image_Obj_Rel_Insert_Input>;
  orientation_signature_image_id?: Maybe<Scalars['uuid']>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_covid_certifies?: Maybe<Project_Covid_Certify_Worker_Arr_Rel_Insert_Input>;
  project_covid_crew_certifies?: Maybe<Project_Covid_Crew_Certify_Arr_Rel_Insert_Input>;
  project_covid_tested_positives?: Maybe<Project_Covid_Tested_Positive_Worker_Arr_Rel_Insert_Input>;
  project_crew?: Maybe<Project_Crew_Obj_Rel_Insert_Input>;
  project_crew_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  project_users?: Maybe<Project_User_Arr_Rel_Insert_Input>;
  project_worker_competencies?: Maybe<Project_Worker_Competency_Arr_Rel_Insert_Input>;
  report_injuries?: Maybe<Report_Injury_Arr_Rel_Insert_Input>;
  reports?: Maybe<Report_Project_Worker_Arr_Rel_Insert_Input>;
  subcontractor?: Maybe<Subcontractor_Obj_Rel_Insert_Input>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  submitted_daily_reports?: Maybe<Daily_Report_Arr_Rel_Insert_Input>;
  submitted_reports?: Maybe<Report_Arr_Rel_Insert_Input>;
  title?: Maybe<Worker_Title_Obj_Rel_Insert_Input>;
  title_id?: Maybe<Scalars['uuid']>;
  toolbox_talks?: Maybe<Toolbox_Talk_Project_Worker_Arr_Rel_Insert_Input>;
  toolbox_talks_led_by_project_worker?: Maybe<Toolbox_Talk_Arr_Rel_Insert_Input>;
  toolbox_talks_submitted?: Maybe<Toolbox_Talk_Arr_Rel_Insert_Input>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  user?: Maybe<User_Obj_Rel_Insert_Input>;
  worker?: Maybe<Worker_Obj_Rel_Insert_Input>;
  worker_id?: Maybe<Scalars['uuid']>;
  worker_role?: Maybe<Scalars['String']>;
  worker_role_detail?: Maybe<Worker_Role_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Project_Worker_Max_Fields = {
   __typename?: 'project_worker_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  deleted_at?: Maybe<Scalars['timestamptz']>;
  hard_hat_number?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  orientation_signature_image_id?: Maybe<Scalars['uuid']>;
  project_crew_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  title_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  worker_id?: Maybe<Scalars['uuid']>;
  worker_role?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "project_worker" */
export type Project_Worker_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  deleted_at?: Maybe<Order_By>;
  hard_hat_number?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  orientation_signature_image_id?: Maybe<Order_By>;
  project_crew_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  title_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  worker_id?: Maybe<Order_By>;
  worker_role?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Project_Worker_Min_Fields = {
   __typename?: 'project_worker_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  deleted_at?: Maybe<Scalars['timestamptz']>;
  hard_hat_number?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  orientation_signature_image_id?: Maybe<Scalars['uuid']>;
  project_crew_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  title_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  worker_id?: Maybe<Scalars['uuid']>;
  worker_role?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "project_worker" */
export type Project_Worker_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  deleted_at?: Maybe<Order_By>;
  hard_hat_number?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  orientation_signature_image_id?: Maybe<Order_By>;
  project_crew_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  title_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  worker_id?: Maybe<Order_By>;
  worker_role?: Maybe<Order_By>;
};

/** response of any mutation on the table "project_worker" */
export type Project_Worker_Mutation_Response = {
   __typename?: 'project_worker_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Project_Worker>;
};

/** input type for inserting object relation for remote table "project_worker" */
export type Project_Worker_Obj_Rel_Insert_Input = {
  data: Project_Worker_Insert_Input;
  on_conflict?: Maybe<Project_Worker_On_Conflict>;
};

/** on conflict condition type for table "project_worker" */
export type Project_Worker_On_Conflict = {
  constraint: Project_Worker_Constraint;
  update_columns: Array<Project_Worker_Update_Column>;
  where?: Maybe<Project_Worker_Bool_Exp>;
};

/**
 * Periodic records from worker devices when on project worksite
 * 
 * 
 * columns and relationships of "project_worker_onsite_ping"
 */
export type Project_Worker_Onsite_Ping = {
   __typename?: 'project_worker_onsite_ping';
  created_at?: Maybe<Scalars['timestamptz']>;
  id: Scalars['uuid'];
  /** An object relationship */
  project_worker?: Maybe<Project_Worker>;
  project_worker_id?: Maybe<Scalars['uuid']>;
  safety_report_submitted: Scalars['Boolean'];
};

/** aggregated selection of "project_worker_onsite_ping" */
export type Project_Worker_Onsite_Ping_Aggregate = {
   __typename?: 'project_worker_onsite_ping_aggregate';
  aggregate?: Maybe<Project_Worker_Onsite_Ping_Aggregate_Fields>;
  nodes: Array<Project_Worker_Onsite_Ping>;
};

/** aggregate fields of "project_worker_onsite_ping" */
export type Project_Worker_Onsite_Ping_Aggregate_Fields = {
   __typename?: 'project_worker_onsite_ping_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Project_Worker_Onsite_Ping_Max_Fields>;
  min?: Maybe<Project_Worker_Onsite_Ping_Min_Fields>;
};


/** aggregate fields of "project_worker_onsite_ping" */
export type Project_Worker_Onsite_Ping_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Project_Worker_Onsite_Ping_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "project_worker_onsite_ping" */
export type Project_Worker_Onsite_Ping_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Project_Worker_Onsite_Ping_Max_Order_By>;
  min?: Maybe<Project_Worker_Onsite_Ping_Min_Order_By>;
};

/** input type for inserting array relation for remote table "project_worker_onsite_ping" */
export type Project_Worker_Onsite_Ping_Arr_Rel_Insert_Input = {
  data: Array<Project_Worker_Onsite_Ping_Insert_Input>;
  on_conflict?: Maybe<Project_Worker_Onsite_Ping_On_Conflict>;
};

/** Boolean expression to filter rows from the table "project_worker_onsite_ping". All fields are combined with a logical 'AND'. */
export type Project_Worker_Onsite_Ping_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Project_Worker_Onsite_Ping_Bool_Exp>>>;
  _not?: Maybe<Project_Worker_Onsite_Ping_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Project_Worker_Onsite_Ping_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  project_worker?: Maybe<Project_Worker_Bool_Exp>;
  project_worker_id?: Maybe<Uuid_Comparison_Exp>;
  safety_report_submitted?: Maybe<Boolean_Comparison_Exp>;
};

/** unique or primary key constraints on table "project_worker_onsite_ping" */
export enum Project_Worker_Onsite_Ping_Constraint {
  /** unique or primary key constraint */
  ProjectWorkerOnsitePingPkey = 'project_worker_onsite_ping_pkey'
}

/** input type for inserting data into table "project_worker_onsite_ping" */
export type Project_Worker_Onsite_Ping_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_worker?: Maybe<Project_Worker_Obj_Rel_Insert_Input>;
  project_worker_id?: Maybe<Scalars['uuid']>;
  safety_report_submitted?: Maybe<Scalars['Boolean']>;
};

/** aggregate max on columns */
export type Project_Worker_Onsite_Ping_Max_Fields = {
   __typename?: 'project_worker_onsite_ping_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "project_worker_onsite_ping" */
export type Project_Worker_Onsite_Ping_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_worker_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Project_Worker_Onsite_Ping_Min_Fields = {
   __typename?: 'project_worker_onsite_ping_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "project_worker_onsite_ping" */
export type Project_Worker_Onsite_Ping_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_worker_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "project_worker_onsite_ping" */
export type Project_Worker_Onsite_Ping_Mutation_Response = {
   __typename?: 'project_worker_onsite_ping_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Project_Worker_Onsite_Ping>;
};

/** input type for inserting object relation for remote table "project_worker_onsite_ping" */
export type Project_Worker_Onsite_Ping_Obj_Rel_Insert_Input = {
  data: Project_Worker_Onsite_Ping_Insert_Input;
  on_conflict?: Maybe<Project_Worker_Onsite_Ping_On_Conflict>;
};

/** on conflict condition type for table "project_worker_onsite_ping" */
export type Project_Worker_Onsite_Ping_On_Conflict = {
  constraint: Project_Worker_Onsite_Ping_Constraint;
  update_columns: Array<Project_Worker_Onsite_Ping_Update_Column>;
  where?: Maybe<Project_Worker_Onsite_Ping_Bool_Exp>;
};

/** ordering options when selecting data from "project_worker_onsite_ping" */
export type Project_Worker_Onsite_Ping_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_worker?: Maybe<Project_Worker_Order_By>;
  project_worker_id?: Maybe<Order_By>;
  safety_report_submitted?: Maybe<Order_By>;
};

/** primary key columns input for table: "project_worker_onsite_ping" */
export type Project_Worker_Onsite_Ping_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "project_worker_onsite_ping" */
export enum Project_Worker_Onsite_Ping_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectWorkerId = 'project_worker_id',
  /** column name */
  SafetyReportSubmitted = 'safety_report_submitted'
}

/** input type for updating data in table "project_worker_onsite_ping" */
export type Project_Worker_Onsite_Ping_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
  safety_report_submitted?: Maybe<Scalars['Boolean']>;
};

/** update columns of table "project_worker_onsite_ping" */
export enum Project_Worker_Onsite_Ping_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectWorkerId = 'project_worker_id',
  /** column name */
  SafetyReportSubmitted = 'safety_report_submitted'
}

/** ordering options when selecting data from "project_worker" */
export type Project_Worker_Order_By = {
  auto_emails_aggregate?: Maybe<Auto_Email_Aggregate_Order_By>;
  can_insert_report?: Maybe<Order_By>;
  chat_members_aggregate?: Maybe<Chat_Member_Aggregate_Order_By>;
  created_at?: Maybe<Order_By>;
  daily_report_project_workers_aggregate?: Maybe<Daily_Report_Project_Worker_Aggregate_Order_By>;
  daily_work_log_workers_aggregate?: Maybe<Daily_Work_Log_Worker_Aggregate_Order_By>;
  deleted_at?: Maybe<Order_By>;
  hard_hat_number?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  leading_project_crews_aggregate?: Maybe<Project_Crew_Aggregate_Order_By>;
  orientation_signature_image?: Maybe<Image_Order_By>;
  orientation_signature_image_id?: Maybe<Order_By>;
  project?: Maybe<Project_Order_By>;
  project_covid_certifies_aggregate?: Maybe<Project_Covid_Certify_Worker_Aggregate_Order_By>;
  project_covid_crew_certifies_aggregate?: Maybe<Project_Covid_Crew_Certify_Aggregate_Order_By>;
  project_covid_tested_positives_aggregate?: Maybe<Project_Covid_Tested_Positive_Worker_Aggregate_Order_By>;
  project_crew?: Maybe<Project_Crew_Order_By>;
  project_crew_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  project_users_aggregate?: Maybe<Project_User_Aggregate_Order_By>;
  project_worker_competencies_aggregate?: Maybe<Project_Worker_Competency_Aggregate_Order_By>;
  report_injuries_aggregate?: Maybe<Report_Injury_Aggregate_Order_By>;
  reports_aggregate?: Maybe<Report_Project_Worker_Aggregate_Order_By>;
  subcontractor?: Maybe<Subcontractor_Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  submitted_daily_reports_aggregate?: Maybe<Daily_Report_Aggregate_Order_By>;
  submitted_reports_aggregate?: Maybe<Report_Aggregate_Order_By>;
  title?: Maybe<Worker_Title_Order_By>;
  title_id?: Maybe<Order_By>;
  toolbox_talks_aggregate?: Maybe<Toolbox_Talk_Project_Worker_Aggregate_Order_By>;
  toolbox_talks_led_by_project_worker_aggregate?: Maybe<Toolbox_Talk_Aggregate_Order_By>;
  toolbox_talks_submitted_aggregate?: Maybe<Toolbox_Talk_Aggregate_Order_By>;
  updated_at?: Maybe<Order_By>;
  user?: Maybe<User_Order_By>;
  worker?: Maybe<Worker_Order_By>;
  worker_id?: Maybe<Order_By>;
  worker_role?: Maybe<Order_By>;
  worker_role_detail?: Maybe<Worker_Role_Order_By>;
};

/** primary key columns input for table: "project_worker" */
export type Project_Worker_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "project_worker" */
export enum Project_Worker_Select_Column {
  /** column name */
  CanInsertReport = 'can_insert_report',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DeletedAt = 'deleted_at',
  /** column name */
  HardHatNumber = 'hard_hat_number',
  /** column name */
  Id = 'id',
  /** column name */
  OrientationSignatureImageId = 'orientation_signature_image_id',
  /** column name */
  ProjectCrewId = 'project_crew_id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  TitleId = 'title_id',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  WorkerId = 'worker_id',
  /** column name */
  WorkerRole = 'worker_role'
}

/** input type for updating data in table "project_worker" */
export type Project_Worker_Set_Input = {
  can_insert_report?: Maybe<Scalars['Boolean']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  deleted_at?: Maybe<Scalars['timestamptz']>;
  hard_hat_number?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  orientation_signature_image_id?: Maybe<Scalars['uuid']>;
  project_crew_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  title_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  worker_id?: Maybe<Scalars['uuid']>;
  worker_role?: Maybe<Scalars['String']>;
};

/** update columns of table "project_worker" */
export enum Project_Worker_Update_Column {
  /** column name */
  CanInsertReport = 'can_insert_report',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DeletedAt = 'deleted_at',
  /** column name */
  HardHatNumber = 'hard_hat_number',
  /** column name */
  Id = 'id',
  /** column name */
  OrientationSignatureImageId = 'orientation_signature_image_id',
  /** column name */
  ProjectCrewId = 'project_crew_id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  TitleId = 'title_id',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  WorkerId = 'worker_id',
  /** column name */
  WorkerRole = 'worker_role'
}

export type ProjectDetails = {
   __typename?: 'ProjectDetails';
  project_id: Scalars['String'];
  project_name: Scalars['String'];
};

/** columns and relationships of "projects_to_posts" */
export type Projects_To_Posts = {
   __typename?: 'projects_to_posts';
  post_id: Scalars['uuid'];
  project_id: Scalars['uuid'];
};

/** aggregated selection of "projects_to_posts" */
export type Projects_To_Posts_Aggregate = {
   __typename?: 'projects_to_posts_aggregate';
  aggregate?: Maybe<Projects_To_Posts_Aggregate_Fields>;
  nodes: Array<Projects_To_Posts>;
};

/** aggregate fields of "projects_to_posts" */
export type Projects_To_Posts_Aggregate_Fields = {
   __typename?: 'projects_to_posts_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Projects_To_Posts_Max_Fields>;
  min?: Maybe<Projects_To_Posts_Min_Fields>;
};


/** aggregate fields of "projects_to_posts" */
export type Projects_To_Posts_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Projects_To_Posts_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "projects_to_posts" */
export type Projects_To_Posts_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Projects_To_Posts_Max_Order_By>;
  min?: Maybe<Projects_To_Posts_Min_Order_By>;
};

/** input type for inserting array relation for remote table "projects_to_posts" */
export type Projects_To_Posts_Arr_Rel_Insert_Input = {
  data: Array<Projects_To_Posts_Insert_Input>;
  on_conflict?: Maybe<Projects_To_Posts_On_Conflict>;
};

/** Boolean expression to filter rows from the table "projects_to_posts". All fields are combined with a logical 'AND'. */
export type Projects_To_Posts_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Projects_To_Posts_Bool_Exp>>>;
  _not?: Maybe<Projects_To_Posts_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Projects_To_Posts_Bool_Exp>>>;
  post_id?: Maybe<Uuid_Comparison_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "projects_to_posts" */
export enum Projects_To_Posts_Constraint {
  /** unique or primary key constraint */
  ProjectsToPostsPkey = 'projects_to_posts_pkey'
}

/** input type for inserting data into table "projects_to_posts" */
export type Projects_To_Posts_Insert_Input = {
  post_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Projects_To_Posts_Max_Fields = {
   __typename?: 'projects_to_posts_max_fields';
  post_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "projects_to_posts" */
export type Projects_To_Posts_Max_Order_By = {
  post_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Projects_To_Posts_Min_Fields = {
   __typename?: 'projects_to_posts_min_fields';
  post_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "projects_to_posts" */
export type Projects_To_Posts_Min_Order_By = {
  post_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "projects_to_posts" */
export type Projects_To_Posts_Mutation_Response = {
   __typename?: 'projects_to_posts_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Projects_To_Posts>;
};

/** input type for inserting object relation for remote table "projects_to_posts" */
export type Projects_To_Posts_Obj_Rel_Insert_Input = {
  data: Projects_To_Posts_Insert_Input;
  on_conflict?: Maybe<Projects_To_Posts_On_Conflict>;
};

/** on conflict condition type for table "projects_to_posts" */
export type Projects_To_Posts_On_Conflict = {
  constraint: Projects_To_Posts_Constraint;
  update_columns: Array<Projects_To_Posts_Update_Column>;
  where?: Maybe<Projects_To_Posts_Bool_Exp>;
};

/** ordering options when selecting data from "projects_to_posts" */
export type Projects_To_Posts_Order_By = {
  post_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "projects_to_posts" */
export type Projects_To_Posts_Pk_Columns_Input = {
  post_id: Scalars['uuid'];
  project_id: Scalars['uuid'];
};

/** select columns of table "projects_to_posts" */
export enum Projects_To_Posts_Select_Column {
  /** column name */
  PostId = 'post_id',
  /** column name */
  ProjectId = 'project_id'
}

/** input type for updating data in table "projects_to_posts" */
export type Projects_To_Posts_Set_Input = {
  post_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "projects_to_posts" */
export enum Projects_To_Posts_Update_Column {
  /** column name */
  PostId = 'post_id',
  /** column name */
  ProjectId = 'project_id'
}

export type Query = {
   __typename?: 'Query';
  adminu?: Maybe<Scalars['String']>;
  dummy?: Maybe<Scalars['String']>;
  getCompletionAudit?: Maybe<CompletionAuditOutput>;
  getNewUsername?: Maybe<Scalars['String']>;
  getPasswordHash?: Maybe<Scalars['String']>;
  getProjectWorkerByDate?: Maybe<Scalars['String']>;
  procoreProjectFolders?: Maybe<ProcoreProjectFoldersOutput>;
  procoreProjectList?: Maybe<ProcoreProjectListOutput>;
  procoreSubcontractorList?: Maybe<ProcoreSubcontractorListOutput>;
  translate?: Maybe<TranslateOutput>;
};


export type QueryAdminuArgs = {
  u: Scalars['String'];
};


export type QueryGetCompletionAuditArgs = {
  endDate: Scalars['String'];
  projectId: Scalars['String'];
  startDate: Scalars['String'];
};


export type QueryGetNewUsernameArgs = {
  name: Scalars['String'];
};


export type QueryGetPasswordHashArgs = {
  string: Scalars['String'];
};


export type QueryProcoreProjectFoldersArgs = {
  input: ProcoreProjectFoldersInput;
};


export type QueryProcoreProjectListArgs = {
  input?: Maybe<ProcoreProjectListInput>;
};


export type QueryProcoreSubcontractorListArgs = {
  input?: Maybe<ProcoreSubcontractorListInput>;
};


export type QueryTranslateArgs = {
  input?: Maybe<TranslateInput>;
};

/** query root */
export type Query_Root = {
   __typename?: 'query_root';
  /** retrieve the result of action: "actionName" */
  actionName?: Maybe<ActionName>;
  /** fetch data from the table: "address" */
  address: Array<Address>;
  /** fetch aggregated fields from the table: "address" */
  address_aggregate: Address_Aggregate;
  /** fetch data from the table: "address" using primary key columns */
  address_by_pk?: Maybe<Address>;
  adminu?: Maybe<Scalars['String']>;
  appNotificationCounts: AppNotificationCounts;
  /** fetch data from the table: "auto_email" */
  auto_email: Array<Auto_Email>;
  /** fetch aggregated fields from the table: "auto_email" */
  auto_email_aggregate: Auto_Email_Aggregate;
  /** fetch data from the table: "auto_email" using primary key columns */
  auto_email_by_pk?: Maybe<Auto_Email>;
  /** fetch data from the table: "auto_email_event_type" */
  auto_email_event_type: Array<Auto_Email_Event_Type>;
  /** fetch aggregated fields from the table: "auto_email_event_type" */
  auto_email_event_type_aggregate: Auto_Email_Event_Type_Aggregate;
  /** fetch data from the table: "auto_email_event_type" using primary key columns */
  auto_email_event_type_by_pk?: Maybe<Auto_Email_Event_Type>;
  /** fetch data from the table: "awareness_question" */
  awareness_question: Array<Awareness_Question>;
  /** fetch aggregated fields from the table: "awareness_question" */
  awareness_question_aggregate: Awareness_Question_Aggregate;
  /** fetch data from the table: "awareness_question" using primary key columns */
  awareness_question_by_pk?: Maybe<Awareness_Question>;
  /** fetch data from the table: "calendar" */
  calendar: Array<Calendar>;
  /** fetch aggregated fields from the table: "calendar" */
  calendar_aggregate: Calendar_Aggregate;
  /** fetch data from the table: "calendar" using primary key columns */
  calendar_by_pk?: Maybe<Calendar>;
  /** fetch data from the table: "certification" */
  certification: Array<Certification>;
  /** fetch aggregated fields from the table: "certification" */
  certification_aggregate: Certification_Aggregate;
  /** fetch data from the table: "certification" using primary key columns */
  certification_by_pk?: Maybe<Certification>;
  /** fetch data from the table: "chat" */
  chat: Array<Chat>;
  /** fetch aggregated fields from the table: "chat" */
  chat_aggregate: Chat_Aggregate;
  /** fetch data from the table: "chat" using primary key columns */
  chat_by_pk?: Maybe<Chat>;
  /** fetch data from the table: "chat_employee_preview" */
  chat_employee_preview: Array<Chat_Employee_Preview>;
  /** fetch aggregated fields from the table: "chat_employee_preview" */
  chat_employee_preview_aggregate: Chat_Employee_Preview_Aggregate;
  /** fetch data from the table: "chat_employee_preview" using primary key columns */
  chat_employee_preview_by_pk?: Maybe<Chat_Employee_Preview>;
  /** fetch data from the table: "chat_item" */
  chat_item: Array<Chat_Item>;
  /** fetch aggregated fields from the table: "chat_item" */
  chat_item_aggregate: Chat_Item_Aggregate;
  /** fetch data from the table: "chat_item_attachment" */
  chat_item_attachment: Array<Chat_Item_Attachment>;
  /** fetch aggregated fields from the table: "chat_item_attachment" */
  chat_item_attachment_aggregate: Chat_Item_Attachment_Aggregate;
  /** fetch data from the table: "chat_item_attachment" using primary key columns */
  chat_item_attachment_by_pk?: Maybe<Chat_Item_Attachment>;
  /** fetch data from the table: "chat_item" using primary key columns */
  chat_item_by_pk?: Maybe<Chat_Item>;
  /** fetch data from the table: "chat_item_type" */
  chat_item_type: Array<Chat_Item_Type>;
  /** fetch aggregated fields from the table: "chat_item_type" */
  chat_item_type_aggregate: Chat_Item_Type_Aggregate;
  /** fetch data from the table: "chat_item_type" using primary key columns */
  chat_item_type_by_pk?: Maybe<Chat_Item_Type>;
  /** fetch data from the table: "chat_member" */
  chat_member: Array<Chat_Member>;
  /** fetch aggregated fields from the table: "chat_member" */
  chat_member_aggregate: Chat_Member_Aggregate;
  /** fetch data from the table: "chat_member" using primary key columns */
  chat_member_by_pk?: Maybe<Chat_Member>;
  /** fetch data from the table: "checklist_item" */
  checklist_item: Array<Checklist_Item>;
  /** fetch aggregated fields from the table: "checklist_item" */
  checklist_item_aggregate: Checklist_Item_Aggregate;
  /** fetch data from the table: "checklist_item" using primary key columns */
  checklist_item_by_pk?: Maybe<Checklist_Item>;
  /** fetch data from the table: "checklist_item_config" */
  checklist_item_config: Array<Checklist_Item_Config>;
  /** fetch aggregated fields from the table: "checklist_item_config" */
  checklist_item_config_aggregate: Checklist_Item_Config_Aggregate;
  /** fetch data from the table: "checklist_item_config" using primary key columns */
  checklist_item_config_by_pk?: Maybe<Checklist_Item_Config>;
  /** fetch data from the table: "checklist_item_config_type" */
  checklist_item_config_type: Array<Checklist_Item_Config_Type>;
  /** fetch aggregated fields from the table: "checklist_item_config_type" */
  checklist_item_config_type_aggregate: Checklist_Item_Config_Type_Aggregate;
  /** fetch data from the table: "checklist_item_config_type" using primary key columns */
  checklist_item_config_type_by_pk?: Maybe<Checklist_Item_Config_Type>;
  /** fetch data from the table: "checklist_item_notify_email" */
  checklist_item_notify_email: Array<Checklist_Item_Notify_Email>;
  /** fetch aggregated fields from the table: "checklist_item_notify_email" */
  checklist_item_notify_email_aggregate: Checklist_Item_Notify_Email_Aggregate;
  /** fetch data from the table: "checklist_item_notify_email" using primary key columns */
  checklist_item_notify_email_by_pk?: Maybe<Checklist_Item_Notify_Email>;
  /** fetch data from the table: "checklist_item_type" */
  checklist_item_type: Array<Checklist_Item_Type>;
  /** fetch aggregated fields from the table: "checklist_item_type" */
  checklist_item_type_aggregate: Checklist_Item_Type_Aggregate;
  /** fetch data from the table: "checklist_item_type" using primary key columns */
  checklist_item_type_by_pk?: Maybe<Checklist_Item_Type>;
  /** fetch data from the table: "cleared_project_covid_certify_worker" */
  cleared_project_covid_certify_worker: Array<Cleared_Project_Covid_Certify_Worker>;
  /** fetch aggregated fields from the table: "cleared_project_covid_certify_worker" */
  cleared_project_covid_certify_worker_aggregate: Cleared_Project_Covid_Certify_Worker_Aggregate;
  /** fetch data from the table: "cleared_project_covid_certify_worker" using primary key columns */
  cleared_project_covid_certify_worker_by_pk?: Maybe<Cleared_Project_Covid_Certify_Worker>;
  /** fetch data from the table: "cleared_project_covid_tested_positive_worker" */
  cleared_project_covid_tested_positive_worker: Array<Cleared_Project_Covid_Tested_Positive_Worker>;
  /** fetch aggregated fields from the table: "cleared_project_covid_tested_positive_worker" */
  cleared_project_covid_tested_positive_worker_aggregate: Cleared_Project_Covid_Tested_Positive_Worker_Aggregate;
  /** fetch data from the table: "cleared_project_covid_tested_positive_worker" using primary key columns */
  cleared_project_covid_tested_positive_worker_by_pk?: Maybe<Cleared_Project_Covid_Tested_Positive_Worker>;
  clientState?: Maybe<ClientState>;
  confinedSpacePermitForm: ConfinedSpacePermitForm;
  /** fetch data from the table: "confined_space_permit" */
  confined_space_permit: Array<Confined_Space_Permit>;
  /** fetch aggregated fields from the table: "confined_space_permit" */
  confined_space_permit_aggregate: Confined_Space_Permit_Aggregate;
  /** fetch data from the table: "confined_space_permit" using primary key columns */
  confined_space_permit_by_pk?: Maybe<Confined_Space_Permit>;
  /** fetch data from the table: "confined_space_permit_monitoring_equipment" */
  confined_space_permit_monitoring_equipment: Array<Confined_Space_Permit_Monitoring_Equipment>;
  /** fetch aggregated fields from the table: "confined_space_permit_monitoring_equipment" */
  confined_space_permit_monitoring_equipment_aggregate: Confined_Space_Permit_Monitoring_Equipment_Aggregate;
  /** fetch data from the table: "confined_space_permit_monitoring_equipment" using primary key columns */
  confined_space_permit_monitoring_equipment_by_pk?: Maybe<Confined_Space_Permit_Monitoring_Equipment>;
  /** fetch data from the table: "confined_space_permit_reading" */
  confined_space_permit_reading: Array<Confined_Space_Permit_Reading>;
  /** fetch aggregated fields from the table: "confined_space_permit_reading" */
  confined_space_permit_reading_aggregate: Confined_Space_Permit_Reading_Aggregate;
  /** fetch data from the table: "confined_space_permit_reading" using primary key columns */
  confined_space_permit_reading_by_pk?: Maybe<Confined_Space_Permit_Reading>;
  /** fetch data from the table: "confined_space_permit_reading_custom_item" */
  confined_space_permit_reading_custom_item: Array<Confined_Space_Permit_Reading_Custom_Item>;
  /** fetch aggregated fields from the table: "confined_space_permit_reading_custom_item" */
  confined_space_permit_reading_custom_item_aggregate: Confined_Space_Permit_Reading_Custom_Item_Aggregate;
  /** fetch data from the table: "confined_space_permit_reading_custom_item" using primary key columns */
  confined_space_permit_reading_custom_item_by_pk?: Maybe<Confined_Space_Permit_Reading_Custom_Item>;
  crewSelfCertifyForm: CrewSelfCertifyForm;
  dailyReportForm: DailyReportForm;
  /** fetch data from the table: "daily_copy" */
  daily_copy: Array<Daily_Copy>;
  /** fetch aggregated fields from the table: "daily_copy" */
  daily_copy_aggregate: Daily_Copy_Aggregate;
  /** fetch data from the table: "daily_copy" using primary key columns */
  daily_copy_by_pk?: Maybe<Daily_Copy>;
  /** fetch data from the table: "daily_copy_section" */
  daily_copy_section: Array<Daily_Copy_Section>;
  /** fetch aggregated fields from the table: "daily_copy_section" */
  daily_copy_section_aggregate: Daily_Copy_Section_Aggregate;
  /** fetch data from the table: "daily_copy_section" using primary key columns */
  daily_copy_section_by_pk?: Maybe<Daily_Copy_Section>;
  /** execute function "daily_hours_to_date" which returns "s_daily_hours_to_date" */
  daily_hours_to_date: Array<S_Daily_Hours_To_Date>;
  /** execute function "daily_hours_to_date" and query aggregates on result of table type "s_daily_hours_to_date" */
  daily_hours_to_date_aggregate: S_Daily_Hours_To_Date_Aggregate;
  /** fetch data from the table: "daily_note" */
  daily_note: Array<Daily_Note>;
  /** fetch aggregated fields from the table: "daily_note" */
  daily_note_aggregate: Daily_Note_Aggregate;
  /** fetch data from the table: "daily_note" using primary key columns */
  daily_note_by_pk?: Maybe<Daily_Note>;
  /** fetch data from the table: "daily_note_sub" */
  daily_note_sub: Array<Daily_Note_Sub>;
  /** fetch aggregated fields from the table: "daily_note_sub" */
  daily_note_sub_aggregate: Daily_Note_Sub_Aggregate;
  /** fetch data from the table: "daily_note_sub" using primary key columns */
  daily_note_sub_by_pk?: Maybe<Daily_Note_Sub>;
  /** fetch data from the table: "daily_note_tag" */
  daily_note_tag: Array<Daily_Note_Tag>;
  /** fetch aggregated fields from the table: "daily_note_tag" */
  daily_note_tag_aggregate: Daily_Note_Tag_Aggregate;
  /** fetch data from the table: "daily_note_tag" using primary key columns */
  daily_note_tag_by_pk?: Maybe<Daily_Note_Tag>;
  /** fetch data from the table: "daily_report" */
  daily_report: Array<Daily_Report>;
  /** fetch aggregated fields from the table: "daily_report" */
  daily_report_aggregate: Daily_Report_Aggregate;
  /** fetch data from the table: "daily_report" using primary key columns */
  daily_report_by_pk?: Maybe<Daily_Report>;
  /** fetch data from the table: "daily_report_completed" */
  daily_report_completed: Array<Daily_Report_Completed>;
  /** fetch aggregated fields from the table: "daily_report_completed" */
  daily_report_completed_aggregate: Daily_Report_Completed_Aggregate;
  /** fetch data from the table: "daily_report_completed" using primary key columns */
  daily_report_completed_by_pk?: Maybe<Daily_Report_Completed>;
  /** fetch data from the table: "daily_report_event" */
  daily_report_event: Array<Daily_Report_Event>;
  /** fetch aggregated fields from the table: "daily_report_event" */
  daily_report_event_aggregate: Daily_Report_Event_Aggregate;
  /** fetch data from the table: "daily_report_event" using primary key columns */
  daily_report_event_by_pk?: Maybe<Daily_Report_Event>;
  /** fetch data from the table: "daily_report_event_type" */
  daily_report_event_type: Array<Daily_Report_Event_Type>;
  /** fetch aggregated fields from the table: "daily_report_event_type" */
  daily_report_event_type_aggregate: Daily_Report_Event_Type_Aggregate;
  /** fetch data from the table: "daily_report_event_type" using primary key columns */
  daily_report_event_type_by_pk?: Maybe<Daily_Report_Event_Type>;
  /** fetch data from the table: "daily_report_project_worker" */
  daily_report_project_worker: Array<Daily_Report_Project_Worker>;
  /** fetch aggregated fields from the table: "daily_report_project_worker" */
  daily_report_project_worker_aggregate: Daily_Report_Project_Worker_Aggregate;
  /** fetch data from the table: "daily_report_project_worker" using primary key columns */
  daily_report_project_worker_by_pk?: Maybe<Daily_Report_Project_Worker>;
  /** fetch data from the table: "daily_schedule_event" */
  daily_schedule_event: Array<Daily_Schedule_Event>;
  /** fetch aggregated fields from the table: "daily_schedule_event" */
  daily_schedule_event_aggregate: Daily_Schedule_Event_Aggregate;
  /** fetch data from the table: "daily_schedule_event" using primary key columns */
  daily_schedule_event_by_pk?: Maybe<Daily_Schedule_Event>;
  /** fetch data from the table: "daily_schedule_event_sub" */
  daily_schedule_event_sub: Array<Daily_Schedule_Event_Sub>;
  /** fetch aggregated fields from the table: "daily_schedule_event_sub" */
  daily_schedule_event_sub_aggregate: Daily_Schedule_Event_Sub_Aggregate;
  /** fetch data from the table: "daily_schedule_event_sub" using primary key columns */
  daily_schedule_event_sub_by_pk?: Maybe<Daily_Schedule_Event_Sub>;
  /** fetch data from the table: "daily_schedule_event_type" */
  daily_schedule_event_type: Array<Daily_Schedule_Event_Type>;
  /** fetch aggregated fields from the table: "daily_schedule_event_type" */
  daily_schedule_event_type_aggregate: Daily_Schedule_Event_Type_Aggregate;
  /** fetch data from the table: "daily_schedule_event_type" using primary key columns */
  daily_schedule_event_type_by_pk?: Maybe<Daily_Schedule_Event_Type>;
  /** fetch data from the table: "daily_weather_observation" */
  daily_weather_observation: Array<Daily_Weather_Observation>;
  /** fetch aggregated fields from the table: "daily_weather_observation" */
  daily_weather_observation_aggregate: Daily_Weather_Observation_Aggregate;
  /** fetch data from the table: "daily_weather_observation" using primary key columns */
  daily_weather_observation_by_pk?: Maybe<Daily_Weather_Observation>;
  /** fetch data from the table: "daily_weather_observation_sub" */
  daily_weather_observation_sub: Array<Daily_Weather_Observation_Sub>;
  /** fetch aggregated fields from the table: "daily_weather_observation_sub" */
  daily_weather_observation_sub_aggregate: Daily_Weather_Observation_Sub_Aggregate;
  /** fetch data from the table: "daily_weather_observation_sub" using primary key columns */
  daily_weather_observation_sub_by_pk?: Maybe<Daily_Weather_Observation_Sub>;
  /** fetch data from the table: "daily_work_log" */
  daily_work_log: Array<Daily_Work_Log>;
  /** fetch aggregated fields from the table: "daily_work_log" */
  daily_work_log_aggregate: Daily_Work_Log_Aggregate;
  /** fetch data from the table: "daily_work_log" using primary key columns */
  daily_work_log_by_pk?: Maybe<Daily_Work_Log>;
  /** fetch data from the table: "daily_work_log_comment" */
  daily_work_log_comment: Array<Daily_Work_Log_Comment>;
  /** fetch aggregated fields from the table: "daily_work_log_comment" */
  daily_work_log_comment_aggregate: Daily_Work_Log_Comment_Aggregate;
  /** fetch data from the table: "daily_work_log_comment" using primary key columns */
  daily_work_log_comment_by_pk?: Maybe<Daily_Work_Log_Comment>;
  /** fetch data from the table: "daily_work_log_comment_email" */
  daily_work_log_comment_email: Array<Daily_Work_Log_Comment_Email>;
  /** fetch aggregated fields from the table: "daily_work_log_comment_email" */
  daily_work_log_comment_email_aggregate: Daily_Work_Log_Comment_Email_Aggregate;
  /** fetch data from the table: "daily_work_log_comment_email" using primary key columns */
  daily_work_log_comment_email_by_pk?: Maybe<Daily_Work_Log_Comment_Email>;
  /** fetch data from the table: "daily_work_log_tag" */
  daily_work_log_tag: Array<Daily_Work_Log_Tag>;
  /** fetch aggregated fields from the table: "daily_work_log_tag" */
  daily_work_log_tag_aggregate: Daily_Work_Log_Tag_Aggregate;
  /** fetch data from the table: "daily_work_log_tag" using primary key columns */
  daily_work_log_tag_by_pk?: Maybe<Daily_Work_Log_Tag>;
  /** fetch data from the table: "daily_work_log_worker" */
  daily_work_log_worker: Array<Daily_Work_Log_Worker>;
  /** fetch aggregated fields from the table: "daily_work_log_worker" */
  daily_work_log_worker_aggregate: Daily_Work_Log_Worker_Aggregate;
  /** fetch data from the table: "daily_work_log_worker" using primary key columns */
  daily_work_log_worker_by_pk?: Maybe<Daily_Work_Log_Worker>;
  /** execute function "date_daily_log_submittals" which returns "s_sub_daily_log_submittal" */
  date_daily_log_submittals: Array<S_Sub_Daily_Log_Submittal>;
  /** execute function "date_daily_log_submittals" and query aggregates on result of table type "s_sub_daily_log_submittal" */
  date_daily_log_submittals_aggregate: S_Sub_Daily_Log_Submittal_Aggregate;
  /** fetch data from the table: "delivery" */
  delivery: Array<Delivery>;
  /** fetch aggregated fields from the table: "delivery" */
  delivery_aggregate: Delivery_Aggregate;
  /** fetch data from the table: "delivery" using primary key columns */
  delivery_by_pk?: Maybe<Delivery>;
  /** fetch data from the table: "delivery_calendar" */
  delivery_calendar: Array<Delivery_Calendar>;
  /** fetch aggregated fields from the table: "delivery_calendar" */
  delivery_calendar_aggregate: Delivery_Calendar_Aggregate;
  /** fetch data from the table: "delivery_calendar" using primary key columns */
  delivery_calendar_by_pk?: Maybe<Delivery_Calendar>;
  /** fetch data from the table: "dig_permit" */
  dig_permit: Array<Dig_Permit>;
  /** fetch aggregated fields from the table: "dig_permit" */
  dig_permit_aggregate: Dig_Permit_Aggregate;
  /** fetch data from the table: "dig_permit" using primary key columns */
  dig_permit_by_pk?: Maybe<Dig_Permit>;
  /** fetch data from the table: "dig_permit_select_option" */
  dig_permit_select_option: Array<Dig_Permit_Select_Option>;
  /** fetch aggregated fields from the table: "dig_permit_select_option" */
  dig_permit_select_option_aggregate: Dig_Permit_Select_Option_Aggregate;
  /** fetch data from the table: "dig_permit_select_option" using primary key columns */
  dig_permit_select_option_by_pk?: Maybe<Dig_Permit_Select_Option>;
  /** fetch data from the table: "dig_permit_ticket" */
  dig_permit_ticket: Array<Dig_Permit_Ticket>;
  /** fetch aggregated fields from the table: "dig_permit_ticket" */
  dig_permit_ticket_aggregate: Dig_Permit_Ticket_Aggregate;
  /** fetch data from the table: "dig_permit_ticket" using primary key columns */
  dig_permit_ticket_by_pk?: Maybe<Dig_Permit_Ticket>;
  dummy?: Maybe<Scalars['String']>;
  /** execute function "dummy_query" which returns "state" */
  dummy_query: Array<State>;
  /** execute function "dummy_query" and query aggregates on result of table type "state" */
  dummy_query_aggregate: State_Aggregate;
  employeeData?: Maybe<EmployeeData>;
  /** fetch data from the table: "employee_title" */
  employee_title: Array<Employee_Title>;
  /** fetch aggregated fields from the table: "employee_title" */
  employee_title_aggregate: Employee_Title_Aggregate;
  /** fetch data from the table: "employee_title" using primary key columns */
  employee_title_by_pk?: Maybe<Employee_Title>;
  /** fetch data from the table: "expo_push_token" */
  expo_push_token: Array<Expo_Push_Token>;
  /** fetch aggregated fields from the table: "expo_push_token" */
  expo_push_token_aggregate: Expo_Push_Token_Aggregate;
  /** fetch data from the table: "expo_push_token" using primary key columns */
  expo_push_token_by_pk?: Maybe<Expo_Push_Token>;
  /** fetch data from the table: "feedback" */
  feedback: Array<Feedback>;
  /** fetch aggregated fields from the table: "feedback" */
  feedback_aggregate: Feedback_Aggregate;
  /** fetch data from the table: "feedback" using primary key columns */
  feedback_by_pk?: Maybe<Feedback>;
  /** fetch data from the table: "forgot_password_key" */
  forgot_password_key: Array<Forgot_Password_Key>;
  /** fetch aggregated fields from the table: "forgot_password_key" */
  forgot_password_key_aggregate: Forgot_Password_Key_Aggregate;
  /** fetch data from the table: "forgot_password_key" using primary key columns */
  forgot_password_key_by_pk?: Maybe<Forgot_Password_Key>;
  /** fetch data from the table: "gc_daily_checklist_item" */
  gc_daily_checklist_item: Array<Gc_Daily_Checklist_Item>;
  /** fetch aggregated fields from the table: "gc_daily_checklist_item" */
  gc_daily_checklist_item_aggregate: Gc_Daily_Checklist_Item_Aggregate;
  /** fetch data from the table: "gc_daily_checklist_item" using primary key columns */
  gc_daily_checklist_item_by_pk?: Maybe<Gc_Daily_Checklist_Item>;
  /** fetch data from the table: "gc_disabled_project_subcontractor" */
  gc_disabled_project_subcontractor: Array<Gc_Disabled_Project_Subcontractor>;
  /** fetch aggregated fields from the table: "gc_disabled_project_subcontractor" */
  gc_disabled_project_subcontractor_aggregate: Gc_Disabled_Project_Subcontractor_Aggregate;
  /** fetch data from the table: "gc_disabled_project_subcontractor" using primary key columns */
  gc_disabled_project_subcontractor_by_pk?: Maybe<Gc_Disabled_Project_Subcontractor>;
  /** fetch data from the table: "general_contractor" */
  general_contractor: Array<General_Contractor>;
  /** fetch aggregated fields from the table: "general_contractor" */
  general_contractor_aggregate: General_Contractor_Aggregate;
  /** fetch data from the table: "general_contractor" using primary key columns */
  general_contractor_by_pk?: Maybe<General_Contractor>;
  /** fetch data from the table: "general_contractor_employee" */
  general_contractor_employee: Array<General_Contractor_Employee>;
  /** fetch aggregated fields from the table: "general_contractor_employee" */
  general_contractor_employee_aggregate: General_Contractor_Employee_Aggregate;
  /** fetch data from the table: "general_contractor_employee" using primary key columns */
  general_contractor_employee_by_pk?: Maybe<General_Contractor_Employee>;
  getClientCreateDailyReportInformation: GetClientCreateDailyReportInformation;
  getClientCreateToolboxTalksData: GetClientCreateToolboxTalksData;
  getClientCurrentWorkerProject: GetClientCurrentWorkerProject;
  getCompletionAudit?: Maybe<CompletionAuditOutput>;
  getNewUsername?: Maybe<Scalars['String']>;
  getPasswordHash?: Maybe<Scalars['String']>;
  getProjectWorkerByDate?: Maybe<Scalars['String']>;
  /** execute function "get_awareness_question" which returns "awareness_question" */
  get_awareness_question: Array<Awareness_Question>;
  /** execute function "get_awareness_question" and query aggregates on result of table type "awareness_question" */
  get_awareness_question_aggregate: Awareness_Question_Aggregate;
  /** execute function "get_random_incident_example" which returns "incident_example" */
  get_random_incident_example: Array<Incident_Example>;
  /** execute function "get_random_incident_example" and query aggregates on result of table type "incident_example" */
  get_random_incident_example_aggregate: Incident_Example_Aggregate;
  /** fetch data from the table: "government_identification" */
  government_identification: Array<Government_Identification>;
  /** fetch aggregated fields from the table: "government_identification" */
  government_identification_aggregate: Government_Identification_Aggregate;
  /** fetch data from the table: "government_identification" using primary key columns */
  government_identification_by_pk?: Maybe<Government_Identification>;
  /** fetch data from the table: "hot_work_permit" */
  hot_work_permit: Array<Hot_Work_Permit>;
  /** fetch aggregated fields from the table: "hot_work_permit" */
  hot_work_permit_aggregate: Hot_Work_Permit_Aggregate;
  /** fetch data from the table: "hot_work_permit" using primary key columns */
  hot_work_permit_by_pk?: Maybe<Hot_Work_Permit>;
  /** fetch data from the table: "hourly_forecast" */
  hourly_forecast: Array<Hourly_Forecast>;
  /** fetch aggregated fields from the table: "hourly_forecast" */
  hourly_forecast_aggregate: Hourly_Forecast_Aggregate;
  /** fetch data from the table: "hourly_forecast" using primary key columns */
  hourly_forecast_by_pk?: Maybe<Hourly_Forecast>;
  /** fetch data from the table: "image" */
  image: Array<Image>;
  /** fetch aggregated fields from the table: "image" */
  image_aggregate: Image_Aggregate;
  /** fetch data from the table: "image" using primary key columns */
  image_by_pk?: Maybe<Image>;
  /** fetch data from the table: "image_type" */
  image_type: Array<Image_Type>;
  /** fetch aggregated fields from the table: "image_type" */
  image_type_aggregate: Image_Type_Aggregate;
  /** fetch data from the table: "image_type" using primary key columns */
  image_type_by_pk?: Maybe<Image_Type>;
  /** fetch data from the table: "incident_example" */
  incident_example: Array<Incident_Example>;
  /** fetch aggregated fields from the table: "incident_example" */
  incident_example_aggregate: Incident_Example_Aggregate;
  /** fetch data from the table: "incident_example" using primary key columns */
  incident_example_by_pk?: Maybe<Incident_Example>;
  /** fetch data from the table: "invite" */
  invite: Array<Invite>;
  /** fetch aggregated fields from the table: "invite" */
  invite_aggregate: Invite_Aggregate;
  /** fetch data from the table: "invite" using primary key columns */
  invite_by_pk?: Maybe<Invite>;
  /** fetch data from the table: "lang_code" */
  lang_code: Array<Lang_Code>;
  /** fetch aggregated fields from the table: "lang_code" */
  lang_code_aggregate: Lang_Code_Aggregate;
  /** fetch data from the table: "lang_code" using primary key columns */
  lang_code_by_pk?: Maybe<Lang_Code>;
  languageCode?: Maybe<Scalars['String']>;
  /** fetch data from the table: "notification_badge_count" */
  notification_badge_count: Array<Notification_Badge_Count>;
  /** fetch aggregated fields from the table: "notification_badge_count" */
  notification_badge_count_aggregate: Notification_Badge_Count_Aggregate;
  /** fetch data from the table: "notification_badge_count" using primary key columns */
  notification_badge_count_by_pk?: Maybe<Notification_Badge_Count>;
  /** fetch data from the table: "orientation" */
  orientation: Array<Orientation>;
  /** fetch aggregated fields from the table: "orientation" */
  orientation_aggregate: Orientation_Aggregate;
  /** fetch data from the table: "orientation" using primary key columns */
  orientation_by_pk?: Maybe<Orientation>;
  /** fetch data from the table: "orientation_slide" */
  orientation_slide: Array<Orientation_Slide>;
  /** fetch aggregated fields from the table: "orientation_slide" */
  orientation_slide_aggregate: Orientation_Slide_Aggregate;
  /** fetch data from the table: "orientation_slide" using primary key columns */
  orientation_slide_by_pk?: Maybe<Orientation_Slide>;
  /** fetch data from the table: "pdf" */
  pdf: Array<Pdf>;
  /** fetch aggregated fields from the table: "pdf" */
  pdf_aggregate: Pdf_Aggregate;
  /** fetch data from the table: "pdf" using primary key columns */
  pdf_by_pk?: Maybe<Pdf>;
  /** fetch data from the table: "permit" */
  permit: Array<Permit>;
  /** fetch aggregated fields from the table: "permit" */
  permit_aggregate: Permit_Aggregate;
  /** fetch data from the table: "permit" using primary key columns */
  permit_by_pk?: Maybe<Permit>;
  /** fetch data from the table: "permit_checklist_item" */
  permit_checklist_item: Array<Permit_Checklist_Item>;
  /** fetch aggregated fields from the table: "permit_checklist_item" */
  permit_checklist_item_aggregate: Permit_Checklist_Item_Aggregate;
  /** fetch data from the table: "permit_checklist_item" using primary key columns */
  permit_checklist_item_by_pk?: Maybe<Permit_Checklist_Item>;
  /** fetch data from the table: "permit_history" */
  permit_history: Array<Permit_History>;
  /** fetch aggregated fields from the table: "permit_history" */
  permit_history_aggregate: Permit_History_Aggregate;
  /** fetch data from the table: "permit_history" using primary key columns */
  permit_history_by_pk?: Maybe<Permit_History>;
  /** fetch data from the table: "permit_project_worker" */
  permit_project_worker: Array<Permit_Project_Worker>;
  /** fetch aggregated fields from the table: "permit_project_worker" */
  permit_project_worker_aggregate: Permit_Project_Worker_Aggregate;
  /** fetch data from the table: "permit_project_worker" using primary key columns */
  permit_project_worker_by_pk?: Maybe<Permit_Project_Worker>;
  /** fetch data from the table: "permit_sign_in_image" */
  permit_sign_in_image: Array<Permit_Sign_In_Image>;
  /** fetch aggregated fields from the table: "permit_sign_in_image" */
  permit_sign_in_image_aggregate: Permit_Sign_In_Image_Aggregate;
  /** fetch data from the table: "permit_sign_in_image" using primary key columns */
  permit_sign_in_image_by_pk?: Maybe<Permit_Sign_In_Image>;
  /** fetch data from the table: "permit_type" */
  permit_type: Array<Permit_Type>;
  /** fetch aggregated fields from the table: "permit_type" */
  permit_type_aggregate: Permit_Type_Aggregate;
  /** fetch data from the table: "permit_type" using primary key columns */
  permit_type_by_pk?: Maybe<Permit_Type>;
  /** fetch data from the table: "ppe_category" */
  ppe_category: Array<Ppe_Category>;
  /** fetch aggregated fields from the table: "ppe_category" */
  ppe_category_aggregate: Ppe_Category_Aggregate;
  /** fetch data from the table: "ppe_category" using primary key columns */
  ppe_category_by_pk?: Maybe<Ppe_Category>;
  /** fetch data from the table: "ppe_type" */
  ppe_type: Array<Ppe_Type>;
  /** fetch aggregated fields from the table: "ppe_type" */
  ppe_type_aggregate: Ppe_Type_Aggregate;
  /** fetch data from the table: "ppe_type" using primary key columns */
  ppe_type_by_pk?: Maybe<Ppe_Type>;
  procoreProjectFolders?: Maybe<ProcoreProjectFoldersOutput>;
  procoreProjectList?: Maybe<ProcoreProjectListOutput>;
  procoreSubcontractorList?: Maybe<ProcoreSubcontractorListOutput>;
  /** fetch data from the table: "procore_auth_data" */
  procore_auth_data: Array<Procore_Auth_Data>;
  /** fetch aggregated fields from the table: "procore_auth_data" */
  procore_auth_data_aggregate: Procore_Auth_Data_Aggregate;
  /** fetch data from the table: "procore_auth_data" using primary key columns */
  procore_auth_data_by_pk?: Maybe<Procore_Auth_Data>;
  /** fetch data from the table: "procore_project_data" */
  procore_project_data: Array<Procore_Project_Data>;
  /** fetch aggregated fields from the table: "procore_project_data" */
  procore_project_data_aggregate: Procore_Project_Data_Aggregate;
  /** fetch data from the table: "procore_project_data" using primary key columns */
  procore_project_data_by_pk?: Maybe<Procore_Project_Data>;
  /** fetch data from the table: "procore_service_account" */
  procore_service_account: Array<Procore_Service_Account>;
  /** fetch aggregated fields from the table: "procore_service_account" */
  procore_service_account_aggregate: Procore_Service_Account_Aggregate;
  /** fetch data from the table: "procore_service_account" using primary key columns */
  procore_service_account_by_pk?: Maybe<Procore_Service_Account>;
  /** fetch data from the table: "procore_subcontractor" */
  procore_subcontractor: Array<Procore_Subcontractor>;
  /** fetch aggregated fields from the table: "procore_subcontractor" */
  procore_subcontractor_aggregate: Procore_Subcontractor_Aggregate;
  /** fetch data from the table: "procore_subcontractor" using primary key columns */
  procore_subcontractor_by_pk?: Maybe<Procore_Subcontractor>;
  /** fetch data from the table: "project" */
  project: Array<Project>;
  /** fetch aggregated fields from the table: "project" */
  project_aggregate: Project_Aggregate;
  /** fetch data from the table: "project" using primary key columns */
  project_by_pk?: Maybe<Project>;
  /** fetch data from the table: "project_completion_automated_notification" */
  project_completion_automated_notification: Array<Project_Completion_Automated_Notification>;
  /** fetch aggregated fields from the table: "project_completion_automated_notification" */
  project_completion_automated_notification_aggregate: Project_Completion_Automated_Notification_Aggregate;
  /** fetch data from the table: "project_completion_automated_notification" using primary key columns */
  project_completion_automated_notification_by_pk?: Maybe<Project_Completion_Automated_Notification>;
  /** fetch data from the table: "project_covid_certify_worker" */
  project_covid_certify_worker: Array<Project_Covid_Certify_Worker>;
  /** fetch aggregated fields from the table: "project_covid_certify_worker" */
  project_covid_certify_worker_aggregate: Project_Covid_Certify_Worker_Aggregate;
  /** fetch data from the table: "project_covid_certify_worker_answer" */
  project_covid_certify_worker_answer: Array<Project_Covid_Certify_Worker_Answer>;
  /** fetch aggregated fields from the table: "project_covid_certify_worker_answer" */
  project_covid_certify_worker_answer_aggregate: Project_Covid_Certify_Worker_Answer_Aggregate;
  /** fetch data from the table: "project_covid_certify_worker_answer" using primary key columns */
  project_covid_certify_worker_answer_by_pk?: Maybe<Project_Covid_Certify_Worker_Answer>;
  /** fetch data from the table: "project_covid_certify_worker" using primary key columns */
  project_covid_certify_worker_by_pk?: Maybe<Project_Covid_Certify_Worker>;
  /** fetch data from the table: "project_covid_config" */
  project_covid_config: Array<Project_Covid_Config>;
  /** fetch aggregated fields from the table: "project_covid_config" */
  project_covid_config_aggregate: Project_Covid_Config_Aggregate;
  /** fetch data from the table: "project_covid_config" using primary key columns */
  project_covid_config_by_pk?: Maybe<Project_Covid_Config>;
  /** fetch data from the table: "project_covid_crew_certify" */
  project_covid_crew_certify: Array<Project_Covid_Crew_Certify>;
  /** fetch aggregated fields from the table: "project_covid_crew_certify" */
  project_covid_crew_certify_aggregate: Project_Covid_Crew_Certify_Aggregate;
  /** fetch data from the table: "project_covid_crew_certify" using primary key columns */
  project_covid_crew_certify_by_pk?: Maybe<Project_Covid_Crew_Certify>;
  /** fetch data from the table: "project_covid_guest_certification" */
  project_covid_guest_certification: Array<Project_Covid_Guest_Certification>;
  /** fetch aggregated fields from the table: "project_covid_guest_certification" */
  project_covid_guest_certification_aggregate: Project_Covid_Guest_Certification_Aggregate;
  /** fetch data from the table: "project_covid_guest_certification_answer" */
  project_covid_guest_certification_answer: Array<Project_Covid_Guest_Certification_Answer>;
  /** fetch aggregated fields from the table: "project_covid_guest_certification_answer" */
  project_covid_guest_certification_answer_aggregate: Project_Covid_Guest_Certification_Answer_Aggregate;
  /** fetch data from the table: "project_covid_guest_certification_answer" using primary key columns */
  project_covid_guest_certification_answer_by_pk?: Maybe<Project_Covid_Guest_Certification_Answer>;
  /** fetch data from the table: "project_covid_guest_certification" using primary key columns */
  project_covid_guest_certification_by_pk?: Maybe<Project_Covid_Guest_Certification>;
  /** fetch data from the table: "project_covid_notify_employee" */
  project_covid_notify_employee: Array<Project_Covid_Notify_Employee>;
  /** fetch aggregated fields from the table: "project_covid_notify_employee" */
  project_covid_notify_employee_aggregate: Project_Covid_Notify_Employee_Aggregate;
  /** fetch data from the table: "project_covid_notify_employee" using primary key columns */
  project_covid_notify_employee_by_pk?: Maybe<Project_Covid_Notify_Employee>;
  /** fetch data from the table: "project_covid_tested_positive_answer" */
  project_covid_tested_positive_answer: Array<Project_Covid_Tested_Positive_Answer>;
  /** fetch aggregated fields from the table: "project_covid_tested_positive_answer" */
  project_covid_tested_positive_answer_aggregate: Project_Covid_Tested_Positive_Answer_Aggregate;
  /** fetch data from the table: "project_covid_tested_positive_answer" using primary key columns */
  project_covid_tested_positive_answer_by_pk?: Maybe<Project_Covid_Tested_Positive_Answer>;
  /** fetch data from the table: "project_covid_tested_positive_question" */
  project_covid_tested_positive_question: Array<Project_Covid_Tested_Positive_Question>;
  /** fetch aggregated fields from the table: "project_covid_tested_positive_question" */
  project_covid_tested_positive_question_aggregate: Project_Covid_Tested_Positive_Question_Aggregate;
  /** fetch data from the table: "project_covid_tested_positive_question" using primary key columns */
  project_covid_tested_positive_question_by_pk?: Maybe<Project_Covid_Tested_Positive_Question>;
  /** fetch data from the table: "project_covid_tested_positive_worker" */
  project_covid_tested_positive_worker: Array<Project_Covid_Tested_Positive_Worker>;
  /** fetch aggregated fields from the table: "project_covid_tested_positive_worker" */
  project_covid_tested_positive_worker_aggregate: Project_Covid_Tested_Positive_Worker_Aggregate;
  /** fetch data from the table: "project_covid_tested_positive_worker" using primary key columns */
  project_covid_tested_positive_worker_by_pk?: Maybe<Project_Covid_Tested_Positive_Worker>;
  /** fetch data from the table: "project_covid_yes_no_question" */
  project_covid_yes_no_question: Array<Project_Covid_Yes_No_Question>;
  /** fetch aggregated fields from the table: "project_covid_yes_no_question" */
  project_covid_yes_no_question_aggregate: Project_Covid_Yes_No_Question_Aggregate;
  /** fetch data from the table: "project_covid_yes_no_question" using primary key columns */
  project_covid_yes_no_question_by_pk?: Maybe<Project_Covid_Yes_No_Question>;
  /** fetch data from the table: "project_crew" */
  project_crew: Array<Project_Crew>;
  /** fetch aggregated fields from the table: "project_crew" */
  project_crew_aggregate: Project_Crew_Aggregate;
  /** fetch data from the table: "project_crew" using primary key columns */
  project_crew_by_pk?: Maybe<Project_Crew>;
  /** fetch data from the table: "project_employee" */
  project_employee: Array<Project_Employee>;
  /** fetch aggregated fields from the table: "project_employee" */
  project_employee_aggregate: Project_Employee_Aggregate;
  /** fetch data from the table: "project_employee" using primary key columns */
  project_employee_by_pk?: Maybe<Project_Employee>;
  /** fetch data from the table: "project_hazard" */
  project_hazard: Array<Project_Hazard>;
  /** fetch aggregated fields from the table: "project_hazard" */
  project_hazard_aggregate: Project_Hazard_Aggregate;
  /** fetch data from the table: "project_hazard" using primary key columns */
  project_hazard_by_pk?: Maybe<Project_Hazard>;
  /** fetch data from the table: "project_hazard_subcontractor" */
  project_hazard_subcontractor: Array<Project_Hazard_Subcontractor>;
  /** fetch aggregated fields from the table: "project_hazard_subcontractor" */
  project_hazard_subcontractor_aggregate: Project_Hazard_Subcontractor_Aggregate;
  /** fetch data from the table: "project_hazard_subcontractor" using primary key columns */
  project_hazard_subcontractor_by_pk?: Maybe<Project_Hazard_Subcontractor>;
  /** fetch data from the table: "project_post" */
  project_post: Array<Project_Post>;
  /** fetch data from the table: "project_post_GCs" */
  project_post_GCs: Array<Project_Post_GCs>;
  /** fetch aggregated fields from the table: "project_post_GCs" */
  project_post_GCs_aggregate: Project_Post_GCs_Aggregate;
  /** fetch data from the table: "project_post_GCs" using primary key columns */
  project_post_GCs_by_pk?: Maybe<Project_Post_GCs>;
  /** fetch aggregated fields from the table: "project_post" */
  project_post_aggregate: Project_Post_Aggregate;
  /** fetch data from the table: "project_post" using primary key columns */
  project_post_by_pk?: Maybe<Project_Post>;
  /** fetch data from the table: "project_post_workers" */
  project_post_workers: Array<Project_Post_Workers>;
  /** fetch aggregated fields from the table: "project_post_workers" */
  project_post_workers_aggregate: Project_Post_Workers_Aggregate;
  /** fetch data from the table: "project_post_workers" using primary key columns */
  project_post_workers_by_pk?: Maybe<Project_Post_Workers>;
  /** fetch data from the table: "project_report_settings" */
  project_report_settings: Array<Project_Report_Settings>;
  /** fetch aggregated fields from the table: "project_report_settings" */
  project_report_settings_aggregate: Project_Report_Settings_Aggregate;
  /** fetch data from the table: "project_report_settings" using primary key columns */
  project_report_settings_by_pk?: Maybe<Project_Report_Settings>;
  /** fetch data from the table: "project_site_notification" */
  project_site_notification: Array<Project_Site_Notification>;
  /** fetch aggregated fields from the table: "project_site_notification" */
  project_site_notification_aggregate: Project_Site_Notification_Aggregate;
  /** fetch data from the table: "project_site_notification" using primary key columns */
  project_site_notification_by_pk?: Maybe<Project_Site_Notification>;
  /** fetch data from the table: "project_subcontractor" */
  project_subcontractor: Array<Project_Subcontractor>;
  /** fetch aggregated fields from the table: "project_subcontractor" */
  project_subcontractor_aggregate: Project_Subcontractor_Aggregate;
  /** fetch data from the table: "project_subcontractor" using primary key columns */
  project_subcontractor_by_pk?: Maybe<Project_Subcontractor>;
  /** fetch data from the table: "project_subcontractor_onsite_update" */
  project_subcontractor_onsite_update: Array<Project_Subcontractor_Onsite_Update>;
  /** fetch aggregated fields from the table: "project_subcontractor_onsite_update" */
  project_subcontractor_onsite_update_aggregate: Project_Subcontractor_Onsite_Update_Aggregate;
  /** fetch data from the table: "project_subcontractor_onsite_update" using primary key columns */
  project_subcontractor_onsite_update_by_pk?: Maybe<Project_Subcontractor_Onsite_Update>;
  /** fetch data from the table: "project_subcontractor_report_settings" */
  project_subcontractor_report_settings: Array<Project_Subcontractor_Report_Settings>;
  /** fetch aggregated fields from the table: "project_subcontractor_report_settings" */
  project_subcontractor_report_settings_aggregate: Project_Subcontractor_Report_Settings_Aggregate;
  /** fetch data from the table: "project_subcontractor_report_settings" using primary key columns */
  project_subcontractor_report_settings_by_pk?: Maybe<Project_Subcontractor_Report_Settings>;
  /** fetch data from the table: "project_user" */
  project_user: Array<Project_User>;
  /** fetch aggregated fields from the table: "project_user" */
  project_user_aggregate: Project_User_Aggregate;
  /** fetch data from the table: "project_user" using primary key columns */
  project_user_by_pk?: Maybe<Project_User>;
  /** fetch data from the table: "project_worker" */
  project_worker: Array<Project_Worker>;
  /** fetch aggregated fields from the table: "project_worker" */
  project_worker_aggregate: Project_Worker_Aggregate;
  /** fetch data from the table: "project_worker" using primary key columns */
  project_worker_by_pk?: Maybe<Project_Worker>;
  /** fetch data from the table: "project_worker_competency" */
  project_worker_competency: Array<Project_Worker_Competency>;
  /** fetch aggregated fields from the table: "project_worker_competency" */
  project_worker_competency_aggregate: Project_Worker_Competency_Aggregate;
  /** fetch data from the table: "project_worker_competency" using primary key columns */
  project_worker_competency_by_pk?: Maybe<Project_Worker_Competency>;
  /** fetch data from the table: "project_worker_onsite_ping" */
  project_worker_onsite_ping: Array<Project_Worker_Onsite_Ping>;
  /** fetch aggregated fields from the table: "project_worker_onsite_ping" */
  project_worker_onsite_ping_aggregate: Project_Worker_Onsite_Ping_Aggregate;
  /** fetch data from the table: "project_worker_onsite_ping" using primary key columns */
  project_worker_onsite_ping_by_pk?: Maybe<Project_Worker_Onsite_Ping>;
  /** fetch data from the table: "projects_to_posts" */
  projects_to_posts: Array<Projects_To_Posts>;
  /** fetch aggregated fields from the table: "projects_to_posts" */
  projects_to_posts_aggregate: Projects_To_Posts_Aggregate;
  /** fetch data from the table: "projects_to_posts" using primary key columns */
  projects_to_posts_by_pk?: Maybe<Projects_To_Posts>;
  /** fetch data from the table: "report" */
  report: Array<Report>;
  reportForm: ReportForm;
  /** fetch aggregated fields from the table: "report" */
  report_aggregate: Report_Aggregate;
  /** fetch data from the table: "report_awareness_question" */
  report_awareness_question: Array<Report_Awareness_Question>;
  /** fetch aggregated fields from the table: "report_awareness_question" */
  report_awareness_question_aggregate: Report_Awareness_Question_Aggregate;
  /** fetch data from the table: "report_awareness_question" using primary key columns */
  report_awareness_question_by_pk?: Maybe<Report_Awareness_Question>;
  /** fetch data from the table: "report" using primary key columns */
  report_by_pk?: Maybe<Report>;
  /** fetch data from the table: "report_fatal_four" */
  report_fatal_four: Array<Report_Fatal_Four>;
  /** fetch aggregated fields from the table: "report_fatal_four" */
  report_fatal_four_aggregate: Report_Fatal_Four_Aggregate;
  /** fetch data from the table: "report_fatal_four" using primary key columns */
  report_fatal_four_by_pk?: Maybe<Report_Fatal_Four>;
  /** fetch data from the table: "report_injury" */
  report_injury: Array<Report_Injury>;
  /** fetch aggregated fields from the table: "report_injury" */
  report_injury_aggregate: Report_Injury_Aggregate;
  /** fetch data from the table: "report_injury" using primary key columns */
  report_injury_by_pk?: Maybe<Report_Injury>;
  /** fetch data from the table: "report_project_hazard" */
  report_project_hazard: Array<Report_Project_Hazard>;
  /** fetch aggregated fields from the table: "report_project_hazard" */
  report_project_hazard_aggregate: Report_Project_Hazard_Aggregate;
  /** fetch data from the table: "report_project_hazard" using primary key columns */
  report_project_hazard_by_pk?: Maybe<Report_Project_Hazard>;
  /** fetch data from the table: "report_project_post" */
  report_project_post: Array<Report_Project_Post>;
  /** fetch aggregated fields from the table: "report_project_post" */
  report_project_post_aggregate: Report_Project_Post_Aggregate;
  /** fetch data from the table: "report_project_post" using primary key columns */
  report_project_post_by_pk?: Maybe<Report_Project_Post>;
  /** fetch data from the table: "report_project_worker" */
  report_project_worker: Array<Report_Project_Worker>;
  /** fetch aggregated fields from the table: "report_project_worker" */
  report_project_worker_aggregate: Report_Project_Worker_Aggregate;
  /** fetch data from the table: "report_project_worker" using primary key columns */
  report_project_worker_by_pk?: Maybe<Report_Project_Worker>;
  /** fetch data from the table: "s_daily_hours_to_date" */
  s_daily_hours_to_date: Array<S_Daily_Hours_To_Date>;
  /** fetch aggregated fields from the table: "s_daily_hours_to_date" */
  s_daily_hours_to_date_aggregate: S_Daily_Hours_To_Date_Aggregate;
  /** fetch data from the table: "s_daily_hours_to_date" using primary key columns */
  s_daily_hours_to_date_by_pk?: Maybe<S_Daily_Hours_To_Date>;
  /** fetch data from the table: "s_sub_daily_log_submittal" */
  s_sub_daily_log_submittal: Array<S_Sub_Daily_Log_Submittal>;
  /** fetch aggregated fields from the table: "s_sub_daily_log_submittal" */
  s_sub_daily_log_submittal_aggregate: S_Sub_Daily_Log_Submittal_Aggregate;
  /** fetch data from the table: "s_sub_daily_log_submittal" using primary key columns */
  s_sub_daily_log_submittal_by_pk?: Maybe<S_Sub_Daily_Log_Submittal>;
  /** fetch data from the table: "select_option" */
  select_option: Array<Select_Option>;
  /** fetch aggregated fields from the table: "select_option" */
  select_option_aggregate: Select_Option_Aggregate;
  /** fetch data from the table: "select_option" using primary key columns */
  select_option_by_pk?: Maybe<Select_Option>;
  /** fetch data from the table: "select_option_type" */
  select_option_type: Array<Select_Option_Type>;
  /** fetch aggregated fields from the table: "select_option_type" */
  select_option_type_aggregate: Select_Option_Type_Aggregate;
  /** fetch data from the table: "select_option_type" using primary key columns */
  select_option_type_by_pk?: Maybe<Select_Option_Type>;
  /** fetch data from the table: "short_forecast_type" */
  short_forecast_type: Array<Short_Forecast_Type>;
  /** fetch aggregated fields from the table: "short_forecast_type" */
  short_forecast_type_aggregate: Short_Forecast_Type_Aggregate;
  /** fetch data from the table: "short_forecast_type" using primary key columns */
  short_forecast_type_by_pk?: Maybe<Short_Forecast_Type>;
  /** fetch data from the table: "sign_in_type" */
  sign_in_type: Array<Sign_In_Type>;
  /** fetch aggregated fields from the table: "sign_in_type" */
  sign_in_type_aggregate: Sign_In_Type_Aggregate;
  /** fetch data from the table: "sign_in_type" using primary key columns */
  sign_in_type_by_pk?: Maybe<Sign_In_Type>;
  /** fetch data from the table: "state" */
  state: Array<State>;
  /** fetch aggregated fields from the table: "state" */
  state_aggregate: State_Aggregate;
  /** fetch data from the table: "state" using primary key columns */
  state_by_pk?: Maybe<State>;
  subEmployeeData?: Maybe<SubEmployeeData>;
  /** fetch data from the table: "subcontractor" */
  subcontractor: Array<Subcontractor>;
  /** fetch aggregated fields from the table: "subcontractor" */
  subcontractor_aggregate: Subcontractor_Aggregate;
  /** fetch data from the table: "subcontractor" using primary key columns */
  subcontractor_by_pk?: Maybe<Subcontractor>;
  /** fetch data from the table: "subcontractor_employee" */
  subcontractor_employee: Array<Subcontractor_Employee>;
  /** fetch aggregated fields from the table: "subcontractor_employee" */
  subcontractor_employee_aggregate: Subcontractor_Employee_Aggregate;
  /** fetch data from the table: "subcontractor_employee" using primary key columns */
  subcontractor_employee_by_pk?: Maybe<Subcontractor_Employee>;
  /** fetch data from the table: "subcontractor_employee_title" */
  subcontractor_employee_title: Array<Subcontractor_Employee_Title>;
  /** fetch aggregated fields from the table: "subcontractor_employee_title" */
  subcontractor_employee_title_aggregate: Subcontractor_Employee_Title_Aggregate;
  /** fetch data from the table: "subcontractor_employee_title" using primary key columns */
  subcontractor_employee_title_by_pk?: Maybe<Subcontractor_Employee_Title>;
  /** fetch data from the table: "subcontractor_onsite_status_update" */
  subcontractor_onsite_status_update: Array<Subcontractor_Onsite_Status_Update>;
  /** fetch aggregated fields from the table: "subcontractor_onsite_status_update" */
  subcontractor_onsite_status_update_aggregate: Subcontractor_Onsite_Status_Update_Aggregate;
  /** fetch data from the table: "subcontractor_onsite_status_update" using primary key columns */
  subcontractor_onsite_status_update_by_pk?: Maybe<Subcontractor_Onsite_Status_Update>;
  /** fetch data from the table: "subcontractor_trade" */
  subcontractor_trade: Array<Subcontractor_Trade>;
  /** fetch aggregated fields from the table: "subcontractor_trade" */
  subcontractor_trade_aggregate: Subcontractor_Trade_Aggregate;
  /** fetch data from the table: "subcontractor_trade" using primary key columns */
  subcontractor_trade_by_pk?: Maybe<Subcontractor_Trade>;
  /** fetch data from the table: "subcontractor_worker" */
  subcontractor_worker: Array<Subcontractor_Worker>;
  /** fetch aggregated fields from the table: "subcontractor_worker" */
  subcontractor_worker_aggregate: Subcontractor_Worker_Aggregate;
  /** fetch data from the table: "subcontractor_worker" using primary key columns */
  subcontractor_worker_by_pk?: Maybe<Subcontractor_Worker>;
  /** fetch data from the table: "submission_image" */
  submission_image: Array<Submission_Image>;
  /** fetch aggregated fields from the table: "submission_image" */
  submission_image_aggregate: Submission_Image_Aggregate;
  /** fetch data from the table: "submission_image" using primary key columns */
  submission_image_by_pk?: Maybe<Submission_Image>;
  /** fetch data from the table: "submission_image_type" */
  submission_image_type: Array<Submission_Image_Type>;
  /** fetch aggregated fields from the table: "submission_image_type" */
  submission_image_type_aggregate: Submission_Image_Type_Aggregate;
  /** fetch data from the table: "submission_image_type" using primary key columns */
  submission_image_type_by_pk?: Maybe<Submission_Image_Type>;
  /** fetch data from the table: "tag" */
  tag: Array<Tag>;
  /** fetch aggregated fields from the table: "tag" */
  tag_aggregate: Tag_Aggregate;
  /** fetch data from the table: "tag" using primary key columns */
  tag_by_pk?: Maybe<Tag>;
  /** fetch data from the table: "task" */
  task: Array<Task>;
  /** fetch aggregated fields from the table: "task" */
  task_aggregate: Task_Aggregate;
  /** fetch data from the table: "task" using primary key columns */
  task_by_pk?: Maybe<Task>;
  /** fetch data from the table: "task_note" */
  task_note: Array<Task_Note>;
  /** fetch aggregated fields from the table: "task_note" */
  task_note_aggregate: Task_Note_Aggregate;
  /** fetch data from the table: "task_note" using primary key columns */
  task_note_by_pk?: Maybe<Task_Note>;
  /** fetch data from the table: "task_permit_type" */
  task_permit_type: Array<Task_Permit_Type>;
  /** fetch aggregated fields from the table: "task_permit_type" */
  task_permit_type_aggregate: Task_Permit_Type_Aggregate;
  /** fetch data from the table: "task_permit_type" using primary key columns */
  task_permit_type_by_pk?: Maybe<Task_Permit_Type>;
  /** fetch data from the table: "task_ppe_type" */
  task_ppe_type: Array<Task_Ppe_Type>;
  /** fetch aggregated fields from the table: "task_ppe_type" */
  task_ppe_type_aggregate: Task_Ppe_Type_Aggregate;
  /** fetch data from the table: "task_ppe_type" using primary key columns */
  task_ppe_type_by_pk?: Maybe<Task_Ppe_Type>;
  /** fetch data from the table: "task_step" */
  task_step: Array<Task_Step>;
  /** fetch aggregated fields from the table: "task_step" */
  task_step_aggregate: Task_Step_Aggregate;
  /** fetch data from the table: "task_step" using primary key columns */
  task_step_by_pk?: Maybe<Task_Step>;
  /** fetch data from the table: "task_step_hazard" */
  task_step_hazard: Array<Task_Step_Hazard>;
  /** fetch aggregated fields from the table: "task_step_hazard" */
  task_step_hazard_aggregate: Task_Step_Hazard_Aggregate;
  /** fetch data from the table: "task_step_hazard" using primary key columns */
  task_step_hazard_by_pk?: Maybe<Task_Step_Hazard>;
  /** fetch data from the table: "text_translation" */
  text_translation: Array<Text_Translation>;
  /** fetch aggregated fields from the table: "text_translation" */
  text_translation_aggregate: Text_Translation_Aggregate;
  /** fetch data from the table: "text_translation" using primary key columns */
  text_translation_by_pk?: Maybe<Text_Translation>;
  /** fetch data from the table: "todo" */
  todo: Array<Todo>;
  /** fetch aggregated fields from the table: "todo" */
  todo_aggregate: Todo_Aggregate;
  /** fetch data from the table: "todo_assignee" */
  todo_assignee: Array<Todo_Assignee>;
  /** fetch aggregated fields from the table: "todo_assignee" */
  todo_assignee_aggregate: Todo_Assignee_Aggregate;
  /** fetch data from the table: "todo_assignee" using primary key columns */
  todo_assignee_by_pk?: Maybe<Todo_Assignee>;
  /** fetch data from the table: "todo" using primary key columns */
  todo_by_pk?: Maybe<Todo>;
  /** fetch data from the table: "todo_notifyee" */
  todo_notifyee: Array<Todo_Notifyee>;
  /** fetch aggregated fields from the table: "todo_notifyee" */
  todo_notifyee_aggregate: Todo_Notifyee_Aggregate;
  /** fetch data from the table: "todo_notifyee" using primary key columns */
  todo_notifyee_by_pk?: Maybe<Todo_Notifyee>;
  toolboxTalkForm: ToolboxTalkForm;
  /** fetch data from the table: "toolbox_talk" */
  toolbox_talk: Array<Toolbox_Talk>;
  /** fetch aggregated fields from the table: "toolbox_talk" */
  toolbox_talk_aggregate: Toolbox_Talk_Aggregate;
  /** fetch data from the table: "toolbox_talk" using primary key columns */
  toolbox_talk_by_pk?: Maybe<Toolbox_Talk>;
  /** fetch data from the table: "toolbox_talk_pdf" */
  toolbox_talk_pdf: Array<Toolbox_Talk_Pdf>;
  /** fetch aggregated fields from the table: "toolbox_talk_pdf" */
  toolbox_talk_pdf_aggregate: Toolbox_Talk_Pdf_Aggregate;
  /** fetch data from the table: "toolbox_talk_pdf" using primary key columns */
  toolbox_talk_pdf_by_pk?: Maybe<Toolbox_Talk_Pdf>;
  /** fetch data from the table: "toolbox_talk_project_worker" */
  toolbox_talk_project_worker: Array<Toolbox_Talk_Project_Worker>;
  /** fetch aggregated fields from the table: "toolbox_talk_project_worker" */
  toolbox_talk_project_worker_aggregate: Toolbox_Talk_Project_Worker_Aggregate;
  /** fetch data from the table: "toolbox_talk_project_worker" using primary key columns */
  toolbox_talk_project_worker_by_pk?: Maybe<Toolbox_Talk_Project_Worker>;
  translate?: Maybe<TranslateOutput>;
  uid?: Maybe<Scalars['String']>;
  /** fetch data from the table: "user" */
  user: Array<User>;
  userData?: Maybe<User>;
  /** fetch aggregated fields from the table: "user" */
  user_aggregate: User_Aggregate;
  /** fetch data from the table: "user" using primary key columns */
  user_by_pk?: Maybe<User>;
  /** fetch data from the table: "user_notification" */
  user_notification: Array<User_Notification>;
  /** fetch aggregated fields from the table: "user_notification" */
  user_notification_aggregate: User_Notification_Aggregate;
  /** fetch data from the table: "user_notification" using primary key columns */
  user_notification_by_pk?: Maybe<User_Notification>;
  /** fetch data from the table: "user_notification_event_type" */
  user_notification_event_type: Array<User_Notification_Event_Type>;
  /** fetch aggregated fields from the table: "user_notification_event_type" */
  user_notification_event_type_aggregate: User_Notification_Event_Type_Aggregate;
  /** fetch data from the table: "user_notification_event_type" using primary key columns */
  user_notification_event_type_by_pk?: Maybe<User_Notification_Event_Type>;
  /** fetch data from the table: "user_project_filter_calendar" */
  user_project_filter_calendar: Array<User_Project_Filter_Calendar>;
  /** fetch aggregated fields from the table: "user_project_filter_calendar" */
  user_project_filter_calendar_aggregate: User_Project_Filter_Calendar_Aggregate;
  /** fetch data from the table: "user_project_filter_calendar" using primary key columns */
  user_project_filter_calendar_by_pk?: Maybe<User_Project_Filter_Calendar>;
  /** fetch data from the table: "user_saved_email" */
  user_saved_email: Array<User_Saved_Email>;
  /** fetch aggregated fields from the table: "user_saved_email" */
  user_saved_email_aggregate: User_Saved_Email_Aggregate;
  /** fetch data from the table: "user_saved_email" using primary key columns */
  user_saved_email_by_pk?: Maybe<User_Saved_Email>;
  viewingTask: ViewingTask;
  /** fetch data from the table: "work_above_permit" */
  work_above_permit: Array<Work_Above_Permit>;
  /** fetch aggregated fields from the table: "work_above_permit" */
  work_above_permit_aggregate: Work_Above_Permit_Aggregate;
  /** fetch data from the table: "work_above_permit" using primary key columns */
  work_above_permit_by_pk?: Maybe<Work_Above_Permit>;
  /** fetch data from the table: "worker" */
  worker: Array<Worker>;
  workerData?: Maybe<WorkerData>;
  /** fetch aggregated fields from the table: "worker" */
  worker_aggregate: Worker_Aggregate;
  /** fetch data from the table: "worker_automatic_email" */
  worker_automatic_email: Array<Worker_Automatic_Email>;
  /** fetch aggregated fields from the table: "worker_automatic_email" */
  worker_automatic_email_aggregate: Worker_Automatic_Email_Aggregate;
  /** fetch data from the table: "worker_automatic_email" using primary key columns */
  worker_automatic_email_by_pk?: Maybe<Worker_Automatic_Email>;
  /** fetch data from the table: "worker_automatic_email_event_type" */
  worker_automatic_email_event_type: Array<Worker_Automatic_Email_Event_Type>;
  /** fetch aggregated fields from the table: "worker_automatic_email_event_type" */
  worker_automatic_email_event_type_aggregate: Worker_Automatic_Email_Event_Type_Aggregate;
  /** fetch data from the table: "worker_automatic_email_event_type" using primary key columns */
  worker_automatic_email_event_type_by_pk?: Maybe<Worker_Automatic_Email_Event_Type>;
  /** fetch data from the table: "worker" using primary key columns */
  worker_by_pk?: Maybe<Worker>;
  /** fetch data from the table: "worker_certification" */
  worker_certification: Array<Worker_Certification>;
  /** fetch aggregated fields from the table: "worker_certification" */
  worker_certification_aggregate: Worker_Certification_Aggregate;
  /** fetch data from the table: "worker_certification" using primary key columns */
  worker_certification_by_pk?: Maybe<Worker_Certification>;
  /** fetch data from the table: "worker_drug_test" */
  worker_drug_test: Array<Worker_Drug_Test>;
  /** fetch aggregated fields from the table: "worker_drug_test" */
  worker_drug_test_aggregate: Worker_Drug_Test_Aggregate;
  /** fetch data from the table: "worker_drug_test" using primary key columns */
  worker_drug_test_by_pk?: Maybe<Worker_Drug_Test>;
  /** fetch data from the table: "worker_enabled_automatic_email_event" */
  worker_enabled_automatic_email_event: Array<Worker_Enabled_Automatic_Email_Event>;
  /** fetch aggregated fields from the table: "worker_enabled_automatic_email_event" */
  worker_enabled_automatic_email_event_aggregate: Worker_Enabled_Automatic_Email_Event_Aggregate;
  /** fetch data from the table: "worker_enabled_automatic_email_event" using primary key columns */
  worker_enabled_automatic_email_event_by_pk?: Maybe<Worker_Enabled_Automatic_Email_Event>;
  /** execute function "worker_manhour_stats" which returns "worker_manhour_stats_table" */
  worker_manhour_stats: Array<Worker_Manhour_Stats_Table>;
  /** execute function "worker_manhour_stats" and query aggregates on result of table type "worker_manhour_stats_table" */
  worker_manhour_stats_aggregate: Worker_Manhour_Stats_Table_Aggregate;
  /** execute function "worker_manhour_stats_by_range" which returns "worker_manhour_stats_by_range_table" */
  worker_manhour_stats_by_range: Array<Worker_Manhour_Stats_By_Range_Table>;
  /**
   * execute function "worker_manhour_stats_by_range" and query aggregates on
   * result of table type "worker_manhour_stats_by_range_table"
   */
  worker_manhour_stats_by_range_aggregate: Worker_Manhour_Stats_By_Range_Table_Aggregate;
  /** fetch data from the table: "worker_manhour_stats_by_range_table" */
  worker_manhour_stats_by_range_table: Array<Worker_Manhour_Stats_By_Range_Table>;
  /** fetch aggregated fields from the table: "worker_manhour_stats_by_range_table" */
  worker_manhour_stats_by_range_table_aggregate: Worker_Manhour_Stats_By_Range_Table_Aggregate;
  /** fetch data from the table: "worker_manhour_stats_by_range_table" using primary key columns */
  worker_manhour_stats_by_range_table_by_pk?: Maybe<Worker_Manhour_Stats_By_Range_Table>;
  /** fetch data from the table: "worker_manhour_stats_table" */
  worker_manhour_stats_table: Array<Worker_Manhour_Stats_Table>;
  /** fetch aggregated fields from the table: "worker_manhour_stats_table" */
  worker_manhour_stats_table_aggregate: Worker_Manhour_Stats_Table_Aggregate;
  /** fetch data from the table: "worker_manhour_stats_table" using primary key columns */
  worker_manhour_stats_table_by_pk?: Maybe<Worker_Manhour_Stats_Table>;
  /** fetch data from the table: "worker_role" */
  worker_role: Array<Worker_Role>;
  /** fetch aggregated fields from the table: "worker_role" */
  worker_role_aggregate: Worker_Role_Aggregate;
  /** fetch data from the table: "worker_role" using primary key columns */
  worker_role_by_pk?: Maybe<Worker_Role>;
  /** execute function "worker_stats" which returns "worker_stats_table" */
  worker_stats: Array<Worker_Stats_Table>;
  /** execute function "worker_stats" and query aggregates on result of table type "worker_stats_table" */
  worker_stats_aggregate: Worker_Stats_Table_Aggregate;
  /** execute function "worker_stats_by_range" which returns "worker_stats_by_range_table" */
  worker_stats_by_range: Array<Worker_Stats_By_Range_Table>;
  /** execute function "worker_stats_by_range" and query aggregates on result of table type "worker_stats_by_range_table" */
  worker_stats_by_range_aggregate: Worker_Stats_By_Range_Table_Aggregate;
  /** fetch data from the table: "worker_stats_by_range_table" */
  worker_stats_by_range_table: Array<Worker_Stats_By_Range_Table>;
  /** fetch aggregated fields from the table: "worker_stats_by_range_table" */
  worker_stats_by_range_table_aggregate: Worker_Stats_By_Range_Table_Aggregate;
  /** fetch data from the table: "worker_stats_by_range_table" using primary key columns */
  worker_stats_by_range_table_by_pk?: Maybe<Worker_Stats_By_Range_Table>;
  /** fetch data from the table: "worker_stats_table" */
  worker_stats_table: Array<Worker_Stats_Table>;
  /** fetch aggregated fields from the table: "worker_stats_table" */
  worker_stats_table_aggregate: Worker_Stats_Table_Aggregate;
  /** fetch data from the table: "worker_stats_table" using primary key columns */
  worker_stats_table_by_pk?: Maybe<Worker_Stats_Table>;
  /** fetch data from the table: "worker_title" */
  worker_title: Array<Worker_Title>;
  /** fetch aggregated fields from the table: "worker_title" */
  worker_title_aggregate: Worker_Title_Aggregate;
  /** fetch data from the table: "worker_title" using primary key columns */
  worker_title_by_pk?: Maybe<Worker_Title>;
};


/** query root */
export type Query_RootActionNameArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootAddressArgs = {
  distinct_on?: Maybe<Array<Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Address_Order_By>>;
  where?: Maybe<Address_Bool_Exp>;
};


/** query root */
export type Query_RootAddress_AggregateArgs = {
  distinct_on?: Maybe<Array<Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Address_Order_By>>;
  where?: Maybe<Address_Bool_Exp>;
};


/** query root */
export type Query_RootAddress_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootAdminuArgs = {
  u: Scalars['String'];
};


/** query root */
export type Query_RootAuto_EmailArgs = {
  distinct_on?: Maybe<Array<Auto_Email_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Auto_Email_Order_By>>;
  where?: Maybe<Auto_Email_Bool_Exp>;
};


/** query root */
export type Query_RootAuto_Email_AggregateArgs = {
  distinct_on?: Maybe<Array<Auto_Email_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Auto_Email_Order_By>>;
  where?: Maybe<Auto_Email_Bool_Exp>;
};


/** query root */
export type Query_RootAuto_Email_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootAuto_Email_Event_TypeArgs = {
  distinct_on?: Maybe<Array<Auto_Email_Event_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Auto_Email_Event_Type_Order_By>>;
  where?: Maybe<Auto_Email_Event_Type_Bool_Exp>;
};


/** query root */
export type Query_RootAuto_Email_Event_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Auto_Email_Event_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Auto_Email_Event_Type_Order_By>>;
  where?: Maybe<Auto_Email_Event_Type_Bool_Exp>;
};


/** query root */
export type Query_RootAuto_Email_Event_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** query root */
export type Query_RootAwareness_QuestionArgs = {
  distinct_on?: Maybe<Array<Awareness_Question_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Awareness_Question_Order_By>>;
  where?: Maybe<Awareness_Question_Bool_Exp>;
};


/** query root */
export type Query_RootAwareness_Question_AggregateArgs = {
  distinct_on?: Maybe<Array<Awareness_Question_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Awareness_Question_Order_By>>;
  where?: Maybe<Awareness_Question_Bool_Exp>;
};


/** query root */
export type Query_RootAwareness_Question_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootCalendarArgs = {
  distinct_on?: Maybe<Array<Calendar_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Calendar_Order_By>>;
  where?: Maybe<Calendar_Bool_Exp>;
};


/** query root */
export type Query_RootCalendar_AggregateArgs = {
  distinct_on?: Maybe<Array<Calendar_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Calendar_Order_By>>;
  where?: Maybe<Calendar_Bool_Exp>;
};


/** query root */
export type Query_RootCalendar_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootCertificationArgs = {
  distinct_on?: Maybe<Array<Certification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Certification_Order_By>>;
  where?: Maybe<Certification_Bool_Exp>;
};


/** query root */
export type Query_RootCertification_AggregateArgs = {
  distinct_on?: Maybe<Array<Certification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Certification_Order_By>>;
  where?: Maybe<Certification_Bool_Exp>;
};


/** query root */
export type Query_RootCertification_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootChatArgs = {
  distinct_on?: Maybe<Array<Chat_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Order_By>>;
  where?: Maybe<Chat_Bool_Exp>;
};


/** query root */
export type Query_RootChat_AggregateArgs = {
  distinct_on?: Maybe<Array<Chat_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Order_By>>;
  where?: Maybe<Chat_Bool_Exp>;
};


/** query root */
export type Query_RootChat_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootChat_Employee_PreviewArgs = {
  distinct_on?: Maybe<Array<Chat_Employee_Preview_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Employee_Preview_Order_By>>;
  where?: Maybe<Chat_Employee_Preview_Bool_Exp>;
};


/** query root */
export type Query_RootChat_Employee_Preview_AggregateArgs = {
  distinct_on?: Maybe<Array<Chat_Employee_Preview_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Employee_Preview_Order_By>>;
  where?: Maybe<Chat_Employee_Preview_Bool_Exp>;
};


/** query root */
export type Query_RootChat_Employee_Preview_By_PkArgs = {
  chat_member_id: Scalars['uuid'];
};


/** query root */
export type Query_RootChat_ItemArgs = {
  distinct_on?: Maybe<Array<Chat_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Item_Order_By>>;
  where?: Maybe<Chat_Item_Bool_Exp>;
};


/** query root */
export type Query_RootChat_Item_AggregateArgs = {
  distinct_on?: Maybe<Array<Chat_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Item_Order_By>>;
  where?: Maybe<Chat_Item_Bool_Exp>;
};


/** query root */
export type Query_RootChat_Item_AttachmentArgs = {
  distinct_on?: Maybe<Array<Chat_Item_Attachment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Item_Attachment_Order_By>>;
  where?: Maybe<Chat_Item_Attachment_Bool_Exp>;
};


/** query root */
export type Query_RootChat_Item_Attachment_AggregateArgs = {
  distinct_on?: Maybe<Array<Chat_Item_Attachment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Item_Attachment_Order_By>>;
  where?: Maybe<Chat_Item_Attachment_Bool_Exp>;
};


/** query root */
export type Query_RootChat_Item_Attachment_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootChat_Item_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootChat_Item_TypeArgs = {
  distinct_on?: Maybe<Array<Chat_Item_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Item_Type_Order_By>>;
  where?: Maybe<Chat_Item_Type_Bool_Exp>;
};


/** query root */
export type Query_RootChat_Item_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Chat_Item_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Item_Type_Order_By>>;
  where?: Maybe<Chat_Item_Type_Bool_Exp>;
};


/** query root */
export type Query_RootChat_Item_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** query root */
export type Query_RootChat_MemberArgs = {
  distinct_on?: Maybe<Array<Chat_Member_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Member_Order_By>>;
  where?: Maybe<Chat_Member_Bool_Exp>;
};


/** query root */
export type Query_RootChat_Member_AggregateArgs = {
  distinct_on?: Maybe<Array<Chat_Member_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Member_Order_By>>;
  where?: Maybe<Chat_Member_Bool_Exp>;
};


/** query root */
export type Query_RootChat_Member_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootChecklist_ItemArgs = {
  distinct_on?: Maybe<Array<Checklist_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Checklist_Item_Order_By>>;
  where?: Maybe<Checklist_Item_Bool_Exp>;
};


/** query root */
export type Query_RootChecklist_Item_AggregateArgs = {
  distinct_on?: Maybe<Array<Checklist_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Checklist_Item_Order_By>>;
  where?: Maybe<Checklist_Item_Bool_Exp>;
};


/** query root */
export type Query_RootChecklist_Item_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootChecklist_Item_ConfigArgs = {
  distinct_on?: Maybe<Array<Checklist_Item_Config_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Checklist_Item_Config_Order_By>>;
  where?: Maybe<Checklist_Item_Config_Bool_Exp>;
};


/** query root */
export type Query_RootChecklist_Item_Config_AggregateArgs = {
  distinct_on?: Maybe<Array<Checklist_Item_Config_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Checklist_Item_Config_Order_By>>;
  where?: Maybe<Checklist_Item_Config_Bool_Exp>;
};


/** query root */
export type Query_RootChecklist_Item_Config_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootChecklist_Item_Config_TypeArgs = {
  distinct_on?: Maybe<Array<Checklist_Item_Config_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Checklist_Item_Config_Type_Order_By>>;
  where?: Maybe<Checklist_Item_Config_Type_Bool_Exp>;
};


/** query root */
export type Query_RootChecklist_Item_Config_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Checklist_Item_Config_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Checklist_Item_Config_Type_Order_By>>;
  where?: Maybe<Checklist_Item_Config_Type_Bool_Exp>;
};


/** query root */
export type Query_RootChecklist_Item_Config_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** query root */
export type Query_RootChecklist_Item_Notify_EmailArgs = {
  distinct_on?: Maybe<Array<Checklist_Item_Notify_Email_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Checklist_Item_Notify_Email_Order_By>>;
  where?: Maybe<Checklist_Item_Notify_Email_Bool_Exp>;
};


/** query root */
export type Query_RootChecklist_Item_Notify_Email_AggregateArgs = {
  distinct_on?: Maybe<Array<Checklist_Item_Notify_Email_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Checklist_Item_Notify_Email_Order_By>>;
  where?: Maybe<Checklist_Item_Notify_Email_Bool_Exp>;
};


/** query root */
export type Query_RootChecklist_Item_Notify_Email_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootChecklist_Item_TypeArgs = {
  distinct_on?: Maybe<Array<Checklist_Item_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Checklist_Item_Type_Order_By>>;
  where?: Maybe<Checklist_Item_Type_Bool_Exp>;
};


/** query root */
export type Query_RootChecklist_Item_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Checklist_Item_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Checklist_Item_Type_Order_By>>;
  where?: Maybe<Checklist_Item_Type_Bool_Exp>;
};


/** query root */
export type Query_RootChecklist_Item_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** query root */
export type Query_RootCleared_Project_Covid_Certify_WorkerArgs = {
  distinct_on?: Maybe<Array<Cleared_Project_Covid_Certify_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Cleared_Project_Covid_Certify_Worker_Order_By>>;
  where?: Maybe<Cleared_Project_Covid_Certify_Worker_Bool_Exp>;
};


/** query root */
export type Query_RootCleared_Project_Covid_Certify_Worker_AggregateArgs = {
  distinct_on?: Maybe<Array<Cleared_Project_Covid_Certify_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Cleared_Project_Covid_Certify_Worker_Order_By>>;
  where?: Maybe<Cleared_Project_Covid_Certify_Worker_Bool_Exp>;
};


/** query root */
export type Query_RootCleared_Project_Covid_Certify_Worker_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootCleared_Project_Covid_Tested_Positive_WorkerArgs = {
  distinct_on?: Maybe<Array<Cleared_Project_Covid_Tested_Positive_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Cleared_Project_Covid_Tested_Positive_Worker_Order_By>>;
  where?: Maybe<Cleared_Project_Covid_Tested_Positive_Worker_Bool_Exp>;
};


/** query root */
export type Query_RootCleared_Project_Covid_Tested_Positive_Worker_AggregateArgs = {
  distinct_on?: Maybe<Array<Cleared_Project_Covid_Tested_Positive_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Cleared_Project_Covid_Tested_Positive_Worker_Order_By>>;
  where?: Maybe<Cleared_Project_Covid_Tested_Positive_Worker_Bool_Exp>;
};


/** query root */
export type Query_RootCleared_Project_Covid_Tested_Positive_Worker_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootConfined_Space_PermitArgs = {
  distinct_on?: Maybe<Array<Confined_Space_Permit_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Confined_Space_Permit_Order_By>>;
  where?: Maybe<Confined_Space_Permit_Bool_Exp>;
};


/** query root */
export type Query_RootConfined_Space_Permit_AggregateArgs = {
  distinct_on?: Maybe<Array<Confined_Space_Permit_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Confined_Space_Permit_Order_By>>;
  where?: Maybe<Confined_Space_Permit_Bool_Exp>;
};


/** query root */
export type Query_RootConfined_Space_Permit_By_PkArgs = {
  permit_id: Scalars['uuid'];
};


/** query root */
export type Query_RootConfined_Space_Permit_Monitoring_EquipmentArgs = {
  distinct_on?: Maybe<Array<Confined_Space_Permit_Monitoring_Equipment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Confined_Space_Permit_Monitoring_Equipment_Order_By>>;
  where?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Bool_Exp>;
};


/** query root */
export type Query_RootConfined_Space_Permit_Monitoring_Equipment_AggregateArgs = {
  distinct_on?: Maybe<Array<Confined_Space_Permit_Monitoring_Equipment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Confined_Space_Permit_Monitoring_Equipment_Order_By>>;
  where?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Bool_Exp>;
};


/** query root */
export type Query_RootConfined_Space_Permit_Monitoring_Equipment_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootConfined_Space_Permit_ReadingArgs = {
  distinct_on?: Maybe<Array<Confined_Space_Permit_Reading_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Confined_Space_Permit_Reading_Order_By>>;
  where?: Maybe<Confined_Space_Permit_Reading_Bool_Exp>;
};


/** query root */
export type Query_RootConfined_Space_Permit_Reading_AggregateArgs = {
  distinct_on?: Maybe<Array<Confined_Space_Permit_Reading_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Confined_Space_Permit_Reading_Order_By>>;
  where?: Maybe<Confined_Space_Permit_Reading_Bool_Exp>;
};


/** query root */
export type Query_RootConfined_Space_Permit_Reading_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootConfined_Space_Permit_Reading_Custom_ItemArgs = {
  distinct_on?: Maybe<Array<Confined_Space_Permit_Reading_Custom_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Confined_Space_Permit_Reading_Custom_Item_Order_By>>;
  where?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Bool_Exp>;
};


/** query root */
export type Query_RootConfined_Space_Permit_Reading_Custom_Item_AggregateArgs = {
  distinct_on?: Maybe<Array<Confined_Space_Permit_Reading_Custom_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Confined_Space_Permit_Reading_Custom_Item_Order_By>>;
  where?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Bool_Exp>;
};


/** query root */
export type Query_RootConfined_Space_Permit_Reading_Custom_Item_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootDaily_CopyArgs = {
  distinct_on?: Maybe<Array<Daily_Copy_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Copy_Order_By>>;
  where?: Maybe<Daily_Copy_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Copy_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Copy_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Copy_Order_By>>;
  where?: Maybe<Daily_Copy_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Copy_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootDaily_Copy_SectionArgs = {
  distinct_on?: Maybe<Array<Daily_Copy_Section_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Copy_Section_Order_By>>;
  where?: Maybe<Daily_Copy_Section_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Copy_Section_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Copy_Section_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Copy_Section_Order_By>>;
  where?: Maybe<Daily_Copy_Section_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Copy_Section_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootDaily_Hours_To_DateArgs = {
  args: Daily_Hours_To_Date_Args;
  distinct_on?: Maybe<Array<S_Daily_Hours_To_Date_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<S_Daily_Hours_To_Date_Order_By>>;
  where?: Maybe<S_Daily_Hours_To_Date_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Hours_To_Date_AggregateArgs = {
  args: Daily_Hours_To_Date_Args;
  distinct_on?: Maybe<Array<S_Daily_Hours_To_Date_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<S_Daily_Hours_To_Date_Order_By>>;
  where?: Maybe<S_Daily_Hours_To_Date_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_NoteArgs = {
  distinct_on?: Maybe<Array<Daily_Note_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Note_Order_By>>;
  where?: Maybe<Daily_Note_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Note_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Note_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Note_Order_By>>;
  where?: Maybe<Daily_Note_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Note_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootDaily_Note_SubArgs = {
  distinct_on?: Maybe<Array<Daily_Note_Sub_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Note_Sub_Order_By>>;
  where?: Maybe<Daily_Note_Sub_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Note_Sub_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Note_Sub_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Note_Sub_Order_By>>;
  where?: Maybe<Daily_Note_Sub_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Note_Sub_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootDaily_Note_TagArgs = {
  distinct_on?: Maybe<Array<Daily_Note_Tag_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Note_Tag_Order_By>>;
  where?: Maybe<Daily_Note_Tag_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Note_Tag_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Note_Tag_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Note_Tag_Order_By>>;
  where?: Maybe<Daily_Note_Tag_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Note_Tag_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootDaily_ReportArgs = {
  distinct_on?: Maybe<Array<Daily_Report_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Report_Order_By>>;
  where?: Maybe<Daily_Report_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Report_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Report_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Report_Order_By>>;
  where?: Maybe<Daily_Report_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Report_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootDaily_Report_CompletedArgs = {
  distinct_on?: Maybe<Array<Daily_Report_Completed_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Report_Completed_Order_By>>;
  where?: Maybe<Daily_Report_Completed_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Report_Completed_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Report_Completed_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Report_Completed_Order_By>>;
  where?: Maybe<Daily_Report_Completed_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Report_Completed_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootDaily_Report_EventArgs = {
  distinct_on?: Maybe<Array<Daily_Report_Event_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Report_Event_Order_By>>;
  where?: Maybe<Daily_Report_Event_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Report_Event_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Report_Event_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Report_Event_Order_By>>;
  where?: Maybe<Daily_Report_Event_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Report_Event_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootDaily_Report_Event_TypeArgs = {
  distinct_on?: Maybe<Array<Daily_Report_Event_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Report_Event_Type_Order_By>>;
  where?: Maybe<Daily_Report_Event_Type_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Report_Event_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Report_Event_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Report_Event_Type_Order_By>>;
  where?: Maybe<Daily_Report_Event_Type_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Report_Event_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** query root */
export type Query_RootDaily_Report_Project_WorkerArgs = {
  distinct_on?: Maybe<Array<Daily_Report_Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Report_Project_Worker_Order_By>>;
  where?: Maybe<Daily_Report_Project_Worker_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Report_Project_Worker_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Report_Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Report_Project_Worker_Order_By>>;
  where?: Maybe<Daily_Report_Project_Worker_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Report_Project_Worker_By_PkArgs = {
  daily_report_id: Scalars['uuid'];
  project_worker_id: Scalars['uuid'];
};


/** query root */
export type Query_RootDaily_Schedule_EventArgs = {
  distinct_on?: Maybe<Array<Daily_Schedule_Event_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Schedule_Event_Order_By>>;
  where?: Maybe<Daily_Schedule_Event_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Schedule_Event_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Schedule_Event_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Schedule_Event_Order_By>>;
  where?: Maybe<Daily_Schedule_Event_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Schedule_Event_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootDaily_Schedule_Event_SubArgs = {
  distinct_on?: Maybe<Array<Daily_Schedule_Event_Sub_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Schedule_Event_Sub_Order_By>>;
  where?: Maybe<Daily_Schedule_Event_Sub_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Schedule_Event_Sub_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Schedule_Event_Sub_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Schedule_Event_Sub_Order_By>>;
  where?: Maybe<Daily_Schedule_Event_Sub_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Schedule_Event_Sub_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootDaily_Schedule_Event_TypeArgs = {
  distinct_on?: Maybe<Array<Daily_Schedule_Event_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Schedule_Event_Type_Order_By>>;
  where?: Maybe<Daily_Schedule_Event_Type_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Schedule_Event_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Schedule_Event_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Schedule_Event_Type_Order_By>>;
  where?: Maybe<Daily_Schedule_Event_Type_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Schedule_Event_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** query root */
export type Query_RootDaily_Weather_ObservationArgs = {
  distinct_on?: Maybe<Array<Daily_Weather_Observation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Weather_Observation_Order_By>>;
  where?: Maybe<Daily_Weather_Observation_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Weather_Observation_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Weather_Observation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Weather_Observation_Order_By>>;
  where?: Maybe<Daily_Weather_Observation_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Weather_Observation_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootDaily_Weather_Observation_SubArgs = {
  distinct_on?: Maybe<Array<Daily_Weather_Observation_Sub_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Weather_Observation_Sub_Order_By>>;
  where?: Maybe<Daily_Weather_Observation_Sub_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Weather_Observation_Sub_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Weather_Observation_Sub_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Weather_Observation_Sub_Order_By>>;
  where?: Maybe<Daily_Weather_Observation_Sub_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Weather_Observation_Sub_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootDaily_Work_LogArgs = {
  distinct_on?: Maybe<Array<Daily_Work_Log_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Work_Log_Order_By>>;
  where?: Maybe<Daily_Work_Log_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Work_Log_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Work_Log_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Work_Log_Order_By>>;
  where?: Maybe<Daily_Work_Log_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Work_Log_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootDaily_Work_Log_CommentArgs = {
  distinct_on?: Maybe<Array<Daily_Work_Log_Comment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Work_Log_Comment_Order_By>>;
  where?: Maybe<Daily_Work_Log_Comment_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Work_Log_Comment_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Work_Log_Comment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Work_Log_Comment_Order_By>>;
  where?: Maybe<Daily_Work_Log_Comment_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Work_Log_Comment_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootDaily_Work_Log_Comment_EmailArgs = {
  distinct_on?: Maybe<Array<Daily_Work_Log_Comment_Email_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Work_Log_Comment_Email_Order_By>>;
  where?: Maybe<Daily_Work_Log_Comment_Email_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Work_Log_Comment_Email_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Work_Log_Comment_Email_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Work_Log_Comment_Email_Order_By>>;
  where?: Maybe<Daily_Work_Log_Comment_Email_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Work_Log_Comment_Email_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootDaily_Work_Log_TagArgs = {
  distinct_on?: Maybe<Array<Daily_Work_Log_Tag_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Work_Log_Tag_Order_By>>;
  where?: Maybe<Daily_Work_Log_Tag_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Work_Log_Tag_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Work_Log_Tag_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Work_Log_Tag_Order_By>>;
  where?: Maybe<Daily_Work_Log_Tag_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Work_Log_Tag_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootDaily_Work_Log_WorkerArgs = {
  distinct_on?: Maybe<Array<Daily_Work_Log_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Work_Log_Worker_Order_By>>;
  where?: Maybe<Daily_Work_Log_Worker_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Work_Log_Worker_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Work_Log_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Work_Log_Worker_Order_By>>;
  where?: Maybe<Daily_Work_Log_Worker_Bool_Exp>;
};


/** query root */
export type Query_RootDaily_Work_Log_Worker_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootDate_Daily_Log_SubmittalsArgs = {
  args: Date_Daily_Log_Submittals_Args;
  distinct_on?: Maybe<Array<S_Sub_Daily_Log_Submittal_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<S_Sub_Daily_Log_Submittal_Order_By>>;
  where?: Maybe<S_Sub_Daily_Log_Submittal_Bool_Exp>;
};


/** query root */
export type Query_RootDate_Daily_Log_Submittals_AggregateArgs = {
  args: Date_Daily_Log_Submittals_Args;
  distinct_on?: Maybe<Array<S_Sub_Daily_Log_Submittal_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<S_Sub_Daily_Log_Submittal_Order_By>>;
  where?: Maybe<S_Sub_Daily_Log_Submittal_Bool_Exp>;
};


/** query root */
export type Query_RootDeliveryArgs = {
  distinct_on?: Maybe<Array<Delivery_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Delivery_Order_By>>;
  where?: Maybe<Delivery_Bool_Exp>;
};


/** query root */
export type Query_RootDelivery_AggregateArgs = {
  distinct_on?: Maybe<Array<Delivery_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Delivery_Order_By>>;
  where?: Maybe<Delivery_Bool_Exp>;
};


/** query root */
export type Query_RootDelivery_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootDelivery_CalendarArgs = {
  distinct_on?: Maybe<Array<Delivery_Calendar_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Delivery_Calendar_Order_By>>;
  where?: Maybe<Delivery_Calendar_Bool_Exp>;
};


/** query root */
export type Query_RootDelivery_Calendar_AggregateArgs = {
  distinct_on?: Maybe<Array<Delivery_Calendar_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Delivery_Calendar_Order_By>>;
  where?: Maybe<Delivery_Calendar_Bool_Exp>;
};


/** query root */
export type Query_RootDelivery_Calendar_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootDig_PermitArgs = {
  distinct_on?: Maybe<Array<Dig_Permit_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Dig_Permit_Order_By>>;
  where?: Maybe<Dig_Permit_Bool_Exp>;
};


/** query root */
export type Query_RootDig_Permit_AggregateArgs = {
  distinct_on?: Maybe<Array<Dig_Permit_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Dig_Permit_Order_By>>;
  where?: Maybe<Dig_Permit_Bool_Exp>;
};


/** query root */
export type Query_RootDig_Permit_By_PkArgs = {
  permit_id: Scalars['uuid'];
};


/** query root */
export type Query_RootDig_Permit_Select_OptionArgs = {
  distinct_on?: Maybe<Array<Dig_Permit_Select_Option_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Dig_Permit_Select_Option_Order_By>>;
  where?: Maybe<Dig_Permit_Select_Option_Bool_Exp>;
};


/** query root */
export type Query_RootDig_Permit_Select_Option_AggregateArgs = {
  distinct_on?: Maybe<Array<Dig_Permit_Select_Option_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Dig_Permit_Select_Option_Order_By>>;
  where?: Maybe<Dig_Permit_Select_Option_Bool_Exp>;
};


/** query root */
export type Query_RootDig_Permit_Select_Option_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootDig_Permit_TicketArgs = {
  distinct_on?: Maybe<Array<Dig_Permit_Ticket_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Dig_Permit_Ticket_Order_By>>;
  where?: Maybe<Dig_Permit_Ticket_Bool_Exp>;
};


/** query root */
export type Query_RootDig_Permit_Ticket_AggregateArgs = {
  distinct_on?: Maybe<Array<Dig_Permit_Ticket_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Dig_Permit_Ticket_Order_By>>;
  where?: Maybe<Dig_Permit_Ticket_Bool_Exp>;
};


/** query root */
export type Query_RootDig_Permit_Ticket_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootDummy_QueryArgs = {
  distinct_on?: Maybe<Array<State_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<State_Order_By>>;
  where?: Maybe<State_Bool_Exp>;
};


/** query root */
export type Query_RootDummy_Query_AggregateArgs = {
  distinct_on?: Maybe<Array<State_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<State_Order_By>>;
  where?: Maybe<State_Bool_Exp>;
};


/** query root */
export type Query_RootEmployee_TitleArgs = {
  distinct_on?: Maybe<Array<Employee_Title_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Employee_Title_Order_By>>;
  where?: Maybe<Employee_Title_Bool_Exp>;
};


/** query root */
export type Query_RootEmployee_Title_AggregateArgs = {
  distinct_on?: Maybe<Array<Employee_Title_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Employee_Title_Order_By>>;
  where?: Maybe<Employee_Title_Bool_Exp>;
};


/** query root */
export type Query_RootEmployee_Title_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootExpo_Push_TokenArgs = {
  distinct_on?: Maybe<Array<Expo_Push_Token_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Expo_Push_Token_Order_By>>;
  where?: Maybe<Expo_Push_Token_Bool_Exp>;
};


/** query root */
export type Query_RootExpo_Push_Token_AggregateArgs = {
  distinct_on?: Maybe<Array<Expo_Push_Token_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Expo_Push_Token_Order_By>>;
  where?: Maybe<Expo_Push_Token_Bool_Exp>;
};


/** query root */
export type Query_RootExpo_Push_Token_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootFeedbackArgs = {
  distinct_on?: Maybe<Array<Feedback_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Feedback_Order_By>>;
  where?: Maybe<Feedback_Bool_Exp>;
};


/** query root */
export type Query_RootFeedback_AggregateArgs = {
  distinct_on?: Maybe<Array<Feedback_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Feedback_Order_By>>;
  where?: Maybe<Feedback_Bool_Exp>;
};


/** query root */
export type Query_RootFeedback_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootForgot_Password_KeyArgs = {
  distinct_on?: Maybe<Array<Forgot_Password_Key_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Forgot_Password_Key_Order_By>>;
  where?: Maybe<Forgot_Password_Key_Bool_Exp>;
};


/** query root */
export type Query_RootForgot_Password_Key_AggregateArgs = {
  distinct_on?: Maybe<Array<Forgot_Password_Key_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Forgot_Password_Key_Order_By>>;
  where?: Maybe<Forgot_Password_Key_Bool_Exp>;
};


/** query root */
export type Query_RootForgot_Password_Key_By_PkArgs = {
  key: Scalars['uuid'];
};


/** query root */
export type Query_RootGc_Daily_Checklist_ItemArgs = {
  distinct_on?: Maybe<Array<Gc_Daily_Checklist_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Gc_Daily_Checklist_Item_Order_By>>;
  where?: Maybe<Gc_Daily_Checklist_Item_Bool_Exp>;
};


/** query root */
export type Query_RootGc_Daily_Checklist_Item_AggregateArgs = {
  distinct_on?: Maybe<Array<Gc_Daily_Checklist_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Gc_Daily_Checklist_Item_Order_By>>;
  where?: Maybe<Gc_Daily_Checklist_Item_Bool_Exp>;
};


/** query root */
export type Query_RootGc_Daily_Checklist_Item_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootGc_Disabled_Project_SubcontractorArgs = {
  distinct_on?: Maybe<Array<Gc_Disabled_Project_Subcontractor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Gc_Disabled_Project_Subcontractor_Order_By>>;
  where?: Maybe<Gc_Disabled_Project_Subcontractor_Bool_Exp>;
};


/** query root */
export type Query_RootGc_Disabled_Project_Subcontractor_AggregateArgs = {
  distinct_on?: Maybe<Array<Gc_Disabled_Project_Subcontractor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Gc_Disabled_Project_Subcontractor_Order_By>>;
  where?: Maybe<Gc_Disabled_Project_Subcontractor_Bool_Exp>;
};


/** query root */
export type Query_RootGc_Disabled_Project_Subcontractor_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootGeneral_ContractorArgs = {
  distinct_on?: Maybe<Array<General_Contractor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<General_Contractor_Order_By>>;
  where?: Maybe<General_Contractor_Bool_Exp>;
};


/** query root */
export type Query_RootGeneral_Contractor_AggregateArgs = {
  distinct_on?: Maybe<Array<General_Contractor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<General_Contractor_Order_By>>;
  where?: Maybe<General_Contractor_Bool_Exp>;
};


/** query root */
export type Query_RootGeneral_Contractor_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootGeneral_Contractor_EmployeeArgs = {
  distinct_on?: Maybe<Array<General_Contractor_Employee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<General_Contractor_Employee_Order_By>>;
  where?: Maybe<General_Contractor_Employee_Bool_Exp>;
};


/** query root */
export type Query_RootGeneral_Contractor_Employee_AggregateArgs = {
  distinct_on?: Maybe<Array<General_Contractor_Employee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<General_Contractor_Employee_Order_By>>;
  where?: Maybe<General_Contractor_Employee_Bool_Exp>;
};


/** query root */
export type Query_RootGeneral_Contractor_Employee_By_PkArgs = {
  uid: Scalars['uuid'];
};


/** query root */
export type Query_RootGetCompletionAuditArgs = {
  endDate: Scalars['String'];
  projectId: Scalars['String'];
  startDate: Scalars['String'];
};


/** query root */
export type Query_RootGetNewUsernameArgs = {
  name: Scalars['String'];
};


/** query root */
export type Query_RootGetPasswordHashArgs = {
  string: Scalars['String'];
};


/** query root */
export type Query_RootGet_Awareness_QuestionArgs = {
  args: Get_Awareness_Question_Args;
  distinct_on?: Maybe<Array<Awareness_Question_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Awareness_Question_Order_By>>;
  where?: Maybe<Awareness_Question_Bool_Exp>;
};


/** query root */
export type Query_RootGet_Awareness_Question_AggregateArgs = {
  args: Get_Awareness_Question_Args;
  distinct_on?: Maybe<Array<Awareness_Question_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Awareness_Question_Order_By>>;
  where?: Maybe<Awareness_Question_Bool_Exp>;
};


/** query root */
export type Query_RootGet_Random_Incident_ExampleArgs = {
  args: Get_Random_Incident_Example_Args;
  distinct_on?: Maybe<Array<Incident_Example_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Incident_Example_Order_By>>;
  where?: Maybe<Incident_Example_Bool_Exp>;
};


/** query root */
export type Query_RootGet_Random_Incident_Example_AggregateArgs = {
  args: Get_Random_Incident_Example_Args;
  distinct_on?: Maybe<Array<Incident_Example_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Incident_Example_Order_By>>;
  where?: Maybe<Incident_Example_Bool_Exp>;
};


/** query root */
export type Query_RootGovernment_IdentificationArgs = {
  distinct_on?: Maybe<Array<Government_Identification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Government_Identification_Order_By>>;
  where?: Maybe<Government_Identification_Bool_Exp>;
};


/** query root */
export type Query_RootGovernment_Identification_AggregateArgs = {
  distinct_on?: Maybe<Array<Government_Identification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Government_Identification_Order_By>>;
  where?: Maybe<Government_Identification_Bool_Exp>;
};


/** query root */
export type Query_RootGovernment_Identification_By_PkArgs = {
  user_id: Scalars['uuid'];
};


/** query root */
export type Query_RootHot_Work_PermitArgs = {
  distinct_on?: Maybe<Array<Hot_Work_Permit_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Hot_Work_Permit_Order_By>>;
  where?: Maybe<Hot_Work_Permit_Bool_Exp>;
};


/** query root */
export type Query_RootHot_Work_Permit_AggregateArgs = {
  distinct_on?: Maybe<Array<Hot_Work_Permit_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Hot_Work_Permit_Order_By>>;
  where?: Maybe<Hot_Work_Permit_Bool_Exp>;
};


/** query root */
export type Query_RootHot_Work_Permit_By_PkArgs = {
  permit_id: Scalars['uuid'];
};


/** query root */
export type Query_RootHourly_ForecastArgs = {
  distinct_on?: Maybe<Array<Hourly_Forecast_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Hourly_Forecast_Order_By>>;
  where?: Maybe<Hourly_Forecast_Bool_Exp>;
};


/** query root */
export type Query_RootHourly_Forecast_AggregateArgs = {
  distinct_on?: Maybe<Array<Hourly_Forecast_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Hourly_Forecast_Order_By>>;
  where?: Maybe<Hourly_Forecast_Bool_Exp>;
};


/** query root */
export type Query_RootHourly_Forecast_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootImageArgs = {
  distinct_on?: Maybe<Array<Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Image_Order_By>>;
  where?: Maybe<Image_Bool_Exp>;
};


/** query root */
export type Query_RootImage_AggregateArgs = {
  distinct_on?: Maybe<Array<Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Image_Order_By>>;
  where?: Maybe<Image_Bool_Exp>;
};


/** query root */
export type Query_RootImage_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootImage_TypeArgs = {
  distinct_on?: Maybe<Array<Image_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Image_Type_Order_By>>;
  where?: Maybe<Image_Type_Bool_Exp>;
};


/** query root */
export type Query_RootImage_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Image_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Image_Type_Order_By>>;
  where?: Maybe<Image_Type_Bool_Exp>;
};


/** query root */
export type Query_RootImage_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** query root */
export type Query_RootIncident_ExampleArgs = {
  distinct_on?: Maybe<Array<Incident_Example_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Incident_Example_Order_By>>;
  where?: Maybe<Incident_Example_Bool_Exp>;
};


/** query root */
export type Query_RootIncident_Example_AggregateArgs = {
  distinct_on?: Maybe<Array<Incident_Example_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Incident_Example_Order_By>>;
  where?: Maybe<Incident_Example_Bool_Exp>;
};


/** query root */
export type Query_RootIncident_Example_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootInviteArgs = {
  distinct_on?: Maybe<Array<Invite_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Invite_Order_By>>;
  where?: Maybe<Invite_Bool_Exp>;
};


/** query root */
export type Query_RootInvite_AggregateArgs = {
  distinct_on?: Maybe<Array<Invite_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Invite_Order_By>>;
  where?: Maybe<Invite_Bool_Exp>;
};


/** query root */
export type Query_RootInvite_By_PkArgs = {
  id: Scalars['String'];
};


/** query root */
export type Query_RootLang_CodeArgs = {
  distinct_on?: Maybe<Array<Lang_Code_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Lang_Code_Order_By>>;
  where?: Maybe<Lang_Code_Bool_Exp>;
};


/** query root */
export type Query_RootLang_Code_AggregateArgs = {
  distinct_on?: Maybe<Array<Lang_Code_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Lang_Code_Order_By>>;
  where?: Maybe<Lang_Code_Bool_Exp>;
};


/** query root */
export type Query_RootLang_Code_By_PkArgs = {
  value: Scalars['String'];
};


/** query root */
export type Query_RootNotification_Badge_CountArgs = {
  distinct_on?: Maybe<Array<Notification_Badge_Count_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Notification_Badge_Count_Order_By>>;
  where?: Maybe<Notification_Badge_Count_Bool_Exp>;
};


/** query root */
export type Query_RootNotification_Badge_Count_AggregateArgs = {
  distinct_on?: Maybe<Array<Notification_Badge_Count_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Notification_Badge_Count_Order_By>>;
  where?: Maybe<Notification_Badge_Count_Bool_Exp>;
};


/** query root */
export type Query_RootNotification_Badge_Count_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootOrientationArgs = {
  distinct_on?: Maybe<Array<Orientation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Orientation_Order_By>>;
  where?: Maybe<Orientation_Bool_Exp>;
};


/** query root */
export type Query_RootOrientation_AggregateArgs = {
  distinct_on?: Maybe<Array<Orientation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Orientation_Order_By>>;
  where?: Maybe<Orientation_Bool_Exp>;
};


/** query root */
export type Query_RootOrientation_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootOrientation_SlideArgs = {
  distinct_on?: Maybe<Array<Orientation_Slide_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Orientation_Slide_Order_By>>;
  where?: Maybe<Orientation_Slide_Bool_Exp>;
};


/** query root */
export type Query_RootOrientation_Slide_AggregateArgs = {
  distinct_on?: Maybe<Array<Orientation_Slide_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Orientation_Slide_Order_By>>;
  where?: Maybe<Orientation_Slide_Bool_Exp>;
};


/** query root */
export type Query_RootOrientation_Slide_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootPdfArgs = {
  distinct_on?: Maybe<Array<Pdf_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Pdf_Order_By>>;
  where?: Maybe<Pdf_Bool_Exp>;
};


/** query root */
export type Query_RootPdf_AggregateArgs = {
  distinct_on?: Maybe<Array<Pdf_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Pdf_Order_By>>;
  where?: Maybe<Pdf_Bool_Exp>;
};


/** query root */
export type Query_RootPdf_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootPermitArgs = {
  distinct_on?: Maybe<Array<Permit_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Permit_Order_By>>;
  where?: Maybe<Permit_Bool_Exp>;
};


/** query root */
export type Query_RootPermit_AggregateArgs = {
  distinct_on?: Maybe<Array<Permit_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Permit_Order_By>>;
  where?: Maybe<Permit_Bool_Exp>;
};


/** query root */
export type Query_RootPermit_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootPermit_Checklist_ItemArgs = {
  distinct_on?: Maybe<Array<Permit_Checklist_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Permit_Checklist_Item_Order_By>>;
  where?: Maybe<Permit_Checklist_Item_Bool_Exp>;
};


/** query root */
export type Query_RootPermit_Checklist_Item_AggregateArgs = {
  distinct_on?: Maybe<Array<Permit_Checklist_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Permit_Checklist_Item_Order_By>>;
  where?: Maybe<Permit_Checklist_Item_Bool_Exp>;
};


/** query root */
export type Query_RootPermit_Checklist_Item_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootPermit_HistoryArgs = {
  distinct_on?: Maybe<Array<Permit_History_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Permit_History_Order_By>>;
  where?: Maybe<Permit_History_Bool_Exp>;
};


/** query root */
export type Query_RootPermit_History_AggregateArgs = {
  distinct_on?: Maybe<Array<Permit_History_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Permit_History_Order_By>>;
  where?: Maybe<Permit_History_Bool_Exp>;
};


/** query root */
export type Query_RootPermit_History_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootPermit_Project_WorkerArgs = {
  distinct_on?: Maybe<Array<Permit_Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Permit_Project_Worker_Order_By>>;
  where?: Maybe<Permit_Project_Worker_Bool_Exp>;
};


/** query root */
export type Query_RootPermit_Project_Worker_AggregateArgs = {
  distinct_on?: Maybe<Array<Permit_Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Permit_Project_Worker_Order_By>>;
  where?: Maybe<Permit_Project_Worker_Bool_Exp>;
};


/** query root */
export type Query_RootPermit_Project_Worker_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootPermit_Sign_In_ImageArgs = {
  distinct_on?: Maybe<Array<Permit_Sign_In_Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Permit_Sign_In_Image_Order_By>>;
  where?: Maybe<Permit_Sign_In_Image_Bool_Exp>;
};


/** query root */
export type Query_RootPermit_Sign_In_Image_AggregateArgs = {
  distinct_on?: Maybe<Array<Permit_Sign_In_Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Permit_Sign_In_Image_Order_By>>;
  where?: Maybe<Permit_Sign_In_Image_Bool_Exp>;
};


/** query root */
export type Query_RootPermit_Sign_In_Image_By_PkArgs = {
  image_id: Scalars['uuid'];
  permit_id: Scalars['uuid'];
};


/** query root */
export type Query_RootPermit_TypeArgs = {
  distinct_on?: Maybe<Array<Permit_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Permit_Type_Order_By>>;
  where?: Maybe<Permit_Type_Bool_Exp>;
};


/** query root */
export type Query_RootPermit_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Permit_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Permit_Type_Order_By>>;
  where?: Maybe<Permit_Type_Bool_Exp>;
};


/** query root */
export type Query_RootPermit_Type_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootPpe_CategoryArgs = {
  distinct_on?: Maybe<Array<Ppe_Category_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Ppe_Category_Order_By>>;
  where?: Maybe<Ppe_Category_Bool_Exp>;
};


/** query root */
export type Query_RootPpe_Category_AggregateArgs = {
  distinct_on?: Maybe<Array<Ppe_Category_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Ppe_Category_Order_By>>;
  where?: Maybe<Ppe_Category_Bool_Exp>;
};


/** query root */
export type Query_RootPpe_Category_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootPpe_TypeArgs = {
  distinct_on?: Maybe<Array<Ppe_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Ppe_Type_Order_By>>;
  where?: Maybe<Ppe_Type_Bool_Exp>;
};


/** query root */
export type Query_RootPpe_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Ppe_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Ppe_Type_Order_By>>;
  where?: Maybe<Ppe_Type_Bool_Exp>;
};


/** query root */
export type Query_RootPpe_Type_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootProcoreProjectFoldersArgs = {
  input: ProcoreProjectFoldersInput;
};


/** query root */
export type Query_RootProcoreProjectListArgs = {
  input?: Maybe<ProcoreProjectListInput>;
};


/** query root */
export type Query_RootProcoreSubcontractorListArgs = {
  input?: Maybe<ProcoreSubcontractorListInput>;
};


/** query root */
export type Query_RootProcore_Auth_DataArgs = {
  distinct_on?: Maybe<Array<Procore_Auth_Data_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Procore_Auth_Data_Order_By>>;
  where?: Maybe<Procore_Auth_Data_Bool_Exp>;
};


/** query root */
export type Query_RootProcore_Auth_Data_AggregateArgs = {
  distinct_on?: Maybe<Array<Procore_Auth_Data_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Procore_Auth_Data_Order_By>>;
  where?: Maybe<Procore_Auth_Data_Bool_Exp>;
};


/** query root */
export type Query_RootProcore_Auth_Data_By_PkArgs = {
  general_contractor_id: Scalars['uuid'];
};


/** query root */
export type Query_RootProcore_Project_DataArgs = {
  distinct_on?: Maybe<Array<Procore_Project_Data_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Procore_Project_Data_Order_By>>;
  where?: Maybe<Procore_Project_Data_Bool_Exp>;
};


/** query root */
export type Query_RootProcore_Project_Data_AggregateArgs = {
  distinct_on?: Maybe<Array<Procore_Project_Data_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Procore_Project_Data_Order_By>>;
  where?: Maybe<Procore_Project_Data_Bool_Exp>;
};


/** query root */
export type Query_RootProcore_Project_Data_By_PkArgs = {
  project_id: Scalars['uuid'];
};


/** query root */
export type Query_RootProcore_Service_AccountArgs = {
  distinct_on?: Maybe<Array<Procore_Service_Account_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Procore_Service_Account_Order_By>>;
  where?: Maybe<Procore_Service_Account_Bool_Exp>;
};


/** query root */
export type Query_RootProcore_Service_Account_AggregateArgs = {
  distinct_on?: Maybe<Array<Procore_Service_Account_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Procore_Service_Account_Order_By>>;
  where?: Maybe<Procore_Service_Account_Bool_Exp>;
};


/** query root */
export type Query_RootProcore_Service_Account_By_PkArgs = {
  general_contractor_id: Scalars['uuid'];
};


/** query root */
export type Query_RootProcore_SubcontractorArgs = {
  distinct_on?: Maybe<Array<Procore_Subcontractor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Procore_Subcontractor_Order_By>>;
  where?: Maybe<Procore_Subcontractor_Bool_Exp>;
};


/** query root */
export type Query_RootProcore_Subcontractor_AggregateArgs = {
  distinct_on?: Maybe<Array<Procore_Subcontractor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Procore_Subcontractor_Order_By>>;
  where?: Maybe<Procore_Subcontractor_Bool_Exp>;
};


/** query root */
export type Query_RootProcore_Subcontractor_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootProjectArgs = {
  distinct_on?: Maybe<Array<Project_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Order_By>>;
  where?: Maybe<Project_Bool_Exp>;
};


/** query root */
export type Query_RootProject_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Order_By>>;
  where?: Maybe<Project_Bool_Exp>;
};


/** query root */
export type Query_RootProject_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootProject_Completion_Automated_NotificationArgs = {
  distinct_on?: Maybe<Array<Project_Completion_Automated_Notification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Completion_Automated_Notification_Order_By>>;
  where?: Maybe<Project_Completion_Automated_Notification_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Completion_Automated_Notification_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Completion_Automated_Notification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Completion_Automated_Notification_Order_By>>;
  where?: Maybe<Project_Completion_Automated_Notification_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Completion_Automated_Notification_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootProject_Covid_Certify_WorkerArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Certify_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Certify_Worker_Order_By>>;
  where?: Maybe<Project_Covid_Certify_Worker_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Covid_Certify_Worker_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Certify_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Certify_Worker_Order_By>>;
  where?: Maybe<Project_Covid_Certify_Worker_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Covid_Certify_Worker_AnswerArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Certify_Worker_Answer_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Certify_Worker_Answer_Order_By>>;
  where?: Maybe<Project_Covid_Certify_Worker_Answer_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Covid_Certify_Worker_Answer_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Certify_Worker_Answer_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Certify_Worker_Answer_Order_By>>;
  where?: Maybe<Project_Covid_Certify_Worker_Answer_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Covid_Certify_Worker_Answer_By_PkArgs = {
  project_covid_certify_worker_id: Scalars['uuid'];
  project_covid_yes_no_question_id: Scalars['uuid'];
};


/** query root */
export type Query_RootProject_Covid_Certify_Worker_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootProject_Covid_ConfigArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Config_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Config_Order_By>>;
  where?: Maybe<Project_Covid_Config_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Covid_Config_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Config_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Config_Order_By>>;
  where?: Maybe<Project_Covid_Config_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Covid_Config_By_PkArgs = {
  project_id: Scalars['uuid'];
};


/** query root */
export type Query_RootProject_Covid_Crew_CertifyArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Crew_Certify_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Crew_Certify_Order_By>>;
  where?: Maybe<Project_Covid_Crew_Certify_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Covid_Crew_Certify_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Crew_Certify_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Crew_Certify_Order_By>>;
  where?: Maybe<Project_Covid_Crew_Certify_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Covid_Crew_Certify_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootProject_Covid_Guest_CertificationArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Guest_Certification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Guest_Certification_Order_By>>;
  where?: Maybe<Project_Covid_Guest_Certification_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Covid_Guest_Certification_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Guest_Certification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Guest_Certification_Order_By>>;
  where?: Maybe<Project_Covid_Guest_Certification_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Covid_Guest_Certification_AnswerArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Guest_Certification_Answer_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Guest_Certification_Answer_Order_By>>;
  where?: Maybe<Project_Covid_Guest_Certification_Answer_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Covid_Guest_Certification_Answer_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Guest_Certification_Answer_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Guest_Certification_Answer_Order_By>>;
  where?: Maybe<Project_Covid_Guest_Certification_Answer_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Covid_Guest_Certification_Answer_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootProject_Covid_Guest_Certification_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootProject_Covid_Notify_EmployeeArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Notify_Employee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Notify_Employee_Order_By>>;
  where?: Maybe<Project_Covid_Notify_Employee_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Covid_Notify_Employee_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Notify_Employee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Notify_Employee_Order_By>>;
  where?: Maybe<Project_Covid_Notify_Employee_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Covid_Notify_Employee_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootProject_Covid_Tested_Positive_AnswerArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Tested_Positive_Answer_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Tested_Positive_Answer_Order_By>>;
  where?: Maybe<Project_Covid_Tested_Positive_Answer_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Covid_Tested_Positive_Answer_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Tested_Positive_Answer_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Tested_Positive_Answer_Order_By>>;
  where?: Maybe<Project_Covid_Tested_Positive_Answer_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Covid_Tested_Positive_Answer_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootProject_Covid_Tested_Positive_QuestionArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Tested_Positive_Question_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Tested_Positive_Question_Order_By>>;
  where?: Maybe<Project_Covid_Tested_Positive_Question_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Covid_Tested_Positive_Question_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Tested_Positive_Question_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Tested_Positive_Question_Order_By>>;
  where?: Maybe<Project_Covid_Tested_Positive_Question_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Covid_Tested_Positive_Question_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootProject_Covid_Tested_Positive_WorkerArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Tested_Positive_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Tested_Positive_Worker_Order_By>>;
  where?: Maybe<Project_Covid_Tested_Positive_Worker_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Covid_Tested_Positive_Worker_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Tested_Positive_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Tested_Positive_Worker_Order_By>>;
  where?: Maybe<Project_Covid_Tested_Positive_Worker_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Covid_Tested_Positive_Worker_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootProject_Covid_Yes_No_QuestionArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Yes_No_Question_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Yes_No_Question_Order_By>>;
  where?: Maybe<Project_Covid_Yes_No_Question_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Covid_Yes_No_Question_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Yes_No_Question_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Yes_No_Question_Order_By>>;
  where?: Maybe<Project_Covid_Yes_No_Question_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Covid_Yes_No_Question_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootProject_CrewArgs = {
  distinct_on?: Maybe<Array<Project_Crew_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Crew_Order_By>>;
  where?: Maybe<Project_Crew_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Crew_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Crew_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Crew_Order_By>>;
  where?: Maybe<Project_Crew_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Crew_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootProject_EmployeeArgs = {
  distinct_on?: Maybe<Array<Project_Employee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Employee_Order_By>>;
  where?: Maybe<Project_Employee_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Employee_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Employee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Employee_Order_By>>;
  where?: Maybe<Project_Employee_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Employee_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootProject_HazardArgs = {
  distinct_on?: Maybe<Array<Project_Hazard_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Hazard_Order_By>>;
  where?: Maybe<Project_Hazard_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Hazard_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Hazard_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Hazard_Order_By>>;
  where?: Maybe<Project_Hazard_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Hazard_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootProject_Hazard_SubcontractorArgs = {
  distinct_on?: Maybe<Array<Project_Hazard_Subcontractor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Hazard_Subcontractor_Order_By>>;
  where?: Maybe<Project_Hazard_Subcontractor_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Hazard_Subcontractor_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Hazard_Subcontractor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Hazard_Subcontractor_Order_By>>;
  where?: Maybe<Project_Hazard_Subcontractor_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Hazard_Subcontractor_By_PkArgs = {
  project_hazard_id: Scalars['uuid'];
  subcontractor_id: Scalars['uuid'];
};


/** query root */
export type Query_RootProject_PostArgs = {
  distinct_on?: Maybe<Array<Project_Post_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Post_Order_By>>;
  where?: Maybe<Project_Post_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Post_GCsArgs = {
  distinct_on?: Maybe<Array<Project_Post_GCs_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Post_GCs_Order_By>>;
  where?: Maybe<Project_Post_GCs_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Post_GCs_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Post_GCs_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Post_GCs_Order_By>>;
  where?: Maybe<Project_Post_GCs_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Post_GCs_By_PkArgs = {
  general_contractor_id: Scalars['uuid'];
  project_post_id: Scalars['uuid'];
};


/** query root */
export type Query_RootProject_Post_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Post_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Post_Order_By>>;
  where?: Maybe<Project_Post_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Post_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootProject_Post_WorkersArgs = {
  distinct_on?: Maybe<Array<Project_Post_Workers_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Post_Workers_Order_By>>;
  where?: Maybe<Project_Post_Workers_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Post_Workers_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Post_Workers_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Post_Workers_Order_By>>;
  where?: Maybe<Project_Post_Workers_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Post_Workers_By_PkArgs = {
  project_post_id: Scalars['uuid'];
  worker_id: Scalars['uuid'];
};


/** query root */
export type Query_RootProject_Report_SettingsArgs = {
  distinct_on?: Maybe<Array<Project_Report_Settings_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Report_Settings_Order_By>>;
  where?: Maybe<Project_Report_Settings_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Report_Settings_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Report_Settings_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Report_Settings_Order_By>>;
  where?: Maybe<Project_Report_Settings_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Report_Settings_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootProject_Site_NotificationArgs = {
  distinct_on?: Maybe<Array<Project_Site_Notification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Site_Notification_Order_By>>;
  where?: Maybe<Project_Site_Notification_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Site_Notification_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Site_Notification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Site_Notification_Order_By>>;
  where?: Maybe<Project_Site_Notification_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Site_Notification_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootProject_SubcontractorArgs = {
  distinct_on?: Maybe<Array<Project_Subcontractor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Subcontractor_Order_By>>;
  where?: Maybe<Project_Subcontractor_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Subcontractor_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Subcontractor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Subcontractor_Order_By>>;
  where?: Maybe<Project_Subcontractor_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Subcontractor_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootProject_Subcontractor_Onsite_UpdateArgs = {
  distinct_on?: Maybe<Array<Project_Subcontractor_Onsite_Update_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Subcontractor_Onsite_Update_Order_By>>;
  where?: Maybe<Project_Subcontractor_Onsite_Update_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Subcontractor_Onsite_Update_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Subcontractor_Onsite_Update_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Subcontractor_Onsite_Update_Order_By>>;
  where?: Maybe<Project_Subcontractor_Onsite_Update_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Subcontractor_Onsite_Update_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootProject_Subcontractor_Report_SettingsArgs = {
  distinct_on?: Maybe<Array<Project_Subcontractor_Report_Settings_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Subcontractor_Report_Settings_Order_By>>;
  where?: Maybe<Project_Subcontractor_Report_Settings_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Subcontractor_Report_Settings_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Subcontractor_Report_Settings_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Subcontractor_Report_Settings_Order_By>>;
  where?: Maybe<Project_Subcontractor_Report_Settings_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Subcontractor_Report_Settings_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootProject_UserArgs = {
  distinct_on?: Maybe<Array<Project_User_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_User_Order_By>>;
  where?: Maybe<Project_User_Bool_Exp>;
};


/** query root */
export type Query_RootProject_User_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_User_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_User_Order_By>>;
  where?: Maybe<Project_User_Bool_Exp>;
};


/** query root */
export type Query_RootProject_User_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootProject_WorkerArgs = {
  distinct_on?: Maybe<Array<Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Worker_Order_By>>;
  where?: Maybe<Project_Worker_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Worker_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Worker_Order_By>>;
  where?: Maybe<Project_Worker_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Worker_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootProject_Worker_CompetencyArgs = {
  distinct_on?: Maybe<Array<Project_Worker_Competency_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Worker_Competency_Order_By>>;
  where?: Maybe<Project_Worker_Competency_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Worker_Competency_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Worker_Competency_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Worker_Competency_Order_By>>;
  where?: Maybe<Project_Worker_Competency_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Worker_Competency_By_PkArgs = {
  description: Scalars['String'];
  project_worker_id: Scalars['uuid'];
};


/** query root */
export type Query_RootProject_Worker_Onsite_PingArgs = {
  distinct_on?: Maybe<Array<Project_Worker_Onsite_Ping_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Worker_Onsite_Ping_Order_By>>;
  where?: Maybe<Project_Worker_Onsite_Ping_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Worker_Onsite_Ping_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Worker_Onsite_Ping_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Worker_Onsite_Ping_Order_By>>;
  where?: Maybe<Project_Worker_Onsite_Ping_Bool_Exp>;
};


/** query root */
export type Query_RootProject_Worker_Onsite_Ping_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootProjects_To_PostsArgs = {
  distinct_on?: Maybe<Array<Projects_To_Posts_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Projects_To_Posts_Order_By>>;
  where?: Maybe<Projects_To_Posts_Bool_Exp>;
};


/** query root */
export type Query_RootProjects_To_Posts_AggregateArgs = {
  distinct_on?: Maybe<Array<Projects_To_Posts_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Projects_To_Posts_Order_By>>;
  where?: Maybe<Projects_To_Posts_Bool_Exp>;
};


/** query root */
export type Query_RootProjects_To_Posts_By_PkArgs = {
  post_id: Scalars['uuid'];
  project_id: Scalars['uuid'];
};


/** query root */
export type Query_RootReportArgs = {
  distinct_on?: Maybe<Array<Report_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Order_By>>;
  where?: Maybe<Report_Bool_Exp>;
};


/** query root */
export type Query_RootReport_AggregateArgs = {
  distinct_on?: Maybe<Array<Report_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Order_By>>;
  where?: Maybe<Report_Bool_Exp>;
};


/** query root */
export type Query_RootReport_Awareness_QuestionArgs = {
  distinct_on?: Maybe<Array<Report_Awareness_Question_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Awareness_Question_Order_By>>;
  where?: Maybe<Report_Awareness_Question_Bool_Exp>;
};


/** query root */
export type Query_RootReport_Awareness_Question_AggregateArgs = {
  distinct_on?: Maybe<Array<Report_Awareness_Question_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Awareness_Question_Order_By>>;
  where?: Maybe<Report_Awareness_Question_Bool_Exp>;
};


/** query root */
export type Query_RootReport_Awareness_Question_By_PkArgs = {
  awareness_question_id: Scalars['uuid'];
  report_id: Scalars['uuid'];
};


/** query root */
export type Query_RootReport_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootReport_Fatal_FourArgs = {
  distinct_on?: Maybe<Array<Report_Fatal_Four_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Fatal_Four_Order_By>>;
  where?: Maybe<Report_Fatal_Four_Bool_Exp>;
};


/** query root */
export type Query_RootReport_Fatal_Four_AggregateArgs = {
  distinct_on?: Maybe<Array<Report_Fatal_Four_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Fatal_Four_Order_By>>;
  where?: Maybe<Report_Fatal_Four_Bool_Exp>;
};


/** query root */
export type Query_RootReport_Fatal_Four_By_PkArgs = {
  report_id: Scalars['uuid'];
};


/** query root */
export type Query_RootReport_InjuryArgs = {
  distinct_on?: Maybe<Array<Report_Injury_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Injury_Order_By>>;
  where?: Maybe<Report_Injury_Bool_Exp>;
};


/** query root */
export type Query_RootReport_Injury_AggregateArgs = {
  distinct_on?: Maybe<Array<Report_Injury_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Injury_Order_By>>;
  where?: Maybe<Report_Injury_Bool_Exp>;
};


/** query root */
export type Query_RootReport_Injury_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootReport_Project_HazardArgs = {
  distinct_on?: Maybe<Array<Report_Project_Hazard_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Project_Hazard_Order_By>>;
  where?: Maybe<Report_Project_Hazard_Bool_Exp>;
};


/** query root */
export type Query_RootReport_Project_Hazard_AggregateArgs = {
  distinct_on?: Maybe<Array<Report_Project_Hazard_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Project_Hazard_Order_By>>;
  where?: Maybe<Report_Project_Hazard_Bool_Exp>;
};


/** query root */
export type Query_RootReport_Project_Hazard_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootReport_Project_PostArgs = {
  distinct_on?: Maybe<Array<Report_Project_Post_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Project_Post_Order_By>>;
  where?: Maybe<Report_Project_Post_Bool_Exp>;
};


/** query root */
export type Query_RootReport_Project_Post_AggregateArgs = {
  distinct_on?: Maybe<Array<Report_Project_Post_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Project_Post_Order_By>>;
  where?: Maybe<Report_Project_Post_Bool_Exp>;
};


/** query root */
export type Query_RootReport_Project_Post_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootReport_Project_WorkerArgs = {
  distinct_on?: Maybe<Array<Report_Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Project_Worker_Order_By>>;
  where?: Maybe<Report_Project_Worker_Bool_Exp>;
};


/** query root */
export type Query_RootReport_Project_Worker_AggregateArgs = {
  distinct_on?: Maybe<Array<Report_Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Project_Worker_Order_By>>;
  where?: Maybe<Report_Project_Worker_Bool_Exp>;
};


/** query root */
export type Query_RootReport_Project_Worker_By_PkArgs = {
  project_worker_id: Scalars['uuid'];
  report_id: Scalars['uuid'];
};


/** query root */
export type Query_RootS_Daily_Hours_To_DateArgs = {
  distinct_on?: Maybe<Array<S_Daily_Hours_To_Date_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<S_Daily_Hours_To_Date_Order_By>>;
  where?: Maybe<S_Daily_Hours_To_Date_Bool_Exp>;
};


/** query root */
export type Query_RootS_Daily_Hours_To_Date_AggregateArgs = {
  distinct_on?: Maybe<Array<S_Daily_Hours_To_Date_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<S_Daily_Hours_To_Date_Order_By>>;
  where?: Maybe<S_Daily_Hours_To_Date_Bool_Exp>;
};


/** query root */
export type Query_RootS_Daily_Hours_To_Date_By_PkArgs = {
  subcontractor_id: Scalars['uuid'];
};


/** query root */
export type Query_RootS_Sub_Daily_Log_SubmittalArgs = {
  distinct_on?: Maybe<Array<S_Sub_Daily_Log_Submittal_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<S_Sub_Daily_Log_Submittal_Order_By>>;
  where?: Maybe<S_Sub_Daily_Log_Submittal_Bool_Exp>;
};


/** query root */
export type Query_RootS_Sub_Daily_Log_Submittal_AggregateArgs = {
  distinct_on?: Maybe<Array<S_Sub_Daily_Log_Submittal_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<S_Sub_Daily_Log_Submittal_Order_By>>;
  where?: Maybe<S_Sub_Daily_Log_Submittal_Bool_Exp>;
};


/** query root */
export type Query_RootS_Sub_Daily_Log_Submittal_By_PkArgs = {
  subcontractor_id: Scalars['uuid'];
};


/** query root */
export type Query_RootSelect_OptionArgs = {
  distinct_on?: Maybe<Array<Select_Option_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Select_Option_Order_By>>;
  where?: Maybe<Select_Option_Bool_Exp>;
};


/** query root */
export type Query_RootSelect_Option_AggregateArgs = {
  distinct_on?: Maybe<Array<Select_Option_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Select_Option_Order_By>>;
  where?: Maybe<Select_Option_Bool_Exp>;
};


/** query root */
export type Query_RootSelect_Option_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootSelect_Option_TypeArgs = {
  distinct_on?: Maybe<Array<Select_Option_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Select_Option_Type_Order_By>>;
  where?: Maybe<Select_Option_Type_Bool_Exp>;
};


/** query root */
export type Query_RootSelect_Option_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Select_Option_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Select_Option_Type_Order_By>>;
  where?: Maybe<Select_Option_Type_Bool_Exp>;
};


/** query root */
export type Query_RootSelect_Option_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** query root */
export type Query_RootShort_Forecast_TypeArgs = {
  distinct_on?: Maybe<Array<Short_Forecast_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Short_Forecast_Type_Order_By>>;
  where?: Maybe<Short_Forecast_Type_Bool_Exp>;
};


/** query root */
export type Query_RootShort_Forecast_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Short_Forecast_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Short_Forecast_Type_Order_By>>;
  where?: Maybe<Short_Forecast_Type_Bool_Exp>;
};


/** query root */
export type Query_RootShort_Forecast_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** query root */
export type Query_RootSign_In_TypeArgs = {
  distinct_on?: Maybe<Array<Sign_In_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sign_In_Type_Order_By>>;
  where?: Maybe<Sign_In_Type_Bool_Exp>;
};


/** query root */
export type Query_RootSign_In_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Sign_In_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sign_In_Type_Order_By>>;
  where?: Maybe<Sign_In_Type_Bool_Exp>;
};


/** query root */
export type Query_RootSign_In_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** query root */
export type Query_RootStateArgs = {
  distinct_on?: Maybe<Array<State_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<State_Order_By>>;
  where?: Maybe<State_Bool_Exp>;
};


/** query root */
export type Query_RootState_AggregateArgs = {
  distinct_on?: Maybe<Array<State_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<State_Order_By>>;
  where?: Maybe<State_Bool_Exp>;
};


/** query root */
export type Query_RootState_By_PkArgs = {
  code: Scalars['String'];
};


/** query root */
export type Query_RootSubcontractorArgs = {
  distinct_on?: Maybe<Array<Subcontractor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Subcontractor_Order_By>>;
  where?: Maybe<Subcontractor_Bool_Exp>;
};


/** query root */
export type Query_RootSubcontractor_AggregateArgs = {
  distinct_on?: Maybe<Array<Subcontractor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Subcontractor_Order_By>>;
  where?: Maybe<Subcontractor_Bool_Exp>;
};


/** query root */
export type Query_RootSubcontractor_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootSubcontractor_EmployeeArgs = {
  distinct_on?: Maybe<Array<Subcontractor_Employee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Subcontractor_Employee_Order_By>>;
  where?: Maybe<Subcontractor_Employee_Bool_Exp>;
};


/** query root */
export type Query_RootSubcontractor_Employee_AggregateArgs = {
  distinct_on?: Maybe<Array<Subcontractor_Employee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Subcontractor_Employee_Order_By>>;
  where?: Maybe<Subcontractor_Employee_Bool_Exp>;
};


/** query root */
export type Query_RootSubcontractor_Employee_By_PkArgs = {
  user_id: Scalars['uuid'];
};


/** query root */
export type Query_RootSubcontractor_Employee_TitleArgs = {
  distinct_on?: Maybe<Array<Subcontractor_Employee_Title_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Subcontractor_Employee_Title_Order_By>>;
  where?: Maybe<Subcontractor_Employee_Title_Bool_Exp>;
};


/** query root */
export type Query_RootSubcontractor_Employee_Title_AggregateArgs = {
  distinct_on?: Maybe<Array<Subcontractor_Employee_Title_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Subcontractor_Employee_Title_Order_By>>;
  where?: Maybe<Subcontractor_Employee_Title_Bool_Exp>;
};


/** query root */
export type Query_RootSubcontractor_Employee_Title_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootSubcontractor_Onsite_Status_UpdateArgs = {
  distinct_on?: Maybe<Array<Subcontractor_Onsite_Status_Update_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Subcontractor_Onsite_Status_Update_Order_By>>;
  where?: Maybe<Subcontractor_Onsite_Status_Update_Bool_Exp>;
};


/** query root */
export type Query_RootSubcontractor_Onsite_Status_Update_AggregateArgs = {
  distinct_on?: Maybe<Array<Subcontractor_Onsite_Status_Update_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Subcontractor_Onsite_Status_Update_Order_By>>;
  where?: Maybe<Subcontractor_Onsite_Status_Update_Bool_Exp>;
};


/** query root */
export type Query_RootSubcontractor_Onsite_Status_Update_By_PkArgs = {
  created_at: Scalars['date'];
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootSubcontractor_TradeArgs = {
  distinct_on?: Maybe<Array<Subcontractor_Trade_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Subcontractor_Trade_Order_By>>;
  where?: Maybe<Subcontractor_Trade_Bool_Exp>;
};


/** query root */
export type Query_RootSubcontractor_Trade_AggregateArgs = {
  distinct_on?: Maybe<Array<Subcontractor_Trade_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Subcontractor_Trade_Order_By>>;
  where?: Maybe<Subcontractor_Trade_Bool_Exp>;
};


/** query root */
export type Query_RootSubcontractor_Trade_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootSubcontractor_WorkerArgs = {
  distinct_on?: Maybe<Array<Subcontractor_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Subcontractor_Worker_Order_By>>;
  where?: Maybe<Subcontractor_Worker_Bool_Exp>;
};


/** query root */
export type Query_RootSubcontractor_Worker_AggregateArgs = {
  distinct_on?: Maybe<Array<Subcontractor_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Subcontractor_Worker_Order_By>>;
  where?: Maybe<Subcontractor_Worker_Bool_Exp>;
};


/** query root */
export type Query_RootSubcontractor_Worker_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootSubmission_ImageArgs = {
  distinct_on?: Maybe<Array<Submission_Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Submission_Image_Order_By>>;
  where?: Maybe<Submission_Image_Bool_Exp>;
};


/** query root */
export type Query_RootSubmission_Image_AggregateArgs = {
  distinct_on?: Maybe<Array<Submission_Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Submission_Image_Order_By>>;
  where?: Maybe<Submission_Image_Bool_Exp>;
};


/** query root */
export type Query_RootSubmission_Image_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootSubmission_Image_TypeArgs = {
  distinct_on?: Maybe<Array<Submission_Image_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Submission_Image_Type_Order_By>>;
  where?: Maybe<Submission_Image_Type_Bool_Exp>;
};


/** query root */
export type Query_RootSubmission_Image_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Submission_Image_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Submission_Image_Type_Order_By>>;
  where?: Maybe<Submission_Image_Type_Bool_Exp>;
};


/** query root */
export type Query_RootSubmission_Image_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** query root */
export type Query_RootTagArgs = {
  distinct_on?: Maybe<Array<Tag_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Tag_Order_By>>;
  where?: Maybe<Tag_Bool_Exp>;
};


/** query root */
export type Query_RootTag_AggregateArgs = {
  distinct_on?: Maybe<Array<Tag_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Tag_Order_By>>;
  where?: Maybe<Tag_Bool_Exp>;
};


/** query root */
export type Query_RootTag_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootTaskArgs = {
  distinct_on?: Maybe<Array<Task_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Order_By>>;
  where?: Maybe<Task_Bool_Exp>;
};


/** query root */
export type Query_RootTask_AggregateArgs = {
  distinct_on?: Maybe<Array<Task_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Order_By>>;
  where?: Maybe<Task_Bool_Exp>;
};


/** query root */
export type Query_RootTask_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootTask_NoteArgs = {
  distinct_on?: Maybe<Array<Task_Note_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Note_Order_By>>;
  where?: Maybe<Task_Note_Bool_Exp>;
};


/** query root */
export type Query_RootTask_Note_AggregateArgs = {
  distinct_on?: Maybe<Array<Task_Note_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Note_Order_By>>;
  where?: Maybe<Task_Note_Bool_Exp>;
};


/** query root */
export type Query_RootTask_Note_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootTask_Permit_TypeArgs = {
  distinct_on?: Maybe<Array<Task_Permit_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Permit_Type_Order_By>>;
  where?: Maybe<Task_Permit_Type_Bool_Exp>;
};


/** query root */
export type Query_RootTask_Permit_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Task_Permit_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Permit_Type_Order_By>>;
  where?: Maybe<Task_Permit_Type_Bool_Exp>;
};


/** query root */
export type Query_RootTask_Permit_Type_By_PkArgs = {
  permit_type_id: Scalars['uuid'];
  task_id: Scalars['uuid'];
};


/** query root */
export type Query_RootTask_Ppe_TypeArgs = {
  distinct_on?: Maybe<Array<Task_Ppe_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Ppe_Type_Order_By>>;
  where?: Maybe<Task_Ppe_Type_Bool_Exp>;
};


/** query root */
export type Query_RootTask_Ppe_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Task_Ppe_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Ppe_Type_Order_By>>;
  where?: Maybe<Task_Ppe_Type_Bool_Exp>;
};


/** query root */
export type Query_RootTask_Ppe_Type_By_PkArgs = {
  ppe_type_id: Scalars['uuid'];
  task_id: Scalars['uuid'];
};


/** query root */
export type Query_RootTask_StepArgs = {
  distinct_on?: Maybe<Array<Task_Step_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Step_Order_By>>;
  where?: Maybe<Task_Step_Bool_Exp>;
};


/** query root */
export type Query_RootTask_Step_AggregateArgs = {
  distinct_on?: Maybe<Array<Task_Step_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Step_Order_By>>;
  where?: Maybe<Task_Step_Bool_Exp>;
};


/** query root */
export type Query_RootTask_Step_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootTask_Step_HazardArgs = {
  distinct_on?: Maybe<Array<Task_Step_Hazard_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Step_Hazard_Order_By>>;
  where?: Maybe<Task_Step_Hazard_Bool_Exp>;
};


/** query root */
export type Query_RootTask_Step_Hazard_AggregateArgs = {
  distinct_on?: Maybe<Array<Task_Step_Hazard_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Step_Hazard_Order_By>>;
  where?: Maybe<Task_Step_Hazard_Bool_Exp>;
};


/** query root */
export type Query_RootTask_Step_Hazard_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootText_TranslationArgs = {
  distinct_on?: Maybe<Array<Text_Translation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Text_Translation_Order_By>>;
  where?: Maybe<Text_Translation_Bool_Exp>;
};


/** query root */
export type Query_RootText_Translation_AggregateArgs = {
  distinct_on?: Maybe<Array<Text_Translation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Text_Translation_Order_By>>;
  where?: Maybe<Text_Translation_Bool_Exp>;
};


/** query root */
export type Query_RootText_Translation_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootTodoArgs = {
  distinct_on?: Maybe<Array<Todo_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Todo_Order_By>>;
  where?: Maybe<Todo_Bool_Exp>;
};


/** query root */
export type Query_RootTodo_AggregateArgs = {
  distinct_on?: Maybe<Array<Todo_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Todo_Order_By>>;
  where?: Maybe<Todo_Bool_Exp>;
};


/** query root */
export type Query_RootTodo_AssigneeArgs = {
  distinct_on?: Maybe<Array<Todo_Assignee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Todo_Assignee_Order_By>>;
  where?: Maybe<Todo_Assignee_Bool_Exp>;
};


/** query root */
export type Query_RootTodo_Assignee_AggregateArgs = {
  distinct_on?: Maybe<Array<Todo_Assignee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Todo_Assignee_Order_By>>;
  where?: Maybe<Todo_Assignee_Bool_Exp>;
};


/** query root */
export type Query_RootTodo_Assignee_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootTodo_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootTodo_NotifyeeArgs = {
  distinct_on?: Maybe<Array<Todo_Notifyee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Todo_Notifyee_Order_By>>;
  where?: Maybe<Todo_Notifyee_Bool_Exp>;
};


/** query root */
export type Query_RootTodo_Notifyee_AggregateArgs = {
  distinct_on?: Maybe<Array<Todo_Notifyee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Todo_Notifyee_Order_By>>;
  where?: Maybe<Todo_Notifyee_Bool_Exp>;
};


/** query root */
export type Query_RootTodo_Notifyee_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootToolbox_TalkArgs = {
  distinct_on?: Maybe<Array<Toolbox_Talk_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Toolbox_Talk_Order_By>>;
  where?: Maybe<Toolbox_Talk_Bool_Exp>;
};


/** query root */
export type Query_RootToolbox_Talk_AggregateArgs = {
  distinct_on?: Maybe<Array<Toolbox_Talk_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Toolbox_Talk_Order_By>>;
  where?: Maybe<Toolbox_Talk_Bool_Exp>;
};


/** query root */
export type Query_RootToolbox_Talk_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootToolbox_Talk_PdfArgs = {
  distinct_on?: Maybe<Array<Toolbox_Talk_Pdf_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Toolbox_Talk_Pdf_Order_By>>;
  where?: Maybe<Toolbox_Talk_Pdf_Bool_Exp>;
};


/** query root */
export type Query_RootToolbox_Talk_Pdf_AggregateArgs = {
  distinct_on?: Maybe<Array<Toolbox_Talk_Pdf_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Toolbox_Talk_Pdf_Order_By>>;
  where?: Maybe<Toolbox_Talk_Pdf_Bool_Exp>;
};


/** query root */
export type Query_RootToolbox_Talk_Pdf_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootToolbox_Talk_Project_WorkerArgs = {
  distinct_on?: Maybe<Array<Toolbox_Talk_Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Toolbox_Talk_Project_Worker_Order_By>>;
  where?: Maybe<Toolbox_Talk_Project_Worker_Bool_Exp>;
};


/** query root */
export type Query_RootToolbox_Talk_Project_Worker_AggregateArgs = {
  distinct_on?: Maybe<Array<Toolbox_Talk_Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Toolbox_Talk_Project_Worker_Order_By>>;
  where?: Maybe<Toolbox_Talk_Project_Worker_Bool_Exp>;
};


/** query root */
export type Query_RootToolbox_Talk_Project_Worker_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootTranslateArgs = {
  input?: Maybe<TranslateInput>;
};


/** query root */
export type Query_RootUserArgs = {
  distinct_on?: Maybe<Array<User_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Order_By>>;
  where?: Maybe<User_Bool_Exp>;
};


/** query root */
export type Query_RootUser_AggregateArgs = {
  distinct_on?: Maybe<Array<User_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Order_By>>;
  where?: Maybe<User_Bool_Exp>;
};


/** query root */
export type Query_RootUser_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootUser_NotificationArgs = {
  distinct_on?: Maybe<Array<User_Notification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Notification_Order_By>>;
  where?: Maybe<User_Notification_Bool_Exp>;
};


/** query root */
export type Query_RootUser_Notification_AggregateArgs = {
  distinct_on?: Maybe<Array<User_Notification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Notification_Order_By>>;
  where?: Maybe<User_Notification_Bool_Exp>;
};


/** query root */
export type Query_RootUser_Notification_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootUser_Notification_Event_TypeArgs = {
  distinct_on?: Maybe<Array<User_Notification_Event_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Notification_Event_Type_Order_By>>;
  where?: Maybe<User_Notification_Event_Type_Bool_Exp>;
};


/** query root */
export type Query_RootUser_Notification_Event_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<User_Notification_Event_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Notification_Event_Type_Order_By>>;
  where?: Maybe<User_Notification_Event_Type_Bool_Exp>;
};


/** query root */
export type Query_RootUser_Notification_Event_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** query root */
export type Query_RootUser_Project_Filter_CalendarArgs = {
  distinct_on?: Maybe<Array<User_Project_Filter_Calendar_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Project_Filter_Calendar_Order_By>>;
  where?: Maybe<User_Project_Filter_Calendar_Bool_Exp>;
};


/** query root */
export type Query_RootUser_Project_Filter_Calendar_AggregateArgs = {
  distinct_on?: Maybe<Array<User_Project_Filter_Calendar_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Project_Filter_Calendar_Order_By>>;
  where?: Maybe<User_Project_Filter_Calendar_Bool_Exp>;
};


/** query root */
export type Query_RootUser_Project_Filter_Calendar_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootUser_Saved_EmailArgs = {
  distinct_on?: Maybe<Array<User_Saved_Email_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Saved_Email_Order_By>>;
  where?: Maybe<User_Saved_Email_Bool_Exp>;
};


/** query root */
export type Query_RootUser_Saved_Email_AggregateArgs = {
  distinct_on?: Maybe<Array<User_Saved_Email_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Saved_Email_Order_By>>;
  where?: Maybe<User_Saved_Email_Bool_Exp>;
};


/** query root */
export type Query_RootUser_Saved_Email_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootWork_Above_PermitArgs = {
  distinct_on?: Maybe<Array<Work_Above_Permit_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Work_Above_Permit_Order_By>>;
  where?: Maybe<Work_Above_Permit_Bool_Exp>;
};


/** query root */
export type Query_RootWork_Above_Permit_AggregateArgs = {
  distinct_on?: Maybe<Array<Work_Above_Permit_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Work_Above_Permit_Order_By>>;
  where?: Maybe<Work_Above_Permit_Bool_Exp>;
};


/** query root */
export type Query_RootWork_Above_Permit_By_PkArgs = {
  permit_id: Scalars['uuid'];
};


/** query root */
export type Query_RootWorkerArgs = {
  distinct_on?: Maybe<Array<Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Order_By>>;
  where?: Maybe<Worker_Bool_Exp>;
};


/** query root */
export type Query_RootWorker_AggregateArgs = {
  distinct_on?: Maybe<Array<Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Order_By>>;
  where?: Maybe<Worker_Bool_Exp>;
};


/** query root */
export type Query_RootWorker_Automatic_EmailArgs = {
  distinct_on?: Maybe<Array<Worker_Automatic_Email_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Automatic_Email_Order_By>>;
  where?: Maybe<Worker_Automatic_Email_Bool_Exp>;
};


/** query root */
export type Query_RootWorker_Automatic_Email_AggregateArgs = {
  distinct_on?: Maybe<Array<Worker_Automatic_Email_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Automatic_Email_Order_By>>;
  where?: Maybe<Worker_Automatic_Email_Bool_Exp>;
};


/** query root */
export type Query_RootWorker_Automatic_Email_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootWorker_Automatic_Email_Event_TypeArgs = {
  distinct_on?: Maybe<Array<Worker_Automatic_Email_Event_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Automatic_Email_Event_Type_Order_By>>;
  where?: Maybe<Worker_Automatic_Email_Event_Type_Bool_Exp>;
};


/** query root */
export type Query_RootWorker_Automatic_Email_Event_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Worker_Automatic_Email_Event_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Automatic_Email_Event_Type_Order_By>>;
  where?: Maybe<Worker_Automatic_Email_Event_Type_Bool_Exp>;
};


/** query root */
export type Query_RootWorker_Automatic_Email_Event_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** query root */
export type Query_RootWorker_By_PkArgs = {
  uid: Scalars['uuid'];
};


/** query root */
export type Query_RootWorker_CertificationArgs = {
  distinct_on?: Maybe<Array<Worker_Certification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Certification_Order_By>>;
  where?: Maybe<Worker_Certification_Bool_Exp>;
};


/** query root */
export type Query_RootWorker_Certification_AggregateArgs = {
  distinct_on?: Maybe<Array<Worker_Certification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Certification_Order_By>>;
  where?: Maybe<Worker_Certification_Bool_Exp>;
};


/** query root */
export type Query_RootWorker_Certification_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootWorker_Drug_TestArgs = {
  distinct_on?: Maybe<Array<Worker_Drug_Test_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Drug_Test_Order_By>>;
  where?: Maybe<Worker_Drug_Test_Bool_Exp>;
};


/** query root */
export type Query_RootWorker_Drug_Test_AggregateArgs = {
  distinct_on?: Maybe<Array<Worker_Drug_Test_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Drug_Test_Order_By>>;
  where?: Maybe<Worker_Drug_Test_Bool_Exp>;
};


/** query root */
export type Query_RootWorker_Drug_Test_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootWorker_Enabled_Automatic_Email_EventArgs = {
  distinct_on?: Maybe<Array<Worker_Enabled_Automatic_Email_Event_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Enabled_Automatic_Email_Event_Order_By>>;
  where?: Maybe<Worker_Enabled_Automatic_Email_Event_Bool_Exp>;
};


/** query root */
export type Query_RootWorker_Enabled_Automatic_Email_Event_AggregateArgs = {
  distinct_on?: Maybe<Array<Worker_Enabled_Automatic_Email_Event_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Enabled_Automatic_Email_Event_Order_By>>;
  where?: Maybe<Worker_Enabled_Automatic_Email_Event_Bool_Exp>;
};


/** query root */
export type Query_RootWorker_Enabled_Automatic_Email_Event_By_PkArgs = {
  id: Scalars['uuid'];
};


/** query root */
export type Query_RootWorker_Manhour_StatsArgs = {
  args: Worker_Manhour_Stats_Args;
  distinct_on?: Maybe<Array<Worker_Manhour_Stats_Table_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Manhour_Stats_Table_Order_By>>;
  where?: Maybe<Worker_Manhour_Stats_Table_Bool_Exp>;
};


/** query root */
export type Query_RootWorker_Manhour_Stats_AggregateArgs = {
  args: Worker_Manhour_Stats_Args;
  distinct_on?: Maybe<Array<Worker_Manhour_Stats_Table_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Manhour_Stats_Table_Order_By>>;
  where?: Maybe<Worker_Manhour_Stats_Table_Bool_Exp>;
};


/** query root */
export type Query_RootWorker_Manhour_Stats_By_RangeArgs = {
  args: Worker_Manhour_Stats_By_Range_Args;
  distinct_on?: Maybe<Array<Worker_Manhour_Stats_By_Range_Table_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Manhour_Stats_By_Range_Table_Order_By>>;
  where?: Maybe<Worker_Manhour_Stats_By_Range_Table_Bool_Exp>;
};


/** query root */
export type Query_RootWorker_Manhour_Stats_By_Range_AggregateArgs = {
  args: Worker_Manhour_Stats_By_Range_Args;
  distinct_on?: Maybe<Array<Worker_Manhour_Stats_By_Range_Table_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Manhour_Stats_By_Range_Table_Order_By>>;
  where?: Maybe<Worker_Manhour_Stats_By_Range_Table_Bool_Exp>;
};


/** query root */
export type Query_RootWorker_Manhour_Stats_By_Range_TableArgs = {
  distinct_on?: Maybe<Array<Worker_Manhour_Stats_By_Range_Table_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Manhour_Stats_By_Range_Table_Order_By>>;
  where?: Maybe<Worker_Manhour_Stats_By_Range_Table_Bool_Exp>;
};


/** query root */
export type Query_RootWorker_Manhour_Stats_By_Range_Table_AggregateArgs = {
  distinct_on?: Maybe<Array<Worker_Manhour_Stats_By_Range_Table_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Manhour_Stats_By_Range_Table_Order_By>>;
  where?: Maybe<Worker_Manhour_Stats_By_Range_Table_Bool_Exp>;
};


/** query root */
export type Query_RootWorker_Manhour_Stats_By_Range_Table_By_PkArgs = {
  report_created_at: Scalars['date'];
};


/** query root */
export type Query_RootWorker_Manhour_Stats_TableArgs = {
  distinct_on?: Maybe<Array<Worker_Manhour_Stats_Table_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Manhour_Stats_Table_Order_By>>;
  where?: Maybe<Worker_Manhour_Stats_Table_Bool_Exp>;
};


/** query root */
export type Query_RootWorker_Manhour_Stats_Table_AggregateArgs = {
  distinct_on?: Maybe<Array<Worker_Manhour_Stats_Table_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Manhour_Stats_Table_Order_By>>;
  where?: Maybe<Worker_Manhour_Stats_Table_Bool_Exp>;
};


/** query root */
export type Query_RootWorker_Manhour_Stats_Table_By_PkArgs = {
  sub_id: Scalars['uuid'];
};


/** query root */
export type Query_RootWorker_RoleArgs = {
  distinct_on?: Maybe<Array<Worker_Role_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Role_Order_By>>;
  where?: Maybe<Worker_Role_Bool_Exp>;
};


/** query root */
export type Query_RootWorker_Role_AggregateArgs = {
  distinct_on?: Maybe<Array<Worker_Role_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Role_Order_By>>;
  where?: Maybe<Worker_Role_Bool_Exp>;
};


/** query root */
export type Query_RootWorker_Role_By_PkArgs = {
  value: Scalars['String'];
};


/** query root */
export type Query_RootWorker_StatsArgs = {
  args: Worker_Stats_Args;
  distinct_on?: Maybe<Array<Worker_Stats_Table_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Stats_Table_Order_By>>;
  where?: Maybe<Worker_Stats_Table_Bool_Exp>;
};


/** query root */
export type Query_RootWorker_Stats_AggregateArgs = {
  args: Worker_Stats_Args;
  distinct_on?: Maybe<Array<Worker_Stats_Table_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Stats_Table_Order_By>>;
  where?: Maybe<Worker_Stats_Table_Bool_Exp>;
};


/** query root */
export type Query_RootWorker_Stats_By_RangeArgs = {
  args: Worker_Stats_By_Range_Args;
  distinct_on?: Maybe<Array<Worker_Stats_By_Range_Table_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Stats_By_Range_Table_Order_By>>;
  where?: Maybe<Worker_Stats_By_Range_Table_Bool_Exp>;
};


/** query root */
export type Query_RootWorker_Stats_By_Range_AggregateArgs = {
  args: Worker_Stats_By_Range_Args;
  distinct_on?: Maybe<Array<Worker_Stats_By_Range_Table_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Stats_By_Range_Table_Order_By>>;
  where?: Maybe<Worker_Stats_By_Range_Table_Bool_Exp>;
};


/** query root */
export type Query_RootWorker_Stats_By_Range_TableArgs = {
  distinct_on?: Maybe<Array<Worker_Stats_By_Range_Table_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Stats_By_Range_Table_Order_By>>;
  where?: Maybe<Worker_Stats_By_Range_Table_Bool_Exp>;
};


/** query root */
export type Query_RootWorker_Stats_By_Range_Table_AggregateArgs = {
  distinct_on?: Maybe<Array<Worker_Stats_By_Range_Table_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Stats_By_Range_Table_Order_By>>;
  where?: Maybe<Worker_Stats_By_Range_Table_Bool_Exp>;
};


/** query root */
export type Query_RootWorker_Stats_By_Range_Table_By_PkArgs = {
  report_created_at: Scalars['date'];
};


/** query root */
export type Query_RootWorker_Stats_TableArgs = {
  distinct_on?: Maybe<Array<Worker_Stats_Table_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Stats_Table_Order_By>>;
  where?: Maybe<Worker_Stats_Table_Bool_Exp>;
};


/** query root */
export type Query_RootWorker_Stats_Table_AggregateArgs = {
  distinct_on?: Maybe<Array<Worker_Stats_Table_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Stats_Table_Order_By>>;
  where?: Maybe<Worker_Stats_Table_Bool_Exp>;
};


/** query root */
export type Query_RootWorker_Stats_Table_By_PkArgs = {
  sub_id: Scalars['uuid'];
};


/** query root */
export type Query_RootWorker_TitleArgs = {
  distinct_on?: Maybe<Array<Worker_Title_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Title_Order_By>>;
  where?: Maybe<Worker_Title_Bool_Exp>;
};


/** query root */
export type Query_RootWorker_Title_AggregateArgs = {
  distinct_on?: Maybe<Array<Worker_Title_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Title_Order_By>>;
  where?: Maybe<Worker_Title_Bool_Exp>;
};


/** query root */
export type Query_RootWorker_Title_By_PkArgs = {
  id: Scalars['uuid'];
};

/** columns and relationships of "report" */
export type Report = {
   __typename?: 'report';
  created_at: Scalars['timestamptz'];
  id: Scalars['uuid'];
  /** An array relationship */
  images: Array<Image>;
  /** An aggregated array relationship */
  images_aggregate: Image_Aggregate;
  /** An object relationship */
  project: Project;
  /** An object relationship */
  project_crew?: Maybe<Project_Crew>;
  project_crew_id?: Maybe<Scalars['uuid']>;
  project_id: Scalars['uuid'];
  /** An array relationship */
  report_awareness_questions: Array<Report_Awareness_Question>;
  /** An aggregated array relationship */
  report_awareness_questions_aggregate: Report_Awareness_Question_Aggregate;
  /** An object relationship */
  report_fatal_four?: Maybe<Report_Fatal_Four>;
  /** An array relationship */
  report_injuries: Array<Report_Injury>;
  /** An aggregated array relationship */
  report_injuries_aggregate: Report_Injury_Aggregate;
  /** An array relationship */
  report_project_hazards: Array<Report_Project_Hazard>;
  /** An aggregated array relationship */
  report_project_hazards_aggregate: Report_Project_Hazard_Aggregate;
  /** An array relationship */
  report_project_workers: Array<Report_Project_Worker>;
  /** An aggregated array relationship */
  report_project_workers_aggregate: Report_Project_Worker_Aggregate;
  sign_in_type: Sign_In_Type_Enum;
  /** An object relationship */
  subcontractor: Subcontractor;
  subcontractor_id: Scalars['uuid'];
  /** An array relationship */
  submission_images: Array<Submission_Image>;
  /** An aggregated array relationship */
  submission_images_aggregate: Submission_Image_Aggregate;
  submitted_language_code: Scalars['String'];
  /** An object relationship */
  submitter_project_worker: Project_Worker;
  submitter_project_worker_id: Scalars['uuid'];
  /** An object relationship */
  submitter_signature?: Maybe<Image>;
  submitter_signature_id?: Maybe<Scalars['uuid']>;
  /** An array relationship */
  tasks: Array<Task>;
  /** An aggregated array relationship */
  tasks_aggregate: Task_Aggregate;
};


/** columns and relationships of "report" */
export type ReportImagesArgs = {
  distinct_on?: Maybe<Array<Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Image_Order_By>>;
  where?: Maybe<Image_Bool_Exp>;
};


/** columns and relationships of "report" */
export type ReportImages_AggregateArgs = {
  distinct_on?: Maybe<Array<Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Image_Order_By>>;
  where?: Maybe<Image_Bool_Exp>;
};


/** columns and relationships of "report" */
export type ReportReport_Awareness_QuestionsArgs = {
  distinct_on?: Maybe<Array<Report_Awareness_Question_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Awareness_Question_Order_By>>;
  where?: Maybe<Report_Awareness_Question_Bool_Exp>;
};


/** columns and relationships of "report" */
export type ReportReport_Awareness_Questions_AggregateArgs = {
  distinct_on?: Maybe<Array<Report_Awareness_Question_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Awareness_Question_Order_By>>;
  where?: Maybe<Report_Awareness_Question_Bool_Exp>;
};


/** columns and relationships of "report" */
export type ReportReport_InjuriesArgs = {
  distinct_on?: Maybe<Array<Report_Injury_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Injury_Order_By>>;
  where?: Maybe<Report_Injury_Bool_Exp>;
};


/** columns and relationships of "report" */
export type ReportReport_Injuries_AggregateArgs = {
  distinct_on?: Maybe<Array<Report_Injury_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Injury_Order_By>>;
  where?: Maybe<Report_Injury_Bool_Exp>;
};


/** columns and relationships of "report" */
export type ReportReport_Project_HazardsArgs = {
  distinct_on?: Maybe<Array<Report_Project_Hazard_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Project_Hazard_Order_By>>;
  where?: Maybe<Report_Project_Hazard_Bool_Exp>;
};


/** columns and relationships of "report" */
export type ReportReport_Project_Hazards_AggregateArgs = {
  distinct_on?: Maybe<Array<Report_Project_Hazard_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Project_Hazard_Order_By>>;
  where?: Maybe<Report_Project_Hazard_Bool_Exp>;
};


/** columns and relationships of "report" */
export type ReportReport_Project_WorkersArgs = {
  distinct_on?: Maybe<Array<Report_Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Project_Worker_Order_By>>;
  where?: Maybe<Report_Project_Worker_Bool_Exp>;
};


/** columns and relationships of "report" */
export type ReportReport_Project_Workers_AggregateArgs = {
  distinct_on?: Maybe<Array<Report_Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Project_Worker_Order_By>>;
  where?: Maybe<Report_Project_Worker_Bool_Exp>;
};


/** columns and relationships of "report" */
export type ReportSubmission_ImagesArgs = {
  distinct_on?: Maybe<Array<Submission_Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Submission_Image_Order_By>>;
  where?: Maybe<Submission_Image_Bool_Exp>;
};


/** columns and relationships of "report" */
export type ReportSubmission_Images_AggregateArgs = {
  distinct_on?: Maybe<Array<Submission_Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Submission_Image_Order_By>>;
  where?: Maybe<Submission_Image_Bool_Exp>;
};


/** columns and relationships of "report" */
export type ReportTasksArgs = {
  distinct_on?: Maybe<Array<Task_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Order_By>>;
  where?: Maybe<Task_Bool_Exp>;
};


/** columns and relationships of "report" */
export type ReportTasks_AggregateArgs = {
  distinct_on?: Maybe<Array<Task_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Order_By>>;
  where?: Maybe<Task_Bool_Exp>;
};

/** aggregated selection of "report" */
export type Report_Aggregate = {
   __typename?: 'report_aggregate';
  aggregate?: Maybe<Report_Aggregate_Fields>;
  nodes: Array<Report>;
};

/** aggregate fields of "report" */
export type Report_Aggregate_Fields = {
   __typename?: 'report_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Report_Max_Fields>;
  min?: Maybe<Report_Min_Fields>;
};


/** aggregate fields of "report" */
export type Report_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Report_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "report" */
export type Report_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Report_Max_Order_By>;
  min?: Maybe<Report_Min_Order_By>;
};

/** input type for inserting array relation for remote table "report" */
export type Report_Arr_Rel_Insert_Input = {
  data: Array<Report_Insert_Input>;
  on_conflict?: Maybe<Report_On_Conflict>;
};

/** columns and relationships of "report_awareness_question" */
export type Report_Awareness_Question = {
   __typename?: 'report_awareness_question';
  /** An object relationship */
  answer: Text_Translation;
  answer_id: Scalars['uuid'];
  answer_text: Scalars['String'];
  /** An object relationship */
  awareness_question: Awareness_Question;
  awareness_question_id: Scalars['uuid'];
  /** An object relationship */
  report: Report;
  report_id: Scalars['uuid'];
};

/** aggregated selection of "report_awareness_question" */
export type Report_Awareness_Question_Aggregate = {
   __typename?: 'report_awareness_question_aggregate';
  aggregate?: Maybe<Report_Awareness_Question_Aggregate_Fields>;
  nodes: Array<Report_Awareness_Question>;
};

/** aggregate fields of "report_awareness_question" */
export type Report_Awareness_Question_Aggregate_Fields = {
   __typename?: 'report_awareness_question_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Report_Awareness_Question_Max_Fields>;
  min?: Maybe<Report_Awareness_Question_Min_Fields>;
};


/** aggregate fields of "report_awareness_question" */
export type Report_Awareness_Question_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Report_Awareness_Question_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "report_awareness_question" */
export type Report_Awareness_Question_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Report_Awareness_Question_Max_Order_By>;
  min?: Maybe<Report_Awareness_Question_Min_Order_By>;
};

/** input type for inserting array relation for remote table "report_awareness_question" */
export type Report_Awareness_Question_Arr_Rel_Insert_Input = {
  data: Array<Report_Awareness_Question_Insert_Input>;
  on_conflict?: Maybe<Report_Awareness_Question_On_Conflict>;
};

/** Boolean expression to filter rows from the table "report_awareness_question". All fields are combined with a logical 'AND'. */
export type Report_Awareness_Question_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Report_Awareness_Question_Bool_Exp>>>;
  _not?: Maybe<Report_Awareness_Question_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Report_Awareness_Question_Bool_Exp>>>;
  answer?: Maybe<Text_Translation_Bool_Exp>;
  answer_id?: Maybe<Uuid_Comparison_Exp>;
  answer_text?: Maybe<String_Comparison_Exp>;
  awareness_question?: Maybe<Awareness_Question_Bool_Exp>;
  awareness_question_id?: Maybe<Uuid_Comparison_Exp>;
  report?: Maybe<Report_Bool_Exp>;
  report_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "report_awareness_question" */
export enum Report_Awareness_Question_Constraint {
  /** unique or primary key constraint */
  ReportAwarenessQuestionPkey = 'report_awareness_question_pkey'
}

/** input type for inserting data into table "report_awareness_question" */
export type Report_Awareness_Question_Insert_Input = {
  answer?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  answer_id?: Maybe<Scalars['uuid']>;
  answer_text?: Maybe<Scalars['String']>;
  awareness_question?: Maybe<Awareness_Question_Obj_Rel_Insert_Input>;
  awareness_question_id?: Maybe<Scalars['uuid']>;
  report?: Maybe<Report_Obj_Rel_Insert_Input>;
  report_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Report_Awareness_Question_Max_Fields = {
   __typename?: 'report_awareness_question_max_fields';
  answer_id?: Maybe<Scalars['uuid']>;
  answer_text?: Maybe<Scalars['String']>;
  awareness_question_id?: Maybe<Scalars['uuid']>;
  report_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "report_awareness_question" */
export type Report_Awareness_Question_Max_Order_By = {
  answer_id?: Maybe<Order_By>;
  answer_text?: Maybe<Order_By>;
  awareness_question_id?: Maybe<Order_By>;
  report_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Report_Awareness_Question_Min_Fields = {
   __typename?: 'report_awareness_question_min_fields';
  answer_id?: Maybe<Scalars['uuid']>;
  answer_text?: Maybe<Scalars['String']>;
  awareness_question_id?: Maybe<Scalars['uuid']>;
  report_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "report_awareness_question" */
export type Report_Awareness_Question_Min_Order_By = {
  answer_id?: Maybe<Order_By>;
  answer_text?: Maybe<Order_By>;
  awareness_question_id?: Maybe<Order_By>;
  report_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "report_awareness_question" */
export type Report_Awareness_Question_Mutation_Response = {
   __typename?: 'report_awareness_question_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Report_Awareness_Question>;
};

/** input type for inserting object relation for remote table "report_awareness_question" */
export type Report_Awareness_Question_Obj_Rel_Insert_Input = {
  data: Report_Awareness_Question_Insert_Input;
  on_conflict?: Maybe<Report_Awareness_Question_On_Conflict>;
};

/** on conflict condition type for table "report_awareness_question" */
export type Report_Awareness_Question_On_Conflict = {
  constraint: Report_Awareness_Question_Constraint;
  update_columns: Array<Report_Awareness_Question_Update_Column>;
  where?: Maybe<Report_Awareness_Question_Bool_Exp>;
};

/** ordering options when selecting data from "report_awareness_question" */
export type Report_Awareness_Question_Order_By = {
  answer?: Maybe<Text_Translation_Order_By>;
  answer_id?: Maybe<Order_By>;
  answer_text?: Maybe<Order_By>;
  awareness_question?: Maybe<Awareness_Question_Order_By>;
  awareness_question_id?: Maybe<Order_By>;
  report?: Maybe<Report_Order_By>;
  report_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "report_awareness_question" */
export type Report_Awareness_Question_Pk_Columns_Input = {
  awareness_question_id: Scalars['uuid'];
  report_id: Scalars['uuid'];
};

/** select columns of table "report_awareness_question" */
export enum Report_Awareness_Question_Select_Column {
  /** column name */
  AnswerId = 'answer_id',
  /** column name */
  AnswerText = 'answer_text',
  /** column name */
  AwarenessQuestionId = 'awareness_question_id',
  /** column name */
  ReportId = 'report_id'
}

/** input type for updating data in table "report_awareness_question" */
export type Report_Awareness_Question_Set_Input = {
  answer_id?: Maybe<Scalars['uuid']>;
  answer_text?: Maybe<Scalars['String']>;
  awareness_question_id?: Maybe<Scalars['uuid']>;
  report_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "report_awareness_question" */
export enum Report_Awareness_Question_Update_Column {
  /** column name */
  AnswerId = 'answer_id',
  /** column name */
  AnswerText = 'answer_text',
  /** column name */
  AwarenessQuestionId = 'awareness_question_id',
  /** column name */
  ReportId = 'report_id'
}

/** Boolean expression to filter rows from the table "report". All fields are combined with a logical 'AND'. */
export type Report_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Report_Bool_Exp>>>;
  _not?: Maybe<Report_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Report_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  images?: Maybe<Image_Bool_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_crew?: Maybe<Project_Crew_Bool_Exp>;
  project_crew_id?: Maybe<Uuid_Comparison_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  report_awareness_questions?: Maybe<Report_Awareness_Question_Bool_Exp>;
  report_fatal_four?: Maybe<Report_Fatal_Four_Bool_Exp>;
  report_injuries?: Maybe<Report_Injury_Bool_Exp>;
  report_project_hazards?: Maybe<Report_Project_Hazard_Bool_Exp>;
  report_project_workers?: Maybe<Report_Project_Worker_Bool_Exp>;
  sign_in_type?: Maybe<Sign_In_Type_Enum_Comparison_Exp>;
  subcontractor?: Maybe<Subcontractor_Bool_Exp>;
  subcontractor_id?: Maybe<Uuid_Comparison_Exp>;
  submission_images?: Maybe<Submission_Image_Bool_Exp>;
  submitted_language_code?: Maybe<String_Comparison_Exp>;
  submitter_project_worker?: Maybe<Project_Worker_Bool_Exp>;
  submitter_project_worker_id?: Maybe<Uuid_Comparison_Exp>;
  submitter_signature?: Maybe<Image_Bool_Exp>;
  submitter_signature_id?: Maybe<Uuid_Comparison_Exp>;
  tasks?: Maybe<Task_Bool_Exp>;
};

/** unique or primary key constraints on table "report" */
export enum Report_Constraint {
  /** unique or primary key constraint */
  ReportsPkey = 'reports_pkey'
}

/** columns and relationships of "report_fatal_four" */
export type Report_Fatal_Four = {
   __typename?: 'report_fatal_four';
  /** An object relationship */
  caught_control?: Maybe<Text_Translation>;
  caught_control_id?: Maybe<Scalars['uuid']>;
  caught_control_text?: Maybe<Scalars['String']>;
  /** An object relationship */
  electrocute_control?: Maybe<Text_Translation>;
  electrocute_control_id?: Maybe<Scalars['uuid']>;
  electrocute_control_text?: Maybe<Scalars['String']>;
  /** An object relationship */
  fall_control?: Maybe<Text_Translation>;
  fall_control_id?: Maybe<Scalars['uuid']>;
  fall_control_text?: Maybe<Scalars['String']>;
  /** An object relationship */
  report: Report;
  report_id: Scalars['uuid'];
  /** An object relationship */
  struck_control?: Maybe<Text_Translation>;
  struck_control_text?: Maybe<Scalars['String']>;
  stuck_control_id?: Maybe<Scalars['uuid']>;
};

/** aggregated selection of "report_fatal_four" */
export type Report_Fatal_Four_Aggregate = {
   __typename?: 'report_fatal_four_aggregate';
  aggregate?: Maybe<Report_Fatal_Four_Aggregate_Fields>;
  nodes: Array<Report_Fatal_Four>;
};

/** aggregate fields of "report_fatal_four" */
export type Report_Fatal_Four_Aggregate_Fields = {
   __typename?: 'report_fatal_four_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Report_Fatal_Four_Max_Fields>;
  min?: Maybe<Report_Fatal_Four_Min_Fields>;
};


/** aggregate fields of "report_fatal_four" */
export type Report_Fatal_Four_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Report_Fatal_Four_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "report_fatal_four" */
export type Report_Fatal_Four_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Report_Fatal_Four_Max_Order_By>;
  min?: Maybe<Report_Fatal_Four_Min_Order_By>;
};

/** input type for inserting array relation for remote table "report_fatal_four" */
export type Report_Fatal_Four_Arr_Rel_Insert_Input = {
  data: Array<Report_Fatal_Four_Insert_Input>;
  on_conflict?: Maybe<Report_Fatal_Four_On_Conflict>;
};

/** Boolean expression to filter rows from the table "report_fatal_four". All fields are combined with a logical 'AND'. */
export type Report_Fatal_Four_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Report_Fatal_Four_Bool_Exp>>>;
  _not?: Maybe<Report_Fatal_Four_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Report_Fatal_Four_Bool_Exp>>>;
  caught_control?: Maybe<Text_Translation_Bool_Exp>;
  caught_control_id?: Maybe<Uuid_Comparison_Exp>;
  caught_control_text?: Maybe<String_Comparison_Exp>;
  electrocute_control?: Maybe<Text_Translation_Bool_Exp>;
  electrocute_control_id?: Maybe<Uuid_Comparison_Exp>;
  electrocute_control_text?: Maybe<String_Comparison_Exp>;
  fall_control?: Maybe<Text_Translation_Bool_Exp>;
  fall_control_id?: Maybe<Uuid_Comparison_Exp>;
  fall_control_text?: Maybe<String_Comparison_Exp>;
  report?: Maybe<Report_Bool_Exp>;
  report_id?: Maybe<Uuid_Comparison_Exp>;
  struck_control?: Maybe<Text_Translation_Bool_Exp>;
  struck_control_text?: Maybe<String_Comparison_Exp>;
  stuck_control_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "report_fatal_four" */
export enum Report_Fatal_Four_Constraint {
  /** unique or primary key constraint */
  ReportFatalFourPkey = 'report_fatal_four_pkey',
  /** unique or primary key constraint */
  ReportFatalFourReportIdKey = 'report_fatal_four_report_id_key'
}

/** input type for inserting data into table "report_fatal_four" */
export type Report_Fatal_Four_Insert_Input = {
  caught_control?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  caught_control_id?: Maybe<Scalars['uuid']>;
  caught_control_text?: Maybe<Scalars['String']>;
  electrocute_control?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  electrocute_control_id?: Maybe<Scalars['uuid']>;
  electrocute_control_text?: Maybe<Scalars['String']>;
  fall_control?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  fall_control_id?: Maybe<Scalars['uuid']>;
  fall_control_text?: Maybe<Scalars['String']>;
  report?: Maybe<Report_Obj_Rel_Insert_Input>;
  report_id?: Maybe<Scalars['uuid']>;
  struck_control?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  struck_control_text?: Maybe<Scalars['String']>;
  stuck_control_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Report_Fatal_Four_Max_Fields = {
   __typename?: 'report_fatal_four_max_fields';
  caught_control_id?: Maybe<Scalars['uuid']>;
  caught_control_text?: Maybe<Scalars['String']>;
  electrocute_control_id?: Maybe<Scalars['uuid']>;
  electrocute_control_text?: Maybe<Scalars['String']>;
  fall_control_id?: Maybe<Scalars['uuid']>;
  fall_control_text?: Maybe<Scalars['String']>;
  report_id?: Maybe<Scalars['uuid']>;
  struck_control_text?: Maybe<Scalars['String']>;
  stuck_control_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "report_fatal_four" */
export type Report_Fatal_Four_Max_Order_By = {
  caught_control_id?: Maybe<Order_By>;
  caught_control_text?: Maybe<Order_By>;
  electrocute_control_id?: Maybe<Order_By>;
  electrocute_control_text?: Maybe<Order_By>;
  fall_control_id?: Maybe<Order_By>;
  fall_control_text?: Maybe<Order_By>;
  report_id?: Maybe<Order_By>;
  struck_control_text?: Maybe<Order_By>;
  stuck_control_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Report_Fatal_Four_Min_Fields = {
   __typename?: 'report_fatal_four_min_fields';
  caught_control_id?: Maybe<Scalars['uuid']>;
  caught_control_text?: Maybe<Scalars['String']>;
  electrocute_control_id?: Maybe<Scalars['uuid']>;
  electrocute_control_text?: Maybe<Scalars['String']>;
  fall_control_id?: Maybe<Scalars['uuid']>;
  fall_control_text?: Maybe<Scalars['String']>;
  report_id?: Maybe<Scalars['uuid']>;
  struck_control_text?: Maybe<Scalars['String']>;
  stuck_control_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "report_fatal_four" */
export type Report_Fatal_Four_Min_Order_By = {
  caught_control_id?: Maybe<Order_By>;
  caught_control_text?: Maybe<Order_By>;
  electrocute_control_id?: Maybe<Order_By>;
  electrocute_control_text?: Maybe<Order_By>;
  fall_control_id?: Maybe<Order_By>;
  fall_control_text?: Maybe<Order_By>;
  report_id?: Maybe<Order_By>;
  struck_control_text?: Maybe<Order_By>;
  stuck_control_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "report_fatal_four" */
export type Report_Fatal_Four_Mutation_Response = {
   __typename?: 'report_fatal_four_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Report_Fatal_Four>;
};

/** input type for inserting object relation for remote table "report_fatal_four" */
export type Report_Fatal_Four_Obj_Rel_Insert_Input = {
  data: Report_Fatal_Four_Insert_Input;
  on_conflict?: Maybe<Report_Fatal_Four_On_Conflict>;
};

/** on conflict condition type for table "report_fatal_four" */
export type Report_Fatal_Four_On_Conflict = {
  constraint: Report_Fatal_Four_Constraint;
  update_columns: Array<Report_Fatal_Four_Update_Column>;
  where?: Maybe<Report_Fatal_Four_Bool_Exp>;
};

/** ordering options when selecting data from "report_fatal_four" */
export type Report_Fatal_Four_Order_By = {
  caught_control?: Maybe<Text_Translation_Order_By>;
  caught_control_id?: Maybe<Order_By>;
  caught_control_text?: Maybe<Order_By>;
  electrocute_control?: Maybe<Text_Translation_Order_By>;
  electrocute_control_id?: Maybe<Order_By>;
  electrocute_control_text?: Maybe<Order_By>;
  fall_control?: Maybe<Text_Translation_Order_By>;
  fall_control_id?: Maybe<Order_By>;
  fall_control_text?: Maybe<Order_By>;
  report?: Maybe<Report_Order_By>;
  report_id?: Maybe<Order_By>;
  struck_control?: Maybe<Text_Translation_Order_By>;
  struck_control_text?: Maybe<Order_By>;
  stuck_control_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "report_fatal_four" */
export type Report_Fatal_Four_Pk_Columns_Input = {
  report_id: Scalars['uuid'];
};

/** select columns of table "report_fatal_four" */
export enum Report_Fatal_Four_Select_Column {
  /** column name */
  CaughtControlId = 'caught_control_id',
  /** column name */
  CaughtControlText = 'caught_control_text',
  /** column name */
  ElectrocuteControlId = 'electrocute_control_id',
  /** column name */
  ElectrocuteControlText = 'electrocute_control_text',
  /** column name */
  FallControlId = 'fall_control_id',
  /** column name */
  FallControlText = 'fall_control_text',
  /** column name */
  ReportId = 'report_id',
  /** column name */
  StruckControlText = 'struck_control_text',
  /** column name */
  StuckControlId = 'stuck_control_id'
}

/** input type for updating data in table "report_fatal_four" */
export type Report_Fatal_Four_Set_Input = {
  caught_control_id?: Maybe<Scalars['uuid']>;
  caught_control_text?: Maybe<Scalars['String']>;
  electrocute_control_id?: Maybe<Scalars['uuid']>;
  electrocute_control_text?: Maybe<Scalars['String']>;
  fall_control_id?: Maybe<Scalars['uuid']>;
  fall_control_text?: Maybe<Scalars['String']>;
  report_id?: Maybe<Scalars['uuid']>;
  struck_control_text?: Maybe<Scalars['String']>;
  stuck_control_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "report_fatal_four" */
export enum Report_Fatal_Four_Update_Column {
  /** column name */
  CaughtControlId = 'caught_control_id',
  /** column name */
  CaughtControlText = 'caught_control_text',
  /** column name */
  ElectrocuteControlId = 'electrocute_control_id',
  /** column name */
  ElectrocuteControlText = 'electrocute_control_text',
  /** column name */
  FallControlId = 'fall_control_id',
  /** column name */
  FallControlText = 'fall_control_text',
  /** column name */
  ReportId = 'report_id',
  /** column name */
  StruckControlText = 'struck_control_text',
  /** column name */
  StuckControlId = 'stuck_control_id'
}

/** columns and relationships of "report_injury" */
export type Report_Injury = {
   __typename?: 'report_injury';
  id: Scalars['uuid'];
  /** An object relationship */
  project_worker: Project_Worker;
  project_worker_id: Scalars['uuid'];
  /** An object relationship */
  report: Report;
  report_id: Scalars['uuid'];
};

/** aggregated selection of "report_injury" */
export type Report_Injury_Aggregate = {
   __typename?: 'report_injury_aggregate';
  aggregate?: Maybe<Report_Injury_Aggregate_Fields>;
  nodes: Array<Report_Injury>;
};

/** aggregate fields of "report_injury" */
export type Report_Injury_Aggregate_Fields = {
   __typename?: 'report_injury_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Report_Injury_Max_Fields>;
  min?: Maybe<Report_Injury_Min_Fields>;
};


/** aggregate fields of "report_injury" */
export type Report_Injury_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Report_Injury_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "report_injury" */
export type Report_Injury_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Report_Injury_Max_Order_By>;
  min?: Maybe<Report_Injury_Min_Order_By>;
};

/** input type for inserting array relation for remote table "report_injury" */
export type Report_Injury_Arr_Rel_Insert_Input = {
  data: Array<Report_Injury_Insert_Input>;
  on_conflict?: Maybe<Report_Injury_On_Conflict>;
};

/** Boolean expression to filter rows from the table "report_injury". All fields are combined with a logical 'AND'. */
export type Report_Injury_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Report_Injury_Bool_Exp>>>;
  _not?: Maybe<Report_Injury_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Report_Injury_Bool_Exp>>>;
  id?: Maybe<Uuid_Comparison_Exp>;
  project_worker?: Maybe<Project_Worker_Bool_Exp>;
  project_worker_id?: Maybe<Uuid_Comparison_Exp>;
  report?: Maybe<Report_Bool_Exp>;
  report_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "report_injury" */
export enum Report_Injury_Constraint {
  /** unique or primary key constraint */
  ReportInjuryPkey = 'report_injury_pkey',
  /** unique or primary key constraint */
  ReportInjuryReportIdProjectWorkerIdKey = 'report_injury_report_id_project_worker_id_key'
}

/** input type for inserting data into table "report_injury" */
export type Report_Injury_Insert_Input = {
  id?: Maybe<Scalars['uuid']>;
  project_worker?: Maybe<Project_Worker_Obj_Rel_Insert_Input>;
  project_worker_id?: Maybe<Scalars['uuid']>;
  report?: Maybe<Report_Obj_Rel_Insert_Input>;
  report_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Report_Injury_Max_Fields = {
   __typename?: 'report_injury_max_fields';
  id?: Maybe<Scalars['uuid']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
  report_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "report_injury" */
export type Report_Injury_Max_Order_By = {
  id?: Maybe<Order_By>;
  project_worker_id?: Maybe<Order_By>;
  report_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Report_Injury_Min_Fields = {
   __typename?: 'report_injury_min_fields';
  id?: Maybe<Scalars['uuid']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
  report_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "report_injury" */
export type Report_Injury_Min_Order_By = {
  id?: Maybe<Order_By>;
  project_worker_id?: Maybe<Order_By>;
  report_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "report_injury" */
export type Report_Injury_Mutation_Response = {
   __typename?: 'report_injury_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Report_Injury>;
};

/** input type for inserting object relation for remote table "report_injury" */
export type Report_Injury_Obj_Rel_Insert_Input = {
  data: Report_Injury_Insert_Input;
  on_conflict?: Maybe<Report_Injury_On_Conflict>;
};

/** on conflict condition type for table "report_injury" */
export type Report_Injury_On_Conflict = {
  constraint: Report_Injury_Constraint;
  update_columns: Array<Report_Injury_Update_Column>;
  where?: Maybe<Report_Injury_Bool_Exp>;
};

/** ordering options when selecting data from "report_injury" */
export type Report_Injury_Order_By = {
  id?: Maybe<Order_By>;
  project_worker?: Maybe<Project_Worker_Order_By>;
  project_worker_id?: Maybe<Order_By>;
  report?: Maybe<Report_Order_By>;
  report_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "report_injury" */
export type Report_Injury_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "report_injury" */
export enum Report_Injury_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  ProjectWorkerId = 'project_worker_id',
  /** column name */
  ReportId = 'report_id'
}

/** input type for updating data in table "report_injury" */
export type Report_Injury_Set_Input = {
  id?: Maybe<Scalars['uuid']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
  report_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "report_injury" */
export enum Report_Injury_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  ProjectWorkerId = 'project_worker_id',
  /** column name */
  ReportId = 'report_id'
}

/** input type for inserting data into table "report" */
export type Report_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  images?: Maybe<Image_Arr_Rel_Insert_Input>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_crew?: Maybe<Project_Crew_Obj_Rel_Insert_Input>;
  project_crew_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  report_awareness_questions?: Maybe<Report_Awareness_Question_Arr_Rel_Insert_Input>;
  report_fatal_four?: Maybe<Report_Fatal_Four_Obj_Rel_Insert_Input>;
  report_injuries?: Maybe<Report_Injury_Arr_Rel_Insert_Input>;
  report_project_hazards?: Maybe<Report_Project_Hazard_Arr_Rel_Insert_Input>;
  report_project_workers?: Maybe<Report_Project_Worker_Arr_Rel_Insert_Input>;
  sign_in_type?: Maybe<Sign_In_Type_Enum>;
  subcontractor?: Maybe<Subcontractor_Obj_Rel_Insert_Input>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  submission_images?: Maybe<Submission_Image_Arr_Rel_Insert_Input>;
  submitted_language_code?: Maybe<Scalars['String']>;
  submitter_project_worker?: Maybe<Project_Worker_Obj_Rel_Insert_Input>;
  submitter_project_worker_id?: Maybe<Scalars['uuid']>;
  submitter_signature?: Maybe<Image_Obj_Rel_Insert_Input>;
  submitter_signature_id?: Maybe<Scalars['uuid']>;
  tasks?: Maybe<Task_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Report_Max_Fields = {
   __typename?: 'report_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_crew_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  submitted_language_code?: Maybe<Scalars['String']>;
  submitter_project_worker_id?: Maybe<Scalars['uuid']>;
  submitter_signature_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "report" */
export type Report_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_crew_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  submitted_language_code?: Maybe<Order_By>;
  submitter_project_worker_id?: Maybe<Order_By>;
  submitter_signature_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Report_Min_Fields = {
   __typename?: 'report_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_crew_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  submitted_language_code?: Maybe<Scalars['String']>;
  submitter_project_worker_id?: Maybe<Scalars['uuid']>;
  submitter_signature_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "report" */
export type Report_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_crew_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  submitted_language_code?: Maybe<Order_By>;
  submitter_project_worker_id?: Maybe<Order_By>;
  submitter_signature_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "report" */
export type Report_Mutation_Response = {
   __typename?: 'report_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Report>;
};

/** input type for inserting object relation for remote table "report" */
export type Report_Obj_Rel_Insert_Input = {
  data: Report_Insert_Input;
  on_conflict?: Maybe<Report_On_Conflict>;
};

/** on conflict condition type for table "report" */
export type Report_On_Conflict = {
  constraint: Report_Constraint;
  update_columns: Array<Report_Update_Column>;
  where?: Maybe<Report_Bool_Exp>;
};

/** ordering options when selecting data from "report" */
export type Report_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  images_aggregate?: Maybe<Image_Aggregate_Order_By>;
  project?: Maybe<Project_Order_By>;
  project_crew?: Maybe<Project_Crew_Order_By>;
  project_crew_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  report_awareness_questions_aggregate?: Maybe<Report_Awareness_Question_Aggregate_Order_By>;
  report_fatal_four?: Maybe<Report_Fatal_Four_Order_By>;
  report_injuries_aggregate?: Maybe<Report_Injury_Aggregate_Order_By>;
  report_project_hazards_aggregate?: Maybe<Report_Project_Hazard_Aggregate_Order_By>;
  report_project_workers_aggregate?: Maybe<Report_Project_Worker_Aggregate_Order_By>;
  sign_in_type?: Maybe<Order_By>;
  subcontractor?: Maybe<Subcontractor_Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  submission_images_aggregate?: Maybe<Submission_Image_Aggregate_Order_By>;
  submitted_language_code?: Maybe<Order_By>;
  submitter_project_worker?: Maybe<Project_Worker_Order_By>;
  submitter_project_worker_id?: Maybe<Order_By>;
  submitter_signature?: Maybe<Image_Order_By>;
  submitter_signature_id?: Maybe<Order_By>;
  tasks_aggregate?: Maybe<Task_Aggregate_Order_By>;
};

/** primary key columns input for table: "report" */
export type Report_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** columns and relationships of "report_project_hazard" */
export type Report_Project_Hazard = {
   __typename?: 'report_project_hazard';
  /** An object relationship */
  answer: Text_Translation;
  answer_id: Scalars['uuid'];
  answer_text: Scalars['String'];
  id: Scalars['uuid'];
  /** An object relationship */
  project_hazard: Project_Hazard;
  project_hazard_id: Scalars['uuid'];
  /** An object relationship */
  report: Report;
  report_id: Scalars['uuid'];
};

/** aggregated selection of "report_project_hazard" */
export type Report_Project_Hazard_Aggregate = {
   __typename?: 'report_project_hazard_aggregate';
  aggregate?: Maybe<Report_Project_Hazard_Aggregate_Fields>;
  nodes: Array<Report_Project_Hazard>;
};

/** aggregate fields of "report_project_hazard" */
export type Report_Project_Hazard_Aggregate_Fields = {
   __typename?: 'report_project_hazard_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Report_Project_Hazard_Max_Fields>;
  min?: Maybe<Report_Project_Hazard_Min_Fields>;
};


/** aggregate fields of "report_project_hazard" */
export type Report_Project_Hazard_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Report_Project_Hazard_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "report_project_hazard" */
export type Report_Project_Hazard_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Report_Project_Hazard_Max_Order_By>;
  min?: Maybe<Report_Project_Hazard_Min_Order_By>;
};

/** input type for inserting array relation for remote table "report_project_hazard" */
export type Report_Project_Hazard_Arr_Rel_Insert_Input = {
  data: Array<Report_Project_Hazard_Insert_Input>;
  on_conflict?: Maybe<Report_Project_Hazard_On_Conflict>;
};

/** Boolean expression to filter rows from the table "report_project_hazard". All fields are combined with a logical 'AND'. */
export type Report_Project_Hazard_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Report_Project_Hazard_Bool_Exp>>>;
  _not?: Maybe<Report_Project_Hazard_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Report_Project_Hazard_Bool_Exp>>>;
  answer?: Maybe<Text_Translation_Bool_Exp>;
  answer_id?: Maybe<Uuid_Comparison_Exp>;
  answer_text?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  project_hazard?: Maybe<Project_Hazard_Bool_Exp>;
  project_hazard_id?: Maybe<Uuid_Comparison_Exp>;
  report?: Maybe<Report_Bool_Exp>;
  report_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "report_project_hazard" */
export enum Report_Project_Hazard_Constraint {
  /** unique or primary key constraint */
  ReportProjectHazardPkey = 'report_project_hazard_pkey',
  /** unique or primary key constraint */
  ReportProjectHazardProjectHazardIdReportIdKey = 'report_project_hazard_project_hazard_id_report_id_key'
}

/** input type for inserting data into table "report_project_hazard" */
export type Report_Project_Hazard_Insert_Input = {
  answer?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  answer_id?: Maybe<Scalars['uuid']>;
  answer_text?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  project_hazard?: Maybe<Project_Hazard_Obj_Rel_Insert_Input>;
  project_hazard_id?: Maybe<Scalars['uuid']>;
  report?: Maybe<Report_Obj_Rel_Insert_Input>;
  report_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Report_Project_Hazard_Max_Fields = {
   __typename?: 'report_project_hazard_max_fields';
  answer_id?: Maybe<Scalars['uuid']>;
  answer_text?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  project_hazard_id?: Maybe<Scalars['uuid']>;
  report_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "report_project_hazard" */
export type Report_Project_Hazard_Max_Order_By = {
  answer_id?: Maybe<Order_By>;
  answer_text?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_hazard_id?: Maybe<Order_By>;
  report_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Report_Project_Hazard_Min_Fields = {
   __typename?: 'report_project_hazard_min_fields';
  answer_id?: Maybe<Scalars['uuid']>;
  answer_text?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  project_hazard_id?: Maybe<Scalars['uuid']>;
  report_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "report_project_hazard" */
export type Report_Project_Hazard_Min_Order_By = {
  answer_id?: Maybe<Order_By>;
  answer_text?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_hazard_id?: Maybe<Order_By>;
  report_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "report_project_hazard" */
export type Report_Project_Hazard_Mutation_Response = {
   __typename?: 'report_project_hazard_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Report_Project_Hazard>;
};

/** input type for inserting object relation for remote table "report_project_hazard" */
export type Report_Project_Hazard_Obj_Rel_Insert_Input = {
  data: Report_Project_Hazard_Insert_Input;
  on_conflict?: Maybe<Report_Project_Hazard_On_Conflict>;
};

/** on conflict condition type for table "report_project_hazard" */
export type Report_Project_Hazard_On_Conflict = {
  constraint: Report_Project_Hazard_Constraint;
  update_columns: Array<Report_Project_Hazard_Update_Column>;
  where?: Maybe<Report_Project_Hazard_Bool_Exp>;
};

/** ordering options when selecting data from "report_project_hazard" */
export type Report_Project_Hazard_Order_By = {
  answer?: Maybe<Text_Translation_Order_By>;
  answer_id?: Maybe<Order_By>;
  answer_text?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_hazard?: Maybe<Project_Hazard_Order_By>;
  project_hazard_id?: Maybe<Order_By>;
  report?: Maybe<Report_Order_By>;
  report_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "report_project_hazard" */
export type Report_Project_Hazard_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "report_project_hazard" */
export enum Report_Project_Hazard_Select_Column {
  /** column name */
  AnswerId = 'answer_id',
  /** column name */
  AnswerText = 'answer_text',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectHazardId = 'project_hazard_id',
  /** column name */
  ReportId = 'report_id'
}

/** input type for updating data in table "report_project_hazard" */
export type Report_Project_Hazard_Set_Input = {
  answer_id?: Maybe<Scalars['uuid']>;
  answer_text?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  project_hazard_id?: Maybe<Scalars['uuid']>;
  report_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "report_project_hazard" */
export enum Report_Project_Hazard_Update_Column {
  /** column name */
  AnswerId = 'answer_id',
  /** column name */
  AnswerText = 'answer_text',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectHazardId = 'project_hazard_id',
  /** column name */
  ReportId = 'report_id'
}

/** columns and relationships of "report_project_post" */
export type Report_Project_Post = {
   __typename?: 'report_project_post';
  /** An object relationship */
  answer: Text_Translation;
  answer_id: Scalars['uuid'];
  answer_text: Scalars['String'];
  id: Scalars['uuid'];
  /** An object relationship */
  project_post: Project_Post;
  project_post_id: Scalars['uuid'];
  /** An object relationship */
  report: Report;
  report_id: Scalars['uuid'];
};

/** aggregated selection of "report_project_post" */
export type Report_Project_Post_Aggregate = {
   __typename?: 'report_project_post_aggregate';
  aggregate?: Maybe<Report_Project_Post_Aggregate_Fields>;
  nodes: Array<Report_Project_Post>;
};

/** aggregate fields of "report_project_post" */
export type Report_Project_Post_Aggregate_Fields = {
   __typename?: 'report_project_post_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Report_Project_Post_Max_Fields>;
  min?: Maybe<Report_Project_Post_Min_Fields>;
};


/** aggregate fields of "report_project_post" */
export type Report_Project_Post_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Report_Project_Post_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "report_project_post" */
export type Report_Project_Post_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Report_Project_Post_Max_Order_By>;
  min?: Maybe<Report_Project_Post_Min_Order_By>;
};

/** input type for inserting array relation for remote table "report_project_post" */
export type Report_Project_Post_Arr_Rel_Insert_Input = {
  data: Array<Report_Project_Post_Insert_Input>;
  on_conflict?: Maybe<Report_Project_Post_On_Conflict>;
};

/** Boolean expression to filter rows from the table "report_project_post". All fields are combined with a logical 'AND'. */
export type Report_Project_Post_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Report_Project_Post_Bool_Exp>>>;
  _not?: Maybe<Report_Project_Post_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Report_Project_Post_Bool_Exp>>>;
  answer?: Maybe<Text_Translation_Bool_Exp>;
  answer_id?: Maybe<Uuid_Comparison_Exp>;
  answer_text?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  project_post?: Maybe<Project_Post_Bool_Exp>;
  project_post_id?: Maybe<Uuid_Comparison_Exp>;
  report?: Maybe<Report_Bool_Exp>;
  report_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "report_project_post" */
export enum Report_Project_Post_Constraint {
  /** unique or primary key constraint */
  ReportProjectPostPkey = 'report_project_post_pkey',
  /** unique or primary key constraint */
  ReportProjectPostProjectPostIdReportIdKey = 'report_project_post_project_post_id_report_id_key'
}

/** input type for inserting data into table "report_project_post" */
export type Report_Project_Post_Insert_Input = {
  answer?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  answer_id?: Maybe<Scalars['uuid']>;
  answer_text?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  project_post?: Maybe<Project_Post_Obj_Rel_Insert_Input>;
  project_post_id?: Maybe<Scalars['uuid']>;
  report?: Maybe<Report_Obj_Rel_Insert_Input>;
  report_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Report_Project_Post_Max_Fields = {
   __typename?: 'report_project_post_max_fields';
  answer_id?: Maybe<Scalars['uuid']>;
  answer_text?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  project_post_id?: Maybe<Scalars['uuid']>;
  report_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "report_project_post" */
export type Report_Project_Post_Max_Order_By = {
  answer_id?: Maybe<Order_By>;
  answer_text?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_post_id?: Maybe<Order_By>;
  report_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Report_Project_Post_Min_Fields = {
   __typename?: 'report_project_post_min_fields';
  answer_id?: Maybe<Scalars['uuid']>;
  answer_text?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  project_post_id?: Maybe<Scalars['uuid']>;
  report_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "report_project_post" */
export type Report_Project_Post_Min_Order_By = {
  answer_id?: Maybe<Order_By>;
  answer_text?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_post_id?: Maybe<Order_By>;
  report_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "report_project_post" */
export type Report_Project_Post_Mutation_Response = {
   __typename?: 'report_project_post_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Report_Project_Post>;
};

/** input type for inserting object relation for remote table "report_project_post" */
export type Report_Project_Post_Obj_Rel_Insert_Input = {
  data: Report_Project_Post_Insert_Input;
  on_conflict?: Maybe<Report_Project_Post_On_Conflict>;
};

/** on conflict condition type for table "report_project_post" */
export type Report_Project_Post_On_Conflict = {
  constraint: Report_Project_Post_Constraint;
  update_columns: Array<Report_Project_Post_Update_Column>;
  where?: Maybe<Report_Project_Post_Bool_Exp>;
};

/** ordering options when selecting data from "report_project_post" */
export type Report_Project_Post_Order_By = {
  answer?: Maybe<Text_Translation_Order_By>;
  answer_id?: Maybe<Order_By>;
  answer_text?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_post?: Maybe<Project_Post_Order_By>;
  project_post_id?: Maybe<Order_By>;
  report?: Maybe<Report_Order_By>;
  report_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "report_project_post" */
export type Report_Project_Post_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "report_project_post" */
export enum Report_Project_Post_Select_Column {
  /** column name */
  AnswerId = 'answer_id',
  /** column name */
  AnswerText = 'answer_text',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectPostId = 'project_post_id',
  /** column name */
  ReportId = 'report_id'
}

/** input type for updating data in table "report_project_post" */
export type Report_Project_Post_Set_Input = {
  answer_id?: Maybe<Scalars['uuid']>;
  answer_text?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  project_post_id?: Maybe<Scalars['uuid']>;
  report_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "report_project_post" */
export enum Report_Project_Post_Update_Column {
  /** column name */
  AnswerId = 'answer_id',
  /** column name */
  AnswerText = 'answer_text',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectPostId = 'project_post_id',
  /** column name */
  ReportId = 'report_id'
}

/** columns and relationships of "report_project_worker" */
export type Report_Project_Worker = {
   __typename?: 'report_project_worker';
  id?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  project_worker: Project_Worker;
  project_worker_id: Scalars['uuid'];
  /** An object relationship */
  report: Report;
  report_id: Scalars['uuid'];
  /** An object relationship */
  signature_image?: Maybe<Image>;
  signature_image_id?: Maybe<Scalars['uuid']>;
};

/** aggregated selection of "report_project_worker" */
export type Report_Project_Worker_Aggregate = {
   __typename?: 'report_project_worker_aggregate';
  aggregate?: Maybe<Report_Project_Worker_Aggregate_Fields>;
  nodes: Array<Report_Project_Worker>;
};

/** aggregate fields of "report_project_worker" */
export type Report_Project_Worker_Aggregate_Fields = {
   __typename?: 'report_project_worker_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Report_Project_Worker_Max_Fields>;
  min?: Maybe<Report_Project_Worker_Min_Fields>;
};


/** aggregate fields of "report_project_worker" */
export type Report_Project_Worker_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Report_Project_Worker_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "report_project_worker" */
export type Report_Project_Worker_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Report_Project_Worker_Max_Order_By>;
  min?: Maybe<Report_Project_Worker_Min_Order_By>;
};

/** input type for inserting array relation for remote table "report_project_worker" */
export type Report_Project_Worker_Arr_Rel_Insert_Input = {
  data: Array<Report_Project_Worker_Insert_Input>;
  on_conflict?: Maybe<Report_Project_Worker_On_Conflict>;
};

/** Boolean expression to filter rows from the table "report_project_worker". All fields are combined with a logical 'AND'. */
export type Report_Project_Worker_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Report_Project_Worker_Bool_Exp>>>;
  _not?: Maybe<Report_Project_Worker_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Report_Project_Worker_Bool_Exp>>>;
  id?: Maybe<Uuid_Comparison_Exp>;
  project_worker?: Maybe<Project_Worker_Bool_Exp>;
  project_worker_id?: Maybe<Uuid_Comparison_Exp>;
  report?: Maybe<Report_Bool_Exp>;
  report_id?: Maybe<Uuid_Comparison_Exp>;
  signature_image?: Maybe<Image_Bool_Exp>;
  signature_image_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "report_project_worker" */
export enum Report_Project_Worker_Constraint {
  /** unique or primary key constraint */
  ReportProjectWorkerIdKey = 'report_project_worker_id_key',
  /** unique or primary key constraint */
  ReportProjectWorkerPkey = 'report_project_worker_pkey',
  /** unique or primary key constraint */
  ReportProjectWorkerReportIdProjectWorkerIdKey = 'report_project_worker_report_id_project_worker_id_key'
}

/** input type for inserting data into table "report_project_worker" */
export type Report_Project_Worker_Insert_Input = {
  id?: Maybe<Scalars['uuid']>;
  project_worker?: Maybe<Project_Worker_Obj_Rel_Insert_Input>;
  project_worker_id?: Maybe<Scalars['uuid']>;
  report?: Maybe<Report_Obj_Rel_Insert_Input>;
  report_id?: Maybe<Scalars['uuid']>;
  signature_image?: Maybe<Image_Obj_Rel_Insert_Input>;
  signature_image_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Report_Project_Worker_Max_Fields = {
   __typename?: 'report_project_worker_max_fields';
  id?: Maybe<Scalars['uuid']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
  report_id?: Maybe<Scalars['uuid']>;
  signature_image_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "report_project_worker" */
export type Report_Project_Worker_Max_Order_By = {
  id?: Maybe<Order_By>;
  project_worker_id?: Maybe<Order_By>;
  report_id?: Maybe<Order_By>;
  signature_image_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Report_Project_Worker_Min_Fields = {
   __typename?: 'report_project_worker_min_fields';
  id?: Maybe<Scalars['uuid']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
  report_id?: Maybe<Scalars['uuid']>;
  signature_image_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "report_project_worker" */
export type Report_Project_Worker_Min_Order_By = {
  id?: Maybe<Order_By>;
  project_worker_id?: Maybe<Order_By>;
  report_id?: Maybe<Order_By>;
  signature_image_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "report_project_worker" */
export type Report_Project_Worker_Mutation_Response = {
   __typename?: 'report_project_worker_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Report_Project_Worker>;
};

/** input type for inserting object relation for remote table "report_project_worker" */
export type Report_Project_Worker_Obj_Rel_Insert_Input = {
  data: Report_Project_Worker_Insert_Input;
  on_conflict?: Maybe<Report_Project_Worker_On_Conflict>;
};

/** on conflict condition type for table "report_project_worker" */
export type Report_Project_Worker_On_Conflict = {
  constraint: Report_Project_Worker_Constraint;
  update_columns: Array<Report_Project_Worker_Update_Column>;
  where?: Maybe<Report_Project_Worker_Bool_Exp>;
};

/** ordering options when selecting data from "report_project_worker" */
export type Report_Project_Worker_Order_By = {
  id?: Maybe<Order_By>;
  project_worker?: Maybe<Project_Worker_Order_By>;
  project_worker_id?: Maybe<Order_By>;
  report?: Maybe<Report_Order_By>;
  report_id?: Maybe<Order_By>;
  signature_image?: Maybe<Image_Order_By>;
  signature_image_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "report_project_worker" */
export type Report_Project_Worker_Pk_Columns_Input = {
  project_worker_id: Scalars['uuid'];
  report_id: Scalars['uuid'];
};

/** select columns of table "report_project_worker" */
export enum Report_Project_Worker_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  ProjectWorkerId = 'project_worker_id',
  /** column name */
  ReportId = 'report_id',
  /** column name */
  SignatureImageId = 'signature_image_id'
}

/** input type for updating data in table "report_project_worker" */
export type Report_Project_Worker_Set_Input = {
  id?: Maybe<Scalars['uuid']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
  report_id?: Maybe<Scalars['uuid']>;
  signature_image_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "report_project_worker" */
export enum Report_Project_Worker_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  ProjectWorkerId = 'project_worker_id',
  /** column name */
  ReportId = 'report_id',
  /** column name */
  SignatureImageId = 'signature_image_id'
}

/** select columns of table "report" */
export enum Report_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectCrewId = 'project_crew_id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  SignInType = 'sign_in_type',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  SubmittedLanguageCode = 'submitted_language_code',
  /** column name */
  SubmitterProjectWorkerId = 'submitter_project_worker_id',
  /** column name */
  SubmitterSignatureId = 'submitter_signature_id'
}

/** input type for updating data in table "report" */
export type Report_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_crew_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  sign_in_type?: Maybe<Sign_In_Type_Enum>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  submitted_language_code?: Maybe<Scalars['String']>;
  submitter_project_worker_id?: Maybe<Scalars['uuid']>;
  submitter_signature_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "report" */
export enum Report_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectCrewId = 'project_crew_id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  SignInType = 'sign_in_type',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  SubmittedLanguageCode = 'submitted_language_code',
  /** column name */
  SubmitterProjectWorkerId = 'submitter_project_worker_id',
  /** column name */
  SubmitterSignatureId = 'submitter_signature_id'
}

export type ReportForm = {
   __typename?: 'ReportForm';
  selectedTaskIds: Array<Scalars['String']>;
  injuredProjectWorkerIds: Array<Scalars['String']>;
  awarenessAnswers: Array<Scalars['String']>;
  pictures: Array<ReportPicture>;
  fallText?: Maybe<Scalars['String']>;
  caughtText?: Maybe<Scalars['String']>;
  electrocutionText?: Maybe<Scalars['String']>;
  struckText?: Maybe<Scalars['String']>;
};

export type ReportPicture = {
   __typename?: 'ReportPicture';
  url: Scalars['String'];
  description: Scalars['String'];
};

export type ResetPasswordInput = {
  forgotPasswordKey: Scalars['String'];
  newPassword: Scalars['String'];
};

/** columns and relationships of "s_daily_hours_to_date" */
export type S_Daily_Hours_To_Date = {
   __typename?: 's_daily_hours_to_date';
  adjusted_hours_to_date: Scalars['numeric'];
  gc_total_hours_to_date: Scalars['numeric'];
  sub_total_hours_to_date: Scalars['numeric'];
  /** An object relationship */
  subcontractor: Subcontractor;
  subcontractor_id: Scalars['uuid'];
};

/** aggregated selection of "s_daily_hours_to_date" */
export type S_Daily_Hours_To_Date_Aggregate = {
   __typename?: 's_daily_hours_to_date_aggregate';
  aggregate?: Maybe<S_Daily_Hours_To_Date_Aggregate_Fields>;
  nodes: Array<S_Daily_Hours_To_Date>;
};

/** aggregate fields of "s_daily_hours_to_date" */
export type S_Daily_Hours_To_Date_Aggregate_Fields = {
   __typename?: 's_daily_hours_to_date_aggregate_fields';
  avg?: Maybe<S_Daily_Hours_To_Date_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<S_Daily_Hours_To_Date_Max_Fields>;
  min?: Maybe<S_Daily_Hours_To_Date_Min_Fields>;
  stddev?: Maybe<S_Daily_Hours_To_Date_Stddev_Fields>;
  stddev_pop?: Maybe<S_Daily_Hours_To_Date_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<S_Daily_Hours_To_Date_Stddev_Samp_Fields>;
  sum?: Maybe<S_Daily_Hours_To_Date_Sum_Fields>;
  var_pop?: Maybe<S_Daily_Hours_To_Date_Var_Pop_Fields>;
  var_samp?: Maybe<S_Daily_Hours_To_Date_Var_Samp_Fields>;
  variance?: Maybe<S_Daily_Hours_To_Date_Variance_Fields>;
};


/** aggregate fields of "s_daily_hours_to_date" */
export type S_Daily_Hours_To_Date_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<S_Daily_Hours_To_Date_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "s_daily_hours_to_date" */
export type S_Daily_Hours_To_Date_Aggregate_Order_By = {
  avg?: Maybe<S_Daily_Hours_To_Date_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<S_Daily_Hours_To_Date_Max_Order_By>;
  min?: Maybe<S_Daily_Hours_To_Date_Min_Order_By>;
  stddev?: Maybe<S_Daily_Hours_To_Date_Stddev_Order_By>;
  stddev_pop?: Maybe<S_Daily_Hours_To_Date_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<S_Daily_Hours_To_Date_Stddev_Samp_Order_By>;
  sum?: Maybe<S_Daily_Hours_To_Date_Sum_Order_By>;
  var_pop?: Maybe<S_Daily_Hours_To_Date_Var_Pop_Order_By>;
  var_samp?: Maybe<S_Daily_Hours_To_Date_Var_Samp_Order_By>;
  variance?: Maybe<S_Daily_Hours_To_Date_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "s_daily_hours_to_date" */
export type S_Daily_Hours_To_Date_Arr_Rel_Insert_Input = {
  data: Array<S_Daily_Hours_To_Date_Insert_Input>;
  on_conflict?: Maybe<S_Daily_Hours_To_Date_On_Conflict>;
};

/** aggregate avg on columns */
export type S_Daily_Hours_To_Date_Avg_Fields = {
   __typename?: 's_daily_hours_to_date_avg_fields';
  adjusted_hours_to_date?: Maybe<Scalars['Float']>;
  gc_total_hours_to_date?: Maybe<Scalars['Float']>;
  sub_total_hours_to_date?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "s_daily_hours_to_date" */
export type S_Daily_Hours_To_Date_Avg_Order_By = {
  adjusted_hours_to_date?: Maybe<Order_By>;
  gc_total_hours_to_date?: Maybe<Order_By>;
  sub_total_hours_to_date?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "s_daily_hours_to_date". All fields are combined with a logical 'AND'. */
export type S_Daily_Hours_To_Date_Bool_Exp = {
  _and?: Maybe<Array<Maybe<S_Daily_Hours_To_Date_Bool_Exp>>>;
  _not?: Maybe<S_Daily_Hours_To_Date_Bool_Exp>;
  _or?: Maybe<Array<Maybe<S_Daily_Hours_To_Date_Bool_Exp>>>;
  adjusted_hours_to_date?: Maybe<Numeric_Comparison_Exp>;
  gc_total_hours_to_date?: Maybe<Numeric_Comparison_Exp>;
  sub_total_hours_to_date?: Maybe<Numeric_Comparison_Exp>;
  subcontractor?: Maybe<Subcontractor_Bool_Exp>;
  subcontractor_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "s_daily_hours_to_date" */
export enum S_Daily_Hours_To_Date_Constraint {
  /** unique or primary key constraint */
  SDailyHoursToDatePkey = 's_daily_hours_to_date_pkey'
}

/** input type for incrementing integer column in table "s_daily_hours_to_date" */
export type S_Daily_Hours_To_Date_Inc_Input = {
  adjusted_hours_to_date?: Maybe<Scalars['numeric']>;
  gc_total_hours_to_date?: Maybe<Scalars['numeric']>;
  sub_total_hours_to_date?: Maybe<Scalars['numeric']>;
};

/** input type for inserting data into table "s_daily_hours_to_date" */
export type S_Daily_Hours_To_Date_Insert_Input = {
  adjusted_hours_to_date?: Maybe<Scalars['numeric']>;
  gc_total_hours_to_date?: Maybe<Scalars['numeric']>;
  sub_total_hours_to_date?: Maybe<Scalars['numeric']>;
  subcontractor?: Maybe<Subcontractor_Obj_Rel_Insert_Input>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type S_Daily_Hours_To_Date_Max_Fields = {
   __typename?: 's_daily_hours_to_date_max_fields';
  adjusted_hours_to_date?: Maybe<Scalars['numeric']>;
  gc_total_hours_to_date?: Maybe<Scalars['numeric']>;
  sub_total_hours_to_date?: Maybe<Scalars['numeric']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "s_daily_hours_to_date" */
export type S_Daily_Hours_To_Date_Max_Order_By = {
  adjusted_hours_to_date?: Maybe<Order_By>;
  gc_total_hours_to_date?: Maybe<Order_By>;
  sub_total_hours_to_date?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type S_Daily_Hours_To_Date_Min_Fields = {
   __typename?: 's_daily_hours_to_date_min_fields';
  adjusted_hours_to_date?: Maybe<Scalars['numeric']>;
  gc_total_hours_to_date?: Maybe<Scalars['numeric']>;
  sub_total_hours_to_date?: Maybe<Scalars['numeric']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "s_daily_hours_to_date" */
export type S_Daily_Hours_To_Date_Min_Order_By = {
  adjusted_hours_to_date?: Maybe<Order_By>;
  gc_total_hours_to_date?: Maybe<Order_By>;
  sub_total_hours_to_date?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "s_daily_hours_to_date" */
export type S_Daily_Hours_To_Date_Mutation_Response = {
   __typename?: 's_daily_hours_to_date_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<S_Daily_Hours_To_Date>;
};

/** input type for inserting object relation for remote table "s_daily_hours_to_date" */
export type S_Daily_Hours_To_Date_Obj_Rel_Insert_Input = {
  data: S_Daily_Hours_To_Date_Insert_Input;
  on_conflict?: Maybe<S_Daily_Hours_To_Date_On_Conflict>;
};

/** on conflict condition type for table "s_daily_hours_to_date" */
export type S_Daily_Hours_To_Date_On_Conflict = {
  constraint: S_Daily_Hours_To_Date_Constraint;
  update_columns: Array<S_Daily_Hours_To_Date_Update_Column>;
  where?: Maybe<S_Daily_Hours_To_Date_Bool_Exp>;
};

/** ordering options when selecting data from "s_daily_hours_to_date" */
export type S_Daily_Hours_To_Date_Order_By = {
  adjusted_hours_to_date?: Maybe<Order_By>;
  gc_total_hours_to_date?: Maybe<Order_By>;
  sub_total_hours_to_date?: Maybe<Order_By>;
  subcontractor?: Maybe<Subcontractor_Order_By>;
  subcontractor_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "s_daily_hours_to_date" */
export type S_Daily_Hours_To_Date_Pk_Columns_Input = {
  subcontractor_id: Scalars['uuid'];
};

/** select columns of table "s_daily_hours_to_date" */
export enum S_Daily_Hours_To_Date_Select_Column {
  /** column name */
  AdjustedHoursToDate = 'adjusted_hours_to_date',
  /** column name */
  GcTotalHoursToDate = 'gc_total_hours_to_date',
  /** column name */
  SubTotalHoursToDate = 'sub_total_hours_to_date',
  /** column name */
  SubcontractorId = 'subcontractor_id'
}

/** input type for updating data in table "s_daily_hours_to_date" */
export type S_Daily_Hours_To_Date_Set_Input = {
  adjusted_hours_to_date?: Maybe<Scalars['numeric']>;
  gc_total_hours_to_date?: Maybe<Scalars['numeric']>;
  sub_total_hours_to_date?: Maybe<Scalars['numeric']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** aggregate stddev on columns */
export type S_Daily_Hours_To_Date_Stddev_Fields = {
   __typename?: 's_daily_hours_to_date_stddev_fields';
  adjusted_hours_to_date?: Maybe<Scalars['Float']>;
  gc_total_hours_to_date?: Maybe<Scalars['Float']>;
  sub_total_hours_to_date?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "s_daily_hours_to_date" */
export type S_Daily_Hours_To_Date_Stddev_Order_By = {
  adjusted_hours_to_date?: Maybe<Order_By>;
  gc_total_hours_to_date?: Maybe<Order_By>;
  sub_total_hours_to_date?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type S_Daily_Hours_To_Date_Stddev_Pop_Fields = {
   __typename?: 's_daily_hours_to_date_stddev_pop_fields';
  adjusted_hours_to_date?: Maybe<Scalars['Float']>;
  gc_total_hours_to_date?: Maybe<Scalars['Float']>;
  sub_total_hours_to_date?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "s_daily_hours_to_date" */
export type S_Daily_Hours_To_Date_Stddev_Pop_Order_By = {
  adjusted_hours_to_date?: Maybe<Order_By>;
  gc_total_hours_to_date?: Maybe<Order_By>;
  sub_total_hours_to_date?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type S_Daily_Hours_To_Date_Stddev_Samp_Fields = {
   __typename?: 's_daily_hours_to_date_stddev_samp_fields';
  adjusted_hours_to_date?: Maybe<Scalars['Float']>;
  gc_total_hours_to_date?: Maybe<Scalars['Float']>;
  sub_total_hours_to_date?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "s_daily_hours_to_date" */
export type S_Daily_Hours_To_Date_Stddev_Samp_Order_By = {
  adjusted_hours_to_date?: Maybe<Order_By>;
  gc_total_hours_to_date?: Maybe<Order_By>;
  sub_total_hours_to_date?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type S_Daily_Hours_To_Date_Sum_Fields = {
   __typename?: 's_daily_hours_to_date_sum_fields';
  adjusted_hours_to_date?: Maybe<Scalars['numeric']>;
  gc_total_hours_to_date?: Maybe<Scalars['numeric']>;
  sub_total_hours_to_date?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "s_daily_hours_to_date" */
export type S_Daily_Hours_To_Date_Sum_Order_By = {
  adjusted_hours_to_date?: Maybe<Order_By>;
  gc_total_hours_to_date?: Maybe<Order_By>;
  sub_total_hours_to_date?: Maybe<Order_By>;
};

/** update columns of table "s_daily_hours_to_date" */
export enum S_Daily_Hours_To_Date_Update_Column {
  /** column name */
  AdjustedHoursToDate = 'adjusted_hours_to_date',
  /** column name */
  GcTotalHoursToDate = 'gc_total_hours_to_date',
  /** column name */
  SubTotalHoursToDate = 'sub_total_hours_to_date',
  /** column name */
  SubcontractorId = 'subcontractor_id'
}

/** aggregate var_pop on columns */
export type S_Daily_Hours_To_Date_Var_Pop_Fields = {
   __typename?: 's_daily_hours_to_date_var_pop_fields';
  adjusted_hours_to_date?: Maybe<Scalars['Float']>;
  gc_total_hours_to_date?: Maybe<Scalars['Float']>;
  sub_total_hours_to_date?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "s_daily_hours_to_date" */
export type S_Daily_Hours_To_Date_Var_Pop_Order_By = {
  adjusted_hours_to_date?: Maybe<Order_By>;
  gc_total_hours_to_date?: Maybe<Order_By>;
  sub_total_hours_to_date?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type S_Daily_Hours_To_Date_Var_Samp_Fields = {
   __typename?: 's_daily_hours_to_date_var_samp_fields';
  adjusted_hours_to_date?: Maybe<Scalars['Float']>;
  gc_total_hours_to_date?: Maybe<Scalars['Float']>;
  sub_total_hours_to_date?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "s_daily_hours_to_date" */
export type S_Daily_Hours_To_Date_Var_Samp_Order_By = {
  adjusted_hours_to_date?: Maybe<Order_By>;
  gc_total_hours_to_date?: Maybe<Order_By>;
  sub_total_hours_to_date?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type S_Daily_Hours_To_Date_Variance_Fields = {
   __typename?: 's_daily_hours_to_date_variance_fields';
  adjusted_hours_to_date?: Maybe<Scalars['Float']>;
  gc_total_hours_to_date?: Maybe<Scalars['Float']>;
  sub_total_hours_to_date?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "s_daily_hours_to_date" */
export type S_Daily_Hours_To_Date_Variance_Order_By = {
  adjusted_hours_to_date?: Maybe<Order_By>;
  gc_total_hours_to_date?: Maybe<Order_By>;
  sub_total_hours_to_date?: Maybe<Order_By>;
};

/** columns and relationships of "s_sub_daily_log_submittal" */
export type S_Sub_Daily_Log_Submittal = {
   __typename?: 's_sub_daily_log_submittal';
  started_count: Scalars['bigint'];
  /** An object relationship */
  subcontractor: Subcontractor;
  subcontractor_id: Scalars['uuid'];
  submitted_count: Scalars['bigint'];
};

/** aggregated selection of "s_sub_daily_log_submittal" */
export type S_Sub_Daily_Log_Submittal_Aggregate = {
   __typename?: 's_sub_daily_log_submittal_aggregate';
  aggregate?: Maybe<S_Sub_Daily_Log_Submittal_Aggregate_Fields>;
  nodes: Array<S_Sub_Daily_Log_Submittal>;
};

/** aggregate fields of "s_sub_daily_log_submittal" */
export type S_Sub_Daily_Log_Submittal_Aggregate_Fields = {
   __typename?: 's_sub_daily_log_submittal_aggregate_fields';
  avg?: Maybe<S_Sub_Daily_Log_Submittal_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<S_Sub_Daily_Log_Submittal_Max_Fields>;
  min?: Maybe<S_Sub_Daily_Log_Submittal_Min_Fields>;
  stddev?: Maybe<S_Sub_Daily_Log_Submittal_Stddev_Fields>;
  stddev_pop?: Maybe<S_Sub_Daily_Log_Submittal_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<S_Sub_Daily_Log_Submittal_Stddev_Samp_Fields>;
  sum?: Maybe<S_Sub_Daily_Log_Submittal_Sum_Fields>;
  var_pop?: Maybe<S_Sub_Daily_Log_Submittal_Var_Pop_Fields>;
  var_samp?: Maybe<S_Sub_Daily_Log_Submittal_Var_Samp_Fields>;
  variance?: Maybe<S_Sub_Daily_Log_Submittal_Variance_Fields>;
};


/** aggregate fields of "s_sub_daily_log_submittal" */
export type S_Sub_Daily_Log_Submittal_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<S_Sub_Daily_Log_Submittal_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "s_sub_daily_log_submittal" */
export type S_Sub_Daily_Log_Submittal_Aggregate_Order_By = {
  avg?: Maybe<S_Sub_Daily_Log_Submittal_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<S_Sub_Daily_Log_Submittal_Max_Order_By>;
  min?: Maybe<S_Sub_Daily_Log_Submittal_Min_Order_By>;
  stddev?: Maybe<S_Sub_Daily_Log_Submittal_Stddev_Order_By>;
  stddev_pop?: Maybe<S_Sub_Daily_Log_Submittal_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<S_Sub_Daily_Log_Submittal_Stddev_Samp_Order_By>;
  sum?: Maybe<S_Sub_Daily_Log_Submittal_Sum_Order_By>;
  var_pop?: Maybe<S_Sub_Daily_Log_Submittal_Var_Pop_Order_By>;
  var_samp?: Maybe<S_Sub_Daily_Log_Submittal_Var_Samp_Order_By>;
  variance?: Maybe<S_Sub_Daily_Log_Submittal_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "s_sub_daily_log_submittal" */
export type S_Sub_Daily_Log_Submittal_Arr_Rel_Insert_Input = {
  data: Array<S_Sub_Daily_Log_Submittal_Insert_Input>;
  on_conflict?: Maybe<S_Sub_Daily_Log_Submittal_On_Conflict>;
};

/** aggregate avg on columns */
export type S_Sub_Daily_Log_Submittal_Avg_Fields = {
   __typename?: 's_sub_daily_log_submittal_avg_fields';
  started_count?: Maybe<Scalars['Float']>;
  submitted_count?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "s_sub_daily_log_submittal" */
export type S_Sub_Daily_Log_Submittal_Avg_Order_By = {
  started_count?: Maybe<Order_By>;
  submitted_count?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "s_sub_daily_log_submittal". All fields are combined with a logical 'AND'. */
export type S_Sub_Daily_Log_Submittal_Bool_Exp = {
  _and?: Maybe<Array<Maybe<S_Sub_Daily_Log_Submittal_Bool_Exp>>>;
  _not?: Maybe<S_Sub_Daily_Log_Submittal_Bool_Exp>;
  _or?: Maybe<Array<Maybe<S_Sub_Daily_Log_Submittal_Bool_Exp>>>;
  started_count?: Maybe<Bigint_Comparison_Exp>;
  subcontractor?: Maybe<Subcontractor_Bool_Exp>;
  subcontractor_id?: Maybe<Uuid_Comparison_Exp>;
  submitted_count?: Maybe<Bigint_Comparison_Exp>;
};

/** unique or primary key constraints on table "s_sub_daily_log_submittal" */
export enum S_Sub_Daily_Log_Submittal_Constraint {
  /** unique or primary key constraint */
  SSubDailyLogSubmittalsPkey = 's_sub_daily_log_submittals_pkey'
}

/** input type for incrementing integer column in table "s_sub_daily_log_submittal" */
export type S_Sub_Daily_Log_Submittal_Inc_Input = {
  started_count?: Maybe<Scalars['bigint']>;
  submitted_count?: Maybe<Scalars['bigint']>;
};

/** input type for inserting data into table "s_sub_daily_log_submittal" */
export type S_Sub_Daily_Log_Submittal_Insert_Input = {
  started_count?: Maybe<Scalars['bigint']>;
  subcontractor?: Maybe<Subcontractor_Obj_Rel_Insert_Input>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  submitted_count?: Maybe<Scalars['bigint']>;
};

/** aggregate max on columns */
export type S_Sub_Daily_Log_Submittal_Max_Fields = {
   __typename?: 's_sub_daily_log_submittal_max_fields';
  started_count?: Maybe<Scalars['bigint']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  submitted_count?: Maybe<Scalars['bigint']>;
};

/** order by max() on columns of table "s_sub_daily_log_submittal" */
export type S_Sub_Daily_Log_Submittal_Max_Order_By = {
  started_count?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  submitted_count?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type S_Sub_Daily_Log_Submittal_Min_Fields = {
   __typename?: 's_sub_daily_log_submittal_min_fields';
  started_count?: Maybe<Scalars['bigint']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  submitted_count?: Maybe<Scalars['bigint']>;
};

/** order by min() on columns of table "s_sub_daily_log_submittal" */
export type S_Sub_Daily_Log_Submittal_Min_Order_By = {
  started_count?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  submitted_count?: Maybe<Order_By>;
};

/** response of any mutation on the table "s_sub_daily_log_submittal" */
export type S_Sub_Daily_Log_Submittal_Mutation_Response = {
   __typename?: 's_sub_daily_log_submittal_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<S_Sub_Daily_Log_Submittal>;
};

/** input type for inserting object relation for remote table "s_sub_daily_log_submittal" */
export type S_Sub_Daily_Log_Submittal_Obj_Rel_Insert_Input = {
  data: S_Sub_Daily_Log_Submittal_Insert_Input;
  on_conflict?: Maybe<S_Sub_Daily_Log_Submittal_On_Conflict>;
};

/** on conflict condition type for table "s_sub_daily_log_submittal" */
export type S_Sub_Daily_Log_Submittal_On_Conflict = {
  constraint: S_Sub_Daily_Log_Submittal_Constraint;
  update_columns: Array<S_Sub_Daily_Log_Submittal_Update_Column>;
  where?: Maybe<S_Sub_Daily_Log_Submittal_Bool_Exp>;
};

/** ordering options when selecting data from "s_sub_daily_log_submittal" */
export type S_Sub_Daily_Log_Submittal_Order_By = {
  started_count?: Maybe<Order_By>;
  subcontractor?: Maybe<Subcontractor_Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  submitted_count?: Maybe<Order_By>;
};

/** primary key columns input for table: "s_sub_daily_log_submittal" */
export type S_Sub_Daily_Log_Submittal_Pk_Columns_Input = {
  subcontractor_id: Scalars['uuid'];
};

/** select columns of table "s_sub_daily_log_submittal" */
export enum S_Sub_Daily_Log_Submittal_Select_Column {
  /** column name */
  StartedCount = 'started_count',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  SubmittedCount = 'submitted_count'
}

/** input type for updating data in table "s_sub_daily_log_submittal" */
export type S_Sub_Daily_Log_Submittal_Set_Input = {
  started_count?: Maybe<Scalars['bigint']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  submitted_count?: Maybe<Scalars['bigint']>;
};

/** aggregate stddev on columns */
export type S_Sub_Daily_Log_Submittal_Stddev_Fields = {
   __typename?: 's_sub_daily_log_submittal_stddev_fields';
  started_count?: Maybe<Scalars['Float']>;
  submitted_count?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "s_sub_daily_log_submittal" */
export type S_Sub_Daily_Log_Submittal_Stddev_Order_By = {
  started_count?: Maybe<Order_By>;
  submitted_count?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type S_Sub_Daily_Log_Submittal_Stddev_Pop_Fields = {
   __typename?: 's_sub_daily_log_submittal_stddev_pop_fields';
  started_count?: Maybe<Scalars['Float']>;
  submitted_count?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "s_sub_daily_log_submittal" */
export type S_Sub_Daily_Log_Submittal_Stddev_Pop_Order_By = {
  started_count?: Maybe<Order_By>;
  submitted_count?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type S_Sub_Daily_Log_Submittal_Stddev_Samp_Fields = {
   __typename?: 's_sub_daily_log_submittal_stddev_samp_fields';
  started_count?: Maybe<Scalars['Float']>;
  submitted_count?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "s_sub_daily_log_submittal" */
export type S_Sub_Daily_Log_Submittal_Stddev_Samp_Order_By = {
  started_count?: Maybe<Order_By>;
  submitted_count?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type S_Sub_Daily_Log_Submittal_Sum_Fields = {
   __typename?: 's_sub_daily_log_submittal_sum_fields';
  started_count?: Maybe<Scalars['bigint']>;
  submitted_count?: Maybe<Scalars['bigint']>;
};

/** order by sum() on columns of table "s_sub_daily_log_submittal" */
export type S_Sub_Daily_Log_Submittal_Sum_Order_By = {
  started_count?: Maybe<Order_By>;
  submitted_count?: Maybe<Order_By>;
};

/** update columns of table "s_sub_daily_log_submittal" */
export enum S_Sub_Daily_Log_Submittal_Update_Column {
  /** column name */
  StartedCount = 'started_count',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  SubmittedCount = 'submitted_count'
}

/** aggregate var_pop on columns */
export type S_Sub_Daily_Log_Submittal_Var_Pop_Fields = {
   __typename?: 's_sub_daily_log_submittal_var_pop_fields';
  started_count?: Maybe<Scalars['Float']>;
  submitted_count?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "s_sub_daily_log_submittal" */
export type S_Sub_Daily_Log_Submittal_Var_Pop_Order_By = {
  started_count?: Maybe<Order_By>;
  submitted_count?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type S_Sub_Daily_Log_Submittal_Var_Samp_Fields = {
   __typename?: 's_sub_daily_log_submittal_var_samp_fields';
  started_count?: Maybe<Scalars['Float']>;
  submitted_count?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "s_sub_daily_log_submittal" */
export type S_Sub_Daily_Log_Submittal_Var_Samp_Order_By = {
  started_count?: Maybe<Order_By>;
  submitted_count?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type S_Sub_Daily_Log_Submittal_Variance_Fields = {
   __typename?: 's_sub_daily_log_submittal_variance_fields';
  started_count?: Maybe<Scalars['Float']>;
  submitted_count?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "s_sub_daily_log_submittal" */
export type S_Sub_Daily_Log_Submittal_Variance_Order_By = {
  started_count?: Maybe<Order_By>;
  submitted_count?: Maybe<Order_By>;
};

export type SampleInput = {
  password: Scalars['String'];
  username?: Maybe<Scalars['timestamptz']>;
};

export type SampleOutput = {
   __typename?: 'SampleOutput';
  accessToken: Scalars['String'];
};

/** columns and relationships of "select_option" */
export type Select_Option = {
   __typename?: 'select_option';
  created_at: Scalars['timestamptz'];
  /** An array relationship */
  dig_permit_select_options: Array<Dig_Permit_Select_Option>;
  /** An aggregated array relationship */
  dig_permit_select_options_aggregate: Dig_Permit_Select_Option_Aggregate;
  id: Scalars['uuid'];
  /** An object relationship */
  name: Text_Translation;
  name_id: Scalars['uuid'];
  /** An object relationship */
  subcontractor?: Maybe<Subcontractor>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  type: Select_Option_Type_Enum;
};


/** columns and relationships of "select_option" */
export type Select_OptionDig_Permit_Select_OptionsArgs = {
  distinct_on?: Maybe<Array<Dig_Permit_Select_Option_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Dig_Permit_Select_Option_Order_By>>;
  where?: Maybe<Dig_Permit_Select_Option_Bool_Exp>;
};


/** columns and relationships of "select_option" */
export type Select_OptionDig_Permit_Select_Options_AggregateArgs = {
  distinct_on?: Maybe<Array<Dig_Permit_Select_Option_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Dig_Permit_Select_Option_Order_By>>;
  where?: Maybe<Dig_Permit_Select_Option_Bool_Exp>;
};

/** aggregated selection of "select_option" */
export type Select_Option_Aggregate = {
   __typename?: 'select_option_aggregate';
  aggregate?: Maybe<Select_Option_Aggregate_Fields>;
  nodes: Array<Select_Option>;
};

/** aggregate fields of "select_option" */
export type Select_Option_Aggregate_Fields = {
   __typename?: 'select_option_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Select_Option_Max_Fields>;
  min?: Maybe<Select_Option_Min_Fields>;
};


/** aggregate fields of "select_option" */
export type Select_Option_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Select_Option_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "select_option" */
export type Select_Option_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Select_Option_Max_Order_By>;
  min?: Maybe<Select_Option_Min_Order_By>;
};

/** input type for inserting array relation for remote table "select_option" */
export type Select_Option_Arr_Rel_Insert_Input = {
  data: Array<Select_Option_Insert_Input>;
  on_conflict?: Maybe<Select_Option_On_Conflict>;
};

/** Boolean expression to filter rows from the table "select_option". All fields are combined with a logical 'AND'. */
export type Select_Option_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Select_Option_Bool_Exp>>>;
  _not?: Maybe<Select_Option_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Select_Option_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  dig_permit_select_options?: Maybe<Dig_Permit_Select_Option_Bool_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  name?: Maybe<Text_Translation_Bool_Exp>;
  name_id?: Maybe<Uuid_Comparison_Exp>;
  subcontractor?: Maybe<Subcontractor_Bool_Exp>;
  subcontractor_id?: Maybe<Uuid_Comparison_Exp>;
  type?: Maybe<Select_Option_Type_Enum_Comparison_Exp>;
};

/** unique or primary key constraints on table "select_option" */
export enum Select_Option_Constraint {
  /** unique or primary key constraint */
  SelectOptionPkey = 'select_option_pkey'
}

/** input type for inserting data into table "select_option" */
export type Select_Option_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  dig_permit_select_options?: Maybe<Dig_Permit_Select_Option_Arr_Rel_Insert_Input>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  name_id?: Maybe<Scalars['uuid']>;
  subcontractor?: Maybe<Subcontractor_Obj_Rel_Insert_Input>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  type?: Maybe<Select_Option_Type_Enum>;
};

/** aggregate max on columns */
export type Select_Option_Max_Fields = {
   __typename?: 'select_option_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  name_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "select_option" */
export type Select_Option_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name_id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Select_Option_Min_Fields = {
   __typename?: 'select_option_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  name_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "select_option" */
export type Select_Option_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name_id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "select_option" */
export type Select_Option_Mutation_Response = {
   __typename?: 'select_option_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Select_Option>;
};

/** input type for inserting object relation for remote table "select_option" */
export type Select_Option_Obj_Rel_Insert_Input = {
  data: Select_Option_Insert_Input;
  on_conflict?: Maybe<Select_Option_On_Conflict>;
};

/** on conflict condition type for table "select_option" */
export type Select_Option_On_Conflict = {
  constraint: Select_Option_Constraint;
  update_columns: Array<Select_Option_Update_Column>;
  where?: Maybe<Select_Option_Bool_Exp>;
};

/** ordering options when selecting data from "select_option" */
export type Select_Option_Order_By = {
  created_at?: Maybe<Order_By>;
  dig_permit_select_options_aggregate?: Maybe<Dig_Permit_Select_Option_Aggregate_Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Text_Translation_Order_By>;
  name_id?: Maybe<Order_By>;
  subcontractor?: Maybe<Subcontractor_Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
};

/** primary key columns input for table: "select_option" */
export type Select_Option_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "select_option" */
export enum Select_Option_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  NameId = 'name_id',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  Type = 'type'
}

/** input type for updating data in table "select_option" */
export type Select_Option_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  name_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  type?: Maybe<Select_Option_Type_Enum>;
};

/** columns and relationships of "select_option_type" */
export type Select_Option_Type = {
   __typename?: 'select_option_type';
  value: Scalars['String'];
};

/** aggregated selection of "select_option_type" */
export type Select_Option_Type_Aggregate = {
   __typename?: 'select_option_type_aggregate';
  aggregate?: Maybe<Select_Option_Type_Aggregate_Fields>;
  nodes: Array<Select_Option_Type>;
};

/** aggregate fields of "select_option_type" */
export type Select_Option_Type_Aggregate_Fields = {
   __typename?: 'select_option_type_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Select_Option_Type_Max_Fields>;
  min?: Maybe<Select_Option_Type_Min_Fields>;
};


/** aggregate fields of "select_option_type" */
export type Select_Option_Type_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Select_Option_Type_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "select_option_type" */
export type Select_Option_Type_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Select_Option_Type_Max_Order_By>;
  min?: Maybe<Select_Option_Type_Min_Order_By>;
};

/** input type for inserting array relation for remote table "select_option_type" */
export type Select_Option_Type_Arr_Rel_Insert_Input = {
  data: Array<Select_Option_Type_Insert_Input>;
  on_conflict?: Maybe<Select_Option_Type_On_Conflict>;
};

/** Boolean expression to filter rows from the table "select_option_type". All fields are combined with a logical 'AND'. */
export type Select_Option_Type_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Select_Option_Type_Bool_Exp>>>;
  _not?: Maybe<Select_Option_Type_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Select_Option_Type_Bool_Exp>>>;
  value?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "select_option_type" */
export enum Select_Option_Type_Constraint {
  /** unique or primary key constraint */
  SelectOptionTypePkey = 'select_option_type_pkey'
}

export enum Select_Option_Type_Enum {
  Calamity = 'calamity',
  ExcavationType = 'excavation_type',
  Ground = 'ground',
  ProtectionSystemType = 'protection_system_type',
  RespiratorType = 'respirator_type',
  Sky = 'sky',
  SoilType = 'soil_type',
  UtilityIdentifyingMethod = 'utility_identifying_method',
  UtilityType = 'utility_type',
  Wind = 'wind'
}

/** expression to compare columns of type select_option_type_enum. All fields are combined with logical 'AND'. */
export type Select_Option_Type_Enum_Comparison_Exp = {
  _eq?: Maybe<Select_Option_Type_Enum>;
  _in?: Maybe<Array<Select_Option_Type_Enum>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _neq?: Maybe<Select_Option_Type_Enum>;
  _nin?: Maybe<Array<Select_Option_Type_Enum>>;
};

/** input type for inserting data into table "select_option_type" */
export type Select_Option_Type_Insert_Input = {
  value?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Select_Option_Type_Max_Fields = {
   __typename?: 'select_option_type_max_fields';
  value?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "select_option_type" */
export type Select_Option_Type_Max_Order_By = {
  value?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Select_Option_Type_Min_Fields = {
   __typename?: 'select_option_type_min_fields';
  value?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "select_option_type" */
export type Select_Option_Type_Min_Order_By = {
  value?: Maybe<Order_By>;
};

/** response of any mutation on the table "select_option_type" */
export type Select_Option_Type_Mutation_Response = {
   __typename?: 'select_option_type_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Select_Option_Type>;
};

/** input type for inserting object relation for remote table "select_option_type" */
export type Select_Option_Type_Obj_Rel_Insert_Input = {
  data: Select_Option_Type_Insert_Input;
  on_conflict?: Maybe<Select_Option_Type_On_Conflict>;
};

/** on conflict condition type for table "select_option_type" */
export type Select_Option_Type_On_Conflict = {
  constraint: Select_Option_Type_Constraint;
  update_columns: Array<Select_Option_Type_Update_Column>;
  where?: Maybe<Select_Option_Type_Bool_Exp>;
};

/** ordering options when selecting data from "select_option_type" */
export type Select_Option_Type_Order_By = {
  value?: Maybe<Order_By>;
};

/** primary key columns input for table: "select_option_type" */
export type Select_Option_Type_Pk_Columns_Input = {
  value: Scalars['String'];
};

/** select columns of table "select_option_type" */
export enum Select_Option_Type_Select_Column {
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "select_option_type" */
export type Select_Option_Type_Set_Input = {
  value?: Maybe<Scalars['String']>;
};

/** update columns of table "select_option_type" */
export enum Select_Option_Type_Update_Column {
  /** column name */
  Value = 'value'
}

/** update columns of table "select_option" */
export enum Select_Option_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  NameId = 'name_id',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  Type = 'type'
}

export type SendReadingNotPermissibleNotificationsInput = {
  readingId: Scalars['String'];
};

export type SendSiteNotificationInput = {
  message: Scalars['String'];
  projectId: Scalars['String'];
};

/** columns and relationships of "short_forecast_type" */
export type Short_Forecast_Type = {
   __typename?: 'short_forecast_type';
  value: Scalars['String'];
};

/** aggregated selection of "short_forecast_type" */
export type Short_Forecast_Type_Aggregate = {
   __typename?: 'short_forecast_type_aggregate';
  aggregate?: Maybe<Short_Forecast_Type_Aggregate_Fields>;
  nodes: Array<Short_Forecast_Type>;
};

/** aggregate fields of "short_forecast_type" */
export type Short_Forecast_Type_Aggregate_Fields = {
   __typename?: 'short_forecast_type_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Short_Forecast_Type_Max_Fields>;
  min?: Maybe<Short_Forecast_Type_Min_Fields>;
};


/** aggregate fields of "short_forecast_type" */
export type Short_Forecast_Type_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Short_Forecast_Type_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "short_forecast_type" */
export type Short_Forecast_Type_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Short_Forecast_Type_Max_Order_By>;
  min?: Maybe<Short_Forecast_Type_Min_Order_By>;
};

/** input type for inserting array relation for remote table "short_forecast_type" */
export type Short_Forecast_Type_Arr_Rel_Insert_Input = {
  data: Array<Short_Forecast_Type_Insert_Input>;
  on_conflict?: Maybe<Short_Forecast_Type_On_Conflict>;
};

/** Boolean expression to filter rows from the table "short_forecast_type". All fields are combined with a logical 'AND'. */
export type Short_Forecast_Type_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Short_Forecast_Type_Bool_Exp>>>;
  _not?: Maybe<Short_Forecast_Type_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Short_Forecast_Type_Bool_Exp>>>;
  value?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "short_forecast_type" */
export enum Short_Forecast_Type_Constraint {
  /** unique or primary key constraint */
  ShortForecastTypePkey = 'short_forecast_type_pkey'
}

/** input type for inserting data into table "short_forecast_type" */
export type Short_Forecast_Type_Insert_Input = {
  value?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Short_Forecast_Type_Max_Fields = {
   __typename?: 'short_forecast_type_max_fields';
  value?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "short_forecast_type" */
export type Short_Forecast_Type_Max_Order_By = {
  value?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Short_Forecast_Type_Min_Fields = {
   __typename?: 'short_forecast_type_min_fields';
  value?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "short_forecast_type" */
export type Short_Forecast_Type_Min_Order_By = {
  value?: Maybe<Order_By>;
};

/** response of any mutation on the table "short_forecast_type" */
export type Short_Forecast_Type_Mutation_Response = {
   __typename?: 'short_forecast_type_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Short_Forecast_Type>;
};

/** input type for inserting object relation for remote table "short_forecast_type" */
export type Short_Forecast_Type_Obj_Rel_Insert_Input = {
  data: Short_Forecast_Type_Insert_Input;
  on_conflict?: Maybe<Short_Forecast_Type_On_Conflict>;
};

/** on conflict condition type for table "short_forecast_type" */
export type Short_Forecast_Type_On_Conflict = {
  constraint: Short_Forecast_Type_Constraint;
  update_columns: Array<Short_Forecast_Type_Update_Column>;
  where?: Maybe<Short_Forecast_Type_Bool_Exp>;
};

/** ordering options when selecting data from "short_forecast_type" */
export type Short_Forecast_Type_Order_By = {
  value?: Maybe<Order_By>;
};

/** primary key columns input for table: "short_forecast_type" */
export type Short_Forecast_Type_Pk_Columns_Input = {
  value: Scalars['String'];
};

/** select columns of table "short_forecast_type" */
export enum Short_Forecast_Type_Select_Column {
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "short_forecast_type" */
export type Short_Forecast_Type_Set_Input = {
  value?: Maybe<Scalars['String']>;
};

/** update columns of table "short_forecast_type" */
export enum Short_Forecast_Type_Update_Column {
  /** column name */
  Value = 'value'
}

/** columns and relationships of "sign_in_type" */
export type Sign_In_Type = {
   __typename?: 'sign_in_type';
  value: Scalars['String'];
};

/** aggregated selection of "sign_in_type" */
export type Sign_In_Type_Aggregate = {
   __typename?: 'sign_in_type_aggregate';
  aggregate?: Maybe<Sign_In_Type_Aggregate_Fields>;
  nodes: Array<Sign_In_Type>;
};

/** aggregate fields of "sign_in_type" */
export type Sign_In_Type_Aggregate_Fields = {
   __typename?: 'sign_in_type_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Sign_In_Type_Max_Fields>;
  min?: Maybe<Sign_In_Type_Min_Fields>;
};


/** aggregate fields of "sign_in_type" */
export type Sign_In_Type_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Sign_In_Type_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "sign_in_type" */
export type Sign_In_Type_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Sign_In_Type_Max_Order_By>;
  min?: Maybe<Sign_In_Type_Min_Order_By>;
};

/** input type for inserting array relation for remote table "sign_in_type" */
export type Sign_In_Type_Arr_Rel_Insert_Input = {
  data: Array<Sign_In_Type_Insert_Input>;
  on_conflict?: Maybe<Sign_In_Type_On_Conflict>;
};

/** Boolean expression to filter rows from the table "sign_in_type". All fields are combined with a logical 'AND'. */
export type Sign_In_Type_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Sign_In_Type_Bool_Exp>>>;
  _not?: Maybe<Sign_In_Type_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Sign_In_Type_Bool_Exp>>>;
  value?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "sign_in_type" */
export enum Sign_In_Type_Constraint {
  /** unique or primary key constraint */
  SignInTypePkey = 'sign_in_type_pkey'
}

export enum Sign_In_Type_Enum {
  Picture = 'picture',
  Signature = 'signature'
}

/** expression to compare columns of type sign_in_type_enum. All fields are combined with logical 'AND'. */
export type Sign_In_Type_Enum_Comparison_Exp = {
  _eq?: Maybe<Sign_In_Type_Enum>;
  _in?: Maybe<Array<Sign_In_Type_Enum>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _neq?: Maybe<Sign_In_Type_Enum>;
  _nin?: Maybe<Array<Sign_In_Type_Enum>>;
};

/** input type for inserting data into table "sign_in_type" */
export type Sign_In_Type_Insert_Input = {
  value?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Sign_In_Type_Max_Fields = {
   __typename?: 'sign_in_type_max_fields';
  value?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "sign_in_type" */
export type Sign_In_Type_Max_Order_By = {
  value?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Sign_In_Type_Min_Fields = {
   __typename?: 'sign_in_type_min_fields';
  value?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "sign_in_type" */
export type Sign_In_Type_Min_Order_By = {
  value?: Maybe<Order_By>;
};

/** response of any mutation on the table "sign_in_type" */
export type Sign_In_Type_Mutation_Response = {
   __typename?: 'sign_in_type_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Sign_In_Type>;
};

/** input type for inserting object relation for remote table "sign_in_type" */
export type Sign_In_Type_Obj_Rel_Insert_Input = {
  data: Sign_In_Type_Insert_Input;
  on_conflict?: Maybe<Sign_In_Type_On_Conflict>;
};

/** on conflict condition type for table "sign_in_type" */
export type Sign_In_Type_On_Conflict = {
  constraint: Sign_In_Type_Constraint;
  update_columns: Array<Sign_In_Type_Update_Column>;
  where?: Maybe<Sign_In_Type_Bool_Exp>;
};

/** ordering options when selecting data from "sign_in_type" */
export type Sign_In_Type_Order_By = {
  value?: Maybe<Order_By>;
};

/** primary key columns input for table: "sign_in_type" */
export type Sign_In_Type_Pk_Columns_Input = {
  value: Scalars['String'];
};

/** select columns of table "sign_in_type" */
export enum Sign_In_Type_Select_Column {
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "sign_in_type" */
export type Sign_In_Type_Set_Input = {
  value?: Maybe<Scalars['String']>;
};

/** update columns of table "sign_in_type" */
export enum Sign_In_Type_Update_Column {
  /** column name */
  Value = 'value'
}

/** columns and relationships of "state" */
export type State = {
   __typename?: 'state';
  code: Scalars['String'];
  name: Scalars['String'];
};

/** aggregated selection of "state" */
export type State_Aggregate = {
   __typename?: 'state_aggregate';
  aggregate?: Maybe<State_Aggregate_Fields>;
  nodes: Array<State>;
};

/** aggregate fields of "state" */
export type State_Aggregate_Fields = {
   __typename?: 'state_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<State_Max_Fields>;
  min?: Maybe<State_Min_Fields>;
};


/** aggregate fields of "state" */
export type State_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<State_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "state" */
export type State_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<State_Max_Order_By>;
  min?: Maybe<State_Min_Order_By>;
};

/** input type for inserting array relation for remote table "state" */
export type State_Arr_Rel_Insert_Input = {
  data: Array<State_Insert_Input>;
  on_conflict?: Maybe<State_On_Conflict>;
};

/** Boolean expression to filter rows from the table "state". All fields are combined with a logical 'AND'. */
export type State_Bool_Exp = {
  _and?: Maybe<Array<Maybe<State_Bool_Exp>>>;
  _not?: Maybe<State_Bool_Exp>;
  _or?: Maybe<Array<Maybe<State_Bool_Exp>>>;
  code?: Maybe<String_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "state" */
export enum State_Constraint {
  /** unique or primary key constraint */
  StatesNameKey = 'states_name_key',
  /** unique or primary key constraint */
  StatesPkey = 'states_pkey'
}

/** input type for inserting data into table "state" */
export type State_Insert_Input = {
  code?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type State_Max_Fields = {
   __typename?: 'state_max_fields';
  code?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "state" */
export type State_Max_Order_By = {
  code?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type State_Min_Fields = {
   __typename?: 'state_min_fields';
  code?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "state" */
export type State_Min_Order_By = {
  code?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
};

/** response of any mutation on the table "state" */
export type State_Mutation_Response = {
   __typename?: 'state_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<State>;
};

/** input type for inserting object relation for remote table "state" */
export type State_Obj_Rel_Insert_Input = {
  data: State_Insert_Input;
  on_conflict?: Maybe<State_On_Conflict>;
};

/** on conflict condition type for table "state" */
export type State_On_Conflict = {
  constraint: State_Constraint;
  update_columns: Array<State_Update_Column>;
  where?: Maybe<State_Bool_Exp>;
};

/** ordering options when selecting data from "state" */
export type State_Order_By = {
  code?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
};

/** primary key columns input for table: "state" */
export type State_Pk_Columns_Input = {
  code: Scalars['String'];
};

/** select columns of table "state" */
export enum State_Select_Column {
  /** column name */
  Code = 'code',
  /** column name */
  Name = 'name'
}

/** input type for updating data in table "state" */
export type State_Set_Input = {
  code?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

/** update columns of table "state" */
export enum State_Update_Column {
  /** column name */
  Code = 'code',
  /** column name */
  Name = 'name'
}

/** expression to compare columns of type String. All fields are combined with logical 'AND'. */
export type String_Comparison_Exp = {
  _eq?: Maybe<Scalars['String']>;
  _gt?: Maybe<Scalars['String']>;
  _gte?: Maybe<Scalars['String']>;
  _ilike?: Maybe<Scalars['String']>;
  _in?: Maybe<Array<Scalars['String']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _like?: Maybe<Scalars['String']>;
  _lt?: Maybe<Scalars['String']>;
  _lte?: Maybe<Scalars['String']>;
  _neq?: Maybe<Scalars['String']>;
  _nilike?: Maybe<Scalars['String']>;
  _nin?: Maybe<Array<Scalars['String']>>;
  _nlike?: Maybe<Scalars['String']>;
  _nsimilar?: Maybe<Scalars['String']>;
  _similar?: Maybe<Scalars['String']>;
};

/** columns and relationships of "subcontractor" */
export type Subcontractor = {
   __typename?: 'subcontractor';
  /** An object relationship */
  address?: Maybe<Address>;
  address_id?: Maybe<Scalars['uuid']>;
  created_at: Scalars['timestamptz'];
  /** An array relationship */
  daily_reports: Array<Daily_Report>;
  /** An aggregated array relationship */
  daily_reports_aggregate: Daily_Report_Aggregate;
  /** An array relationship */
  daily_work_logs: Array<Daily_Work_Log>;
  /** An aggregated array relationship */
  daily_work_logs_aggregate: Daily_Work_Log_Aggregate;
  id: Scalars['uuid'];
  logo_url?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  /** An array relationship */
  permits: Array<Permit>;
  /** An aggregated array relationship */
  permits_aggregate: Permit_Aggregate;
  /** An array relationship */
  project_covid_guest_certifications: Array<Project_Covid_Guest_Certification>;
  /** An aggregated array relationship */
  project_covid_guest_certifications_aggregate: Project_Covid_Guest_Certification_Aggregate;
  /** An array relationship */
  project_crews: Array<Project_Crew>;
  /** An aggregated array relationship */
  project_crews_aggregate: Project_Crew_Aggregate;
  /** An array relationship */
  project_workers: Array<Project_Worker>;
  /** An aggregated array relationship */
  project_workers_aggregate: Project_Worker_Aggregate;
  /** An array relationship */
  reports: Array<Report>;
  /** An aggregated array relationship */
  reports_aggregate: Report_Aggregate;
  /** An array relationship */
  subcontractor_employees: Array<Subcontractor_Employee>;
  /** An aggregated array relationship */
  subcontractor_employees_aggregate: Subcontractor_Employee_Aggregate;
  /** An array relationship */
  subcontractor_project_hazards: Array<Project_Hazard_Subcontractor>;
  /** An aggregated array relationship */
  subcontractor_project_hazards_aggregate: Project_Hazard_Subcontractor_Aggregate;
  /** An array relationship */
  subcontractor_projects: Array<Project_Subcontractor>;
  /** An aggregated array relationship */
  subcontractor_projects_aggregate: Project_Subcontractor_Aggregate;
  /** An array relationship */
  subcontractor_workers: Array<Subcontractor_Worker>;
  /** An aggregated array relationship */
  subcontractor_workers_aggregate: Subcontractor_Worker_Aggregate;
  /** An array relationship */
  tasks: Array<Task>;
  /** An aggregated array relationship */
  tasks_aggregate: Task_Aggregate;
  /** An array relationship */
  toolbox_talks: Array<Toolbox_Talk>;
  /** An aggregated array relationship */
  toolbox_talks_aggregate: Toolbox_Talk_Aggregate;
  /** An object relationship */
  trade?: Maybe<Subcontractor_Trade>;
  trade_id?: Maybe<Scalars['uuid']>;
  /** An array relationship */
  workers: Array<Worker>;
  /** An aggregated array relationship */
  workers_aggregate: Worker_Aggregate;
};


/** columns and relationships of "subcontractor" */
export type SubcontractorDaily_ReportsArgs = {
  distinct_on?: Maybe<Array<Daily_Report_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Report_Order_By>>;
  where?: Maybe<Daily_Report_Bool_Exp>;
};


/** columns and relationships of "subcontractor" */
export type SubcontractorDaily_Reports_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Report_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Report_Order_By>>;
  where?: Maybe<Daily_Report_Bool_Exp>;
};


/** columns and relationships of "subcontractor" */
export type SubcontractorDaily_Work_LogsArgs = {
  distinct_on?: Maybe<Array<Daily_Work_Log_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Work_Log_Order_By>>;
  where?: Maybe<Daily_Work_Log_Bool_Exp>;
};


/** columns and relationships of "subcontractor" */
export type SubcontractorDaily_Work_Logs_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Work_Log_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Work_Log_Order_By>>;
  where?: Maybe<Daily_Work_Log_Bool_Exp>;
};


/** columns and relationships of "subcontractor" */
export type SubcontractorPermitsArgs = {
  distinct_on?: Maybe<Array<Permit_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Permit_Order_By>>;
  where?: Maybe<Permit_Bool_Exp>;
};


/** columns and relationships of "subcontractor" */
export type SubcontractorPermits_AggregateArgs = {
  distinct_on?: Maybe<Array<Permit_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Permit_Order_By>>;
  where?: Maybe<Permit_Bool_Exp>;
};


/** columns and relationships of "subcontractor" */
export type SubcontractorProject_Covid_Guest_CertificationsArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Guest_Certification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Guest_Certification_Order_By>>;
  where?: Maybe<Project_Covid_Guest_Certification_Bool_Exp>;
};


/** columns and relationships of "subcontractor" */
export type SubcontractorProject_Covid_Guest_Certifications_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Guest_Certification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Guest_Certification_Order_By>>;
  where?: Maybe<Project_Covid_Guest_Certification_Bool_Exp>;
};


/** columns and relationships of "subcontractor" */
export type SubcontractorProject_CrewsArgs = {
  distinct_on?: Maybe<Array<Project_Crew_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Crew_Order_By>>;
  where?: Maybe<Project_Crew_Bool_Exp>;
};


/** columns and relationships of "subcontractor" */
export type SubcontractorProject_Crews_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Crew_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Crew_Order_By>>;
  where?: Maybe<Project_Crew_Bool_Exp>;
};


/** columns and relationships of "subcontractor" */
export type SubcontractorProject_WorkersArgs = {
  distinct_on?: Maybe<Array<Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Worker_Order_By>>;
  where?: Maybe<Project_Worker_Bool_Exp>;
};


/** columns and relationships of "subcontractor" */
export type SubcontractorProject_Workers_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Worker_Order_By>>;
  where?: Maybe<Project_Worker_Bool_Exp>;
};


/** columns and relationships of "subcontractor" */
export type SubcontractorReportsArgs = {
  distinct_on?: Maybe<Array<Report_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Order_By>>;
  where?: Maybe<Report_Bool_Exp>;
};


/** columns and relationships of "subcontractor" */
export type SubcontractorReports_AggregateArgs = {
  distinct_on?: Maybe<Array<Report_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Order_By>>;
  where?: Maybe<Report_Bool_Exp>;
};


/** columns and relationships of "subcontractor" */
export type SubcontractorSubcontractor_EmployeesArgs = {
  distinct_on?: Maybe<Array<Subcontractor_Employee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Subcontractor_Employee_Order_By>>;
  where?: Maybe<Subcontractor_Employee_Bool_Exp>;
};


/** columns and relationships of "subcontractor" */
export type SubcontractorSubcontractor_Employees_AggregateArgs = {
  distinct_on?: Maybe<Array<Subcontractor_Employee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Subcontractor_Employee_Order_By>>;
  where?: Maybe<Subcontractor_Employee_Bool_Exp>;
};


/** columns and relationships of "subcontractor" */
export type SubcontractorSubcontractor_Project_HazardsArgs = {
  distinct_on?: Maybe<Array<Project_Hazard_Subcontractor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Hazard_Subcontractor_Order_By>>;
  where?: Maybe<Project_Hazard_Subcontractor_Bool_Exp>;
};


/** columns and relationships of "subcontractor" */
export type SubcontractorSubcontractor_Project_Hazards_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Hazard_Subcontractor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Hazard_Subcontractor_Order_By>>;
  where?: Maybe<Project_Hazard_Subcontractor_Bool_Exp>;
};


/** columns and relationships of "subcontractor" */
export type SubcontractorSubcontractor_ProjectsArgs = {
  distinct_on?: Maybe<Array<Project_Subcontractor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Subcontractor_Order_By>>;
  where?: Maybe<Project_Subcontractor_Bool_Exp>;
};


/** columns and relationships of "subcontractor" */
export type SubcontractorSubcontractor_Projects_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Subcontractor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Subcontractor_Order_By>>;
  where?: Maybe<Project_Subcontractor_Bool_Exp>;
};


/** columns and relationships of "subcontractor" */
export type SubcontractorSubcontractor_WorkersArgs = {
  distinct_on?: Maybe<Array<Subcontractor_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Subcontractor_Worker_Order_By>>;
  where?: Maybe<Subcontractor_Worker_Bool_Exp>;
};


/** columns and relationships of "subcontractor" */
export type SubcontractorSubcontractor_Workers_AggregateArgs = {
  distinct_on?: Maybe<Array<Subcontractor_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Subcontractor_Worker_Order_By>>;
  where?: Maybe<Subcontractor_Worker_Bool_Exp>;
};


/** columns and relationships of "subcontractor" */
export type SubcontractorTasksArgs = {
  distinct_on?: Maybe<Array<Task_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Order_By>>;
  where?: Maybe<Task_Bool_Exp>;
};


/** columns and relationships of "subcontractor" */
export type SubcontractorTasks_AggregateArgs = {
  distinct_on?: Maybe<Array<Task_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Order_By>>;
  where?: Maybe<Task_Bool_Exp>;
};


/** columns and relationships of "subcontractor" */
export type SubcontractorToolbox_TalksArgs = {
  distinct_on?: Maybe<Array<Toolbox_Talk_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Toolbox_Talk_Order_By>>;
  where?: Maybe<Toolbox_Talk_Bool_Exp>;
};


/** columns and relationships of "subcontractor" */
export type SubcontractorToolbox_Talks_AggregateArgs = {
  distinct_on?: Maybe<Array<Toolbox_Talk_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Toolbox_Talk_Order_By>>;
  where?: Maybe<Toolbox_Talk_Bool_Exp>;
};


/** columns and relationships of "subcontractor" */
export type SubcontractorWorkersArgs = {
  distinct_on?: Maybe<Array<Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Order_By>>;
  where?: Maybe<Worker_Bool_Exp>;
};


/** columns and relationships of "subcontractor" */
export type SubcontractorWorkers_AggregateArgs = {
  distinct_on?: Maybe<Array<Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Order_By>>;
  where?: Maybe<Worker_Bool_Exp>;
};

/** aggregated selection of "subcontractor" */
export type Subcontractor_Aggregate = {
   __typename?: 'subcontractor_aggregate';
  aggregate?: Maybe<Subcontractor_Aggregate_Fields>;
  nodes: Array<Subcontractor>;
};

/** aggregate fields of "subcontractor" */
export type Subcontractor_Aggregate_Fields = {
   __typename?: 'subcontractor_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Subcontractor_Max_Fields>;
  min?: Maybe<Subcontractor_Min_Fields>;
};


/** aggregate fields of "subcontractor" */
export type Subcontractor_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Subcontractor_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "subcontractor" */
export type Subcontractor_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Subcontractor_Max_Order_By>;
  min?: Maybe<Subcontractor_Min_Order_By>;
};

/** input type for inserting array relation for remote table "subcontractor" */
export type Subcontractor_Arr_Rel_Insert_Input = {
  data: Array<Subcontractor_Insert_Input>;
  on_conflict?: Maybe<Subcontractor_On_Conflict>;
};

/** Boolean expression to filter rows from the table "subcontractor". All fields are combined with a logical 'AND'. */
export type Subcontractor_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Subcontractor_Bool_Exp>>>;
  _not?: Maybe<Subcontractor_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Subcontractor_Bool_Exp>>>;
  address?: Maybe<Address_Bool_Exp>;
  address_id?: Maybe<Uuid_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  daily_reports?: Maybe<Daily_Report_Bool_Exp>;
  daily_work_logs?: Maybe<Daily_Work_Log_Bool_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  logo_url?: Maybe<String_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  permits?: Maybe<Permit_Bool_Exp>;
  project_covid_guest_certifications?: Maybe<Project_Covid_Guest_Certification_Bool_Exp>;
  project_crews?: Maybe<Project_Crew_Bool_Exp>;
  project_workers?: Maybe<Project_Worker_Bool_Exp>;
  reports?: Maybe<Report_Bool_Exp>;
  subcontractor_employees?: Maybe<Subcontractor_Employee_Bool_Exp>;
  subcontractor_project_hazards?: Maybe<Project_Hazard_Subcontractor_Bool_Exp>;
  subcontractor_projects?: Maybe<Project_Subcontractor_Bool_Exp>;
  subcontractor_workers?: Maybe<Subcontractor_Worker_Bool_Exp>;
  tasks?: Maybe<Task_Bool_Exp>;
  toolbox_talks?: Maybe<Toolbox_Talk_Bool_Exp>;
  trade?: Maybe<Subcontractor_Trade_Bool_Exp>;
  trade_id?: Maybe<Uuid_Comparison_Exp>;
  workers?: Maybe<Worker_Bool_Exp>;
};

/** unique or primary key constraints on table "subcontractor" */
export enum Subcontractor_Constraint {
  /** unique or primary key constraint */
  SubcontractorPkey = 'subcontractor_pkey'
}

/** columns and relationships of "subcontractor_employee" */
export type Subcontractor_Employee = {
   __typename?: 'subcontractor_employee';
  created_at: Scalars['timestamptz'];
  /** An object relationship */
  employee_title?: Maybe<Subcontractor_Employee_Title>;
  /** An object relationship */
  subcontractor: Subcontractor;
  subcontractor_id: Scalars['uuid'];
  title_id?: Maybe<Scalars['uuid']>;
  updated_at: Scalars['timestamptz'];
  /** An object relationship */
  user: User;
  user_id: Scalars['uuid'];
};

/** aggregated selection of "subcontractor_employee" */
export type Subcontractor_Employee_Aggregate = {
   __typename?: 'subcontractor_employee_aggregate';
  aggregate?: Maybe<Subcontractor_Employee_Aggregate_Fields>;
  nodes: Array<Subcontractor_Employee>;
};

/** aggregate fields of "subcontractor_employee" */
export type Subcontractor_Employee_Aggregate_Fields = {
   __typename?: 'subcontractor_employee_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Subcontractor_Employee_Max_Fields>;
  min?: Maybe<Subcontractor_Employee_Min_Fields>;
};


/** aggregate fields of "subcontractor_employee" */
export type Subcontractor_Employee_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Subcontractor_Employee_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "subcontractor_employee" */
export type Subcontractor_Employee_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Subcontractor_Employee_Max_Order_By>;
  min?: Maybe<Subcontractor_Employee_Min_Order_By>;
};

/** input type for inserting array relation for remote table "subcontractor_employee" */
export type Subcontractor_Employee_Arr_Rel_Insert_Input = {
  data: Array<Subcontractor_Employee_Insert_Input>;
  on_conflict?: Maybe<Subcontractor_Employee_On_Conflict>;
};

/** Boolean expression to filter rows from the table "subcontractor_employee". All fields are combined with a logical 'AND'. */
export type Subcontractor_Employee_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Subcontractor_Employee_Bool_Exp>>>;
  _not?: Maybe<Subcontractor_Employee_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Subcontractor_Employee_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  employee_title?: Maybe<Subcontractor_Employee_Title_Bool_Exp>;
  subcontractor?: Maybe<Subcontractor_Bool_Exp>;
  subcontractor_id?: Maybe<Uuid_Comparison_Exp>;
  title_id?: Maybe<Uuid_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  user?: Maybe<User_Bool_Exp>;
  user_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "subcontractor_employee" */
export enum Subcontractor_Employee_Constraint {
  /** unique or primary key constraint */
  SubcontractorEmployeePkey = 'subcontractor_employee_pkey',
  /** unique or primary key constraint */
  SubcontractorEmployeeUserIdKey = 'subcontractor_employee_user_id_key'
}

/** input type for inserting data into table "subcontractor_employee" */
export type Subcontractor_Employee_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  employee_title?: Maybe<Subcontractor_Employee_Title_Obj_Rel_Insert_Input>;
  subcontractor?: Maybe<Subcontractor_Obj_Rel_Insert_Input>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  title_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  user?: Maybe<User_Obj_Rel_Insert_Input>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Subcontractor_Employee_Max_Fields = {
   __typename?: 'subcontractor_employee_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  title_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "subcontractor_employee" */
export type Subcontractor_Employee_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  title_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Subcontractor_Employee_Min_Fields = {
   __typename?: 'subcontractor_employee_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  title_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "subcontractor_employee" */
export type Subcontractor_Employee_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  title_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "subcontractor_employee" */
export type Subcontractor_Employee_Mutation_Response = {
   __typename?: 'subcontractor_employee_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Subcontractor_Employee>;
};

/** input type for inserting object relation for remote table "subcontractor_employee" */
export type Subcontractor_Employee_Obj_Rel_Insert_Input = {
  data: Subcontractor_Employee_Insert_Input;
  on_conflict?: Maybe<Subcontractor_Employee_On_Conflict>;
};

/** on conflict condition type for table "subcontractor_employee" */
export type Subcontractor_Employee_On_Conflict = {
  constraint: Subcontractor_Employee_Constraint;
  update_columns: Array<Subcontractor_Employee_Update_Column>;
  where?: Maybe<Subcontractor_Employee_Bool_Exp>;
};

/** ordering options when selecting data from "subcontractor_employee" */
export type Subcontractor_Employee_Order_By = {
  created_at?: Maybe<Order_By>;
  employee_title?: Maybe<Subcontractor_Employee_Title_Order_By>;
  subcontractor?: Maybe<Subcontractor_Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  title_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  user?: Maybe<User_Order_By>;
  user_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "subcontractor_employee" */
export type Subcontractor_Employee_Pk_Columns_Input = {
  user_id: Scalars['uuid'];
};

/** select columns of table "subcontractor_employee" */
export enum Subcontractor_Employee_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  TitleId = 'title_id',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UserId = 'user_id'
}

/** input type for updating data in table "subcontractor_employee" */
export type Subcontractor_Employee_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  title_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** columns and relationships of "subcontractor_employee_title" */
export type Subcontractor_Employee_Title = {
   __typename?: 'subcontractor_employee_title';
  created_at: Scalars['timestamptz'];
  id: Scalars['uuid'];
  /** An object relationship */
  name: Text_Translation;
  name_id: Scalars['uuid'];
  name_text: Scalars['String'];
};

/** aggregated selection of "subcontractor_employee_title" */
export type Subcontractor_Employee_Title_Aggregate = {
   __typename?: 'subcontractor_employee_title_aggregate';
  aggregate?: Maybe<Subcontractor_Employee_Title_Aggregate_Fields>;
  nodes: Array<Subcontractor_Employee_Title>;
};

/** aggregate fields of "subcontractor_employee_title" */
export type Subcontractor_Employee_Title_Aggregate_Fields = {
   __typename?: 'subcontractor_employee_title_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Subcontractor_Employee_Title_Max_Fields>;
  min?: Maybe<Subcontractor_Employee_Title_Min_Fields>;
};


/** aggregate fields of "subcontractor_employee_title" */
export type Subcontractor_Employee_Title_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Subcontractor_Employee_Title_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "subcontractor_employee_title" */
export type Subcontractor_Employee_Title_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Subcontractor_Employee_Title_Max_Order_By>;
  min?: Maybe<Subcontractor_Employee_Title_Min_Order_By>;
};

/** input type for inserting array relation for remote table "subcontractor_employee_title" */
export type Subcontractor_Employee_Title_Arr_Rel_Insert_Input = {
  data: Array<Subcontractor_Employee_Title_Insert_Input>;
  on_conflict?: Maybe<Subcontractor_Employee_Title_On_Conflict>;
};

/**
 * Boolean expression to filter rows from the table "subcontractor_employee_title".
 * All fields are combined with a logical 'AND'.
 */
export type Subcontractor_Employee_Title_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Subcontractor_Employee_Title_Bool_Exp>>>;
  _not?: Maybe<Subcontractor_Employee_Title_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Subcontractor_Employee_Title_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  name?: Maybe<Text_Translation_Bool_Exp>;
  name_id?: Maybe<Uuid_Comparison_Exp>;
  name_text?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "subcontractor_employee_title" */
export enum Subcontractor_Employee_Title_Constraint {
  /** unique or primary key constraint */
  SubcontractorEmployeeTitleNameKey = 'subcontractor_employee_title_name_key',
  /** unique or primary key constraint */
  SubcontractorEmployeeTitlePkey = 'subcontractor_employee_title_pkey'
}

/** input type for inserting data into table "subcontractor_employee_title" */
export type Subcontractor_Employee_Title_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  name_id?: Maybe<Scalars['uuid']>;
  name_text?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Subcontractor_Employee_Title_Max_Fields = {
   __typename?: 'subcontractor_employee_title_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  name_id?: Maybe<Scalars['uuid']>;
  name_text?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "subcontractor_employee_title" */
export type Subcontractor_Employee_Title_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name_id?: Maybe<Order_By>;
  name_text?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Subcontractor_Employee_Title_Min_Fields = {
   __typename?: 'subcontractor_employee_title_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  name_id?: Maybe<Scalars['uuid']>;
  name_text?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "subcontractor_employee_title" */
export type Subcontractor_Employee_Title_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name_id?: Maybe<Order_By>;
  name_text?: Maybe<Order_By>;
};

/** response of any mutation on the table "subcontractor_employee_title" */
export type Subcontractor_Employee_Title_Mutation_Response = {
   __typename?: 'subcontractor_employee_title_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Subcontractor_Employee_Title>;
};

/** input type for inserting object relation for remote table "subcontractor_employee_title" */
export type Subcontractor_Employee_Title_Obj_Rel_Insert_Input = {
  data: Subcontractor_Employee_Title_Insert_Input;
  on_conflict?: Maybe<Subcontractor_Employee_Title_On_Conflict>;
};

/** on conflict condition type for table "subcontractor_employee_title" */
export type Subcontractor_Employee_Title_On_Conflict = {
  constraint: Subcontractor_Employee_Title_Constraint;
  update_columns: Array<Subcontractor_Employee_Title_Update_Column>;
  where?: Maybe<Subcontractor_Employee_Title_Bool_Exp>;
};

/** ordering options when selecting data from "subcontractor_employee_title" */
export type Subcontractor_Employee_Title_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Text_Translation_Order_By>;
  name_id?: Maybe<Order_By>;
  name_text?: Maybe<Order_By>;
};

/** primary key columns input for table: "subcontractor_employee_title" */
export type Subcontractor_Employee_Title_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "subcontractor_employee_title" */
export enum Subcontractor_Employee_Title_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  NameId = 'name_id',
  /** column name */
  NameText = 'name_text'
}

/** input type for updating data in table "subcontractor_employee_title" */
export type Subcontractor_Employee_Title_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  name_id?: Maybe<Scalars['uuid']>;
  name_text?: Maybe<Scalars['String']>;
};

/** update columns of table "subcontractor_employee_title" */
export enum Subcontractor_Employee_Title_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  NameId = 'name_id',
  /** column name */
  NameText = 'name_text'
}

/** update columns of table "subcontractor_employee" */
export enum Subcontractor_Employee_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  TitleId = 'title_id',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UserId = 'user_id'
}

/** input type for inserting data into table "subcontractor" */
export type Subcontractor_Insert_Input = {
  address?: Maybe<Address_Obj_Rel_Insert_Input>;
  address_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  daily_reports?: Maybe<Daily_Report_Arr_Rel_Insert_Input>;
  daily_work_logs?: Maybe<Daily_Work_Log_Arr_Rel_Insert_Input>;
  id?: Maybe<Scalars['uuid']>;
  logo_url?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  permits?: Maybe<Permit_Arr_Rel_Insert_Input>;
  project_covid_guest_certifications?: Maybe<Project_Covid_Guest_Certification_Arr_Rel_Insert_Input>;
  project_crews?: Maybe<Project_Crew_Arr_Rel_Insert_Input>;
  project_workers?: Maybe<Project_Worker_Arr_Rel_Insert_Input>;
  reports?: Maybe<Report_Arr_Rel_Insert_Input>;
  subcontractor_employees?: Maybe<Subcontractor_Employee_Arr_Rel_Insert_Input>;
  subcontractor_project_hazards?: Maybe<Project_Hazard_Subcontractor_Arr_Rel_Insert_Input>;
  subcontractor_projects?: Maybe<Project_Subcontractor_Arr_Rel_Insert_Input>;
  subcontractor_workers?: Maybe<Subcontractor_Worker_Arr_Rel_Insert_Input>;
  tasks?: Maybe<Task_Arr_Rel_Insert_Input>;
  toolbox_talks?: Maybe<Toolbox_Talk_Arr_Rel_Insert_Input>;
  trade?: Maybe<Subcontractor_Trade_Obj_Rel_Insert_Input>;
  trade_id?: Maybe<Scalars['uuid']>;
  workers?: Maybe<Worker_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Subcontractor_Max_Fields = {
   __typename?: 'subcontractor_max_fields';
  address_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  logo_url?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  trade_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "subcontractor" */
export type Subcontractor_Max_Order_By = {
  address_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  logo_url?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  trade_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Subcontractor_Min_Fields = {
   __typename?: 'subcontractor_min_fields';
  address_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  logo_url?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  trade_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "subcontractor" */
export type Subcontractor_Min_Order_By = {
  address_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  logo_url?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  trade_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "subcontractor" */
export type Subcontractor_Mutation_Response = {
   __typename?: 'subcontractor_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Subcontractor>;
};

/** input type for inserting object relation for remote table "subcontractor" */
export type Subcontractor_Obj_Rel_Insert_Input = {
  data: Subcontractor_Insert_Input;
  on_conflict?: Maybe<Subcontractor_On_Conflict>;
};

/** on conflict condition type for table "subcontractor" */
export type Subcontractor_On_Conflict = {
  constraint: Subcontractor_Constraint;
  update_columns: Array<Subcontractor_Update_Column>;
  where?: Maybe<Subcontractor_Bool_Exp>;
};

/**
 * This table stores the daily Subcontractor status for safety report submissions.
 * 
 * 
 * columns and relationships of "subcontractor_onsite_status_update"
 */
export type Subcontractor_Onsite_Status_Update = {
   __typename?: 'subcontractor_onsite_status_update';
  created_at: Scalars['date'];
  /** Subcontractor Id */
  id: Scalars['uuid'];
  status: Scalars['String'];
};

/** aggregated selection of "subcontractor_onsite_status_update" */
export type Subcontractor_Onsite_Status_Update_Aggregate = {
   __typename?: 'subcontractor_onsite_status_update_aggregate';
  aggregate?: Maybe<Subcontractor_Onsite_Status_Update_Aggregate_Fields>;
  nodes: Array<Subcontractor_Onsite_Status_Update>;
};

/** aggregate fields of "subcontractor_onsite_status_update" */
export type Subcontractor_Onsite_Status_Update_Aggregate_Fields = {
   __typename?: 'subcontractor_onsite_status_update_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Subcontractor_Onsite_Status_Update_Max_Fields>;
  min?: Maybe<Subcontractor_Onsite_Status_Update_Min_Fields>;
};


/** aggregate fields of "subcontractor_onsite_status_update" */
export type Subcontractor_Onsite_Status_Update_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Subcontractor_Onsite_Status_Update_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "subcontractor_onsite_status_update" */
export type Subcontractor_Onsite_Status_Update_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Subcontractor_Onsite_Status_Update_Max_Order_By>;
  min?: Maybe<Subcontractor_Onsite_Status_Update_Min_Order_By>;
};

/** input type for inserting array relation for remote table "subcontractor_onsite_status_update" */
export type Subcontractor_Onsite_Status_Update_Arr_Rel_Insert_Input = {
  data: Array<Subcontractor_Onsite_Status_Update_Insert_Input>;
  on_conflict?: Maybe<Subcontractor_Onsite_Status_Update_On_Conflict>;
};

/**
 * Boolean expression to filter rows from the table
 * "subcontractor_onsite_status_update". All fields are combined with a logical 'AND'.
 */
export type Subcontractor_Onsite_Status_Update_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Subcontractor_Onsite_Status_Update_Bool_Exp>>>;
  _not?: Maybe<Subcontractor_Onsite_Status_Update_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Subcontractor_Onsite_Status_Update_Bool_Exp>>>;
  created_at?: Maybe<Date_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  status?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "subcontractor_onsite_status_update" */
export enum Subcontractor_Onsite_Status_Update_Constraint {
  /** unique or primary key constraint */
  SubcontractorOnsiteStatusUpdatePkey = 'subcontractor_onsite_status_update_pkey'
}

/** input type for inserting data into table "subcontractor_onsite_status_update" */
export type Subcontractor_Onsite_Status_Update_Insert_Input = {
  created_at?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  status?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Subcontractor_Onsite_Status_Update_Max_Fields = {
   __typename?: 'subcontractor_onsite_status_update_max_fields';
  created_at?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  status?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "subcontractor_onsite_status_update" */
export type Subcontractor_Onsite_Status_Update_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Subcontractor_Onsite_Status_Update_Min_Fields = {
   __typename?: 'subcontractor_onsite_status_update_min_fields';
  created_at?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  status?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "subcontractor_onsite_status_update" */
export type Subcontractor_Onsite_Status_Update_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
};

/** response of any mutation on the table "subcontractor_onsite_status_update" */
export type Subcontractor_Onsite_Status_Update_Mutation_Response = {
   __typename?: 'subcontractor_onsite_status_update_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Subcontractor_Onsite_Status_Update>;
};

/** input type for inserting object relation for remote table "subcontractor_onsite_status_update" */
export type Subcontractor_Onsite_Status_Update_Obj_Rel_Insert_Input = {
  data: Subcontractor_Onsite_Status_Update_Insert_Input;
  on_conflict?: Maybe<Subcontractor_Onsite_Status_Update_On_Conflict>;
};

/** on conflict condition type for table "subcontractor_onsite_status_update" */
export type Subcontractor_Onsite_Status_Update_On_Conflict = {
  constraint: Subcontractor_Onsite_Status_Update_Constraint;
  update_columns: Array<Subcontractor_Onsite_Status_Update_Update_Column>;
  where?: Maybe<Subcontractor_Onsite_Status_Update_Bool_Exp>;
};

/** ordering options when selecting data from "subcontractor_onsite_status_update" */
export type Subcontractor_Onsite_Status_Update_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
};

/** primary key columns input for table: "subcontractor_onsite_status_update" */
export type Subcontractor_Onsite_Status_Update_Pk_Columns_Input = {
  created_at: Scalars['date'];
  /** Subcontractor Id */
  id: Scalars['uuid'];
};

/** select columns of table "subcontractor_onsite_status_update" */
export enum Subcontractor_Onsite_Status_Update_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Status = 'status'
}

/** input type for updating data in table "subcontractor_onsite_status_update" */
export type Subcontractor_Onsite_Status_Update_Set_Input = {
  created_at?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  status?: Maybe<Scalars['String']>;
};

/** update columns of table "subcontractor_onsite_status_update" */
export enum Subcontractor_Onsite_Status_Update_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Status = 'status'
}

/** ordering options when selecting data from "subcontractor" */
export type Subcontractor_Order_By = {
  address?: Maybe<Address_Order_By>;
  address_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  daily_reports_aggregate?: Maybe<Daily_Report_Aggregate_Order_By>;
  daily_work_logs_aggregate?: Maybe<Daily_Work_Log_Aggregate_Order_By>;
  id?: Maybe<Order_By>;
  logo_url?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  permits_aggregate?: Maybe<Permit_Aggregate_Order_By>;
  project_covid_guest_certifications_aggregate?: Maybe<Project_Covid_Guest_Certification_Aggregate_Order_By>;
  project_crews_aggregate?: Maybe<Project_Crew_Aggregate_Order_By>;
  project_workers_aggregate?: Maybe<Project_Worker_Aggregate_Order_By>;
  reports_aggregate?: Maybe<Report_Aggregate_Order_By>;
  subcontractor_employees_aggregate?: Maybe<Subcontractor_Employee_Aggregate_Order_By>;
  subcontractor_project_hazards_aggregate?: Maybe<Project_Hazard_Subcontractor_Aggregate_Order_By>;
  subcontractor_projects_aggregate?: Maybe<Project_Subcontractor_Aggregate_Order_By>;
  subcontractor_workers_aggregate?: Maybe<Subcontractor_Worker_Aggregate_Order_By>;
  tasks_aggregate?: Maybe<Task_Aggregate_Order_By>;
  toolbox_talks_aggregate?: Maybe<Toolbox_Talk_Aggregate_Order_By>;
  trade?: Maybe<Subcontractor_Trade_Order_By>;
  trade_id?: Maybe<Order_By>;
  workers_aggregate?: Maybe<Worker_Aggregate_Order_By>;
};

/** primary key columns input for table: "subcontractor" */
export type Subcontractor_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "subcontractor" */
export enum Subcontractor_Select_Column {
  /** column name */
  AddressId = 'address_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  LogoUrl = 'logo_url',
  /** column name */
  Name = 'name',
  /** column name */
  TradeId = 'trade_id'
}

/** input type for updating data in table "subcontractor" */
export type Subcontractor_Set_Input = {
  address_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  logo_url?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  trade_id?: Maybe<Scalars['uuid']>;
};

/** columns and relationships of "subcontractor_trade" */
export type Subcontractor_Trade = {
   __typename?: 'subcontractor_trade';
  created_at: Scalars['timestamptz'];
  id: Scalars['uuid'];
  name: Scalars['String'];
  /** An array relationship */
  subcontractors: Array<Subcontractor>;
  /** An aggregated array relationship */
  subcontractors_aggregate: Subcontractor_Aggregate;
};


/** columns and relationships of "subcontractor_trade" */
export type Subcontractor_TradeSubcontractorsArgs = {
  distinct_on?: Maybe<Array<Subcontractor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Subcontractor_Order_By>>;
  where?: Maybe<Subcontractor_Bool_Exp>;
};


/** columns and relationships of "subcontractor_trade" */
export type Subcontractor_TradeSubcontractors_AggregateArgs = {
  distinct_on?: Maybe<Array<Subcontractor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Subcontractor_Order_By>>;
  where?: Maybe<Subcontractor_Bool_Exp>;
};

/** aggregated selection of "subcontractor_trade" */
export type Subcontractor_Trade_Aggregate = {
   __typename?: 'subcontractor_trade_aggregate';
  aggregate?: Maybe<Subcontractor_Trade_Aggregate_Fields>;
  nodes: Array<Subcontractor_Trade>;
};

/** aggregate fields of "subcontractor_trade" */
export type Subcontractor_Trade_Aggregate_Fields = {
   __typename?: 'subcontractor_trade_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Subcontractor_Trade_Max_Fields>;
  min?: Maybe<Subcontractor_Trade_Min_Fields>;
};


/** aggregate fields of "subcontractor_trade" */
export type Subcontractor_Trade_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Subcontractor_Trade_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "subcontractor_trade" */
export type Subcontractor_Trade_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Subcontractor_Trade_Max_Order_By>;
  min?: Maybe<Subcontractor_Trade_Min_Order_By>;
};

/** input type for inserting array relation for remote table "subcontractor_trade" */
export type Subcontractor_Trade_Arr_Rel_Insert_Input = {
  data: Array<Subcontractor_Trade_Insert_Input>;
  on_conflict?: Maybe<Subcontractor_Trade_On_Conflict>;
};

/** Boolean expression to filter rows from the table "subcontractor_trade". All fields are combined with a logical 'AND'. */
export type Subcontractor_Trade_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Subcontractor_Trade_Bool_Exp>>>;
  _not?: Maybe<Subcontractor_Trade_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Subcontractor_Trade_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  subcontractors?: Maybe<Subcontractor_Bool_Exp>;
};

/** unique or primary key constraints on table "subcontractor_trade" */
export enum Subcontractor_Trade_Constraint {
  /** unique or primary key constraint */
  SubcontractorTradeNameKey = 'subcontractor_trade_name_key',
  /** unique or primary key constraint */
  SubcontractorTradePkey = 'subcontractor_trade_pkey'
}

/** input type for inserting data into table "subcontractor_trade" */
export type Subcontractor_Trade_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  subcontractors?: Maybe<Subcontractor_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Subcontractor_Trade_Max_Fields = {
   __typename?: 'subcontractor_trade_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "subcontractor_trade" */
export type Subcontractor_Trade_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Subcontractor_Trade_Min_Fields = {
   __typename?: 'subcontractor_trade_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "subcontractor_trade" */
export type Subcontractor_Trade_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
};

/** response of any mutation on the table "subcontractor_trade" */
export type Subcontractor_Trade_Mutation_Response = {
   __typename?: 'subcontractor_trade_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Subcontractor_Trade>;
};

/** input type for inserting object relation for remote table "subcontractor_trade" */
export type Subcontractor_Trade_Obj_Rel_Insert_Input = {
  data: Subcontractor_Trade_Insert_Input;
  on_conflict?: Maybe<Subcontractor_Trade_On_Conflict>;
};

/** on conflict condition type for table "subcontractor_trade" */
export type Subcontractor_Trade_On_Conflict = {
  constraint: Subcontractor_Trade_Constraint;
  update_columns: Array<Subcontractor_Trade_Update_Column>;
  where?: Maybe<Subcontractor_Trade_Bool_Exp>;
};

/** ordering options when selecting data from "subcontractor_trade" */
export type Subcontractor_Trade_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  subcontractors_aggregate?: Maybe<Subcontractor_Aggregate_Order_By>;
};

/** primary key columns input for table: "subcontractor_trade" */
export type Subcontractor_Trade_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "subcontractor_trade" */
export enum Subcontractor_Trade_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name'
}

/** input type for updating data in table "subcontractor_trade" */
export type Subcontractor_Trade_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
};

/** update columns of table "subcontractor_trade" */
export enum Subcontractor_Trade_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name'
}

/** update columns of table "subcontractor" */
export enum Subcontractor_Update_Column {
  /** column name */
  AddressId = 'address_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  LogoUrl = 'logo_url',
  /** column name */
  Name = 'name',
  /** column name */
  TradeId = 'trade_id'
}

/** columns and relationships of "subcontractor_worker" */
export type Subcontractor_Worker = {
   __typename?: 'subcontractor_worker';
  created_at: Scalars['timestamptz'];
  id: Scalars['uuid'];
  /** An object relationship */
  subcontractor: Subcontractor;
  subcontractor_id: Scalars['uuid'];
  /** An object relationship */
  worker: Worker;
  worker_id: Scalars['uuid'];
};

/** aggregated selection of "subcontractor_worker" */
export type Subcontractor_Worker_Aggregate = {
   __typename?: 'subcontractor_worker_aggregate';
  aggregate?: Maybe<Subcontractor_Worker_Aggregate_Fields>;
  nodes: Array<Subcontractor_Worker>;
};

/** aggregate fields of "subcontractor_worker" */
export type Subcontractor_Worker_Aggregate_Fields = {
   __typename?: 'subcontractor_worker_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Subcontractor_Worker_Max_Fields>;
  min?: Maybe<Subcontractor_Worker_Min_Fields>;
};


/** aggregate fields of "subcontractor_worker" */
export type Subcontractor_Worker_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Subcontractor_Worker_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "subcontractor_worker" */
export type Subcontractor_Worker_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Subcontractor_Worker_Max_Order_By>;
  min?: Maybe<Subcontractor_Worker_Min_Order_By>;
};

/** input type for inserting array relation for remote table "subcontractor_worker" */
export type Subcontractor_Worker_Arr_Rel_Insert_Input = {
  data: Array<Subcontractor_Worker_Insert_Input>;
  on_conflict?: Maybe<Subcontractor_Worker_On_Conflict>;
};

/** Boolean expression to filter rows from the table "subcontractor_worker". All fields are combined with a logical 'AND'. */
export type Subcontractor_Worker_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Subcontractor_Worker_Bool_Exp>>>;
  _not?: Maybe<Subcontractor_Worker_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Subcontractor_Worker_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  subcontractor?: Maybe<Subcontractor_Bool_Exp>;
  subcontractor_id?: Maybe<Uuid_Comparison_Exp>;
  worker?: Maybe<Worker_Bool_Exp>;
  worker_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "subcontractor_worker" */
export enum Subcontractor_Worker_Constraint {
  /** unique or primary key constraint */
  SubcontractorWorkerPkey = 'subcontractor_worker_pkey'
}

/** input type for inserting data into table "subcontractor_worker" */
export type Subcontractor_Worker_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  subcontractor?: Maybe<Subcontractor_Obj_Rel_Insert_Input>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  worker?: Maybe<Worker_Obj_Rel_Insert_Input>;
  worker_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Subcontractor_Worker_Max_Fields = {
   __typename?: 'subcontractor_worker_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  worker_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "subcontractor_worker" */
export type Subcontractor_Worker_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  worker_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Subcontractor_Worker_Min_Fields = {
   __typename?: 'subcontractor_worker_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  worker_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "subcontractor_worker" */
export type Subcontractor_Worker_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  worker_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "subcontractor_worker" */
export type Subcontractor_Worker_Mutation_Response = {
   __typename?: 'subcontractor_worker_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Subcontractor_Worker>;
};

/** input type for inserting object relation for remote table "subcontractor_worker" */
export type Subcontractor_Worker_Obj_Rel_Insert_Input = {
  data: Subcontractor_Worker_Insert_Input;
  on_conflict?: Maybe<Subcontractor_Worker_On_Conflict>;
};

/** on conflict condition type for table "subcontractor_worker" */
export type Subcontractor_Worker_On_Conflict = {
  constraint: Subcontractor_Worker_Constraint;
  update_columns: Array<Subcontractor_Worker_Update_Column>;
  where?: Maybe<Subcontractor_Worker_Bool_Exp>;
};

/** ordering options when selecting data from "subcontractor_worker" */
export type Subcontractor_Worker_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  subcontractor?: Maybe<Subcontractor_Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  worker?: Maybe<Worker_Order_By>;
  worker_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "subcontractor_worker" */
export type Subcontractor_Worker_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "subcontractor_worker" */
export enum Subcontractor_Worker_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  WorkerId = 'worker_id'
}

/** input type for updating data in table "subcontractor_worker" */
export type Subcontractor_Worker_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  worker_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "subcontractor_worker" */
export enum Subcontractor_Worker_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  WorkerId = 'worker_id'
}

export type SubcontractorDetails = {
   __typename?: 'SubcontractorDetails';
  subcontractor_id: Scalars['String'];
  subcontractor_name: Scalars['String'];
};

export type SubEmployeeData = {
   __typename?: 'SubEmployeeData';
  user?: Maybe<User>;
  currentSubProject?: Maybe<Project_Subcontractor>;
};

/** columns and relationships of "submission_image" */
export type Submission_Image = {
   __typename?: 'submission_image';
  created_at: Scalars['timestamptz'];
  id: Scalars['uuid'];
  /** An object relationship */
  image: Image;
  image_id: Scalars['uuid'];
  /** An object relationship */
  report?: Maybe<Report>;
  report_id?: Maybe<Scalars['uuid']>;
  sort_index: Scalars['numeric'];
  /** An object relationship */
  toolbox_talk?: Maybe<Toolbox_Talk>;
  toolbox_talk_id?: Maybe<Scalars['uuid']>;
  type: Submission_Image_Type_Enum;
};

/** aggregated selection of "submission_image" */
export type Submission_Image_Aggregate = {
   __typename?: 'submission_image_aggregate';
  aggregate?: Maybe<Submission_Image_Aggregate_Fields>;
  nodes: Array<Submission_Image>;
};

/** aggregate fields of "submission_image" */
export type Submission_Image_Aggregate_Fields = {
   __typename?: 'submission_image_aggregate_fields';
  avg?: Maybe<Submission_Image_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Submission_Image_Max_Fields>;
  min?: Maybe<Submission_Image_Min_Fields>;
  stddev?: Maybe<Submission_Image_Stddev_Fields>;
  stddev_pop?: Maybe<Submission_Image_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Submission_Image_Stddev_Samp_Fields>;
  sum?: Maybe<Submission_Image_Sum_Fields>;
  var_pop?: Maybe<Submission_Image_Var_Pop_Fields>;
  var_samp?: Maybe<Submission_Image_Var_Samp_Fields>;
  variance?: Maybe<Submission_Image_Variance_Fields>;
};


/** aggregate fields of "submission_image" */
export type Submission_Image_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Submission_Image_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "submission_image" */
export type Submission_Image_Aggregate_Order_By = {
  avg?: Maybe<Submission_Image_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Submission_Image_Max_Order_By>;
  min?: Maybe<Submission_Image_Min_Order_By>;
  stddev?: Maybe<Submission_Image_Stddev_Order_By>;
  stddev_pop?: Maybe<Submission_Image_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Submission_Image_Stddev_Samp_Order_By>;
  sum?: Maybe<Submission_Image_Sum_Order_By>;
  var_pop?: Maybe<Submission_Image_Var_Pop_Order_By>;
  var_samp?: Maybe<Submission_Image_Var_Samp_Order_By>;
  variance?: Maybe<Submission_Image_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "submission_image" */
export type Submission_Image_Arr_Rel_Insert_Input = {
  data: Array<Submission_Image_Insert_Input>;
  on_conflict?: Maybe<Submission_Image_On_Conflict>;
};

/** aggregate avg on columns */
export type Submission_Image_Avg_Fields = {
   __typename?: 'submission_image_avg_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "submission_image" */
export type Submission_Image_Avg_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "submission_image". All fields are combined with a logical 'AND'. */
export type Submission_Image_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Submission_Image_Bool_Exp>>>;
  _not?: Maybe<Submission_Image_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Submission_Image_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  image?: Maybe<Image_Bool_Exp>;
  image_id?: Maybe<Uuid_Comparison_Exp>;
  report?: Maybe<Report_Bool_Exp>;
  report_id?: Maybe<Uuid_Comparison_Exp>;
  sort_index?: Maybe<Numeric_Comparison_Exp>;
  toolbox_talk?: Maybe<Toolbox_Talk_Bool_Exp>;
  toolbox_talk_id?: Maybe<Uuid_Comparison_Exp>;
  type?: Maybe<Submission_Image_Type_Enum_Comparison_Exp>;
};

/** unique or primary key constraints on table "submission_image" */
export enum Submission_Image_Constraint {
  /** unique or primary key constraint */
  SubmissionImagePkey = 'submission_image_pkey'
}

/** input type for incrementing integer column in table "submission_image" */
export type Submission_Image_Inc_Input = {
  sort_index?: Maybe<Scalars['numeric']>;
};

/** input type for inserting data into table "submission_image" */
export type Submission_Image_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  image?: Maybe<Image_Obj_Rel_Insert_Input>;
  image_id?: Maybe<Scalars['uuid']>;
  report?: Maybe<Report_Obj_Rel_Insert_Input>;
  report_id?: Maybe<Scalars['uuid']>;
  sort_index?: Maybe<Scalars['numeric']>;
  toolbox_talk?: Maybe<Toolbox_Talk_Obj_Rel_Insert_Input>;
  toolbox_talk_id?: Maybe<Scalars['uuid']>;
  type?: Maybe<Submission_Image_Type_Enum>;
};

/** aggregate max on columns */
export type Submission_Image_Max_Fields = {
   __typename?: 'submission_image_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  image_id?: Maybe<Scalars['uuid']>;
  report_id?: Maybe<Scalars['uuid']>;
  sort_index?: Maybe<Scalars['numeric']>;
  toolbox_talk_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "submission_image" */
export type Submission_Image_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  image_id?: Maybe<Order_By>;
  report_id?: Maybe<Order_By>;
  sort_index?: Maybe<Order_By>;
  toolbox_talk_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Submission_Image_Min_Fields = {
   __typename?: 'submission_image_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  image_id?: Maybe<Scalars['uuid']>;
  report_id?: Maybe<Scalars['uuid']>;
  sort_index?: Maybe<Scalars['numeric']>;
  toolbox_talk_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "submission_image" */
export type Submission_Image_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  image_id?: Maybe<Order_By>;
  report_id?: Maybe<Order_By>;
  sort_index?: Maybe<Order_By>;
  toolbox_talk_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "submission_image" */
export type Submission_Image_Mutation_Response = {
   __typename?: 'submission_image_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Submission_Image>;
};

/** input type for inserting object relation for remote table "submission_image" */
export type Submission_Image_Obj_Rel_Insert_Input = {
  data: Submission_Image_Insert_Input;
  on_conflict?: Maybe<Submission_Image_On_Conflict>;
};

/** on conflict condition type for table "submission_image" */
export type Submission_Image_On_Conflict = {
  constraint: Submission_Image_Constraint;
  update_columns: Array<Submission_Image_Update_Column>;
  where?: Maybe<Submission_Image_Bool_Exp>;
};

/** ordering options when selecting data from "submission_image" */
export type Submission_Image_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  image?: Maybe<Image_Order_By>;
  image_id?: Maybe<Order_By>;
  report?: Maybe<Report_Order_By>;
  report_id?: Maybe<Order_By>;
  sort_index?: Maybe<Order_By>;
  toolbox_talk?: Maybe<Toolbox_Talk_Order_By>;
  toolbox_talk_id?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
};

/** primary key columns input for table: "submission_image" */
export type Submission_Image_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "submission_image" */
export enum Submission_Image_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  ImageId = 'image_id',
  /** column name */
  ReportId = 'report_id',
  /** column name */
  SortIndex = 'sort_index',
  /** column name */
  ToolboxTalkId = 'toolbox_talk_id',
  /** column name */
  Type = 'type'
}

/** input type for updating data in table "submission_image" */
export type Submission_Image_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  image_id?: Maybe<Scalars['uuid']>;
  report_id?: Maybe<Scalars['uuid']>;
  sort_index?: Maybe<Scalars['numeric']>;
  toolbox_talk_id?: Maybe<Scalars['uuid']>;
  type?: Maybe<Submission_Image_Type_Enum>;
};

/** aggregate stddev on columns */
export type Submission_Image_Stddev_Fields = {
   __typename?: 'submission_image_stddev_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "submission_image" */
export type Submission_Image_Stddev_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Submission_Image_Stddev_Pop_Fields = {
   __typename?: 'submission_image_stddev_pop_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "submission_image" */
export type Submission_Image_Stddev_Pop_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Submission_Image_Stddev_Samp_Fields = {
   __typename?: 'submission_image_stddev_samp_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "submission_image" */
export type Submission_Image_Stddev_Samp_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Submission_Image_Sum_Fields = {
   __typename?: 'submission_image_sum_fields';
  sort_index?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "submission_image" */
export type Submission_Image_Sum_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** columns and relationships of "submission_image_type" */
export type Submission_Image_Type = {
   __typename?: 'submission_image_type';
  value: Scalars['String'];
};

/** aggregated selection of "submission_image_type" */
export type Submission_Image_Type_Aggregate = {
   __typename?: 'submission_image_type_aggregate';
  aggregate?: Maybe<Submission_Image_Type_Aggregate_Fields>;
  nodes: Array<Submission_Image_Type>;
};

/** aggregate fields of "submission_image_type" */
export type Submission_Image_Type_Aggregate_Fields = {
   __typename?: 'submission_image_type_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Submission_Image_Type_Max_Fields>;
  min?: Maybe<Submission_Image_Type_Min_Fields>;
};


/** aggregate fields of "submission_image_type" */
export type Submission_Image_Type_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Submission_Image_Type_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "submission_image_type" */
export type Submission_Image_Type_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Submission_Image_Type_Max_Order_By>;
  min?: Maybe<Submission_Image_Type_Min_Order_By>;
};

/** input type for inserting array relation for remote table "submission_image_type" */
export type Submission_Image_Type_Arr_Rel_Insert_Input = {
  data: Array<Submission_Image_Type_Insert_Input>;
  on_conflict?: Maybe<Submission_Image_Type_On_Conflict>;
};

/** Boolean expression to filter rows from the table "submission_image_type". All fields are combined with a logical 'AND'. */
export type Submission_Image_Type_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Submission_Image_Type_Bool_Exp>>>;
  _not?: Maybe<Submission_Image_Type_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Submission_Image_Type_Bool_Exp>>>;
  value?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "submission_image_type" */
export enum Submission_Image_Type_Constraint {
  /** unique or primary key constraint */
  SubmissionImageTypePkey = 'submission_image_type_pkey'
}

export enum Submission_Image_Type_Enum {
  PictureSignIn = 'picture_sign_in'
}

/** expression to compare columns of type submission_image_type_enum. All fields are combined with logical 'AND'. */
export type Submission_Image_Type_Enum_Comparison_Exp = {
  _eq?: Maybe<Submission_Image_Type_Enum>;
  _in?: Maybe<Array<Submission_Image_Type_Enum>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _neq?: Maybe<Submission_Image_Type_Enum>;
  _nin?: Maybe<Array<Submission_Image_Type_Enum>>;
};

/** input type for inserting data into table "submission_image_type" */
export type Submission_Image_Type_Insert_Input = {
  value?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Submission_Image_Type_Max_Fields = {
   __typename?: 'submission_image_type_max_fields';
  value?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "submission_image_type" */
export type Submission_Image_Type_Max_Order_By = {
  value?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Submission_Image_Type_Min_Fields = {
   __typename?: 'submission_image_type_min_fields';
  value?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "submission_image_type" */
export type Submission_Image_Type_Min_Order_By = {
  value?: Maybe<Order_By>;
};

/** response of any mutation on the table "submission_image_type" */
export type Submission_Image_Type_Mutation_Response = {
   __typename?: 'submission_image_type_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Submission_Image_Type>;
};

/** input type for inserting object relation for remote table "submission_image_type" */
export type Submission_Image_Type_Obj_Rel_Insert_Input = {
  data: Submission_Image_Type_Insert_Input;
  on_conflict?: Maybe<Submission_Image_Type_On_Conflict>;
};

/** on conflict condition type for table "submission_image_type" */
export type Submission_Image_Type_On_Conflict = {
  constraint: Submission_Image_Type_Constraint;
  update_columns: Array<Submission_Image_Type_Update_Column>;
  where?: Maybe<Submission_Image_Type_Bool_Exp>;
};

/** ordering options when selecting data from "submission_image_type" */
export type Submission_Image_Type_Order_By = {
  value?: Maybe<Order_By>;
};

/** primary key columns input for table: "submission_image_type" */
export type Submission_Image_Type_Pk_Columns_Input = {
  value: Scalars['String'];
};

/** select columns of table "submission_image_type" */
export enum Submission_Image_Type_Select_Column {
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "submission_image_type" */
export type Submission_Image_Type_Set_Input = {
  value?: Maybe<Scalars['String']>;
};

/** update columns of table "submission_image_type" */
export enum Submission_Image_Type_Update_Column {
  /** column name */
  Value = 'value'
}

/** update columns of table "submission_image" */
export enum Submission_Image_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  ImageId = 'image_id',
  /** column name */
  ReportId = 'report_id',
  /** column name */
  SortIndex = 'sort_index',
  /** column name */
  ToolboxTalkId = 'toolbox_talk_id',
  /** column name */
  Type = 'type'
}

/** aggregate var_pop on columns */
export type Submission_Image_Var_Pop_Fields = {
   __typename?: 'submission_image_var_pop_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "submission_image" */
export type Submission_Image_Var_Pop_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Submission_Image_Var_Samp_Fields = {
   __typename?: 'submission_image_var_samp_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "submission_image" */
export type Submission_Image_Var_Samp_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Submission_Image_Variance_Fields = {
   __typename?: 'submission_image_variance_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "submission_image" */
export type Submission_Image_Variance_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** subscription root */
export type Subscription_Root = {
   __typename?: 'subscription_root';
  /** retrieve the result of action: "actionName" */
  actionName?: Maybe<ActionName>;
  /** fetch data from the table: "address" */
  address: Array<Address>;
  /** fetch aggregated fields from the table: "address" */
  address_aggregate: Address_Aggregate;
  /** fetch data from the table: "address" using primary key columns */
  address_by_pk?: Maybe<Address>;
  /** fetch data from the table: "auto_email" */
  auto_email: Array<Auto_Email>;
  /** fetch aggregated fields from the table: "auto_email" */
  auto_email_aggregate: Auto_Email_Aggregate;
  /** fetch data from the table: "auto_email" using primary key columns */
  auto_email_by_pk?: Maybe<Auto_Email>;
  /** fetch data from the table: "auto_email_event_type" */
  auto_email_event_type: Array<Auto_Email_Event_Type>;
  /** fetch aggregated fields from the table: "auto_email_event_type" */
  auto_email_event_type_aggregate: Auto_Email_Event_Type_Aggregate;
  /** fetch data from the table: "auto_email_event_type" using primary key columns */
  auto_email_event_type_by_pk?: Maybe<Auto_Email_Event_Type>;
  /** fetch data from the table: "awareness_question" */
  awareness_question: Array<Awareness_Question>;
  /** fetch aggregated fields from the table: "awareness_question" */
  awareness_question_aggregate: Awareness_Question_Aggregate;
  /** fetch data from the table: "awareness_question" using primary key columns */
  awareness_question_by_pk?: Maybe<Awareness_Question>;
  /** fetch data from the table: "calendar" */
  calendar: Array<Calendar>;
  /** fetch aggregated fields from the table: "calendar" */
  calendar_aggregate: Calendar_Aggregate;
  /** fetch data from the table: "calendar" using primary key columns */
  calendar_by_pk?: Maybe<Calendar>;
  /** fetch data from the table: "certification" */
  certification: Array<Certification>;
  /** fetch aggregated fields from the table: "certification" */
  certification_aggregate: Certification_Aggregate;
  /** fetch data from the table: "certification" using primary key columns */
  certification_by_pk?: Maybe<Certification>;
  /** fetch data from the table: "chat" */
  chat: Array<Chat>;
  /** fetch aggregated fields from the table: "chat" */
  chat_aggregate: Chat_Aggregate;
  /** fetch data from the table: "chat" using primary key columns */
  chat_by_pk?: Maybe<Chat>;
  /** fetch data from the table: "chat_employee_preview" */
  chat_employee_preview: Array<Chat_Employee_Preview>;
  /** fetch aggregated fields from the table: "chat_employee_preview" */
  chat_employee_preview_aggregate: Chat_Employee_Preview_Aggregate;
  /** fetch data from the table: "chat_employee_preview" using primary key columns */
  chat_employee_preview_by_pk?: Maybe<Chat_Employee_Preview>;
  /** fetch data from the table: "chat_item" */
  chat_item: Array<Chat_Item>;
  /** fetch aggregated fields from the table: "chat_item" */
  chat_item_aggregate: Chat_Item_Aggregate;
  /** fetch data from the table: "chat_item_attachment" */
  chat_item_attachment: Array<Chat_Item_Attachment>;
  /** fetch aggregated fields from the table: "chat_item_attachment" */
  chat_item_attachment_aggregate: Chat_Item_Attachment_Aggregate;
  /** fetch data from the table: "chat_item_attachment" using primary key columns */
  chat_item_attachment_by_pk?: Maybe<Chat_Item_Attachment>;
  /** fetch data from the table: "chat_item" using primary key columns */
  chat_item_by_pk?: Maybe<Chat_Item>;
  /** fetch data from the table: "chat_item_type" */
  chat_item_type: Array<Chat_Item_Type>;
  /** fetch aggregated fields from the table: "chat_item_type" */
  chat_item_type_aggregate: Chat_Item_Type_Aggregate;
  /** fetch data from the table: "chat_item_type" using primary key columns */
  chat_item_type_by_pk?: Maybe<Chat_Item_Type>;
  /** fetch data from the table: "chat_member" */
  chat_member: Array<Chat_Member>;
  /** fetch aggregated fields from the table: "chat_member" */
  chat_member_aggregate: Chat_Member_Aggregate;
  /** fetch data from the table: "chat_member" using primary key columns */
  chat_member_by_pk?: Maybe<Chat_Member>;
  /** fetch data from the table: "checklist_item" */
  checklist_item: Array<Checklist_Item>;
  /** fetch aggregated fields from the table: "checklist_item" */
  checklist_item_aggregate: Checklist_Item_Aggregate;
  /** fetch data from the table: "checklist_item" using primary key columns */
  checklist_item_by_pk?: Maybe<Checklist_Item>;
  /** fetch data from the table: "checklist_item_config" */
  checklist_item_config: Array<Checklist_Item_Config>;
  /** fetch aggregated fields from the table: "checklist_item_config" */
  checklist_item_config_aggregate: Checklist_Item_Config_Aggregate;
  /** fetch data from the table: "checklist_item_config" using primary key columns */
  checklist_item_config_by_pk?: Maybe<Checklist_Item_Config>;
  /** fetch data from the table: "checklist_item_config_type" */
  checklist_item_config_type: Array<Checklist_Item_Config_Type>;
  /** fetch aggregated fields from the table: "checklist_item_config_type" */
  checklist_item_config_type_aggregate: Checklist_Item_Config_Type_Aggregate;
  /** fetch data from the table: "checklist_item_config_type" using primary key columns */
  checklist_item_config_type_by_pk?: Maybe<Checklist_Item_Config_Type>;
  /** fetch data from the table: "checklist_item_notify_email" */
  checklist_item_notify_email: Array<Checklist_Item_Notify_Email>;
  /** fetch aggregated fields from the table: "checklist_item_notify_email" */
  checklist_item_notify_email_aggregate: Checklist_Item_Notify_Email_Aggregate;
  /** fetch data from the table: "checklist_item_notify_email" using primary key columns */
  checklist_item_notify_email_by_pk?: Maybe<Checklist_Item_Notify_Email>;
  /** fetch data from the table: "checklist_item_type" */
  checklist_item_type: Array<Checklist_Item_Type>;
  /** fetch aggregated fields from the table: "checklist_item_type" */
  checklist_item_type_aggregate: Checklist_Item_Type_Aggregate;
  /** fetch data from the table: "checklist_item_type" using primary key columns */
  checklist_item_type_by_pk?: Maybe<Checklist_Item_Type>;
  /** fetch data from the table: "cleared_project_covid_certify_worker" */
  cleared_project_covid_certify_worker: Array<Cleared_Project_Covid_Certify_Worker>;
  /** fetch aggregated fields from the table: "cleared_project_covid_certify_worker" */
  cleared_project_covid_certify_worker_aggregate: Cleared_Project_Covid_Certify_Worker_Aggregate;
  /** fetch data from the table: "cleared_project_covid_certify_worker" using primary key columns */
  cleared_project_covid_certify_worker_by_pk?: Maybe<Cleared_Project_Covid_Certify_Worker>;
  /** fetch data from the table: "cleared_project_covid_tested_positive_worker" */
  cleared_project_covid_tested_positive_worker: Array<Cleared_Project_Covid_Tested_Positive_Worker>;
  /** fetch aggregated fields from the table: "cleared_project_covid_tested_positive_worker" */
  cleared_project_covid_tested_positive_worker_aggregate: Cleared_Project_Covid_Tested_Positive_Worker_Aggregate;
  /** fetch data from the table: "cleared_project_covid_tested_positive_worker" using primary key columns */
  cleared_project_covid_tested_positive_worker_by_pk?: Maybe<Cleared_Project_Covid_Tested_Positive_Worker>;
  /** fetch data from the table: "confined_space_permit" */
  confined_space_permit: Array<Confined_Space_Permit>;
  /** fetch aggregated fields from the table: "confined_space_permit" */
  confined_space_permit_aggregate: Confined_Space_Permit_Aggregate;
  /** fetch data from the table: "confined_space_permit" using primary key columns */
  confined_space_permit_by_pk?: Maybe<Confined_Space_Permit>;
  /** fetch data from the table: "confined_space_permit_monitoring_equipment" */
  confined_space_permit_monitoring_equipment: Array<Confined_Space_Permit_Monitoring_Equipment>;
  /** fetch aggregated fields from the table: "confined_space_permit_monitoring_equipment" */
  confined_space_permit_monitoring_equipment_aggregate: Confined_Space_Permit_Monitoring_Equipment_Aggregate;
  /** fetch data from the table: "confined_space_permit_monitoring_equipment" using primary key columns */
  confined_space_permit_monitoring_equipment_by_pk?: Maybe<Confined_Space_Permit_Monitoring_Equipment>;
  /** fetch data from the table: "confined_space_permit_reading" */
  confined_space_permit_reading: Array<Confined_Space_Permit_Reading>;
  /** fetch aggregated fields from the table: "confined_space_permit_reading" */
  confined_space_permit_reading_aggregate: Confined_Space_Permit_Reading_Aggregate;
  /** fetch data from the table: "confined_space_permit_reading" using primary key columns */
  confined_space_permit_reading_by_pk?: Maybe<Confined_Space_Permit_Reading>;
  /** fetch data from the table: "confined_space_permit_reading_custom_item" */
  confined_space_permit_reading_custom_item: Array<Confined_Space_Permit_Reading_Custom_Item>;
  /** fetch aggregated fields from the table: "confined_space_permit_reading_custom_item" */
  confined_space_permit_reading_custom_item_aggregate: Confined_Space_Permit_Reading_Custom_Item_Aggregate;
  /** fetch data from the table: "confined_space_permit_reading_custom_item" using primary key columns */
  confined_space_permit_reading_custom_item_by_pk?: Maybe<Confined_Space_Permit_Reading_Custom_Item>;
  /** fetch data from the table: "daily_copy" */
  daily_copy: Array<Daily_Copy>;
  /** fetch aggregated fields from the table: "daily_copy" */
  daily_copy_aggregate: Daily_Copy_Aggregate;
  /** fetch data from the table: "daily_copy" using primary key columns */
  daily_copy_by_pk?: Maybe<Daily_Copy>;
  /** fetch data from the table: "daily_copy_section" */
  daily_copy_section: Array<Daily_Copy_Section>;
  /** fetch aggregated fields from the table: "daily_copy_section" */
  daily_copy_section_aggregate: Daily_Copy_Section_Aggregate;
  /** fetch data from the table: "daily_copy_section" using primary key columns */
  daily_copy_section_by_pk?: Maybe<Daily_Copy_Section>;
  /** execute function "daily_hours_to_date" which returns "s_daily_hours_to_date" */
  daily_hours_to_date: Array<S_Daily_Hours_To_Date>;
  /** execute function "daily_hours_to_date" and query aggregates on result of table type "s_daily_hours_to_date" */
  daily_hours_to_date_aggregate: S_Daily_Hours_To_Date_Aggregate;
  /** fetch data from the table: "daily_note" */
  daily_note: Array<Daily_Note>;
  /** fetch aggregated fields from the table: "daily_note" */
  daily_note_aggregate: Daily_Note_Aggregate;
  /** fetch data from the table: "daily_note" using primary key columns */
  daily_note_by_pk?: Maybe<Daily_Note>;
  /** fetch data from the table: "daily_note_sub" */
  daily_note_sub: Array<Daily_Note_Sub>;
  /** fetch aggregated fields from the table: "daily_note_sub" */
  daily_note_sub_aggregate: Daily_Note_Sub_Aggregate;
  /** fetch data from the table: "daily_note_sub" using primary key columns */
  daily_note_sub_by_pk?: Maybe<Daily_Note_Sub>;
  /** fetch data from the table: "daily_note_tag" */
  daily_note_tag: Array<Daily_Note_Tag>;
  /** fetch aggregated fields from the table: "daily_note_tag" */
  daily_note_tag_aggregate: Daily_Note_Tag_Aggregate;
  /** fetch data from the table: "daily_note_tag" using primary key columns */
  daily_note_tag_by_pk?: Maybe<Daily_Note_Tag>;
  /** fetch data from the table: "daily_report" */
  daily_report: Array<Daily_Report>;
  /** fetch aggregated fields from the table: "daily_report" */
  daily_report_aggregate: Daily_Report_Aggregate;
  /** fetch data from the table: "daily_report" using primary key columns */
  daily_report_by_pk?: Maybe<Daily_Report>;
  /** fetch data from the table: "daily_report_completed" */
  daily_report_completed: Array<Daily_Report_Completed>;
  /** fetch aggregated fields from the table: "daily_report_completed" */
  daily_report_completed_aggregate: Daily_Report_Completed_Aggregate;
  /** fetch data from the table: "daily_report_completed" using primary key columns */
  daily_report_completed_by_pk?: Maybe<Daily_Report_Completed>;
  /** fetch data from the table: "daily_report_event" */
  daily_report_event: Array<Daily_Report_Event>;
  /** fetch aggregated fields from the table: "daily_report_event" */
  daily_report_event_aggregate: Daily_Report_Event_Aggregate;
  /** fetch data from the table: "daily_report_event" using primary key columns */
  daily_report_event_by_pk?: Maybe<Daily_Report_Event>;
  /** fetch data from the table: "daily_report_event_type" */
  daily_report_event_type: Array<Daily_Report_Event_Type>;
  /** fetch aggregated fields from the table: "daily_report_event_type" */
  daily_report_event_type_aggregate: Daily_Report_Event_Type_Aggregate;
  /** fetch data from the table: "daily_report_event_type" using primary key columns */
  daily_report_event_type_by_pk?: Maybe<Daily_Report_Event_Type>;
  /** fetch data from the table: "daily_report_project_worker" */
  daily_report_project_worker: Array<Daily_Report_Project_Worker>;
  /** fetch aggregated fields from the table: "daily_report_project_worker" */
  daily_report_project_worker_aggregate: Daily_Report_Project_Worker_Aggregate;
  /** fetch data from the table: "daily_report_project_worker" using primary key columns */
  daily_report_project_worker_by_pk?: Maybe<Daily_Report_Project_Worker>;
  /** fetch data from the table: "daily_schedule_event" */
  daily_schedule_event: Array<Daily_Schedule_Event>;
  /** fetch aggregated fields from the table: "daily_schedule_event" */
  daily_schedule_event_aggregate: Daily_Schedule_Event_Aggregate;
  /** fetch data from the table: "daily_schedule_event" using primary key columns */
  daily_schedule_event_by_pk?: Maybe<Daily_Schedule_Event>;
  /** fetch data from the table: "daily_schedule_event_sub" */
  daily_schedule_event_sub: Array<Daily_Schedule_Event_Sub>;
  /** fetch aggregated fields from the table: "daily_schedule_event_sub" */
  daily_schedule_event_sub_aggregate: Daily_Schedule_Event_Sub_Aggregate;
  /** fetch data from the table: "daily_schedule_event_sub" using primary key columns */
  daily_schedule_event_sub_by_pk?: Maybe<Daily_Schedule_Event_Sub>;
  /** fetch data from the table: "daily_schedule_event_type" */
  daily_schedule_event_type: Array<Daily_Schedule_Event_Type>;
  /** fetch aggregated fields from the table: "daily_schedule_event_type" */
  daily_schedule_event_type_aggregate: Daily_Schedule_Event_Type_Aggregate;
  /** fetch data from the table: "daily_schedule_event_type" using primary key columns */
  daily_schedule_event_type_by_pk?: Maybe<Daily_Schedule_Event_Type>;
  /** fetch data from the table: "daily_weather_observation" */
  daily_weather_observation: Array<Daily_Weather_Observation>;
  /** fetch aggregated fields from the table: "daily_weather_observation" */
  daily_weather_observation_aggregate: Daily_Weather_Observation_Aggregate;
  /** fetch data from the table: "daily_weather_observation" using primary key columns */
  daily_weather_observation_by_pk?: Maybe<Daily_Weather_Observation>;
  /** fetch data from the table: "daily_weather_observation_sub" */
  daily_weather_observation_sub: Array<Daily_Weather_Observation_Sub>;
  /** fetch aggregated fields from the table: "daily_weather_observation_sub" */
  daily_weather_observation_sub_aggregate: Daily_Weather_Observation_Sub_Aggregate;
  /** fetch data from the table: "daily_weather_observation_sub" using primary key columns */
  daily_weather_observation_sub_by_pk?: Maybe<Daily_Weather_Observation_Sub>;
  /** fetch data from the table: "daily_work_log" */
  daily_work_log: Array<Daily_Work_Log>;
  /** fetch aggregated fields from the table: "daily_work_log" */
  daily_work_log_aggregate: Daily_Work_Log_Aggregate;
  /** fetch data from the table: "daily_work_log" using primary key columns */
  daily_work_log_by_pk?: Maybe<Daily_Work_Log>;
  /** fetch data from the table: "daily_work_log_comment" */
  daily_work_log_comment: Array<Daily_Work_Log_Comment>;
  /** fetch aggregated fields from the table: "daily_work_log_comment" */
  daily_work_log_comment_aggregate: Daily_Work_Log_Comment_Aggregate;
  /** fetch data from the table: "daily_work_log_comment" using primary key columns */
  daily_work_log_comment_by_pk?: Maybe<Daily_Work_Log_Comment>;
  /** fetch data from the table: "daily_work_log_comment_email" */
  daily_work_log_comment_email: Array<Daily_Work_Log_Comment_Email>;
  /** fetch aggregated fields from the table: "daily_work_log_comment_email" */
  daily_work_log_comment_email_aggregate: Daily_Work_Log_Comment_Email_Aggregate;
  /** fetch data from the table: "daily_work_log_comment_email" using primary key columns */
  daily_work_log_comment_email_by_pk?: Maybe<Daily_Work_Log_Comment_Email>;
  /** fetch data from the table: "daily_work_log_tag" */
  daily_work_log_tag: Array<Daily_Work_Log_Tag>;
  /** fetch aggregated fields from the table: "daily_work_log_tag" */
  daily_work_log_tag_aggregate: Daily_Work_Log_Tag_Aggregate;
  /** fetch data from the table: "daily_work_log_tag" using primary key columns */
  daily_work_log_tag_by_pk?: Maybe<Daily_Work_Log_Tag>;
  /** fetch data from the table: "daily_work_log_worker" */
  daily_work_log_worker: Array<Daily_Work_Log_Worker>;
  /** fetch aggregated fields from the table: "daily_work_log_worker" */
  daily_work_log_worker_aggregate: Daily_Work_Log_Worker_Aggregate;
  /** fetch data from the table: "daily_work_log_worker" using primary key columns */
  daily_work_log_worker_by_pk?: Maybe<Daily_Work_Log_Worker>;
  /** execute function "date_daily_log_submittals" which returns "s_sub_daily_log_submittal" */
  date_daily_log_submittals: Array<S_Sub_Daily_Log_Submittal>;
  /** execute function "date_daily_log_submittals" and query aggregates on result of table type "s_sub_daily_log_submittal" */
  date_daily_log_submittals_aggregate: S_Sub_Daily_Log_Submittal_Aggregate;
  /** fetch data from the table: "delivery" */
  delivery: Array<Delivery>;
  /** fetch aggregated fields from the table: "delivery" */
  delivery_aggregate: Delivery_Aggregate;
  /** fetch data from the table: "delivery" using primary key columns */
  delivery_by_pk?: Maybe<Delivery>;
  /** fetch data from the table: "delivery_calendar" */
  delivery_calendar: Array<Delivery_Calendar>;
  /** fetch aggregated fields from the table: "delivery_calendar" */
  delivery_calendar_aggregate: Delivery_Calendar_Aggregate;
  /** fetch data from the table: "delivery_calendar" using primary key columns */
  delivery_calendar_by_pk?: Maybe<Delivery_Calendar>;
  /** fetch data from the table: "dig_permit" */
  dig_permit: Array<Dig_Permit>;
  /** fetch aggregated fields from the table: "dig_permit" */
  dig_permit_aggregate: Dig_Permit_Aggregate;
  /** fetch data from the table: "dig_permit" using primary key columns */
  dig_permit_by_pk?: Maybe<Dig_Permit>;
  /** fetch data from the table: "dig_permit_select_option" */
  dig_permit_select_option: Array<Dig_Permit_Select_Option>;
  /** fetch aggregated fields from the table: "dig_permit_select_option" */
  dig_permit_select_option_aggregate: Dig_Permit_Select_Option_Aggregate;
  /** fetch data from the table: "dig_permit_select_option" using primary key columns */
  dig_permit_select_option_by_pk?: Maybe<Dig_Permit_Select_Option>;
  /** fetch data from the table: "dig_permit_ticket" */
  dig_permit_ticket: Array<Dig_Permit_Ticket>;
  /** fetch aggregated fields from the table: "dig_permit_ticket" */
  dig_permit_ticket_aggregate: Dig_Permit_Ticket_Aggregate;
  /** fetch data from the table: "dig_permit_ticket" using primary key columns */
  dig_permit_ticket_by_pk?: Maybe<Dig_Permit_Ticket>;
  /** execute function "dummy_query" which returns "state" */
  dummy_query: Array<State>;
  /** execute function "dummy_query" and query aggregates on result of table type "state" */
  dummy_query_aggregate: State_Aggregate;
  /** fetch data from the table: "employee_title" */
  employee_title: Array<Employee_Title>;
  /** fetch aggregated fields from the table: "employee_title" */
  employee_title_aggregate: Employee_Title_Aggregate;
  /** fetch data from the table: "employee_title" using primary key columns */
  employee_title_by_pk?: Maybe<Employee_Title>;
  /** fetch data from the table: "expo_push_token" */
  expo_push_token: Array<Expo_Push_Token>;
  /** fetch aggregated fields from the table: "expo_push_token" */
  expo_push_token_aggregate: Expo_Push_Token_Aggregate;
  /** fetch data from the table: "expo_push_token" using primary key columns */
  expo_push_token_by_pk?: Maybe<Expo_Push_Token>;
  /** fetch data from the table: "feedback" */
  feedback: Array<Feedback>;
  /** fetch aggregated fields from the table: "feedback" */
  feedback_aggregate: Feedback_Aggregate;
  /** fetch data from the table: "feedback" using primary key columns */
  feedback_by_pk?: Maybe<Feedback>;
  /** fetch data from the table: "forgot_password_key" */
  forgot_password_key: Array<Forgot_Password_Key>;
  /** fetch aggregated fields from the table: "forgot_password_key" */
  forgot_password_key_aggregate: Forgot_Password_Key_Aggregate;
  /** fetch data from the table: "forgot_password_key" using primary key columns */
  forgot_password_key_by_pk?: Maybe<Forgot_Password_Key>;
  /** fetch data from the table: "gc_daily_checklist_item" */
  gc_daily_checklist_item: Array<Gc_Daily_Checklist_Item>;
  /** fetch aggregated fields from the table: "gc_daily_checklist_item" */
  gc_daily_checklist_item_aggregate: Gc_Daily_Checklist_Item_Aggregate;
  /** fetch data from the table: "gc_daily_checklist_item" using primary key columns */
  gc_daily_checklist_item_by_pk?: Maybe<Gc_Daily_Checklist_Item>;
  /** fetch data from the table: "gc_disabled_project_subcontractor" */
  gc_disabled_project_subcontractor: Array<Gc_Disabled_Project_Subcontractor>;
  /** fetch aggregated fields from the table: "gc_disabled_project_subcontractor" */
  gc_disabled_project_subcontractor_aggregate: Gc_Disabled_Project_Subcontractor_Aggregate;
  /** fetch data from the table: "gc_disabled_project_subcontractor" using primary key columns */
  gc_disabled_project_subcontractor_by_pk?: Maybe<Gc_Disabled_Project_Subcontractor>;
  /** fetch data from the table: "general_contractor" */
  general_contractor: Array<General_Contractor>;
  /** fetch aggregated fields from the table: "general_contractor" */
  general_contractor_aggregate: General_Contractor_Aggregate;
  /** fetch data from the table: "general_contractor" using primary key columns */
  general_contractor_by_pk?: Maybe<General_Contractor>;
  /** fetch data from the table: "general_contractor_employee" */
  general_contractor_employee: Array<General_Contractor_Employee>;
  /** fetch aggregated fields from the table: "general_contractor_employee" */
  general_contractor_employee_aggregate: General_Contractor_Employee_Aggregate;
  /** fetch data from the table: "general_contractor_employee" using primary key columns */
  general_contractor_employee_by_pk?: Maybe<General_Contractor_Employee>;
  /** execute function "get_awareness_question" which returns "awareness_question" */
  get_awareness_question: Array<Awareness_Question>;
  /** execute function "get_awareness_question" and query aggregates on result of table type "awareness_question" */
  get_awareness_question_aggregate: Awareness_Question_Aggregate;
  /** execute function "get_random_incident_example" which returns "incident_example" */
  get_random_incident_example: Array<Incident_Example>;
  /** execute function "get_random_incident_example" and query aggregates on result of table type "incident_example" */
  get_random_incident_example_aggregate: Incident_Example_Aggregate;
  /** fetch data from the table: "government_identification" */
  government_identification: Array<Government_Identification>;
  /** fetch aggregated fields from the table: "government_identification" */
  government_identification_aggregate: Government_Identification_Aggregate;
  /** fetch data from the table: "government_identification" using primary key columns */
  government_identification_by_pk?: Maybe<Government_Identification>;
  /** fetch data from the table: "hot_work_permit" */
  hot_work_permit: Array<Hot_Work_Permit>;
  /** fetch aggregated fields from the table: "hot_work_permit" */
  hot_work_permit_aggregate: Hot_Work_Permit_Aggregate;
  /** fetch data from the table: "hot_work_permit" using primary key columns */
  hot_work_permit_by_pk?: Maybe<Hot_Work_Permit>;
  /** fetch data from the table: "hourly_forecast" */
  hourly_forecast: Array<Hourly_Forecast>;
  /** fetch aggregated fields from the table: "hourly_forecast" */
  hourly_forecast_aggregate: Hourly_Forecast_Aggregate;
  /** fetch data from the table: "hourly_forecast" using primary key columns */
  hourly_forecast_by_pk?: Maybe<Hourly_Forecast>;
  /** fetch data from the table: "image" */
  image: Array<Image>;
  /** fetch aggregated fields from the table: "image" */
  image_aggregate: Image_Aggregate;
  /** fetch data from the table: "image" using primary key columns */
  image_by_pk?: Maybe<Image>;
  /** fetch data from the table: "image_type" */
  image_type: Array<Image_Type>;
  /** fetch aggregated fields from the table: "image_type" */
  image_type_aggregate: Image_Type_Aggregate;
  /** fetch data from the table: "image_type" using primary key columns */
  image_type_by_pk?: Maybe<Image_Type>;
  /** fetch data from the table: "incident_example" */
  incident_example: Array<Incident_Example>;
  /** fetch aggregated fields from the table: "incident_example" */
  incident_example_aggregate: Incident_Example_Aggregate;
  /** fetch data from the table: "incident_example" using primary key columns */
  incident_example_by_pk?: Maybe<Incident_Example>;
  /** fetch data from the table: "invite" */
  invite: Array<Invite>;
  /** fetch aggregated fields from the table: "invite" */
  invite_aggregate: Invite_Aggregate;
  /** fetch data from the table: "invite" using primary key columns */
  invite_by_pk?: Maybe<Invite>;
  /** fetch data from the table: "lang_code" */
  lang_code: Array<Lang_Code>;
  /** fetch aggregated fields from the table: "lang_code" */
  lang_code_aggregate: Lang_Code_Aggregate;
  /** fetch data from the table: "lang_code" using primary key columns */
  lang_code_by_pk?: Maybe<Lang_Code>;
  /** fetch data from the table: "notification_badge_count" */
  notification_badge_count: Array<Notification_Badge_Count>;
  /** fetch aggregated fields from the table: "notification_badge_count" */
  notification_badge_count_aggregate: Notification_Badge_Count_Aggregate;
  /** fetch data from the table: "notification_badge_count" using primary key columns */
  notification_badge_count_by_pk?: Maybe<Notification_Badge_Count>;
  /** fetch data from the table: "orientation" */
  orientation: Array<Orientation>;
  /** fetch aggregated fields from the table: "orientation" */
  orientation_aggregate: Orientation_Aggregate;
  /** fetch data from the table: "orientation" using primary key columns */
  orientation_by_pk?: Maybe<Orientation>;
  /** fetch data from the table: "orientation_slide" */
  orientation_slide: Array<Orientation_Slide>;
  /** fetch aggregated fields from the table: "orientation_slide" */
  orientation_slide_aggregate: Orientation_Slide_Aggregate;
  /** fetch data from the table: "orientation_slide" using primary key columns */
  orientation_slide_by_pk?: Maybe<Orientation_Slide>;
  /** fetch data from the table: "pdf" */
  pdf: Array<Pdf>;
  /** fetch aggregated fields from the table: "pdf" */
  pdf_aggregate: Pdf_Aggregate;
  /** fetch data from the table: "pdf" using primary key columns */
  pdf_by_pk?: Maybe<Pdf>;
  /** fetch data from the table: "permit" */
  permit: Array<Permit>;
  /** fetch aggregated fields from the table: "permit" */
  permit_aggregate: Permit_Aggregate;
  /** fetch data from the table: "permit" using primary key columns */
  permit_by_pk?: Maybe<Permit>;
  /** fetch data from the table: "permit_checklist_item" */
  permit_checklist_item: Array<Permit_Checklist_Item>;
  /** fetch aggregated fields from the table: "permit_checklist_item" */
  permit_checklist_item_aggregate: Permit_Checklist_Item_Aggregate;
  /** fetch data from the table: "permit_checklist_item" using primary key columns */
  permit_checklist_item_by_pk?: Maybe<Permit_Checklist_Item>;
  /** fetch data from the table: "permit_history" */
  permit_history: Array<Permit_History>;
  /** fetch aggregated fields from the table: "permit_history" */
  permit_history_aggregate: Permit_History_Aggregate;
  /** fetch data from the table: "permit_history" using primary key columns */
  permit_history_by_pk?: Maybe<Permit_History>;
  /** fetch data from the table: "permit_project_worker" */
  permit_project_worker: Array<Permit_Project_Worker>;
  /** fetch aggregated fields from the table: "permit_project_worker" */
  permit_project_worker_aggregate: Permit_Project_Worker_Aggregate;
  /** fetch data from the table: "permit_project_worker" using primary key columns */
  permit_project_worker_by_pk?: Maybe<Permit_Project_Worker>;
  /** fetch data from the table: "permit_sign_in_image" */
  permit_sign_in_image: Array<Permit_Sign_In_Image>;
  /** fetch aggregated fields from the table: "permit_sign_in_image" */
  permit_sign_in_image_aggregate: Permit_Sign_In_Image_Aggregate;
  /** fetch data from the table: "permit_sign_in_image" using primary key columns */
  permit_sign_in_image_by_pk?: Maybe<Permit_Sign_In_Image>;
  /** fetch data from the table: "permit_type" */
  permit_type: Array<Permit_Type>;
  /** fetch aggregated fields from the table: "permit_type" */
  permit_type_aggregate: Permit_Type_Aggregate;
  /** fetch data from the table: "permit_type" using primary key columns */
  permit_type_by_pk?: Maybe<Permit_Type>;
  /** fetch data from the table: "ppe_category" */
  ppe_category: Array<Ppe_Category>;
  /** fetch aggregated fields from the table: "ppe_category" */
  ppe_category_aggregate: Ppe_Category_Aggregate;
  /** fetch data from the table: "ppe_category" using primary key columns */
  ppe_category_by_pk?: Maybe<Ppe_Category>;
  /** fetch data from the table: "ppe_type" */
  ppe_type: Array<Ppe_Type>;
  /** fetch aggregated fields from the table: "ppe_type" */
  ppe_type_aggregate: Ppe_Type_Aggregate;
  /** fetch data from the table: "ppe_type" using primary key columns */
  ppe_type_by_pk?: Maybe<Ppe_Type>;
  /** fetch data from the table: "procore_auth_data" */
  procore_auth_data: Array<Procore_Auth_Data>;
  /** fetch aggregated fields from the table: "procore_auth_data" */
  procore_auth_data_aggregate: Procore_Auth_Data_Aggregate;
  /** fetch data from the table: "procore_auth_data" using primary key columns */
  procore_auth_data_by_pk?: Maybe<Procore_Auth_Data>;
  /** fetch data from the table: "procore_project_data" */
  procore_project_data: Array<Procore_Project_Data>;
  /** fetch aggregated fields from the table: "procore_project_data" */
  procore_project_data_aggregate: Procore_Project_Data_Aggregate;
  /** fetch data from the table: "procore_project_data" using primary key columns */
  procore_project_data_by_pk?: Maybe<Procore_Project_Data>;
  /** fetch data from the table: "procore_service_account" */
  procore_service_account: Array<Procore_Service_Account>;
  /** fetch aggregated fields from the table: "procore_service_account" */
  procore_service_account_aggregate: Procore_Service_Account_Aggregate;
  /** fetch data from the table: "procore_service_account" using primary key columns */
  procore_service_account_by_pk?: Maybe<Procore_Service_Account>;
  /** fetch data from the table: "procore_subcontractor" */
  procore_subcontractor: Array<Procore_Subcontractor>;
  /** fetch aggregated fields from the table: "procore_subcontractor" */
  procore_subcontractor_aggregate: Procore_Subcontractor_Aggregate;
  /** fetch data from the table: "procore_subcontractor" using primary key columns */
  procore_subcontractor_by_pk?: Maybe<Procore_Subcontractor>;
  /** fetch data from the table: "project" */
  project: Array<Project>;
  /** fetch aggregated fields from the table: "project" */
  project_aggregate: Project_Aggregate;
  /** fetch data from the table: "project" using primary key columns */
  project_by_pk?: Maybe<Project>;
  /** fetch data from the table: "project_completion_automated_notification" */
  project_completion_automated_notification: Array<Project_Completion_Automated_Notification>;
  /** fetch aggregated fields from the table: "project_completion_automated_notification" */
  project_completion_automated_notification_aggregate: Project_Completion_Automated_Notification_Aggregate;
  /** fetch data from the table: "project_completion_automated_notification" using primary key columns */
  project_completion_automated_notification_by_pk?: Maybe<Project_Completion_Automated_Notification>;
  /** fetch data from the table: "project_covid_certify_worker" */
  project_covid_certify_worker: Array<Project_Covid_Certify_Worker>;
  /** fetch aggregated fields from the table: "project_covid_certify_worker" */
  project_covid_certify_worker_aggregate: Project_Covid_Certify_Worker_Aggregate;
  /** fetch data from the table: "project_covid_certify_worker_answer" */
  project_covid_certify_worker_answer: Array<Project_Covid_Certify_Worker_Answer>;
  /** fetch aggregated fields from the table: "project_covid_certify_worker_answer" */
  project_covid_certify_worker_answer_aggregate: Project_Covid_Certify_Worker_Answer_Aggregate;
  /** fetch data from the table: "project_covid_certify_worker_answer" using primary key columns */
  project_covid_certify_worker_answer_by_pk?: Maybe<Project_Covid_Certify_Worker_Answer>;
  /** fetch data from the table: "project_covid_certify_worker" using primary key columns */
  project_covid_certify_worker_by_pk?: Maybe<Project_Covid_Certify_Worker>;
  /** fetch data from the table: "project_covid_config" */
  project_covid_config: Array<Project_Covid_Config>;
  /** fetch aggregated fields from the table: "project_covid_config" */
  project_covid_config_aggregate: Project_Covid_Config_Aggregate;
  /** fetch data from the table: "project_covid_config" using primary key columns */
  project_covid_config_by_pk?: Maybe<Project_Covid_Config>;
  /** fetch data from the table: "project_covid_crew_certify" */
  project_covid_crew_certify: Array<Project_Covid_Crew_Certify>;
  /** fetch aggregated fields from the table: "project_covid_crew_certify" */
  project_covid_crew_certify_aggregate: Project_Covid_Crew_Certify_Aggregate;
  /** fetch data from the table: "project_covid_crew_certify" using primary key columns */
  project_covid_crew_certify_by_pk?: Maybe<Project_Covid_Crew_Certify>;
  /** fetch data from the table: "project_covid_guest_certification" */
  project_covid_guest_certification: Array<Project_Covid_Guest_Certification>;
  /** fetch aggregated fields from the table: "project_covid_guest_certification" */
  project_covid_guest_certification_aggregate: Project_Covid_Guest_Certification_Aggregate;
  /** fetch data from the table: "project_covid_guest_certification_answer" */
  project_covid_guest_certification_answer: Array<Project_Covid_Guest_Certification_Answer>;
  /** fetch aggregated fields from the table: "project_covid_guest_certification_answer" */
  project_covid_guest_certification_answer_aggregate: Project_Covid_Guest_Certification_Answer_Aggregate;
  /** fetch data from the table: "project_covid_guest_certification_answer" using primary key columns */
  project_covid_guest_certification_answer_by_pk?: Maybe<Project_Covid_Guest_Certification_Answer>;
  /** fetch data from the table: "project_covid_guest_certification" using primary key columns */
  project_covid_guest_certification_by_pk?: Maybe<Project_Covid_Guest_Certification>;
  /** fetch data from the table: "project_covid_notify_employee" */
  project_covid_notify_employee: Array<Project_Covid_Notify_Employee>;
  /** fetch aggregated fields from the table: "project_covid_notify_employee" */
  project_covid_notify_employee_aggregate: Project_Covid_Notify_Employee_Aggregate;
  /** fetch data from the table: "project_covid_notify_employee" using primary key columns */
  project_covid_notify_employee_by_pk?: Maybe<Project_Covid_Notify_Employee>;
  /** fetch data from the table: "project_covid_tested_positive_answer" */
  project_covid_tested_positive_answer: Array<Project_Covid_Tested_Positive_Answer>;
  /** fetch aggregated fields from the table: "project_covid_tested_positive_answer" */
  project_covid_tested_positive_answer_aggregate: Project_Covid_Tested_Positive_Answer_Aggregate;
  /** fetch data from the table: "project_covid_tested_positive_answer" using primary key columns */
  project_covid_tested_positive_answer_by_pk?: Maybe<Project_Covid_Tested_Positive_Answer>;
  /** fetch data from the table: "project_covid_tested_positive_question" */
  project_covid_tested_positive_question: Array<Project_Covid_Tested_Positive_Question>;
  /** fetch aggregated fields from the table: "project_covid_tested_positive_question" */
  project_covid_tested_positive_question_aggregate: Project_Covid_Tested_Positive_Question_Aggregate;
  /** fetch data from the table: "project_covid_tested_positive_question" using primary key columns */
  project_covid_tested_positive_question_by_pk?: Maybe<Project_Covid_Tested_Positive_Question>;
  /** fetch data from the table: "project_covid_tested_positive_worker" */
  project_covid_tested_positive_worker: Array<Project_Covid_Tested_Positive_Worker>;
  /** fetch aggregated fields from the table: "project_covid_tested_positive_worker" */
  project_covid_tested_positive_worker_aggregate: Project_Covid_Tested_Positive_Worker_Aggregate;
  /** fetch data from the table: "project_covid_tested_positive_worker" using primary key columns */
  project_covid_tested_positive_worker_by_pk?: Maybe<Project_Covid_Tested_Positive_Worker>;
  /** fetch data from the table: "project_covid_yes_no_question" */
  project_covid_yes_no_question: Array<Project_Covid_Yes_No_Question>;
  /** fetch aggregated fields from the table: "project_covid_yes_no_question" */
  project_covid_yes_no_question_aggregate: Project_Covid_Yes_No_Question_Aggregate;
  /** fetch data from the table: "project_covid_yes_no_question" using primary key columns */
  project_covid_yes_no_question_by_pk?: Maybe<Project_Covid_Yes_No_Question>;
  /** fetch data from the table: "project_crew" */
  project_crew: Array<Project_Crew>;
  /** fetch aggregated fields from the table: "project_crew" */
  project_crew_aggregate: Project_Crew_Aggregate;
  /** fetch data from the table: "project_crew" using primary key columns */
  project_crew_by_pk?: Maybe<Project_Crew>;
  /** fetch data from the table: "project_employee" */
  project_employee: Array<Project_Employee>;
  /** fetch aggregated fields from the table: "project_employee" */
  project_employee_aggregate: Project_Employee_Aggregate;
  /** fetch data from the table: "project_employee" using primary key columns */
  project_employee_by_pk?: Maybe<Project_Employee>;
  /** fetch data from the table: "project_hazard" */
  project_hazard: Array<Project_Hazard>;
  /** fetch aggregated fields from the table: "project_hazard" */
  project_hazard_aggregate: Project_Hazard_Aggregate;
  /** fetch data from the table: "project_hazard" using primary key columns */
  project_hazard_by_pk?: Maybe<Project_Hazard>;
  /** fetch data from the table: "project_hazard_subcontractor" */
  project_hazard_subcontractor: Array<Project_Hazard_Subcontractor>;
  /** fetch aggregated fields from the table: "project_hazard_subcontractor" */
  project_hazard_subcontractor_aggregate: Project_Hazard_Subcontractor_Aggregate;
  /** fetch data from the table: "project_hazard_subcontractor" using primary key columns */
  project_hazard_subcontractor_by_pk?: Maybe<Project_Hazard_Subcontractor>;
  /** fetch data from the table: "project_post" */
  project_post: Array<Project_Post>;
  /** fetch data from the table: "project_post_GCs" */
  project_post_GCs: Array<Project_Post_GCs>;
  /** fetch aggregated fields from the table: "project_post_GCs" */
  project_post_GCs_aggregate: Project_Post_GCs_Aggregate;
  /** fetch data from the table: "project_post_GCs" using primary key columns */
  project_post_GCs_by_pk?: Maybe<Project_Post_GCs>;
  /** fetch aggregated fields from the table: "project_post" */
  project_post_aggregate: Project_Post_Aggregate;
  /** fetch data from the table: "project_post" using primary key columns */
  project_post_by_pk?: Maybe<Project_Post>;
  /** fetch data from the table: "project_post_workers" */
  project_post_workers: Array<Project_Post_Workers>;
  /** fetch aggregated fields from the table: "project_post_workers" */
  project_post_workers_aggregate: Project_Post_Workers_Aggregate;
  /** fetch data from the table: "project_post_workers" using primary key columns */
  project_post_workers_by_pk?: Maybe<Project_Post_Workers>;
  /** fetch data from the table: "project_report_settings" */
  project_report_settings: Array<Project_Report_Settings>;
  /** fetch aggregated fields from the table: "project_report_settings" */
  project_report_settings_aggregate: Project_Report_Settings_Aggregate;
  /** fetch data from the table: "project_report_settings" using primary key columns */
  project_report_settings_by_pk?: Maybe<Project_Report_Settings>;
  /** fetch data from the table: "project_site_notification" */
  project_site_notification: Array<Project_Site_Notification>;
  /** fetch aggregated fields from the table: "project_site_notification" */
  project_site_notification_aggregate: Project_Site_Notification_Aggregate;
  /** fetch data from the table: "project_site_notification" using primary key columns */
  project_site_notification_by_pk?: Maybe<Project_Site_Notification>;
  /** fetch data from the table: "project_subcontractor" */
  project_subcontractor: Array<Project_Subcontractor>;
  /** fetch aggregated fields from the table: "project_subcontractor" */
  project_subcontractor_aggregate: Project_Subcontractor_Aggregate;
  /** fetch data from the table: "project_subcontractor" using primary key columns */
  project_subcontractor_by_pk?: Maybe<Project_Subcontractor>;
  /** fetch data from the table: "project_subcontractor_onsite_update" */
  project_subcontractor_onsite_update: Array<Project_Subcontractor_Onsite_Update>;
  /** fetch aggregated fields from the table: "project_subcontractor_onsite_update" */
  project_subcontractor_onsite_update_aggregate: Project_Subcontractor_Onsite_Update_Aggregate;
  /** fetch data from the table: "project_subcontractor_onsite_update" using primary key columns */
  project_subcontractor_onsite_update_by_pk?: Maybe<Project_Subcontractor_Onsite_Update>;
  /** fetch data from the table: "project_subcontractor_report_settings" */
  project_subcontractor_report_settings: Array<Project_Subcontractor_Report_Settings>;
  /** fetch aggregated fields from the table: "project_subcontractor_report_settings" */
  project_subcontractor_report_settings_aggregate: Project_Subcontractor_Report_Settings_Aggregate;
  /** fetch data from the table: "project_subcontractor_report_settings" using primary key columns */
  project_subcontractor_report_settings_by_pk?: Maybe<Project_Subcontractor_Report_Settings>;
  /** fetch data from the table: "project_user" */
  project_user: Array<Project_User>;
  /** fetch aggregated fields from the table: "project_user" */
  project_user_aggregate: Project_User_Aggregate;
  /** fetch data from the table: "project_user" using primary key columns */
  project_user_by_pk?: Maybe<Project_User>;
  /** fetch data from the table: "project_worker" */
  project_worker: Array<Project_Worker>;
  /** fetch aggregated fields from the table: "project_worker" */
  project_worker_aggregate: Project_Worker_Aggregate;
  /** fetch data from the table: "project_worker" using primary key columns */
  project_worker_by_pk?: Maybe<Project_Worker>;
  /** fetch data from the table: "project_worker_competency" */
  project_worker_competency: Array<Project_Worker_Competency>;
  /** fetch aggregated fields from the table: "project_worker_competency" */
  project_worker_competency_aggregate: Project_Worker_Competency_Aggregate;
  /** fetch data from the table: "project_worker_competency" using primary key columns */
  project_worker_competency_by_pk?: Maybe<Project_Worker_Competency>;
  /** fetch data from the table: "project_worker_onsite_ping" */
  project_worker_onsite_ping: Array<Project_Worker_Onsite_Ping>;
  /** fetch aggregated fields from the table: "project_worker_onsite_ping" */
  project_worker_onsite_ping_aggregate: Project_Worker_Onsite_Ping_Aggregate;
  /** fetch data from the table: "project_worker_onsite_ping" using primary key columns */
  project_worker_onsite_ping_by_pk?: Maybe<Project_Worker_Onsite_Ping>;
  /** fetch data from the table: "projects_to_posts" */
  projects_to_posts: Array<Projects_To_Posts>;
  /** fetch aggregated fields from the table: "projects_to_posts" */
  projects_to_posts_aggregate: Projects_To_Posts_Aggregate;
  /** fetch data from the table: "projects_to_posts" using primary key columns */
  projects_to_posts_by_pk?: Maybe<Projects_To_Posts>;
  /** fetch data from the table: "report" */
  report: Array<Report>;
  /** fetch aggregated fields from the table: "report" */
  report_aggregate: Report_Aggregate;
  /** fetch data from the table: "report_awareness_question" */
  report_awareness_question: Array<Report_Awareness_Question>;
  /** fetch aggregated fields from the table: "report_awareness_question" */
  report_awareness_question_aggregate: Report_Awareness_Question_Aggregate;
  /** fetch data from the table: "report_awareness_question" using primary key columns */
  report_awareness_question_by_pk?: Maybe<Report_Awareness_Question>;
  /** fetch data from the table: "report" using primary key columns */
  report_by_pk?: Maybe<Report>;
  /** fetch data from the table: "report_fatal_four" */
  report_fatal_four: Array<Report_Fatal_Four>;
  /** fetch aggregated fields from the table: "report_fatal_four" */
  report_fatal_four_aggregate: Report_Fatal_Four_Aggregate;
  /** fetch data from the table: "report_fatal_four" using primary key columns */
  report_fatal_four_by_pk?: Maybe<Report_Fatal_Four>;
  /** fetch data from the table: "report_injury" */
  report_injury: Array<Report_Injury>;
  /** fetch aggregated fields from the table: "report_injury" */
  report_injury_aggregate: Report_Injury_Aggregate;
  /** fetch data from the table: "report_injury" using primary key columns */
  report_injury_by_pk?: Maybe<Report_Injury>;
  /** fetch data from the table: "report_project_hazard" */
  report_project_hazard: Array<Report_Project_Hazard>;
  /** fetch aggregated fields from the table: "report_project_hazard" */
  report_project_hazard_aggregate: Report_Project_Hazard_Aggregate;
  /** fetch data from the table: "report_project_hazard" using primary key columns */
  report_project_hazard_by_pk?: Maybe<Report_Project_Hazard>;
  /** fetch data from the table: "report_project_post" */
  report_project_post: Array<Report_Project_Post>;
  /** fetch aggregated fields from the table: "report_project_post" */
  report_project_post_aggregate: Report_Project_Post_Aggregate;
  /** fetch data from the table: "report_project_post" using primary key columns */
  report_project_post_by_pk?: Maybe<Report_Project_Post>;
  /** fetch data from the table: "report_project_worker" */
  report_project_worker: Array<Report_Project_Worker>;
  /** fetch aggregated fields from the table: "report_project_worker" */
  report_project_worker_aggregate: Report_Project_Worker_Aggregate;
  /** fetch data from the table: "report_project_worker" using primary key columns */
  report_project_worker_by_pk?: Maybe<Report_Project_Worker>;
  /** fetch data from the table: "s_daily_hours_to_date" */
  s_daily_hours_to_date: Array<S_Daily_Hours_To_Date>;
  /** fetch aggregated fields from the table: "s_daily_hours_to_date" */
  s_daily_hours_to_date_aggregate: S_Daily_Hours_To_Date_Aggregate;
  /** fetch data from the table: "s_daily_hours_to_date" using primary key columns */
  s_daily_hours_to_date_by_pk?: Maybe<S_Daily_Hours_To_Date>;
  /** fetch data from the table: "s_sub_daily_log_submittal" */
  s_sub_daily_log_submittal: Array<S_Sub_Daily_Log_Submittal>;
  /** fetch aggregated fields from the table: "s_sub_daily_log_submittal" */
  s_sub_daily_log_submittal_aggregate: S_Sub_Daily_Log_Submittal_Aggregate;
  /** fetch data from the table: "s_sub_daily_log_submittal" using primary key columns */
  s_sub_daily_log_submittal_by_pk?: Maybe<S_Sub_Daily_Log_Submittal>;
  /** fetch data from the table: "select_option" */
  select_option: Array<Select_Option>;
  /** fetch aggregated fields from the table: "select_option" */
  select_option_aggregate: Select_Option_Aggregate;
  /** fetch data from the table: "select_option" using primary key columns */
  select_option_by_pk?: Maybe<Select_Option>;
  /** fetch data from the table: "select_option_type" */
  select_option_type: Array<Select_Option_Type>;
  /** fetch aggregated fields from the table: "select_option_type" */
  select_option_type_aggregate: Select_Option_Type_Aggregate;
  /** fetch data from the table: "select_option_type" using primary key columns */
  select_option_type_by_pk?: Maybe<Select_Option_Type>;
  /** fetch data from the table: "short_forecast_type" */
  short_forecast_type: Array<Short_Forecast_Type>;
  /** fetch aggregated fields from the table: "short_forecast_type" */
  short_forecast_type_aggregate: Short_Forecast_Type_Aggregate;
  /** fetch data from the table: "short_forecast_type" using primary key columns */
  short_forecast_type_by_pk?: Maybe<Short_Forecast_Type>;
  /** fetch data from the table: "sign_in_type" */
  sign_in_type: Array<Sign_In_Type>;
  /** fetch aggregated fields from the table: "sign_in_type" */
  sign_in_type_aggregate: Sign_In_Type_Aggregate;
  /** fetch data from the table: "sign_in_type" using primary key columns */
  sign_in_type_by_pk?: Maybe<Sign_In_Type>;
  /** fetch data from the table: "state" */
  state: Array<State>;
  /** fetch aggregated fields from the table: "state" */
  state_aggregate: State_Aggregate;
  /** fetch data from the table: "state" using primary key columns */
  state_by_pk?: Maybe<State>;
  /** fetch data from the table: "subcontractor" */
  subcontractor: Array<Subcontractor>;
  /** fetch aggregated fields from the table: "subcontractor" */
  subcontractor_aggregate: Subcontractor_Aggregate;
  /** fetch data from the table: "subcontractor" using primary key columns */
  subcontractor_by_pk?: Maybe<Subcontractor>;
  /** fetch data from the table: "subcontractor_employee" */
  subcontractor_employee: Array<Subcontractor_Employee>;
  /** fetch aggregated fields from the table: "subcontractor_employee" */
  subcontractor_employee_aggregate: Subcontractor_Employee_Aggregate;
  /** fetch data from the table: "subcontractor_employee" using primary key columns */
  subcontractor_employee_by_pk?: Maybe<Subcontractor_Employee>;
  /** fetch data from the table: "subcontractor_employee_title" */
  subcontractor_employee_title: Array<Subcontractor_Employee_Title>;
  /** fetch aggregated fields from the table: "subcontractor_employee_title" */
  subcontractor_employee_title_aggregate: Subcontractor_Employee_Title_Aggregate;
  /** fetch data from the table: "subcontractor_employee_title" using primary key columns */
  subcontractor_employee_title_by_pk?: Maybe<Subcontractor_Employee_Title>;
  /** fetch data from the table: "subcontractor_onsite_status_update" */
  subcontractor_onsite_status_update: Array<Subcontractor_Onsite_Status_Update>;
  /** fetch aggregated fields from the table: "subcontractor_onsite_status_update" */
  subcontractor_onsite_status_update_aggregate: Subcontractor_Onsite_Status_Update_Aggregate;
  /** fetch data from the table: "subcontractor_onsite_status_update" using primary key columns */
  subcontractor_onsite_status_update_by_pk?: Maybe<Subcontractor_Onsite_Status_Update>;
  /** fetch data from the table: "subcontractor_trade" */
  subcontractor_trade: Array<Subcontractor_Trade>;
  /** fetch aggregated fields from the table: "subcontractor_trade" */
  subcontractor_trade_aggregate: Subcontractor_Trade_Aggregate;
  /** fetch data from the table: "subcontractor_trade" using primary key columns */
  subcontractor_trade_by_pk?: Maybe<Subcontractor_Trade>;
  /** fetch data from the table: "subcontractor_worker" */
  subcontractor_worker: Array<Subcontractor_Worker>;
  /** fetch aggregated fields from the table: "subcontractor_worker" */
  subcontractor_worker_aggregate: Subcontractor_Worker_Aggregate;
  /** fetch data from the table: "subcontractor_worker" using primary key columns */
  subcontractor_worker_by_pk?: Maybe<Subcontractor_Worker>;
  /** fetch data from the table: "submission_image" */
  submission_image: Array<Submission_Image>;
  /** fetch aggregated fields from the table: "submission_image" */
  submission_image_aggregate: Submission_Image_Aggregate;
  /** fetch data from the table: "submission_image" using primary key columns */
  submission_image_by_pk?: Maybe<Submission_Image>;
  /** fetch data from the table: "submission_image_type" */
  submission_image_type: Array<Submission_Image_Type>;
  /** fetch aggregated fields from the table: "submission_image_type" */
  submission_image_type_aggregate: Submission_Image_Type_Aggregate;
  /** fetch data from the table: "submission_image_type" using primary key columns */
  submission_image_type_by_pk?: Maybe<Submission_Image_Type>;
  /** fetch data from the table: "tag" */
  tag: Array<Tag>;
  /** fetch aggregated fields from the table: "tag" */
  tag_aggregate: Tag_Aggregate;
  /** fetch data from the table: "tag" using primary key columns */
  tag_by_pk?: Maybe<Tag>;
  /** fetch data from the table: "task" */
  task: Array<Task>;
  /** fetch aggregated fields from the table: "task" */
  task_aggregate: Task_Aggregate;
  /** fetch data from the table: "task" using primary key columns */
  task_by_pk?: Maybe<Task>;
  /** fetch data from the table: "task_note" */
  task_note: Array<Task_Note>;
  /** fetch aggregated fields from the table: "task_note" */
  task_note_aggregate: Task_Note_Aggregate;
  /** fetch data from the table: "task_note" using primary key columns */
  task_note_by_pk?: Maybe<Task_Note>;
  /** fetch data from the table: "task_permit_type" */
  task_permit_type: Array<Task_Permit_Type>;
  /** fetch aggregated fields from the table: "task_permit_type" */
  task_permit_type_aggregate: Task_Permit_Type_Aggregate;
  /** fetch data from the table: "task_permit_type" using primary key columns */
  task_permit_type_by_pk?: Maybe<Task_Permit_Type>;
  /** fetch data from the table: "task_ppe_type" */
  task_ppe_type: Array<Task_Ppe_Type>;
  /** fetch aggregated fields from the table: "task_ppe_type" */
  task_ppe_type_aggregate: Task_Ppe_Type_Aggregate;
  /** fetch data from the table: "task_ppe_type" using primary key columns */
  task_ppe_type_by_pk?: Maybe<Task_Ppe_Type>;
  /** fetch data from the table: "task_step" */
  task_step: Array<Task_Step>;
  /** fetch aggregated fields from the table: "task_step" */
  task_step_aggregate: Task_Step_Aggregate;
  /** fetch data from the table: "task_step" using primary key columns */
  task_step_by_pk?: Maybe<Task_Step>;
  /** fetch data from the table: "task_step_hazard" */
  task_step_hazard: Array<Task_Step_Hazard>;
  /** fetch aggregated fields from the table: "task_step_hazard" */
  task_step_hazard_aggregate: Task_Step_Hazard_Aggregate;
  /** fetch data from the table: "task_step_hazard" using primary key columns */
  task_step_hazard_by_pk?: Maybe<Task_Step_Hazard>;
  /** fetch data from the table: "text_translation" */
  text_translation: Array<Text_Translation>;
  /** fetch aggregated fields from the table: "text_translation" */
  text_translation_aggregate: Text_Translation_Aggregate;
  /** fetch data from the table: "text_translation" using primary key columns */
  text_translation_by_pk?: Maybe<Text_Translation>;
  /** fetch data from the table: "todo" */
  todo: Array<Todo>;
  /** fetch aggregated fields from the table: "todo" */
  todo_aggregate: Todo_Aggregate;
  /** fetch data from the table: "todo_assignee" */
  todo_assignee: Array<Todo_Assignee>;
  /** fetch aggregated fields from the table: "todo_assignee" */
  todo_assignee_aggregate: Todo_Assignee_Aggregate;
  /** fetch data from the table: "todo_assignee" using primary key columns */
  todo_assignee_by_pk?: Maybe<Todo_Assignee>;
  /** fetch data from the table: "todo" using primary key columns */
  todo_by_pk?: Maybe<Todo>;
  /** fetch data from the table: "todo_notifyee" */
  todo_notifyee: Array<Todo_Notifyee>;
  /** fetch aggregated fields from the table: "todo_notifyee" */
  todo_notifyee_aggregate: Todo_Notifyee_Aggregate;
  /** fetch data from the table: "todo_notifyee" using primary key columns */
  todo_notifyee_by_pk?: Maybe<Todo_Notifyee>;
  /** fetch data from the table: "toolbox_talk" */
  toolbox_talk: Array<Toolbox_Talk>;
  /** fetch aggregated fields from the table: "toolbox_talk" */
  toolbox_talk_aggregate: Toolbox_Talk_Aggregate;
  /** fetch data from the table: "toolbox_talk" using primary key columns */
  toolbox_talk_by_pk?: Maybe<Toolbox_Talk>;
  /** fetch data from the table: "toolbox_talk_pdf" */
  toolbox_talk_pdf: Array<Toolbox_Talk_Pdf>;
  /** fetch aggregated fields from the table: "toolbox_talk_pdf" */
  toolbox_talk_pdf_aggregate: Toolbox_Talk_Pdf_Aggregate;
  /** fetch data from the table: "toolbox_talk_pdf" using primary key columns */
  toolbox_talk_pdf_by_pk?: Maybe<Toolbox_Talk_Pdf>;
  /** fetch data from the table: "toolbox_talk_project_worker" */
  toolbox_talk_project_worker: Array<Toolbox_Talk_Project_Worker>;
  /** fetch aggregated fields from the table: "toolbox_talk_project_worker" */
  toolbox_talk_project_worker_aggregate: Toolbox_Talk_Project_Worker_Aggregate;
  /** fetch data from the table: "toolbox_talk_project_worker" using primary key columns */
  toolbox_talk_project_worker_by_pk?: Maybe<Toolbox_Talk_Project_Worker>;
  /** fetch data from the table: "user" */
  user: Array<User>;
  /** fetch aggregated fields from the table: "user" */
  user_aggregate: User_Aggregate;
  /** fetch data from the table: "user" using primary key columns */
  user_by_pk?: Maybe<User>;
  /** fetch data from the table: "user_notification" */
  user_notification: Array<User_Notification>;
  /** fetch aggregated fields from the table: "user_notification" */
  user_notification_aggregate: User_Notification_Aggregate;
  /** fetch data from the table: "user_notification" using primary key columns */
  user_notification_by_pk?: Maybe<User_Notification>;
  /** fetch data from the table: "user_notification_event_type" */
  user_notification_event_type: Array<User_Notification_Event_Type>;
  /** fetch aggregated fields from the table: "user_notification_event_type" */
  user_notification_event_type_aggregate: User_Notification_Event_Type_Aggregate;
  /** fetch data from the table: "user_notification_event_type" using primary key columns */
  user_notification_event_type_by_pk?: Maybe<User_Notification_Event_Type>;
  /** fetch data from the table: "user_project_filter_calendar" */
  user_project_filter_calendar: Array<User_Project_Filter_Calendar>;
  /** fetch aggregated fields from the table: "user_project_filter_calendar" */
  user_project_filter_calendar_aggregate: User_Project_Filter_Calendar_Aggregate;
  /** fetch data from the table: "user_project_filter_calendar" using primary key columns */
  user_project_filter_calendar_by_pk?: Maybe<User_Project_Filter_Calendar>;
  /** fetch data from the table: "user_saved_email" */
  user_saved_email: Array<User_Saved_Email>;
  /** fetch aggregated fields from the table: "user_saved_email" */
  user_saved_email_aggregate: User_Saved_Email_Aggregate;
  /** fetch data from the table: "user_saved_email" using primary key columns */
  user_saved_email_by_pk?: Maybe<User_Saved_Email>;
  /** fetch data from the table: "work_above_permit" */
  work_above_permit: Array<Work_Above_Permit>;
  /** fetch aggregated fields from the table: "work_above_permit" */
  work_above_permit_aggregate: Work_Above_Permit_Aggregate;
  /** fetch data from the table: "work_above_permit" using primary key columns */
  work_above_permit_by_pk?: Maybe<Work_Above_Permit>;
  /** fetch data from the table: "worker" */
  worker: Array<Worker>;
  /** fetch aggregated fields from the table: "worker" */
  worker_aggregate: Worker_Aggregate;
  /** fetch data from the table: "worker_automatic_email" */
  worker_automatic_email: Array<Worker_Automatic_Email>;
  /** fetch aggregated fields from the table: "worker_automatic_email" */
  worker_automatic_email_aggregate: Worker_Automatic_Email_Aggregate;
  /** fetch data from the table: "worker_automatic_email" using primary key columns */
  worker_automatic_email_by_pk?: Maybe<Worker_Automatic_Email>;
  /** fetch data from the table: "worker_automatic_email_event_type" */
  worker_automatic_email_event_type: Array<Worker_Automatic_Email_Event_Type>;
  /** fetch aggregated fields from the table: "worker_automatic_email_event_type" */
  worker_automatic_email_event_type_aggregate: Worker_Automatic_Email_Event_Type_Aggregate;
  /** fetch data from the table: "worker_automatic_email_event_type" using primary key columns */
  worker_automatic_email_event_type_by_pk?: Maybe<Worker_Automatic_Email_Event_Type>;
  /** fetch data from the table: "worker" using primary key columns */
  worker_by_pk?: Maybe<Worker>;
  /** fetch data from the table: "worker_certification" */
  worker_certification: Array<Worker_Certification>;
  /** fetch aggregated fields from the table: "worker_certification" */
  worker_certification_aggregate: Worker_Certification_Aggregate;
  /** fetch data from the table: "worker_certification" using primary key columns */
  worker_certification_by_pk?: Maybe<Worker_Certification>;
  /** fetch data from the table: "worker_drug_test" */
  worker_drug_test: Array<Worker_Drug_Test>;
  /** fetch aggregated fields from the table: "worker_drug_test" */
  worker_drug_test_aggregate: Worker_Drug_Test_Aggregate;
  /** fetch data from the table: "worker_drug_test" using primary key columns */
  worker_drug_test_by_pk?: Maybe<Worker_Drug_Test>;
  /** fetch data from the table: "worker_enabled_automatic_email_event" */
  worker_enabled_automatic_email_event: Array<Worker_Enabled_Automatic_Email_Event>;
  /** fetch aggregated fields from the table: "worker_enabled_automatic_email_event" */
  worker_enabled_automatic_email_event_aggregate: Worker_Enabled_Automatic_Email_Event_Aggregate;
  /** fetch data from the table: "worker_enabled_automatic_email_event" using primary key columns */
  worker_enabled_automatic_email_event_by_pk?: Maybe<Worker_Enabled_Automatic_Email_Event>;
  /** execute function "worker_manhour_stats" which returns "worker_manhour_stats_table" */
  worker_manhour_stats: Array<Worker_Manhour_Stats_Table>;
  /** execute function "worker_manhour_stats" and query aggregates on result of table type "worker_manhour_stats_table" */
  worker_manhour_stats_aggregate: Worker_Manhour_Stats_Table_Aggregate;
  /** execute function "worker_manhour_stats_by_range" which returns "worker_manhour_stats_by_range_table" */
  worker_manhour_stats_by_range: Array<Worker_Manhour_Stats_By_Range_Table>;
  /**
   * execute function "worker_manhour_stats_by_range" and query aggregates on
   * result of table type "worker_manhour_stats_by_range_table"
   */
  worker_manhour_stats_by_range_aggregate: Worker_Manhour_Stats_By_Range_Table_Aggregate;
  /** fetch data from the table: "worker_manhour_stats_by_range_table" */
  worker_manhour_stats_by_range_table: Array<Worker_Manhour_Stats_By_Range_Table>;
  /** fetch aggregated fields from the table: "worker_manhour_stats_by_range_table" */
  worker_manhour_stats_by_range_table_aggregate: Worker_Manhour_Stats_By_Range_Table_Aggregate;
  /** fetch data from the table: "worker_manhour_stats_by_range_table" using primary key columns */
  worker_manhour_stats_by_range_table_by_pk?: Maybe<Worker_Manhour_Stats_By_Range_Table>;
  /** fetch data from the table: "worker_manhour_stats_table" */
  worker_manhour_stats_table: Array<Worker_Manhour_Stats_Table>;
  /** fetch aggregated fields from the table: "worker_manhour_stats_table" */
  worker_manhour_stats_table_aggregate: Worker_Manhour_Stats_Table_Aggregate;
  /** fetch data from the table: "worker_manhour_stats_table" using primary key columns */
  worker_manhour_stats_table_by_pk?: Maybe<Worker_Manhour_Stats_Table>;
  /** fetch data from the table: "worker_role" */
  worker_role: Array<Worker_Role>;
  /** fetch aggregated fields from the table: "worker_role" */
  worker_role_aggregate: Worker_Role_Aggregate;
  /** fetch data from the table: "worker_role" using primary key columns */
  worker_role_by_pk?: Maybe<Worker_Role>;
  /** execute function "worker_stats" which returns "worker_stats_table" */
  worker_stats: Array<Worker_Stats_Table>;
  /** execute function "worker_stats" and query aggregates on result of table type "worker_stats_table" */
  worker_stats_aggregate: Worker_Stats_Table_Aggregate;
  /** execute function "worker_stats_by_range" which returns "worker_stats_by_range_table" */
  worker_stats_by_range: Array<Worker_Stats_By_Range_Table>;
  /** execute function "worker_stats_by_range" and query aggregates on result of table type "worker_stats_by_range_table" */
  worker_stats_by_range_aggregate: Worker_Stats_By_Range_Table_Aggregate;
  /** fetch data from the table: "worker_stats_by_range_table" */
  worker_stats_by_range_table: Array<Worker_Stats_By_Range_Table>;
  /** fetch aggregated fields from the table: "worker_stats_by_range_table" */
  worker_stats_by_range_table_aggregate: Worker_Stats_By_Range_Table_Aggregate;
  /** fetch data from the table: "worker_stats_by_range_table" using primary key columns */
  worker_stats_by_range_table_by_pk?: Maybe<Worker_Stats_By_Range_Table>;
  /** fetch data from the table: "worker_stats_table" */
  worker_stats_table: Array<Worker_Stats_Table>;
  /** fetch aggregated fields from the table: "worker_stats_table" */
  worker_stats_table_aggregate: Worker_Stats_Table_Aggregate;
  /** fetch data from the table: "worker_stats_table" using primary key columns */
  worker_stats_table_by_pk?: Maybe<Worker_Stats_Table>;
  /** fetch data from the table: "worker_title" */
  worker_title: Array<Worker_Title>;
  /** fetch aggregated fields from the table: "worker_title" */
  worker_title_aggregate: Worker_Title_Aggregate;
  /** fetch data from the table: "worker_title" using primary key columns */
  worker_title_by_pk?: Maybe<Worker_Title>;
};


/** subscription root */
export type Subscription_RootActionNameArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootAddressArgs = {
  distinct_on?: Maybe<Array<Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Address_Order_By>>;
  where?: Maybe<Address_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootAddress_AggregateArgs = {
  distinct_on?: Maybe<Array<Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Address_Order_By>>;
  where?: Maybe<Address_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootAddress_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootAuto_EmailArgs = {
  distinct_on?: Maybe<Array<Auto_Email_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Auto_Email_Order_By>>;
  where?: Maybe<Auto_Email_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootAuto_Email_AggregateArgs = {
  distinct_on?: Maybe<Array<Auto_Email_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Auto_Email_Order_By>>;
  where?: Maybe<Auto_Email_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootAuto_Email_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootAuto_Email_Event_TypeArgs = {
  distinct_on?: Maybe<Array<Auto_Email_Event_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Auto_Email_Event_Type_Order_By>>;
  where?: Maybe<Auto_Email_Event_Type_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootAuto_Email_Event_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Auto_Email_Event_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Auto_Email_Event_Type_Order_By>>;
  where?: Maybe<Auto_Email_Event_Type_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootAuto_Email_Event_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** subscription root */
export type Subscription_RootAwareness_QuestionArgs = {
  distinct_on?: Maybe<Array<Awareness_Question_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Awareness_Question_Order_By>>;
  where?: Maybe<Awareness_Question_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootAwareness_Question_AggregateArgs = {
  distinct_on?: Maybe<Array<Awareness_Question_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Awareness_Question_Order_By>>;
  where?: Maybe<Awareness_Question_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootAwareness_Question_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootCalendarArgs = {
  distinct_on?: Maybe<Array<Calendar_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Calendar_Order_By>>;
  where?: Maybe<Calendar_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootCalendar_AggregateArgs = {
  distinct_on?: Maybe<Array<Calendar_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Calendar_Order_By>>;
  where?: Maybe<Calendar_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootCalendar_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootCertificationArgs = {
  distinct_on?: Maybe<Array<Certification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Certification_Order_By>>;
  where?: Maybe<Certification_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootCertification_AggregateArgs = {
  distinct_on?: Maybe<Array<Certification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Certification_Order_By>>;
  where?: Maybe<Certification_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootCertification_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootChatArgs = {
  distinct_on?: Maybe<Array<Chat_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Order_By>>;
  where?: Maybe<Chat_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootChat_AggregateArgs = {
  distinct_on?: Maybe<Array<Chat_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Order_By>>;
  where?: Maybe<Chat_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootChat_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootChat_Employee_PreviewArgs = {
  distinct_on?: Maybe<Array<Chat_Employee_Preview_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Employee_Preview_Order_By>>;
  where?: Maybe<Chat_Employee_Preview_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootChat_Employee_Preview_AggregateArgs = {
  distinct_on?: Maybe<Array<Chat_Employee_Preview_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Employee_Preview_Order_By>>;
  where?: Maybe<Chat_Employee_Preview_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootChat_Employee_Preview_By_PkArgs = {
  chat_member_id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootChat_ItemArgs = {
  distinct_on?: Maybe<Array<Chat_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Item_Order_By>>;
  where?: Maybe<Chat_Item_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootChat_Item_AggregateArgs = {
  distinct_on?: Maybe<Array<Chat_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Item_Order_By>>;
  where?: Maybe<Chat_Item_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootChat_Item_AttachmentArgs = {
  distinct_on?: Maybe<Array<Chat_Item_Attachment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Item_Attachment_Order_By>>;
  where?: Maybe<Chat_Item_Attachment_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootChat_Item_Attachment_AggregateArgs = {
  distinct_on?: Maybe<Array<Chat_Item_Attachment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Item_Attachment_Order_By>>;
  where?: Maybe<Chat_Item_Attachment_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootChat_Item_Attachment_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootChat_Item_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootChat_Item_TypeArgs = {
  distinct_on?: Maybe<Array<Chat_Item_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Item_Type_Order_By>>;
  where?: Maybe<Chat_Item_Type_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootChat_Item_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Chat_Item_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Item_Type_Order_By>>;
  where?: Maybe<Chat_Item_Type_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootChat_Item_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** subscription root */
export type Subscription_RootChat_MemberArgs = {
  distinct_on?: Maybe<Array<Chat_Member_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Member_Order_By>>;
  where?: Maybe<Chat_Member_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootChat_Member_AggregateArgs = {
  distinct_on?: Maybe<Array<Chat_Member_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Member_Order_By>>;
  where?: Maybe<Chat_Member_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootChat_Member_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootChecklist_ItemArgs = {
  distinct_on?: Maybe<Array<Checklist_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Checklist_Item_Order_By>>;
  where?: Maybe<Checklist_Item_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootChecklist_Item_AggregateArgs = {
  distinct_on?: Maybe<Array<Checklist_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Checklist_Item_Order_By>>;
  where?: Maybe<Checklist_Item_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootChecklist_Item_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootChecklist_Item_ConfigArgs = {
  distinct_on?: Maybe<Array<Checklist_Item_Config_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Checklist_Item_Config_Order_By>>;
  where?: Maybe<Checklist_Item_Config_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootChecklist_Item_Config_AggregateArgs = {
  distinct_on?: Maybe<Array<Checklist_Item_Config_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Checklist_Item_Config_Order_By>>;
  where?: Maybe<Checklist_Item_Config_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootChecklist_Item_Config_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootChecklist_Item_Config_TypeArgs = {
  distinct_on?: Maybe<Array<Checklist_Item_Config_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Checklist_Item_Config_Type_Order_By>>;
  where?: Maybe<Checklist_Item_Config_Type_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootChecklist_Item_Config_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Checklist_Item_Config_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Checklist_Item_Config_Type_Order_By>>;
  where?: Maybe<Checklist_Item_Config_Type_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootChecklist_Item_Config_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** subscription root */
export type Subscription_RootChecklist_Item_Notify_EmailArgs = {
  distinct_on?: Maybe<Array<Checklist_Item_Notify_Email_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Checklist_Item_Notify_Email_Order_By>>;
  where?: Maybe<Checklist_Item_Notify_Email_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootChecklist_Item_Notify_Email_AggregateArgs = {
  distinct_on?: Maybe<Array<Checklist_Item_Notify_Email_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Checklist_Item_Notify_Email_Order_By>>;
  where?: Maybe<Checklist_Item_Notify_Email_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootChecklist_Item_Notify_Email_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootChecklist_Item_TypeArgs = {
  distinct_on?: Maybe<Array<Checklist_Item_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Checklist_Item_Type_Order_By>>;
  where?: Maybe<Checklist_Item_Type_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootChecklist_Item_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Checklist_Item_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Checklist_Item_Type_Order_By>>;
  where?: Maybe<Checklist_Item_Type_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootChecklist_Item_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** subscription root */
export type Subscription_RootCleared_Project_Covid_Certify_WorkerArgs = {
  distinct_on?: Maybe<Array<Cleared_Project_Covid_Certify_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Cleared_Project_Covid_Certify_Worker_Order_By>>;
  where?: Maybe<Cleared_Project_Covid_Certify_Worker_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootCleared_Project_Covid_Certify_Worker_AggregateArgs = {
  distinct_on?: Maybe<Array<Cleared_Project_Covid_Certify_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Cleared_Project_Covid_Certify_Worker_Order_By>>;
  where?: Maybe<Cleared_Project_Covid_Certify_Worker_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootCleared_Project_Covid_Certify_Worker_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootCleared_Project_Covid_Tested_Positive_WorkerArgs = {
  distinct_on?: Maybe<Array<Cleared_Project_Covid_Tested_Positive_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Cleared_Project_Covid_Tested_Positive_Worker_Order_By>>;
  where?: Maybe<Cleared_Project_Covid_Tested_Positive_Worker_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootCleared_Project_Covid_Tested_Positive_Worker_AggregateArgs = {
  distinct_on?: Maybe<Array<Cleared_Project_Covid_Tested_Positive_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Cleared_Project_Covid_Tested_Positive_Worker_Order_By>>;
  where?: Maybe<Cleared_Project_Covid_Tested_Positive_Worker_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootCleared_Project_Covid_Tested_Positive_Worker_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootConfined_Space_PermitArgs = {
  distinct_on?: Maybe<Array<Confined_Space_Permit_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Confined_Space_Permit_Order_By>>;
  where?: Maybe<Confined_Space_Permit_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootConfined_Space_Permit_AggregateArgs = {
  distinct_on?: Maybe<Array<Confined_Space_Permit_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Confined_Space_Permit_Order_By>>;
  where?: Maybe<Confined_Space_Permit_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootConfined_Space_Permit_By_PkArgs = {
  permit_id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootConfined_Space_Permit_Monitoring_EquipmentArgs = {
  distinct_on?: Maybe<Array<Confined_Space_Permit_Monitoring_Equipment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Confined_Space_Permit_Monitoring_Equipment_Order_By>>;
  where?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootConfined_Space_Permit_Monitoring_Equipment_AggregateArgs = {
  distinct_on?: Maybe<Array<Confined_Space_Permit_Monitoring_Equipment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Confined_Space_Permit_Monitoring_Equipment_Order_By>>;
  where?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootConfined_Space_Permit_Monitoring_Equipment_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootConfined_Space_Permit_ReadingArgs = {
  distinct_on?: Maybe<Array<Confined_Space_Permit_Reading_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Confined_Space_Permit_Reading_Order_By>>;
  where?: Maybe<Confined_Space_Permit_Reading_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootConfined_Space_Permit_Reading_AggregateArgs = {
  distinct_on?: Maybe<Array<Confined_Space_Permit_Reading_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Confined_Space_Permit_Reading_Order_By>>;
  where?: Maybe<Confined_Space_Permit_Reading_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootConfined_Space_Permit_Reading_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootConfined_Space_Permit_Reading_Custom_ItemArgs = {
  distinct_on?: Maybe<Array<Confined_Space_Permit_Reading_Custom_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Confined_Space_Permit_Reading_Custom_Item_Order_By>>;
  where?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootConfined_Space_Permit_Reading_Custom_Item_AggregateArgs = {
  distinct_on?: Maybe<Array<Confined_Space_Permit_Reading_Custom_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Confined_Space_Permit_Reading_Custom_Item_Order_By>>;
  where?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootConfined_Space_Permit_Reading_Custom_Item_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootDaily_CopyArgs = {
  distinct_on?: Maybe<Array<Daily_Copy_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Copy_Order_By>>;
  where?: Maybe<Daily_Copy_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Copy_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Copy_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Copy_Order_By>>;
  where?: Maybe<Daily_Copy_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Copy_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootDaily_Copy_SectionArgs = {
  distinct_on?: Maybe<Array<Daily_Copy_Section_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Copy_Section_Order_By>>;
  where?: Maybe<Daily_Copy_Section_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Copy_Section_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Copy_Section_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Copy_Section_Order_By>>;
  where?: Maybe<Daily_Copy_Section_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Copy_Section_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootDaily_Hours_To_DateArgs = {
  args: Daily_Hours_To_Date_Args;
  distinct_on?: Maybe<Array<S_Daily_Hours_To_Date_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<S_Daily_Hours_To_Date_Order_By>>;
  where?: Maybe<S_Daily_Hours_To_Date_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Hours_To_Date_AggregateArgs = {
  args: Daily_Hours_To_Date_Args;
  distinct_on?: Maybe<Array<S_Daily_Hours_To_Date_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<S_Daily_Hours_To_Date_Order_By>>;
  where?: Maybe<S_Daily_Hours_To_Date_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_NoteArgs = {
  distinct_on?: Maybe<Array<Daily_Note_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Note_Order_By>>;
  where?: Maybe<Daily_Note_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Note_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Note_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Note_Order_By>>;
  where?: Maybe<Daily_Note_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Note_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootDaily_Note_SubArgs = {
  distinct_on?: Maybe<Array<Daily_Note_Sub_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Note_Sub_Order_By>>;
  where?: Maybe<Daily_Note_Sub_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Note_Sub_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Note_Sub_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Note_Sub_Order_By>>;
  where?: Maybe<Daily_Note_Sub_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Note_Sub_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootDaily_Note_TagArgs = {
  distinct_on?: Maybe<Array<Daily_Note_Tag_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Note_Tag_Order_By>>;
  where?: Maybe<Daily_Note_Tag_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Note_Tag_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Note_Tag_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Note_Tag_Order_By>>;
  where?: Maybe<Daily_Note_Tag_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Note_Tag_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootDaily_ReportArgs = {
  distinct_on?: Maybe<Array<Daily_Report_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Report_Order_By>>;
  where?: Maybe<Daily_Report_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Report_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Report_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Report_Order_By>>;
  where?: Maybe<Daily_Report_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Report_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootDaily_Report_CompletedArgs = {
  distinct_on?: Maybe<Array<Daily_Report_Completed_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Report_Completed_Order_By>>;
  where?: Maybe<Daily_Report_Completed_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Report_Completed_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Report_Completed_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Report_Completed_Order_By>>;
  where?: Maybe<Daily_Report_Completed_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Report_Completed_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootDaily_Report_EventArgs = {
  distinct_on?: Maybe<Array<Daily_Report_Event_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Report_Event_Order_By>>;
  where?: Maybe<Daily_Report_Event_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Report_Event_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Report_Event_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Report_Event_Order_By>>;
  where?: Maybe<Daily_Report_Event_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Report_Event_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootDaily_Report_Event_TypeArgs = {
  distinct_on?: Maybe<Array<Daily_Report_Event_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Report_Event_Type_Order_By>>;
  where?: Maybe<Daily_Report_Event_Type_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Report_Event_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Report_Event_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Report_Event_Type_Order_By>>;
  where?: Maybe<Daily_Report_Event_Type_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Report_Event_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** subscription root */
export type Subscription_RootDaily_Report_Project_WorkerArgs = {
  distinct_on?: Maybe<Array<Daily_Report_Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Report_Project_Worker_Order_By>>;
  where?: Maybe<Daily_Report_Project_Worker_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Report_Project_Worker_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Report_Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Report_Project_Worker_Order_By>>;
  where?: Maybe<Daily_Report_Project_Worker_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Report_Project_Worker_By_PkArgs = {
  daily_report_id: Scalars['uuid'];
  project_worker_id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootDaily_Schedule_EventArgs = {
  distinct_on?: Maybe<Array<Daily_Schedule_Event_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Schedule_Event_Order_By>>;
  where?: Maybe<Daily_Schedule_Event_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Schedule_Event_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Schedule_Event_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Schedule_Event_Order_By>>;
  where?: Maybe<Daily_Schedule_Event_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Schedule_Event_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootDaily_Schedule_Event_SubArgs = {
  distinct_on?: Maybe<Array<Daily_Schedule_Event_Sub_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Schedule_Event_Sub_Order_By>>;
  where?: Maybe<Daily_Schedule_Event_Sub_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Schedule_Event_Sub_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Schedule_Event_Sub_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Schedule_Event_Sub_Order_By>>;
  where?: Maybe<Daily_Schedule_Event_Sub_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Schedule_Event_Sub_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootDaily_Schedule_Event_TypeArgs = {
  distinct_on?: Maybe<Array<Daily_Schedule_Event_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Schedule_Event_Type_Order_By>>;
  where?: Maybe<Daily_Schedule_Event_Type_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Schedule_Event_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Schedule_Event_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Schedule_Event_Type_Order_By>>;
  where?: Maybe<Daily_Schedule_Event_Type_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Schedule_Event_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** subscription root */
export type Subscription_RootDaily_Weather_ObservationArgs = {
  distinct_on?: Maybe<Array<Daily_Weather_Observation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Weather_Observation_Order_By>>;
  where?: Maybe<Daily_Weather_Observation_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Weather_Observation_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Weather_Observation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Weather_Observation_Order_By>>;
  where?: Maybe<Daily_Weather_Observation_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Weather_Observation_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootDaily_Weather_Observation_SubArgs = {
  distinct_on?: Maybe<Array<Daily_Weather_Observation_Sub_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Weather_Observation_Sub_Order_By>>;
  where?: Maybe<Daily_Weather_Observation_Sub_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Weather_Observation_Sub_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Weather_Observation_Sub_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Weather_Observation_Sub_Order_By>>;
  where?: Maybe<Daily_Weather_Observation_Sub_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Weather_Observation_Sub_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootDaily_Work_LogArgs = {
  distinct_on?: Maybe<Array<Daily_Work_Log_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Work_Log_Order_By>>;
  where?: Maybe<Daily_Work_Log_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Work_Log_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Work_Log_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Work_Log_Order_By>>;
  where?: Maybe<Daily_Work_Log_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Work_Log_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootDaily_Work_Log_CommentArgs = {
  distinct_on?: Maybe<Array<Daily_Work_Log_Comment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Work_Log_Comment_Order_By>>;
  where?: Maybe<Daily_Work_Log_Comment_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Work_Log_Comment_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Work_Log_Comment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Work_Log_Comment_Order_By>>;
  where?: Maybe<Daily_Work_Log_Comment_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Work_Log_Comment_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootDaily_Work_Log_Comment_EmailArgs = {
  distinct_on?: Maybe<Array<Daily_Work_Log_Comment_Email_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Work_Log_Comment_Email_Order_By>>;
  where?: Maybe<Daily_Work_Log_Comment_Email_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Work_Log_Comment_Email_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Work_Log_Comment_Email_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Work_Log_Comment_Email_Order_By>>;
  where?: Maybe<Daily_Work_Log_Comment_Email_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Work_Log_Comment_Email_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootDaily_Work_Log_TagArgs = {
  distinct_on?: Maybe<Array<Daily_Work_Log_Tag_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Work_Log_Tag_Order_By>>;
  where?: Maybe<Daily_Work_Log_Tag_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Work_Log_Tag_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Work_Log_Tag_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Work_Log_Tag_Order_By>>;
  where?: Maybe<Daily_Work_Log_Tag_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Work_Log_Tag_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootDaily_Work_Log_WorkerArgs = {
  distinct_on?: Maybe<Array<Daily_Work_Log_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Work_Log_Worker_Order_By>>;
  where?: Maybe<Daily_Work_Log_Worker_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Work_Log_Worker_AggregateArgs = {
  distinct_on?: Maybe<Array<Daily_Work_Log_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Daily_Work_Log_Worker_Order_By>>;
  where?: Maybe<Daily_Work_Log_Worker_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDaily_Work_Log_Worker_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootDate_Daily_Log_SubmittalsArgs = {
  args: Date_Daily_Log_Submittals_Args;
  distinct_on?: Maybe<Array<S_Sub_Daily_Log_Submittal_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<S_Sub_Daily_Log_Submittal_Order_By>>;
  where?: Maybe<S_Sub_Daily_Log_Submittal_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDate_Daily_Log_Submittals_AggregateArgs = {
  args: Date_Daily_Log_Submittals_Args;
  distinct_on?: Maybe<Array<S_Sub_Daily_Log_Submittal_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<S_Sub_Daily_Log_Submittal_Order_By>>;
  where?: Maybe<S_Sub_Daily_Log_Submittal_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDeliveryArgs = {
  distinct_on?: Maybe<Array<Delivery_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Delivery_Order_By>>;
  where?: Maybe<Delivery_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDelivery_AggregateArgs = {
  distinct_on?: Maybe<Array<Delivery_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Delivery_Order_By>>;
  where?: Maybe<Delivery_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDelivery_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootDelivery_CalendarArgs = {
  distinct_on?: Maybe<Array<Delivery_Calendar_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Delivery_Calendar_Order_By>>;
  where?: Maybe<Delivery_Calendar_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDelivery_Calendar_AggregateArgs = {
  distinct_on?: Maybe<Array<Delivery_Calendar_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Delivery_Calendar_Order_By>>;
  where?: Maybe<Delivery_Calendar_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDelivery_Calendar_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootDig_PermitArgs = {
  distinct_on?: Maybe<Array<Dig_Permit_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Dig_Permit_Order_By>>;
  where?: Maybe<Dig_Permit_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDig_Permit_AggregateArgs = {
  distinct_on?: Maybe<Array<Dig_Permit_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Dig_Permit_Order_By>>;
  where?: Maybe<Dig_Permit_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDig_Permit_By_PkArgs = {
  permit_id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootDig_Permit_Select_OptionArgs = {
  distinct_on?: Maybe<Array<Dig_Permit_Select_Option_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Dig_Permit_Select_Option_Order_By>>;
  where?: Maybe<Dig_Permit_Select_Option_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDig_Permit_Select_Option_AggregateArgs = {
  distinct_on?: Maybe<Array<Dig_Permit_Select_Option_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Dig_Permit_Select_Option_Order_By>>;
  where?: Maybe<Dig_Permit_Select_Option_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDig_Permit_Select_Option_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootDig_Permit_TicketArgs = {
  distinct_on?: Maybe<Array<Dig_Permit_Ticket_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Dig_Permit_Ticket_Order_By>>;
  where?: Maybe<Dig_Permit_Ticket_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDig_Permit_Ticket_AggregateArgs = {
  distinct_on?: Maybe<Array<Dig_Permit_Ticket_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Dig_Permit_Ticket_Order_By>>;
  where?: Maybe<Dig_Permit_Ticket_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDig_Permit_Ticket_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootDummy_QueryArgs = {
  distinct_on?: Maybe<Array<State_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<State_Order_By>>;
  where?: Maybe<State_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDummy_Query_AggregateArgs = {
  distinct_on?: Maybe<Array<State_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<State_Order_By>>;
  where?: Maybe<State_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootEmployee_TitleArgs = {
  distinct_on?: Maybe<Array<Employee_Title_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Employee_Title_Order_By>>;
  where?: Maybe<Employee_Title_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootEmployee_Title_AggregateArgs = {
  distinct_on?: Maybe<Array<Employee_Title_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Employee_Title_Order_By>>;
  where?: Maybe<Employee_Title_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootEmployee_Title_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootExpo_Push_TokenArgs = {
  distinct_on?: Maybe<Array<Expo_Push_Token_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Expo_Push_Token_Order_By>>;
  where?: Maybe<Expo_Push_Token_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootExpo_Push_Token_AggregateArgs = {
  distinct_on?: Maybe<Array<Expo_Push_Token_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Expo_Push_Token_Order_By>>;
  where?: Maybe<Expo_Push_Token_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootExpo_Push_Token_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootFeedbackArgs = {
  distinct_on?: Maybe<Array<Feedback_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Feedback_Order_By>>;
  where?: Maybe<Feedback_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootFeedback_AggregateArgs = {
  distinct_on?: Maybe<Array<Feedback_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Feedback_Order_By>>;
  where?: Maybe<Feedback_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootFeedback_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootForgot_Password_KeyArgs = {
  distinct_on?: Maybe<Array<Forgot_Password_Key_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Forgot_Password_Key_Order_By>>;
  where?: Maybe<Forgot_Password_Key_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootForgot_Password_Key_AggregateArgs = {
  distinct_on?: Maybe<Array<Forgot_Password_Key_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Forgot_Password_Key_Order_By>>;
  where?: Maybe<Forgot_Password_Key_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootForgot_Password_Key_By_PkArgs = {
  key: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootGc_Daily_Checklist_ItemArgs = {
  distinct_on?: Maybe<Array<Gc_Daily_Checklist_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Gc_Daily_Checklist_Item_Order_By>>;
  where?: Maybe<Gc_Daily_Checklist_Item_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootGc_Daily_Checklist_Item_AggregateArgs = {
  distinct_on?: Maybe<Array<Gc_Daily_Checklist_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Gc_Daily_Checklist_Item_Order_By>>;
  where?: Maybe<Gc_Daily_Checklist_Item_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootGc_Daily_Checklist_Item_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootGc_Disabled_Project_SubcontractorArgs = {
  distinct_on?: Maybe<Array<Gc_Disabled_Project_Subcontractor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Gc_Disabled_Project_Subcontractor_Order_By>>;
  where?: Maybe<Gc_Disabled_Project_Subcontractor_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootGc_Disabled_Project_Subcontractor_AggregateArgs = {
  distinct_on?: Maybe<Array<Gc_Disabled_Project_Subcontractor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Gc_Disabled_Project_Subcontractor_Order_By>>;
  where?: Maybe<Gc_Disabled_Project_Subcontractor_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootGc_Disabled_Project_Subcontractor_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootGeneral_ContractorArgs = {
  distinct_on?: Maybe<Array<General_Contractor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<General_Contractor_Order_By>>;
  where?: Maybe<General_Contractor_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootGeneral_Contractor_AggregateArgs = {
  distinct_on?: Maybe<Array<General_Contractor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<General_Contractor_Order_By>>;
  where?: Maybe<General_Contractor_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootGeneral_Contractor_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootGeneral_Contractor_EmployeeArgs = {
  distinct_on?: Maybe<Array<General_Contractor_Employee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<General_Contractor_Employee_Order_By>>;
  where?: Maybe<General_Contractor_Employee_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootGeneral_Contractor_Employee_AggregateArgs = {
  distinct_on?: Maybe<Array<General_Contractor_Employee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<General_Contractor_Employee_Order_By>>;
  where?: Maybe<General_Contractor_Employee_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootGeneral_Contractor_Employee_By_PkArgs = {
  uid: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootGet_Awareness_QuestionArgs = {
  args: Get_Awareness_Question_Args;
  distinct_on?: Maybe<Array<Awareness_Question_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Awareness_Question_Order_By>>;
  where?: Maybe<Awareness_Question_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootGet_Awareness_Question_AggregateArgs = {
  args: Get_Awareness_Question_Args;
  distinct_on?: Maybe<Array<Awareness_Question_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Awareness_Question_Order_By>>;
  where?: Maybe<Awareness_Question_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootGet_Random_Incident_ExampleArgs = {
  args: Get_Random_Incident_Example_Args;
  distinct_on?: Maybe<Array<Incident_Example_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Incident_Example_Order_By>>;
  where?: Maybe<Incident_Example_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootGet_Random_Incident_Example_AggregateArgs = {
  args: Get_Random_Incident_Example_Args;
  distinct_on?: Maybe<Array<Incident_Example_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Incident_Example_Order_By>>;
  where?: Maybe<Incident_Example_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootGovernment_IdentificationArgs = {
  distinct_on?: Maybe<Array<Government_Identification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Government_Identification_Order_By>>;
  where?: Maybe<Government_Identification_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootGovernment_Identification_AggregateArgs = {
  distinct_on?: Maybe<Array<Government_Identification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Government_Identification_Order_By>>;
  where?: Maybe<Government_Identification_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootGovernment_Identification_By_PkArgs = {
  user_id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootHot_Work_PermitArgs = {
  distinct_on?: Maybe<Array<Hot_Work_Permit_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Hot_Work_Permit_Order_By>>;
  where?: Maybe<Hot_Work_Permit_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootHot_Work_Permit_AggregateArgs = {
  distinct_on?: Maybe<Array<Hot_Work_Permit_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Hot_Work_Permit_Order_By>>;
  where?: Maybe<Hot_Work_Permit_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootHot_Work_Permit_By_PkArgs = {
  permit_id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootHourly_ForecastArgs = {
  distinct_on?: Maybe<Array<Hourly_Forecast_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Hourly_Forecast_Order_By>>;
  where?: Maybe<Hourly_Forecast_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootHourly_Forecast_AggregateArgs = {
  distinct_on?: Maybe<Array<Hourly_Forecast_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Hourly_Forecast_Order_By>>;
  where?: Maybe<Hourly_Forecast_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootHourly_Forecast_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootImageArgs = {
  distinct_on?: Maybe<Array<Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Image_Order_By>>;
  where?: Maybe<Image_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootImage_AggregateArgs = {
  distinct_on?: Maybe<Array<Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Image_Order_By>>;
  where?: Maybe<Image_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootImage_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootImage_TypeArgs = {
  distinct_on?: Maybe<Array<Image_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Image_Type_Order_By>>;
  where?: Maybe<Image_Type_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootImage_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Image_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Image_Type_Order_By>>;
  where?: Maybe<Image_Type_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootImage_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** subscription root */
export type Subscription_RootIncident_ExampleArgs = {
  distinct_on?: Maybe<Array<Incident_Example_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Incident_Example_Order_By>>;
  where?: Maybe<Incident_Example_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootIncident_Example_AggregateArgs = {
  distinct_on?: Maybe<Array<Incident_Example_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Incident_Example_Order_By>>;
  where?: Maybe<Incident_Example_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootIncident_Example_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootInviteArgs = {
  distinct_on?: Maybe<Array<Invite_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Invite_Order_By>>;
  where?: Maybe<Invite_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootInvite_AggregateArgs = {
  distinct_on?: Maybe<Array<Invite_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Invite_Order_By>>;
  where?: Maybe<Invite_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootInvite_By_PkArgs = {
  id: Scalars['String'];
};


/** subscription root */
export type Subscription_RootLang_CodeArgs = {
  distinct_on?: Maybe<Array<Lang_Code_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Lang_Code_Order_By>>;
  where?: Maybe<Lang_Code_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootLang_Code_AggregateArgs = {
  distinct_on?: Maybe<Array<Lang_Code_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Lang_Code_Order_By>>;
  where?: Maybe<Lang_Code_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootLang_Code_By_PkArgs = {
  value: Scalars['String'];
};


/** subscription root */
export type Subscription_RootNotification_Badge_CountArgs = {
  distinct_on?: Maybe<Array<Notification_Badge_Count_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Notification_Badge_Count_Order_By>>;
  where?: Maybe<Notification_Badge_Count_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootNotification_Badge_Count_AggregateArgs = {
  distinct_on?: Maybe<Array<Notification_Badge_Count_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Notification_Badge_Count_Order_By>>;
  where?: Maybe<Notification_Badge_Count_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootNotification_Badge_Count_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootOrientationArgs = {
  distinct_on?: Maybe<Array<Orientation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Orientation_Order_By>>;
  where?: Maybe<Orientation_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootOrientation_AggregateArgs = {
  distinct_on?: Maybe<Array<Orientation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Orientation_Order_By>>;
  where?: Maybe<Orientation_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootOrientation_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootOrientation_SlideArgs = {
  distinct_on?: Maybe<Array<Orientation_Slide_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Orientation_Slide_Order_By>>;
  where?: Maybe<Orientation_Slide_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootOrientation_Slide_AggregateArgs = {
  distinct_on?: Maybe<Array<Orientation_Slide_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Orientation_Slide_Order_By>>;
  where?: Maybe<Orientation_Slide_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootOrientation_Slide_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootPdfArgs = {
  distinct_on?: Maybe<Array<Pdf_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Pdf_Order_By>>;
  where?: Maybe<Pdf_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootPdf_AggregateArgs = {
  distinct_on?: Maybe<Array<Pdf_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Pdf_Order_By>>;
  where?: Maybe<Pdf_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootPdf_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootPermitArgs = {
  distinct_on?: Maybe<Array<Permit_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Permit_Order_By>>;
  where?: Maybe<Permit_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootPermit_AggregateArgs = {
  distinct_on?: Maybe<Array<Permit_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Permit_Order_By>>;
  where?: Maybe<Permit_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootPermit_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootPermit_Checklist_ItemArgs = {
  distinct_on?: Maybe<Array<Permit_Checklist_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Permit_Checklist_Item_Order_By>>;
  where?: Maybe<Permit_Checklist_Item_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootPermit_Checklist_Item_AggregateArgs = {
  distinct_on?: Maybe<Array<Permit_Checklist_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Permit_Checklist_Item_Order_By>>;
  where?: Maybe<Permit_Checklist_Item_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootPermit_Checklist_Item_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootPermit_HistoryArgs = {
  distinct_on?: Maybe<Array<Permit_History_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Permit_History_Order_By>>;
  where?: Maybe<Permit_History_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootPermit_History_AggregateArgs = {
  distinct_on?: Maybe<Array<Permit_History_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Permit_History_Order_By>>;
  where?: Maybe<Permit_History_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootPermit_History_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootPermit_Project_WorkerArgs = {
  distinct_on?: Maybe<Array<Permit_Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Permit_Project_Worker_Order_By>>;
  where?: Maybe<Permit_Project_Worker_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootPermit_Project_Worker_AggregateArgs = {
  distinct_on?: Maybe<Array<Permit_Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Permit_Project_Worker_Order_By>>;
  where?: Maybe<Permit_Project_Worker_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootPermit_Project_Worker_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootPermit_Sign_In_ImageArgs = {
  distinct_on?: Maybe<Array<Permit_Sign_In_Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Permit_Sign_In_Image_Order_By>>;
  where?: Maybe<Permit_Sign_In_Image_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootPermit_Sign_In_Image_AggregateArgs = {
  distinct_on?: Maybe<Array<Permit_Sign_In_Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Permit_Sign_In_Image_Order_By>>;
  where?: Maybe<Permit_Sign_In_Image_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootPermit_Sign_In_Image_By_PkArgs = {
  image_id: Scalars['uuid'];
  permit_id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootPermit_TypeArgs = {
  distinct_on?: Maybe<Array<Permit_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Permit_Type_Order_By>>;
  where?: Maybe<Permit_Type_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootPermit_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Permit_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Permit_Type_Order_By>>;
  where?: Maybe<Permit_Type_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootPermit_Type_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootPpe_CategoryArgs = {
  distinct_on?: Maybe<Array<Ppe_Category_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Ppe_Category_Order_By>>;
  where?: Maybe<Ppe_Category_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootPpe_Category_AggregateArgs = {
  distinct_on?: Maybe<Array<Ppe_Category_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Ppe_Category_Order_By>>;
  where?: Maybe<Ppe_Category_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootPpe_Category_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootPpe_TypeArgs = {
  distinct_on?: Maybe<Array<Ppe_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Ppe_Type_Order_By>>;
  where?: Maybe<Ppe_Type_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootPpe_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Ppe_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Ppe_Type_Order_By>>;
  where?: Maybe<Ppe_Type_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootPpe_Type_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootProcore_Auth_DataArgs = {
  distinct_on?: Maybe<Array<Procore_Auth_Data_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Procore_Auth_Data_Order_By>>;
  where?: Maybe<Procore_Auth_Data_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProcore_Auth_Data_AggregateArgs = {
  distinct_on?: Maybe<Array<Procore_Auth_Data_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Procore_Auth_Data_Order_By>>;
  where?: Maybe<Procore_Auth_Data_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProcore_Auth_Data_By_PkArgs = {
  general_contractor_id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootProcore_Project_DataArgs = {
  distinct_on?: Maybe<Array<Procore_Project_Data_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Procore_Project_Data_Order_By>>;
  where?: Maybe<Procore_Project_Data_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProcore_Project_Data_AggregateArgs = {
  distinct_on?: Maybe<Array<Procore_Project_Data_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Procore_Project_Data_Order_By>>;
  where?: Maybe<Procore_Project_Data_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProcore_Project_Data_By_PkArgs = {
  project_id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootProcore_Service_AccountArgs = {
  distinct_on?: Maybe<Array<Procore_Service_Account_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Procore_Service_Account_Order_By>>;
  where?: Maybe<Procore_Service_Account_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProcore_Service_Account_AggregateArgs = {
  distinct_on?: Maybe<Array<Procore_Service_Account_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Procore_Service_Account_Order_By>>;
  where?: Maybe<Procore_Service_Account_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProcore_Service_Account_By_PkArgs = {
  general_contractor_id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootProcore_SubcontractorArgs = {
  distinct_on?: Maybe<Array<Procore_Subcontractor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Procore_Subcontractor_Order_By>>;
  where?: Maybe<Procore_Subcontractor_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProcore_Subcontractor_AggregateArgs = {
  distinct_on?: Maybe<Array<Procore_Subcontractor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Procore_Subcontractor_Order_By>>;
  where?: Maybe<Procore_Subcontractor_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProcore_Subcontractor_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootProjectArgs = {
  distinct_on?: Maybe<Array<Project_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Order_By>>;
  where?: Maybe<Project_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Order_By>>;
  where?: Maybe<Project_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootProject_Completion_Automated_NotificationArgs = {
  distinct_on?: Maybe<Array<Project_Completion_Automated_Notification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Completion_Automated_Notification_Order_By>>;
  where?: Maybe<Project_Completion_Automated_Notification_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Completion_Automated_Notification_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Completion_Automated_Notification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Completion_Automated_Notification_Order_By>>;
  where?: Maybe<Project_Completion_Automated_Notification_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Completion_Automated_Notification_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootProject_Covid_Certify_WorkerArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Certify_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Certify_Worker_Order_By>>;
  where?: Maybe<Project_Covid_Certify_Worker_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Covid_Certify_Worker_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Certify_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Certify_Worker_Order_By>>;
  where?: Maybe<Project_Covid_Certify_Worker_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Covid_Certify_Worker_AnswerArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Certify_Worker_Answer_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Certify_Worker_Answer_Order_By>>;
  where?: Maybe<Project_Covid_Certify_Worker_Answer_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Covid_Certify_Worker_Answer_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Certify_Worker_Answer_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Certify_Worker_Answer_Order_By>>;
  where?: Maybe<Project_Covid_Certify_Worker_Answer_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Covid_Certify_Worker_Answer_By_PkArgs = {
  project_covid_certify_worker_id: Scalars['uuid'];
  project_covid_yes_no_question_id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootProject_Covid_Certify_Worker_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootProject_Covid_ConfigArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Config_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Config_Order_By>>;
  where?: Maybe<Project_Covid_Config_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Covid_Config_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Config_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Config_Order_By>>;
  where?: Maybe<Project_Covid_Config_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Covid_Config_By_PkArgs = {
  project_id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootProject_Covid_Crew_CertifyArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Crew_Certify_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Crew_Certify_Order_By>>;
  where?: Maybe<Project_Covid_Crew_Certify_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Covid_Crew_Certify_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Crew_Certify_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Crew_Certify_Order_By>>;
  where?: Maybe<Project_Covid_Crew_Certify_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Covid_Crew_Certify_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootProject_Covid_Guest_CertificationArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Guest_Certification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Guest_Certification_Order_By>>;
  where?: Maybe<Project_Covid_Guest_Certification_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Covid_Guest_Certification_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Guest_Certification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Guest_Certification_Order_By>>;
  where?: Maybe<Project_Covid_Guest_Certification_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Covid_Guest_Certification_AnswerArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Guest_Certification_Answer_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Guest_Certification_Answer_Order_By>>;
  where?: Maybe<Project_Covid_Guest_Certification_Answer_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Covid_Guest_Certification_Answer_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Guest_Certification_Answer_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Guest_Certification_Answer_Order_By>>;
  where?: Maybe<Project_Covid_Guest_Certification_Answer_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Covid_Guest_Certification_Answer_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootProject_Covid_Guest_Certification_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootProject_Covid_Notify_EmployeeArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Notify_Employee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Notify_Employee_Order_By>>;
  where?: Maybe<Project_Covid_Notify_Employee_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Covid_Notify_Employee_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Notify_Employee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Notify_Employee_Order_By>>;
  where?: Maybe<Project_Covid_Notify_Employee_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Covid_Notify_Employee_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootProject_Covid_Tested_Positive_AnswerArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Tested_Positive_Answer_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Tested_Positive_Answer_Order_By>>;
  where?: Maybe<Project_Covid_Tested_Positive_Answer_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Covid_Tested_Positive_Answer_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Tested_Positive_Answer_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Tested_Positive_Answer_Order_By>>;
  where?: Maybe<Project_Covid_Tested_Positive_Answer_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Covid_Tested_Positive_Answer_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootProject_Covid_Tested_Positive_QuestionArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Tested_Positive_Question_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Tested_Positive_Question_Order_By>>;
  where?: Maybe<Project_Covid_Tested_Positive_Question_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Covid_Tested_Positive_Question_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Tested_Positive_Question_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Tested_Positive_Question_Order_By>>;
  where?: Maybe<Project_Covid_Tested_Positive_Question_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Covid_Tested_Positive_Question_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootProject_Covid_Tested_Positive_WorkerArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Tested_Positive_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Tested_Positive_Worker_Order_By>>;
  where?: Maybe<Project_Covid_Tested_Positive_Worker_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Covid_Tested_Positive_Worker_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Tested_Positive_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Tested_Positive_Worker_Order_By>>;
  where?: Maybe<Project_Covid_Tested_Positive_Worker_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Covid_Tested_Positive_Worker_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootProject_Covid_Yes_No_QuestionArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Yes_No_Question_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Yes_No_Question_Order_By>>;
  where?: Maybe<Project_Covid_Yes_No_Question_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Covid_Yes_No_Question_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Covid_Yes_No_Question_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Covid_Yes_No_Question_Order_By>>;
  where?: Maybe<Project_Covid_Yes_No_Question_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Covid_Yes_No_Question_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootProject_CrewArgs = {
  distinct_on?: Maybe<Array<Project_Crew_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Crew_Order_By>>;
  where?: Maybe<Project_Crew_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Crew_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Crew_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Crew_Order_By>>;
  where?: Maybe<Project_Crew_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Crew_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootProject_EmployeeArgs = {
  distinct_on?: Maybe<Array<Project_Employee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Employee_Order_By>>;
  where?: Maybe<Project_Employee_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Employee_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Employee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Employee_Order_By>>;
  where?: Maybe<Project_Employee_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Employee_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootProject_HazardArgs = {
  distinct_on?: Maybe<Array<Project_Hazard_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Hazard_Order_By>>;
  where?: Maybe<Project_Hazard_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Hazard_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Hazard_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Hazard_Order_By>>;
  where?: Maybe<Project_Hazard_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Hazard_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootProject_Hazard_SubcontractorArgs = {
  distinct_on?: Maybe<Array<Project_Hazard_Subcontractor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Hazard_Subcontractor_Order_By>>;
  where?: Maybe<Project_Hazard_Subcontractor_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Hazard_Subcontractor_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Hazard_Subcontractor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Hazard_Subcontractor_Order_By>>;
  where?: Maybe<Project_Hazard_Subcontractor_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Hazard_Subcontractor_By_PkArgs = {
  project_hazard_id: Scalars['uuid'];
  subcontractor_id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootProject_PostArgs = {
  distinct_on?: Maybe<Array<Project_Post_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Post_Order_By>>;
  where?: Maybe<Project_Post_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Post_GCsArgs = {
  distinct_on?: Maybe<Array<Project_Post_GCs_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Post_GCs_Order_By>>;
  where?: Maybe<Project_Post_GCs_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Post_GCs_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Post_GCs_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Post_GCs_Order_By>>;
  where?: Maybe<Project_Post_GCs_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Post_GCs_By_PkArgs = {
  general_contractor_id: Scalars['uuid'];
  project_post_id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootProject_Post_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Post_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Post_Order_By>>;
  where?: Maybe<Project_Post_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Post_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootProject_Post_WorkersArgs = {
  distinct_on?: Maybe<Array<Project_Post_Workers_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Post_Workers_Order_By>>;
  where?: Maybe<Project_Post_Workers_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Post_Workers_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Post_Workers_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Post_Workers_Order_By>>;
  where?: Maybe<Project_Post_Workers_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Post_Workers_By_PkArgs = {
  project_post_id: Scalars['uuid'];
  worker_id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootProject_Report_SettingsArgs = {
  distinct_on?: Maybe<Array<Project_Report_Settings_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Report_Settings_Order_By>>;
  where?: Maybe<Project_Report_Settings_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Report_Settings_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Report_Settings_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Report_Settings_Order_By>>;
  where?: Maybe<Project_Report_Settings_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Report_Settings_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootProject_Site_NotificationArgs = {
  distinct_on?: Maybe<Array<Project_Site_Notification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Site_Notification_Order_By>>;
  where?: Maybe<Project_Site_Notification_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Site_Notification_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Site_Notification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Site_Notification_Order_By>>;
  where?: Maybe<Project_Site_Notification_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Site_Notification_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootProject_SubcontractorArgs = {
  distinct_on?: Maybe<Array<Project_Subcontractor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Subcontractor_Order_By>>;
  where?: Maybe<Project_Subcontractor_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Subcontractor_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Subcontractor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Subcontractor_Order_By>>;
  where?: Maybe<Project_Subcontractor_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Subcontractor_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootProject_Subcontractor_Onsite_UpdateArgs = {
  distinct_on?: Maybe<Array<Project_Subcontractor_Onsite_Update_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Subcontractor_Onsite_Update_Order_By>>;
  where?: Maybe<Project_Subcontractor_Onsite_Update_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Subcontractor_Onsite_Update_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Subcontractor_Onsite_Update_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Subcontractor_Onsite_Update_Order_By>>;
  where?: Maybe<Project_Subcontractor_Onsite_Update_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Subcontractor_Onsite_Update_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootProject_Subcontractor_Report_SettingsArgs = {
  distinct_on?: Maybe<Array<Project_Subcontractor_Report_Settings_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Subcontractor_Report_Settings_Order_By>>;
  where?: Maybe<Project_Subcontractor_Report_Settings_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Subcontractor_Report_Settings_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Subcontractor_Report_Settings_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Subcontractor_Report_Settings_Order_By>>;
  where?: Maybe<Project_Subcontractor_Report_Settings_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Subcontractor_Report_Settings_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootProject_UserArgs = {
  distinct_on?: Maybe<Array<Project_User_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_User_Order_By>>;
  where?: Maybe<Project_User_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_User_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_User_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_User_Order_By>>;
  where?: Maybe<Project_User_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_User_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootProject_WorkerArgs = {
  distinct_on?: Maybe<Array<Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Worker_Order_By>>;
  where?: Maybe<Project_Worker_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Worker_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Worker_Order_By>>;
  where?: Maybe<Project_Worker_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Worker_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootProject_Worker_CompetencyArgs = {
  distinct_on?: Maybe<Array<Project_Worker_Competency_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Worker_Competency_Order_By>>;
  where?: Maybe<Project_Worker_Competency_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Worker_Competency_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Worker_Competency_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Worker_Competency_Order_By>>;
  where?: Maybe<Project_Worker_Competency_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Worker_Competency_By_PkArgs = {
  description: Scalars['String'];
  project_worker_id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootProject_Worker_Onsite_PingArgs = {
  distinct_on?: Maybe<Array<Project_Worker_Onsite_Ping_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Worker_Onsite_Ping_Order_By>>;
  where?: Maybe<Project_Worker_Onsite_Ping_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Worker_Onsite_Ping_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Worker_Onsite_Ping_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Worker_Onsite_Ping_Order_By>>;
  where?: Maybe<Project_Worker_Onsite_Ping_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProject_Worker_Onsite_Ping_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootProjects_To_PostsArgs = {
  distinct_on?: Maybe<Array<Projects_To_Posts_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Projects_To_Posts_Order_By>>;
  where?: Maybe<Projects_To_Posts_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProjects_To_Posts_AggregateArgs = {
  distinct_on?: Maybe<Array<Projects_To_Posts_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Projects_To_Posts_Order_By>>;
  where?: Maybe<Projects_To_Posts_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootProjects_To_Posts_By_PkArgs = {
  post_id: Scalars['uuid'];
  project_id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootReportArgs = {
  distinct_on?: Maybe<Array<Report_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Order_By>>;
  where?: Maybe<Report_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootReport_AggregateArgs = {
  distinct_on?: Maybe<Array<Report_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Order_By>>;
  where?: Maybe<Report_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootReport_Awareness_QuestionArgs = {
  distinct_on?: Maybe<Array<Report_Awareness_Question_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Awareness_Question_Order_By>>;
  where?: Maybe<Report_Awareness_Question_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootReport_Awareness_Question_AggregateArgs = {
  distinct_on?: Maybe<Array<Report_Awareness_Question_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Awareness_Question_Order_By>>;
  where?: Maybe<Report_Awareness_Question_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootReport_Awareness_Question_By_PkArgs = {
  awareness_question_id: Scalars['uuid'];
  report_id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootReport_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootReport_Fatal_FourArgs = {
  distinct_on?: Maybe<Array<Report_Fatal_Four_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Fatal_Four_Order_By>>;
  where?: Maybe<Report_Fatal_Four_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootReport_Fatal_Four_AggregateArgs = {
  distinct_on?: Maybe<Array<Report_Fatal_Four_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Fatal_Four_Order_By>>;
  where?: Maybe<Report_Fatal_Four_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootReport_Fatal_Four_By_PkArgs = {
  report_id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootReport_InjuryArgs = {
  distinct_on?: Maybe<Array<Report_Injury_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Injury_Order_By>>;
  where?: Maybe<Report_Injury_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootReport_Injury_AggregateArgs = {
  distinct_on?: Maybe<Array<Report_Injury_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Injury_Order_By>>;
  where?: Maybe<Report_Injury_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootReport_Injury_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootReport_Project_HazardArgs = {
  distinct_on?: Maybe<Array<Report_Project_Hazard_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Project_Hazard_Order_By>>;
  where?: Maybe<Report_Project_Hazard_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootReport_Project_Hazard_AggregateArgs = {
  distinct_on?: Maybe<Array<Report_Project_Hazard_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Project_Hazard_Order_By>>;
  where?: Maybe<Report_Project_Hazard_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootReport_Project_Hazard_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootReport_Project_PostArgs = {
  distinct_on?: Maybe<Array<Report_Project_Post_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Project_Post_Order_By>>;
  where?: Maybe<Report_Project_Post_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootReport_Project_Post_AggregateArgs = {
  distinct_on?: Maybe<Array<Report_Project_Post_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Project_Post_Order_By>>;
  where?: Maybe<Report_Project_Post_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootReport_Project_Post_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootReport_Project_WorkerArgs = {
  distinct_on?: Maybe<Array<Report_Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Project_Worker_Order_By>>;
  where?: Maybe<Report_Project_Worker_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootReport_Project_Worker_AggregateArgs = {
  distinct_on?: Maybe<Array<Report_Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Project_Worker_Order_By>>;
  where?: Maybe<Report_Project_Worker_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootReport_Project_Worker_By_PkArgs = {
  project_worker_id: Scalars['uuid'];
  report_id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootS_Daily_Hours_To_DateArgs = {
  distinct_on?: Maybe<Array<S_Daily_Hours_To_Date_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<S_Daily_Hours_To_Date_Order_By>>;
  where?: Maybe<S_Daily_Hours_To_Date_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootS_Daily_Hours_To_Date_AggregateArgs = {
  distinct_on?: Maybe<Array<S_Daily_Hours_To_Date_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<S_Daily_Hours_To_Date_Order_By>>;
  where?: Maybe<S_Daily_Hours_To_Date_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootS_Daily_Hours_To_Date_By_PkArgs = {
  subcontractor_id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootS_Sub_Daily_Log_SubmittalArgs = {
  distinct_on?: Maybe<Array<S_Sub_Daily_Log_Submittal_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<S_Sub_Daily_Log_Submittal_Order_By>>;
  where?: Maybe<S_Sub_Daily_Log_Submittal_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootS_Sub_Daily_Log_Submittal_AggregateArgs = {
  distinct_on?: Maybe<Array<S_Sub_Daily_Log_Submittal_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<S_Sub_Daily_Log_Submittal_Order_By>>;
  where?: Maybe<S_Sub_Daily_Log_Submittal_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootS_Sub_Daily_Log_Submittal_By_PkArgs = {
  subcontractor_id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootSelect_OptionArgs = {
  distinct_on?: Maybe<Array<Select_Option_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Select_Option_Order_By>>;
  where?: Maybe<Select_Option_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootSelect_Option_AggregateArgs = {
  distinct_on?: Maybe<Array<Select_Option_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Select_Option_Order_By>>;
  where?: Maybe<Select_Option_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootSelect_Option_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootSelect_Option_TypeArgs = {
  distinct_on?: Maybe<Array<Select_Option_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Select_Option_Type_Order_By>>;
  where?: Maybe<Select_Option_Type_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootSelect_Option_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Select_Option_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Select_Option_Type_Order_By>>;
  where?: Maybe<Select_Option_Type_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootSelect_Option_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** subscription root */
export type Subscription_RootShort_Forecast_TypeArgs = {
  distinct_on?: Maybe<Array<Short_Forecast_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Short_Forecast_Type_Order_By>>;
  where?: Maybe<Short_Forecast_Type_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootShort_Forecast_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Short_Forecast_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Short_Forecast_Type_Order_By>>;
  where?: Maybe<Short_Forecast_Type_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootShort_Forecast_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** subscription root */
export type Subscription_RootSign_In_TypeArgs = {
  distinct_on?: Maybe<Array<Sign_In_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sign_In_Type_Order_By>>;
  where?: Maybe<Sign_In_Type_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootSign_In_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Sign_In_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sign_In_Type_Order_By>>;
  where?: Maybe<Sign_In_Type_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootSign_In_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** subscription root */
export type Subscription_RootStateArgs = {
  distinct_on?: Maybe<Array<State_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<State_Order_By>>;
  where?: Maybe<State_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootState_AggregateArgs = {
  distinct_on?: Maybe<Array<State_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<State_Order_By>>;
  where?: Maybe<State_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootState_By_PkArgs = {
  code: Scalars['String'];
};


/** subscription root */
export type Subscription_RootSubcontractorArgs = {
  distinct_on?: Maybe<Array<Subcontractor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Subcontractor_Order_By>>;
  where?: Maybe<Subcontractor_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootSubcontractor_AggregateArgs = {
  distinct_on?: Maybe<Array<Subcontractor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Subcontractor_Order_By>>;
  where?: Maybe<Subcontractor_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootSubcontractor_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootSubcontractor_EmployeeArgs = {
  distinct_on?: Maybe<Array<Subcontractor_Employee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Subcontractor_Employee_Order_By>>;
  where?: Maybe<Subcontractor_Employee_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootSubcontractor_Employee_AggregateArgs = {
  distinct_on?: Maybe<Array<Subcontractor_Employee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Subcontractor_Employee_Order_By>>;
  where?: Maybe<Subcontractor_Employee_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootSubcontractor_Employee_By_PkArgs = {
  user_id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootSubcontractor_Employee_TitleArgs = {
  distinct_on?: Maybe<Array<Subcontractor_Employee_Title_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Subcontractor_Employee_Title_Order_By>>;
  where?: Maybe<Subcontractor_Employee_Title_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootSubcontractor_Employee_Title_AggregateArgs = {
  distinct_on?: Maybe<Array<Subcontractor_Employee_Title_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Subcontractor_Employee_Title_Order_By>>;
  where?: Maybe<Subcontractor_Employee_Title_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootSubcontractor_Employee_Title_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootSubcontractor_Onsite_Status_UpdateArgs = {
  distinct_on?: Maybe<Array<Subcontractor_Onsite_Status_Update_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Subcontractor_Onsite_Status_Update_Order_By>>;
  where?: Maybe<Subcontractor_Onsite_Status_Update_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootSubcontractor_Onsite_Status_Update_AggregateArgs = {
  distinct_on?: Maybe<Array<Subcontractor_Onsite_Status_Update_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Subcontractor_Onsite_Status_Update_Order_By>>;
  where?: Maybe<Subcontractor_Onsite_Status_Update_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootSubcontractor_Onsite_Status_Update_By_PkArgs = {
  created_at: Scalars['date'];
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootSubcontractor_TradeArgs = {
  distinct_on?: Maybe<Array<Subcontractor_Trade_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Subcontractor_Trade_Order_By>>;
  where?: Maybe<Subcontractor_Trade_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootSubcontractor_Trade_AggregateArgs = {
  distinct_on?: Maybe<Array<Subcontractor_Trade_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Subcontractor_Trade_Order_By>>;
  where?: Maybe<Subcontractor_Trade_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootSubcontractor_Trade_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootSubcontractor_WorkerArgs = {
  distinct_on?: Maybe<Array<Subcontractor_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Subcontractor_Worker_Order_By>>;
  where?: Maybe<Subcontractor_Worker_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootSubcontractor_Worker_AggregateArgs = {
  distinct_on?: Maybe<Array<Subcontractor_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Subcontractor_Worker_Order_By>>;
  where?: Maybe<Subcontractor_Worker_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootSubcontractor_Worker_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootSubmission_ImageArgs = {
  distinct_on?: Maybe<Array<Submission_Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Submission_Image_Order_By>>;
  where?: Maybe<Submission_Image_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootSubmission_Image_AggregateArgs = {
  distinct_on?: Maybe<Array<Submission_Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Submission_Image_Order_By>>;
  where?: Maybe<Submission_Image_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootSubmission_Image_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootSubmission_Image_TypeArgs = {
  distinct_on?: Maybe<Array<Submission_Image_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Submission_Image_Type_Order_By>>;
  where?: Maybe<Submission_Image_Type_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootSubmission_Image_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Submission_Image_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Submission_Image_Type_Order_By>>;
  where?: Maybe<Submission_Image_Type_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootSubmission_Image_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** subscription root */
export type Subscription_RootTagArgs = {
  distinct_on?: Maybe<Array<Tag_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Tag_Order_By>>;
  where?: Maybe<Tag_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootTag_AggregateArgs = {
  distinct_on?: Maybe<Array<Tag_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Tag_Order_By>>;
  where?: Maybe<Tag_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootTag_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootTaskArgs = {
  distinct_on?: Maybe<Array<Task_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Order_By>>;
  where?: Maybe<Task_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootTask_AggregateArgs = {
  distinct_on?: Maybe<Array<Task_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Order_By>>;
  where?: Maybe<Task_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootTask_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootTask_NoteArgs = {
  distinct_on?: Maybe<Array<Task_Note_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Note_Order_By>>;
  where?: Maybe<Task_Note_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootTask_Note_AggregateArgs = {
  distinct_on?: Maybe<Array<Task_Note_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Note_Order_By>>;
  where?: Maybe<Task_Note_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootTask_Note_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootTask_Permit_TypeArgs = {
  distinct_on?: Maybe<Array<Task_Permit_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Permit_Type_Order_By>>;
  where?: Maybe<Task_Permit_Type_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootTask_Permit_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Task_Permit_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Permit_Type_Order_By>>;
  where?: Maybe<Task_Permit_Type_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootTask_Permit_Type_By_PkArgs = {
  permit_type_id: Scalars['uuid'];
  task_id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootTask_Ppe_TypeArgs = {
  distinct_on?: Maybe<Array<Task_Ppe_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Ppe_Type_Order_By>>;
  where?: Maybe<Task_Ppe_Type_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootTask_Ppe_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Task_Ppe_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Ppe_Type_Order_By>>;
  where?: Maybe<Task_Ppe_Type_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootTask_Ppe_Type_By_PkArgs = {
  ppe_type_id: Scalars['uuid'];
  task_id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootTask_StepArgs = {
  distinct_on?: Maybe<Array<Task_Step_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Step_Order_By>>;
  where?: Maybe<Task_Step_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootTask_Step_AggregateArgs = {
  distinct_on?: Maybe<Array<Task_Step_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Step_Order_By>>;
  where?: Maybe<Task_Step_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootTask_Step_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootTask_Step_HazardArgs = {
  distinct_on?: Maybe<Array<Task_Step_Hazard_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Step_Hazard_Order_By>>;
  where?: Maybe<Task_Step_Hazard_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootTask_Step_Hazard_AggregateArgs = {
  distinct_on?: Maybe<Array<Task_Step_Hazard_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Step_Hazard_Order_By>>;
  where?: Maybe<Task_Step_Hazard_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootTask_Step_Hazard_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootText_TranslationArgs = {
  distinct_on?: Maybe<Array<Text_Translation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Text_Translation_Order_By>>;
  where?: Maybe<Text_Translation_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootText_Translation_AggregateArgs = {
  distinct_on?: Maybe<Array<Text_Translation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Text_Translation_Order_By>>;
  where?: Maybe<Text_Translation_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootText_Translation_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootTodoArgs = {
  distinct_on?: Maybe<Array<Todo_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Todo_Order_By>>;
  where?: Maybe<Todo_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootTodo_AggregateArgs = {
  distinct_on?: Maybe<Array<Todo_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Todo_Order_By>>;
  where?: Maybe<Todo_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootTodo_AssigneeArgs = {
  distinct_on?: Maybe<Array<Todo_Assignee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Todo_Assignee_Order_By>>;
  where?: Maybe<Todo_Assignee_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootTodo_Assignee_AggregateArgs = {
  distinct_on?: Maybe<Array<Todo_Assignee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Todo_Assignee_Order_By>>;
  where?: Maybe<Todo_Assignee_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootTodo_Assignee_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootTodo_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootTodo_NotifyeeArgs = {
  distinct_on?: Maybe<Array<Todo_Notifyee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Todo_Notifyee_Order_By>>;
  where?: Maybe<Todo_Notifyee_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootTodo_Notifyee_AggregateArgs = {
  distinct_on?: Maybe<Array<Todo_Notifyee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Todo_Notifyee_Order_By>>;
  where?: Maybe<Todo_Notifyee_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootTodo_Notifyee_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootToolbox_TalkArgs = {
  distinct_on?: Maybe<Array<Toolbox_Talk_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Toolbox_Talk_Order_By>>;
  where?: Maybe<Toolbox_Talk_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootToolbox_Talk_AggregateArgs = {
  distinct_on?: Maybe<Array<Toolbox_Talk_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Toolbox_Talk_Order_By>>;
  where?: Maybe<Toolbox_Talk_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootToolbox_Talk_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootToolbox_Talk_PdfArgs = {
  distinct_on?: Maybe<Array<Toolbox_Talk_Pdf_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Toolbox_Talk_Pdf_Order_By>>;
  where?: Maybe<Toolbox_Talk_Pdf_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootToolbox_Talk_Pdf_AggregateArgs = {
  distinct_on?: Maybe<Array<Toolbox_Talk_Pdf_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Toolbox_Talk_Pdf_Order_By>>;
  where?: Maybe<Toolbox_Talk_Pdf_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootToolbox_Talk_Pdf_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootToolbox_Talk_Project_WorkerArgs = {
  distinct_on?: Maybe<Array<Toolbox_Talk_Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Toolbox_Talk_Project_Worker_Order_By>>;
  where?: Maybe<Toolbox_Talk_Project_Worker_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootToolbox_Talk_Project_Worker_AggregateArgs = {
  distinct_on?: Maybe<Array<Toolbox_Talk_Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Toolbox_Talk_Project_Worker_Order_By>>;
  where?: Maybe<Toolbox_Talk_Project_Worker_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootToolbox_Talk_Project_Worker_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootUserArgs = {
  distinct_on?: Maybe<Array<User_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Order_By>>;
  where?: Maybe<User_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootUser_AggregateArgs = {
  distinct_on?: Maybe<Array<User_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Order_By>>;
  where?: Maybe<User_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootUser_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootUser_NotificationArgs = {
  distinct_on?: Maybe<Array<User_Notification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Notification_Order_By>>;
  where?: Maybe<User_Notification_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootUser_Notification_AggregateArgs = {
  distinct_on?: Maybe<Array<User_Notification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Notification_Order_By>>;
  where?: Maybe<User_Notification_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootUser_Notification_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootUser_Notification_Event_TypeArgs = {
  distinct_on?: Maybe<Array<User_Notification_Event_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Notification_Event_Type_Order_By>>;
  where?: Maybe<User_Notification_Event_Type_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootUser_Notification_Event_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<User_Notification_Event_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Notification_Event_Type_Order_By>>;
  where?: Maybe<User_Notification_Event_Type_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootUser_Notification_Event_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** subscription root */
export type Subscription_RootUser_Project_Filter_CalendarArgs = {
  distinct_on?: Maybe<Array<User_Project_Filter_Calendar_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Project_Filter_Calendar_Order_By>>;
  where?: Maybe<User_Project_Filter_Calendar_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootUser_Project_Filter_Calendar_AggregateArgs = {
  distinct_on?: Maybe<Array<User_Project_Filter_Calendar_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Project_Filter_Calendar_Order_By>>;
  where?: Maybe<User_Project_Filter_Calendar_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootUser_Project_Filter_Calendar_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootUser_Saved_EmailArgs = {
  distinct_on?: Maybe<Array<User_Saved_Email_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Saved_Email_Order_By>>;
  where?: Maybe<User_Saved_Email_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootUser_Saved_Email_AggregateArgs = {
  distinct_on?: Maybe<Array<User_Saved_Email_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Saved_Email_Order_By>>;
  where?: Maybe<User_Saved_Email_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootUser_Saved_Email_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootWork_Above_PermitArgs = {
  distinct_on?: Maybe<Array<Work_Above_Permit_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Work_Above_Permit_Order_By>>;
  where?: Maybe<Work_Above_Permit_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootWork_Above_Permit_AggregateArgs = {
  distinct_on?: Maybe<Array<Work_Above_Permit_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Work_Above_Permit_Order_By>>;
  where?: Maybe<Work_Above_Permit_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootWork_Above_Permit_By_PkArgs = {
  permit_id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootWorkerArgs = {
  distinct_on?: Maybe<Array<Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Order_By>>;
  where?: Maybe<Worker_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootWorker_AggregateArgs = {
  distinct_on?: Maybe<Array<Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Order_By>>;
  where?: Maybe<Worker_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootWorker_Automatic_EmailArgs = {
  distinct_on?: Maybe<Array<Worker_Automatic_Email_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Automatic_Email_Order_By>>;
  where?: Maybe<Worker_Automatic_Email_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootWorker_Automatic_Email_AggregateArgs = {
  distinct_on?: Maybe<Array<Worker_Automatic_Email_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Automatic_Email_Order_By>>;
  where?: Maybe<Worker_Automatic_Email_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootWorker_Automatic_Email_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootWorker_Automatic_Email_Event_TypeArgs = {
  distinct_on?: Maybe<Array<Worker_Automatic_Email_Event_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Automatic_Email_Event_Type_Order_By>>;
  where?: Maybe<Worker_Automatic_Email_Event_Type_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootWorker_Automatic_Email_Event_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Worker_Automatic_Email_Event_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Automatic_Email_Event_Type_Order_By>>;
  where?: Maybe<Worker_Automatic_Email_Event_Type_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootWorker_Automatic_Email_Event_Type_By_PkArgs = {
  value: Scalars['String'];
};


/** subscription root */
export type Subscription_RootWorker_By_PkArgs = {
  uid: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootWorker_CertificationArgs = {
  distinct_on?: Maybe<Array<Worker_Certification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Certification_Order_By>>;
  where?: Maybe<Worker_Certification_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootWorker_Certification_AggregateArgs = {
  distinct_on?: Maybe<Array<Worker_Certification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Certification_Order_By>>;
  where?: Maybe<Worker_Certification_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootWorker_Certification_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootWorker_Drug_TestArgs = {
  distinct_on?: Maybe<Array<Worker_Drug_Test_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Drug_Test_Order_By>>;
  where?: Maybe<Worker_Drug_Test_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootWorker_Drug_Test_AggregateArgs = {
  distinct_on?: Maybe<Array<Worker_Drug_Test_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Drug_Test_Order_By>>;
  where?: Maybe<Worker_Drug_Test_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootWorker_Drug_Test_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootWorker_Enabled_Automatic_Email_EventArgs = {
  distinct_on?: Maybe<Array<Worker_Enabled_Automatic_Email_Event_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Enabled_Automatic_Email_Event_Order_By>>;
  where?: Maybe<Worker_Enabled_Automatic_Email_Event_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootWorker_Enabled_Automatic_Email_Event_AggregateArgs = {
  distinct_on?: Maybe<Array<Worker_Enabled_Automatic_Email_Event_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Enabled_Automatic_Email_Event_Order_By>>;
  where?: Maybe<Worker_Enabled_Automatic_Email_Event_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootWorker_Enabled_Automatic_Email_Event_By_PkArgs = {
  id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootWorker_Manhour_StatsArgs = {
  args: Worker_Manhour_Stats_Args;
  distinct_on?: Maybe<Array<Worker_Manhour_Stats_Table_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Manhour_Stats_Table_Order_By>>;
  where?: Maybe<Worker_Manhour_Stats_Table_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootWorker_Manhour_Stats_AggregateArgs = {
  args: Worker_Manhour_Stats_Args;
  distinct_on?: Maybe<Array<Worker_Manhour_Stats_Table_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Manhour_Stats_Table_Order_By>>;
  where?: Maybe<Worker_Manhour_Stats_Table_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootWorker_Manhour_Stats_By_RangeArgs = {
  args: Worker_Manhour_Stats_By_Range_Args;
  distinct_on?: Maybe<Array<Worker_Manhour_Stats_By_Range_Table_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Manhour_Stats_By_Range_Table_Order_By>>;
  where?: Maybe<Worker_Manhour_Stats_By_Range_Table_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootWorker_Manhour_Stats_By_Range_AggregateArgs = {
  args: Worker_Manhour_Stats_By_Range_Args;
  distinct_on?: Maybe<Array<Worker_Manhour_Stats_By_Range_Table_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Manhour_Stats_By_Range_Table_Order_By>>;
  where?: Maybe<Worker_Manhour_Stats_By_Range_Table_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootWorker_Manhour_Stats_By_Range_TableArgs = {
  distinct_on?: Maybe<Array<Worker_Manhour_Stats_By_Range_Table_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Manhour_Stats_By_Range_Table_Order_By>>;
  where?: Maybe<Worker_Manhour_Stats_By_Range_Table_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootWorker_Manhour_Stats_By_Range_Table_AggregateArgs = {
  distinct_on?: Maybe<Array<Worker_Manhour_Stats_By_Range_Table_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Manhour_Stats_By_Range_Table_Order_By>>;
  where?: Maybe<Worker_Manhour_Stats_By_Range_Table_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootWorker_Manhour_Stats_By_Range_Table_By_PkArgs = {
  report_created_at: Scalars['date'];
};


/** subscription root */
export type Subscription_RootWorker_Manhour_Stats_TableArgs = {
  distinct_on?: Maybe<Array<Worker_Manhour_Stats_Table_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Manhour_Stats_Table_Order_By>>;
  where?: Maybe<Worker_Manhour_Stats_Table_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootWorker_Manhour_Stats_Table_AggregateArgs = {
  distinct_on?: Maybe<Array<Worker_Manhour_Stats_Table_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Manhour_Stats_Table_Order_By>>;
  where?: Maybe<Worker_Manhour_Stats_Table_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootWorker_Manhour_Stats_Table_By_PkArgs = {
  sub_id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootWorker_RoleArgs = {
  distinct_on?: Maybe<Array<Worker_Role_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Role_Order_By>>;
  where?: Maybe<Worker_Role_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootWorker_Role_AggregateArgs = {
  distinct_on?: Maybe<Array<Worker_Role_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Role_Order_By>>;
  where?: Maybe<Worker_Role_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootWorker_Role_By_PkArgs = {
  value: Scalars['String'];
};


/** subscription root */
export type Subscription_RootWorker_StatsArgs = {
  args: Worker_Stats_Args;
  distinct_on?: Maybe<Array<Worker_Stats_Table_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Stats_Table_Order_By>>;
  where?: Maybe<Worker_Stats_Table_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootWorker_Stats_AggregateArgs = {
  args: Worker_Stats_Args;
  distinct_on?: Maybe<Array<Worker_Stats_Table_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Stats_Table_Order_By>>;
  where?: Maybe<Worker_Stats_Table_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootWorker_Stats_By_RangeArgs = {
  args: Worker_Stats_By_Range_Args;
  distinct_on?: Maybe<Array<Worker_Stats_By_Range_Table_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Stats_By_Range_Table_Order_By>>;
  where?: Maybe<Worker_Stats_By_Range_Table_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootWorker_Stats_By_Range_AggregateArgs = {
  args: Worker_Stats_By_Range_Args;
  distinct_on?: Maybe<Array<Worker_Stats_By_Range_Table_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Stats_By_Range_Table_Order_By>>;
  where?: Maybe<Worker_Stats_By_Range_Table_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootWorker_Stats_By_Range_TableArgs = {
  distinct_on?: Maybe<Array<Worker_Stats_By_Range_Table_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Stats_By_Range_Table_Order_By>>;
  where?: Maybe<Worker_Stats_By_Range_Table_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootWorker_Stats_By_Range_Table_AggregateArgs = {
  distinct_on?: Maybe<Array<Worker_Stats_By_Range_Table_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Stats_By_Range_Table_Order_By>>;
  where?: Maybe<Worker_Stats_By_Range_Table_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootWorker_Stats_By_Range_Table_By_PkArgs = {
  report_created_at: Scalars['date'];
};


/** subscription root */
export type Subscription_RootWorker_Stats_TableArgs = {
  distinct_on?: Maybe<Array<Worker_Stats_Table_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Stats_Table_Order_By>>;
  where?: Maybe<Worker_Stats_Table_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootWorker_Stats_Table_AggregateArgs = {
  distinct_on?: Maybe<Array<Worker_Stats_Table_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Stats_Table_Order_By>>;
  where?: Maybe<Worker_Stats_Table_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootWorker_Stats_Table_By_PkArgs = {
  sub_id: Scalars['uuid'];
};


/** subscription root */
export type Subscription_RootWorker_TitleArgs = {
  distinct_on?: Maybe<Array<Worker_Title_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Title_Order_By>>;
  where?: Maybe<Worker_Title_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootWorker_Title_AggregateArgs = {
  distinct_on?: Maybe<Array<Worker_Title_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Title_Order_By>>;
  where?: Maybe<Worker_Title_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootWorker_Title_By_PkArgs = {
  id: Scalars['uuid'];
};

/** columns and relationships of "tag" */
export type Tag = {
   __typename?: 'tag';
  color_hex: Scalars['String'];
  created_at: Scalars['timestamptz'];
  created_by_user_id?: Maybe<Scalars['uuid']>;
  id: Scalars['uuid'];
  /** An object relationship */
  name: Text_Translation;
  name_id: Scalars['uuid'];
  /** An object relationship */
  project?: Maybe<Project>;
  project_id?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  subcontractor?: Maybe<Subcontractor>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  user?: Maybe<User>;
};

/** aggregated selection of "tag" */
export type Tag_Aggregate = {
   __typename?: 'tag_aggregate';
  aggregate?: Maybe<Tag_Aggregate_Fields>;
  nodes: Array<Tag>;
};

/** aggregate fields of "tag" */
export type Tag_Aggregate_Fields = {
   __typename?: 'tag_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Tag_Max_Fields>;
  min?: Maybe<Tag_Min_Fields>;
};


/** aggregate fields of "tag" */
export type Tag_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Tag_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "tag" */
export type Tag_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Tag_Max_Order_By>;
  min?: Maybe<Tag_Min_Order_By>;
};

/** input type for inserting array relation for remote table "tag" */
export type Tag_Arr_Rel_Insert_Input = {
  data: Array<Tag_Insert_Input>;
  on_conflict?: Maybe<Tag_On_Conflict>;
};

/** Boolean expression to filter rows from the table "tag". All fields are combined with a logical 'AND'. */
export type Tag_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Tag_Bool_Exp>>>;
  _not?: Maybe<Tag_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Tag_Bool_Exp>>>;
  color_hex?: Maybe<String_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  created_by_user_id?: Maybe<Uuid_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  name?: Maybe<Text_Translation_Bool_Exp>;
  name_id?: Maybe<Uuid_Comparison_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  subcontractor?: Maybe<Subcontractor_Bool_Exp>;
  subcontractor_id?: Maybe<Uuid_Comparison_Exp>;
  user?: Maybe<User_Bool_Exp>;
};

/** unique or primary key constraints on table "tag" */
export enum Tag_Constraint {
  /** unique or primary key constraint */
  TagPkey = 'tag_pkey'
}

/** input type for inserting data into table "tag" */
export type Tag_Insert_Input = {
  color_hex?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  name_id?: Maybe<Scalars['uuid']>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor?: Maybe<Subcontractor_Obj_Rel_Insert_Input>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  user?: Maybe<User_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Tag_Max_Fields = {
   __typename?: 'tag_max_fields';
  color_hex?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  name_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "tag" */
export type Tag_Max_Order_By = {
  color_hex?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  created_by_user_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Tag_Min_Fields = {
   __typename?: 'tag_min_fields';
  color_hex?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  name_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "tag" */
export type Tag_Min_Order_By = {
  color_hex?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  created_by_user_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "tag" */
export type Tag_Mutation_Response = {
   __typename?: 'tag_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Tag>;
};

/** input type for inserting object relation for remote table "tag" */
export type Tag_Obj_Rel_Insert_Input = {
  data: Tag_Insert_Input;
  on_conflict?: Maybe<Tag_On_Conflict>;
};

/** on conflict condition type for table "tag" */
export type Tag_On_Conflict = {
  constraint: Tag_Constraint;
  update_columns: Array<Tag_Update_Column>;
  where?: Maybe<Tag_Bool_Exp>;
};

/** ordering options when selecting data from "tag" */
export type Tag_Order_By = {
  color_hex?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  created_by_user_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Text_Translation_Order_By>;
  name_id?: Maybe<Order_By>;
  project?: Maybe<Project_Order_By>;
  project_id?: Maybe<Order_By>;
  subcontractor?: Maybe<Subcontractor_Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  user?: Maybe<User_Order_By>;
};

/** primary key columns input for table: "tag" */
export type Tag_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "tag" */
export enum Tag_Select_Column {
  /** column name */
  ColorHex = 'color_hex',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CreatedByUserId = 'created_by_user_id',
  /** column name */
  Id = 'id',
  /** column name */
  NameId = 'name_id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  SubcontractorId = 'subcontractor_id'
}

/** input type for updating data in table "tag" */
export type Tag_Set_Input = {
  color_hex?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  name_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "tag" */
export enum Tag_Update_Column {
  /** column name */
  ColorHex = 'color_hex',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CreatedByUserId = 'created_by_user_id',
  /** column name */
  Id = 'id',
  /** column name */
  NameId = 'name_id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  SubcontractorId = 'subcontractor_id'
}

/** columns and relationships of "task" */
export type Task = {
   __typename?: 'task';
  created_at: Scalars['timestamptz'];
  created_by_uid?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  created_by_user?: Maybe<User>;
  /** An object relationship */
  description: Text_Translation;
  description_id: Scalars['uuid'];
  description_text: Scalars['String'];
  id: Scalars['uuid'];
  /** An object relationship */
  project?: Maybe<Project>;
  project_id?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  report?: Maybe<Report>;
  report_id?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  subcontractor?: Maybe<Subcontractor>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  /** An array relationship */
  task_notes: Array<Task_Note>;
  /** An aggregated array relationship */
  task_notes_aggregate: Task_Note_Aggregate;
  /** An array relationship */
  task_permit_types: Array<Task_Permit_Type>;
  /** An aggregated array relationship */
  task_permit_types_aggregate: Task_Permit_Type_Aggregate;
  /** An array relationship */
  task_ppe_types: Array<Task_Ppe_Type>;
  /** An aggregated array relationship */
  task_ppe_types_aggregate: Task_Ppe_Type_Aggregate;
  /** An array relationship */
  task_steps: Array<Task_Step>;
  /** An aggregated array relationship */
  task_steps_aggregate: Task_Step_Aggregate;
  updated_at: Scalars['timestamptz'];
  updated_by_uid?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  updated_by_user?: Maybe<User>;
};


/** columns and relationships of "task" */
export type TaskTask_NotesArgs = {
  distinct_on?: Maybe<Array<Task_Note_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Note_Order_By>>;
  where?: Maybe<Task_Note_Bool_Exp>;
};


/** columns and relationships of "task" */
export type TaskTask_Notes_AggregateArgs = {
  distinct_on?: Maybe<Array<Task_Note_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Note_Order_By>>;
  where?: Maybe<Task_Note_Bool_Exp>;
};


/** columns and relationships of "task" */
export type TaskTask_Permit_TypesArgs = {
  distinct_on?: Maybe<Array<Task_Permit_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Permit_Type_Order_By>>;
  where?: Maybe<Task_Permit_Type_Bool_Exp>;
};


/** columns and relationships of "task" */
export type TaskTask_Permit_Types_AggregateArgs = {
  distinct_on?: Maybe<Array<Task_Permit_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Permit_Type_Order_By>>;
  where?: Maybe<Task_Permit_Type_Bool_Exp>;
};


/** columns and relationships of "task" */
export type TaskTask_Ppe_TypesArgs = {
  distinct_on?: Maybe<Array<Task_Ppe_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Ppe_Type_Order_By>>;
  where?: Maybe<Task_Ppe_Type_Bool_Exp>;
};


/** columns and relationships of "task" */
export type TaskTask_Ppe_Types_AggregateArgs = {
  distinct_on?: Maybe<Array<Task_Ppe_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Ppe_Type_Order_By>>;
  where?: Maybe<Task_Ppe_Type_Bool_Exp>;
};


/** columns and relationships of "task" */
export type TaskTask_StepsArgs = {
  distinct_on?: Maybe<Array<Task_Step_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Step_Order_By>>;
  where?: Maybe<Task_Step_Bool_Exp>;
};


/** columns and relationships of "task" */
export type TaskTask_Steps_AggregateArgs = {
  distinct_on?: Maybe<Array<Task_Step_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Step_Order_By>>;
  where?: Maybe<Task_Step_Bool_Exp>;
};

/** aggregated selection of "task" */
export type Task_Aggregate = {
   __typename?: 'task_aggregate';
  aggregate?: Maybe<Task_Aggregate_Fields>;
  nodes: Array<Task>;
};

/** aggregate fields of "task" */
export type Task_Aggregate_Fields = {
   __typename?: 'task_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Task_Max_Fields>;
  min?: Maybe<Task_Min_Fields>;
};


/** aggregate fields of "task" */
export type Task_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Task_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "task" */
export type Task_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Task_Max_Order_By>;
  min?: Maybe<Task_Min_Order_By>;
};

/** input type for inserting array relation for remote table "task" */
export type Task_Arr_Rel_Insert_Input = {
  data: Array<Task_Insert_Input>;
  on_conflict?: Maybe<Task_On_Conflict>;
};

/** Boolean expression to filter rows from the table "task". All fields are combined with a logical 'AND'. */
export type Task_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Task_Bool_Exp>>>;
  _not?: Maybe<Task_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Task_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  created_by_uid?: Maybe<Uuid_Comparison_Exp>;
  created_by_user?: Maybe<User_Bool_Exp>;
  description?: Maybe<Text_Translation_Bool_Exp>;
  description_id?: Maybe<Uuid_Comparison_Exp>;
  description_text?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  report?: Maybe<Report_Bool_Exp>;
  report_id?: Maybe<Uuid_Comparison_Exp>;
  subcontractor?: Maybe<Subcontractor_Bool_Exp>;
  subcontractor_id?: Maybe<Uuid_Comparison_Exp>;
  task_notes?: Maybe<Task_Note_Bool_Exp>;
  task_permit_types?: Maybe<Task_Permit_Type_Bool_Exp>;
  task_ppe_types?: Maybe<Task_Ppe_Type_Bool_Exp>;
  task_steps?: Maybe<Task_Step_Bool_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  updated_by_uid?: Maybe<Uuid_Comparison_Exp>;
  updated_by_user?: Maybe<User_Bool_Exp>;
};

/** unique or primary key constraints on table "task" */
export enum Task_Constraint {
  /** unique or primary key constraint */
  TaskPkey = 'task_pkey'
}

/** input type for inserting data into table "task" */
export type Task_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_uid?: Maybe<Scalars['uuid']>;
  created_by_user?: Maybe<User_Obj_Rel_Insert_Input>;
  description?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  description_id?: Maybe<Scalars['uuid']>;
  description_text?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_id?: Maybe<Scalars['uuid']>;
  report?: Maybe<Report_Obj_Rel_Insert_Input>;
  report_id?: Maybe<Scalars['uuid']>;
  subcontractor?: Maybe<Subcontractor_Obj_Rel_Insert_Input>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  task_notes?: Maybe<Task_Note_Arr_Rel_Insert_Input>;
  task_permit_types?: Maybe<Task_Permit_Type_Arr_Rel_Insert_Input>;
  task_ppe_types?: Maybe<Task_Ppe_Type_Arr_Rel_Insert_Input>;
  task_steps?: Maybe<Task_Step_Arr_Rel_Insert_Input>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_uid?: Maybe<Scalars['uuid']>;
  updated_by_user?: Maybe<User_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Task_Max_Fields = {
   __typename?: 'task_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_uid?: Maybe<Scalars['uuid']>;
  description_id?: Maybe<Scalars['uuid']>;
  description_text?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  report_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_uid?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "task" */
export type Task_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  created_by_uid?: Maybe<Order_By>;
  description_id?: Maybe<Order_By>;
  description_text?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  report_id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_uid?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Task_Min_Fields = {
   __typename?: 'task_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_uid?: Maybe<Scalars['uuid']>;
  description_id?: Maybe<Scalars['uuid']>;
  description_text?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  report_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_uid?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "task" */
export type Task_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  created_by_uid?: Maybe<Order_By>;
  description_id?: Maybe<Order_By>;
  description_text?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  report_id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_uid?: Maybe<Order_By>;
};

/** response of any mutation on the table "task" */
export type Task_Mutation_Response = {
   __typename?: 'task_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Task>;
};

/** columns and relationships of "task_note" */
export type Task_Note = {
   __typename?: 'task_note';
  created_at?: Maybe<Scalars['timestamp']>;
  id: Scalars['uuid'];
  /** An object relationship */
  subcontractor?: Maybe<Subcontractor>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  task: Task;
  task_id: Scalars['uuid'];
  text: Scalars['String'];
};

/** aggregated selection of "task_note" */
export type Task_Note_Aggregate = {
   __typename?: 'task_note_aggregate';
  aggregate?: Maybe<Task_Note_Aggregate_Fields>;
  nodes: Array<Task_Note>;
};

/** aggregate fields of "task_note" */
export type Task_Note_Aggregate_Fields = {
   __typename?: 'task_note_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Task_Note_Max_Fields>;
  min?: Maybe<Task_Note_Min_Fields>;
};


/** aggregate fields of "task_note" */
export type Task_Note_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Task_Note_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "task_note" */
export type Task_Note_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Task_Note_Max_Order_By>;
  min?: Maybe<Task_Note_Min_Order_By>;
};

/** input type for inserting array relation for remote table "task_note" */
export type Task_Note_Arr_Rel_Insert_Input = {
  data: Array<Task_Note_Insert_Input>;
  on_conflict?: Maybe<Task_Note_On_Conflict>;
};

/** Boolean expression to filter rows from the table "task_note". All fields are combined with a logical 'AND'. */
export type Task_Note_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Task_Note_Bool_Exp>>>;
  _not?: Maybe<Task_Note_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Task_Note_Bool_Exp>>>;
  created_at?: Maybe<Timestamp_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  subcontractor?: Maybe<Subcontractor_Bool_Exp>;
  subcontractor_id?: Maybe<Uuid_Comparison_Exp>;
  task?: Maybe<Task_Bool_Exp>;
  task_id?: Maybe<Uuid_Comparison_Exp>;
  text?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "task_note" */
export enum Task_Note_Constraint {
  /** unique or primary key constraint */
  TaskNotePkey = 'task_note_pkey'
}

/** input type for inserting data into table "task_note" */
export type Task_Note_Insert_Input = {
  created_at?: Maybe<Scalars['timestamp']>;
  id?: Maybe<Scalars['uuid']>;
  subcontractor?: Maybe<Subcontractor_Obj_Rel_Insert_Input>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  task?: Maybe<Task_Obj_Rel_Insert_Input>;
  task_id?: Maybe<Scalars['uuid']>;
  text?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Task_Note_Max_Fields = {
   __typename?: 'task_note_max_fields';
  created_at?: Maybe<Scalars['timestamp']>;
  id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  task_id?: Maybe<Scalars['uuid']>;
  text?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "task_note" */
export type Task_Note_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  task_id?: Maybe<Order_By>;
  text?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Task_Note_Min_Fields = {
   __typename?: 'task_note_min_fields';
  created_at?: Maybe<Scalars['timestamp']>;
  id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  task_id?: Maybe<Scalars['uuid']>;
  text?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "task_note" */
export type Task_Note_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  task_id?: Maybe<Order_By>;
  text?: Maybe<Order_By>;
};

/** response of any mutation on the table "task_note" */
export type Task_Note_Mutation_Response = {
   __typename?: 'task_note_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Task_Note>;
};

/** input type for inserting object relation for remote table "task_note" */
export type Task_Note_Obj_Rel_Insert_Input = {
  data: Task_Note_Insert_Input;
  on_conflict?: Maybe<Task_Note_On_Conflict>;
};

/** on conflict condition type for table "task_note" */
export type Task_Note_On_Conflict = {
  constraint: Task_Note_Constraint;
  update_columns: Array<Task_Note_Update_Column>;
  where?: Maybe<Task_Note_Bool_Exp>;
};

/** ordering options when selecting data from "task_note" */
export type Task_Note_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  subcontractor?: Maybe<Subcontractor_Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  task?: Maybe<Task_Order_By>;
  task_id?: Maybe<Order_By>;
  text?: Maybe<Order_By>;
};

/** primary key columns input for table: "task_note" */
export type Task_Note_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "task_note" */
export enum Task_Note_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  TaskId = 'task_id',
  /** column name */
  Text = 'text'
}

/** input type for updating data in table "task_note" */
export type Task_Note_Set_Input = {
  created_at?: Maybe<Scalars['timestamp']>;
  id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  task_id?: Maybe<Scalars['uuid']>;
  text?: Maybe<Scalars['String']>;
};

/** update columns of table "task_note" */
export enum Task_Note_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  TaskId = 'task_id',
  /** column name */
  Text = 'text'
}

/** input type for inserting object relation for remote table "task" */
export type Task_Obj_Rel_Insert_Input = {
  data: Task_Insert_Input;
  on_conflict?: Maybe<Task_On_Conflict>;
};

/** on conflict condition type for table "task" */
export type Task_On_Conflict = {
  constraint: Task_Constraint;
  update_columns: Array<Task_Update_Column>;
  where?: Maybe<Task_Bool_Exp>;
};

/** ordering options when selecting data from "task" */
export type Task_Order_By = {
  created_at?: Maybe<Order_By>;
  created_by_uid?: Maybe<Order_By>;
  created_by_user?: Maybe<User_Order_By>;
  description?: Maybe<Text_Translation_Order_By>;
  description_id?: Maybe<Order_By>;
  description_text?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project?: Maybe<Project_Order_By>;
  project_id?: Maybe<Order_By>;
  report?: Maybe<Report_Order_By>;
  report_id?: Maybe<Order_By>;
  subcontractor?: Maybe<Subcontractor_Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  task_notes_aggregate?: Maybe<Task_Note_Aggregate_Order_By>;
  task_permit_types_aggregate?: Maybe<Task_Permit_Type_Aggregate_Order_By>;
  task_ppe_types_aggregate?: Maybe<Task_Ppe_Type_Aggregate_Order_By>;
  task_steps_aggregate?: Maybe<Task_Step_Aggregate_Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_uid?: Maybe<Order_By>;
  updated_by_user?: Maybe<User_Order_By>;
};

/** columns and relationships of "task_permit_type" */
export type Task_Permit_Type = {
   __typename?: 'task_permit_type';
  created_at?: Maybe<Scalars['timestamptz']>;
  /** An object relationship */
  permit_type: Permit_Type;
  permit_type_id: Scalars['uuid'];
  /** An object relationship */
  task: Task;
  task_id: Scalars['uuid'];
};

/** aggregated selection of "task_permit_type" */
export type Task_Permit_Type_Aggregate = {
   __typename?: 'task_permit_type_aggregate';
  aggregate?: Maybe<Task_Permit_Type_Aggregate_Fields>;
  nodes: Array<Task_Permit_Type>;
};

/** aggregate fields of "task_permit_type" */
export type Task_Permit_Type_Aggregate_Fields = {
   __typename?: 'task_permit_type_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Task_Permit_Type_Max_Fields>;
  min?: Maybe<Task_Permit_Type_Min_Fields>;
};


/** aggregate fields of "task_permit_type" */
export type Task_Permit_Type_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Task_Permit_Type_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "task_permit_type" */
export type Task_Permit_Type_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Task_Permit_Type_Max_Order_By>;
  min?: Maybe<Task_Permit_Type_Min_Order_By>;
};

/** input type for inserting array relation for remote table "task_permit_type" */
export type Task_Permit_Type_Arr_Rel_Insert_Input = {
  data: Array<Task_Permit_Type_Insert_Input>;
  on_conflict?: Maybe<Task_Permit_Type_On_Conflict>;
};

/** Boolean expression to filter rows from the table "task_permit_type". All fields are combined with a logical 'AND'. */
export type Task_Permit_Type_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Task_Permit_Type_Bool_Exp>>>;
  _not?: Maybe<Task_Permit_Type_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Task_Permit_Type_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  permit_type?: Maybe<Permit_Type_Bool_Exp>;
  permit_type_id?: Maybe<Uuid_Comparison_Exp>;
  task?: Maybe<Task_Bool_Exp>;
  task_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "task_permit_type" */
export enum Task_Permit_Type_Constraint {
  /** unique or primary key constraint */
  TaskPermitTypePkey = 'task_permit_type_pkey'
}

/** input type for inserting data into table "task_permit_type" */
export type Task_Permit_Type_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  permit_type?: Maybe<Permit_Type_Obj_Rel_Insert_Input>;
  permit_type_id?: Maybe<Scalars['uuid']>;
  task?: Maybe<Task_Obj_Rel_Insert_Input>;
  task_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Task_Permit_Type_Max_Fields = {
   __typename?: 'task_permit_type_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  permit_type_id?: Maybe<Scalars['uuid']>;
  task_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "task_permit_type" */
export type Task_Permit_Type_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  permit_type_id?: Maybe<Order_By>;
  task_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Task_Permit_Type_Min_Fields = {
   __typename?: 'task_permit_type_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  permit_type_id?: Maybe<Scalars['uuid']>;
  task_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "task_permit_type" */
export type Task_Permit_Type_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  permit_type_id?: Maybe<Order_By>;
  task_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "task_permit_type" */
export type Task_Permit_Type_Mutation_Response = {
   __typename?: 'task_permit_type_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Task_Permit_Type>;
};

/** input type for inserting object relation for remote table "task_permit_type" */
export type Task_Permit_Type_Obj_Rel_Insert_Input = {
  data: Task_Permit_Type_Insert_Input;
  on_conflict?: Maybe<Task_Permit_Type_On_Conflict>;
};

/** on conflict condition type for table "task_permit_type" */
export type Task_Permit_Type_On_Conflict = {
  constraint: Task_Permit_Type_Constraint;
  update_columns: Array<Task_Permit_Type_Update_Column>;
  where?: Maybe<Task_Permit_Type_Bool_Exp>;
};

/** ordering options when selecting data from "task_permit_type" */
export type Task_Permit_Type_Order_By = {
  created_at?: Maybe<Order_By>;
  permit_type?: Maybe<Permit_Type_Order_By>;
  permit_type_id?: Maybe<Order_By>;
  task?: Maybe<Task_Order_By>;
  task_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "task_permit_type" */
export type Task_Permit_Type_Pk_Columns_Input = {
  permit_type_id: Scalars['uuid'];
  task_id: Scalars['uuid'];
};

/** select columns of table "task_permit_type" */
export enum Task_Permit_Type_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  PermitTypeId = 'permit_type_id',
  /** column name */
  TaskId = 'task_id'
}

/** input type for updating data in table "task_permit_type" */
export type Task_Permit_Type_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  permit_type_id?: Maybe<Scalars['uuid']>;
  task_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "task_permit_type" */
export enum Task_Permit_Type_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  PermitTypeId = 'permit_type_id',
  /** column name */
  TaskId = 'task_id'
}

/** primary key columns input for table: "task" */
export type Task_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** columns and relationships of "task_ppe_type" */
export type Task_Ppe_Type = {
   __typename?: 'task_ppe_type';
  created_at?: Maybe<Scalars['timestamptz']>;
  /** An object relationship */
  ppe_type: Ppe_Type;
  ppe_type_id: Scalars['uuid'];
  /** An object relationship */
  task: Task;
  task_id: Scalars['uuid'];
};

/** aggregated selection of "task_ppe_type" */
export type Task_Ppe_Type_Aggregate = {
   __typename?: 'task_ppe_type_aggregate';
  aggregate?: Maybe<Task_Ppe_Type_Aggregate_Fields>;
  nodes: Array<Task_Ppe_Type>;
};

/** aggregate fields of "task_ppe_type" */
export type Task_Ppe_Type_Aggregate_Fields = {
   __typename?: 'task_ppe_type_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Task_Ppe_Type_Max_Fields>;
  min?: Maybe<Task_Ppe_Type_Min_Fields>;
};


/** aggregate fields of "task_ppe_type" */
export type Task_Ppe_Type_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Task_Ppe_Type_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "task_ppe_type" */
export type Task_Ppe_Type_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Task_Ppe_Type_Max_Order_By>;
  min?: Maybe<Task_Ppe_Type_Min_Order_By>;
};

/** input type for inserting array relation for remote table "task_ppe_type" */
export type Task_Ppe_Type_Arr_Rel_Insert_Input = {
  data: Array<Task_Ppe_Type_Insert_Input>;
  on_conflict?: Maybe<Task_Ppe_Type_On_Conflict>;
};

/** Boolean expression to filter rows from the table "task_ppe_type". All fields are combined with a logical 'AND'. */
export type Task_Ppe_Type_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Task_Ppe_Type_Bool_Exp>>>;
  _not?: Maybe<Task_Ppe_Type_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Task_Ppe_Type_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  ppe_type?: Maybe<Ppe_Type_Bool_Exp>;
  ppe_type_id?: Maybe<Uuid_Comparison_Exp>;
  task?: Maybe<Task_Bool_Exp>;
  task_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "task_ppe_type" */
export enum Task_Ppe_Type_Constraint {
  /** unique or primary key constraint */
  TaskPpeTypePkey = 'task_ppe_type_pkey'
}

/** input type for inserting data into table "task_ppe_type" */
export type Task_Ppe_Type_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  ppe_type?: Maybe<Ppe_Type_Obj_Rel_Insert_Input>;
  ppe_type_id?: Maybe<Scalars['uuid']>;
  task?: Maybe<Task_Obj_Rel_Insert_Input>;
  task_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Task_Ppe_Type_Max_Fields = {
   __typename?: 'task_ppe_type_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  ppe_type_id?: Maybe<Scalars['uuid']>;
  task_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "task_ppe_type" */
export type Task_Ppe_Type_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  ppe_type_id?: Maybe<Order_By>;
  task_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Task_Ppe_Type_Min_Fields = {
   __typename?: 'task_ppe_type_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  ppe_type_id?: Maybe<Scalars['uuid']>;
  task_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "task_ppe_type" */
export type Task_Ppe_Type_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  ppe_type_id?: Maybe<Order_By>;
  task_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "task_ppe_type" */
export type Task_Ppe_Type_Mutation_Response = {
   __typename?: 'task_ppe_type_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Task_Ppe_Type>;
};

/** input type for inserting object relation for remote table "task_ppe_type" */
export type Task_Ppe_Type_Obj_Rel_Insert_Input = {
  data: Task_Ppe_Type_Insert_Input;
  on_conflict?: Maybe<Task_Ppe_Type_On_Conflict>;
};

/** on conflict condition type for table "task_ppe_type" */
export type Task_Ppe_Type_On_Conflict = {
  constraint: Task_Ppe_Type_Constraint;
  update_columns: Array<Task_Ppe_Type_Update_Column>;
  where?: Maybe<Task_Ppe_Type_Bool_Exp>;
};

/** ordering options when selecting data from "task_ppe_type" */
export type Task_Ppe_Type_Order_By = {
  created_at?: Maybe<Order_By>;
  ppe_type?: Maybe<Ppe_Type_Order_By>;
  ppe_type_id?: Maybe<Order_By>;
  task?: Maybe<Task_Order_By>;
  task_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "task_ppe_type" */
export type Task_Ppe_Type_Pk_Columns_Input = {
  ppe_type_id: Scalars['uuid'];
  task_id: Scalars['uuid'];
};

/** select columns of table "task_ppe_type" */
export enum Task_Ppe_Type_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  PpeTypeId = 'ppe_type_id',
  /** column name */
  TaskId = 'task_id'
}

/** input type for updating data in table "task_ppe_type" */
export type Task_Ppe_Type_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  ppe_type_id?: Maybe<Scalars['uuid']>;
  task_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "task_ppe_type" */
export enum Task_Ppe_Type_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  PpeTypeId = 'ppe_type_id',
  /** column name */
  TaskId = 'task_id'
}

/** select columns of table "task" */
export enum Task_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CreatedByUid = 'created_by_uid',
  /** column name */
  DescriptionId = 'description_id',
  /** column name */
  DescriptionText = 'description_text',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  ReportId = 'report_id',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UpdatedByUid = 'updated_by_uid'
}

/** input type for updating data in table "task" */
export type Task_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_uid?: Maybe<Scalars['uuid']>;
  description_id?: Maybe<Scalars['uuid']>;
  description_text?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  report_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_uid?: Maybe<Scalars['uuid']>;
};

/**
 * sorted by sort_index
 * 
 * 
 * columns and relationships of "task_step"
 */
export type Task_Step = {
   __typename?: 'task_step';
  created_at: Scalars['timestamptz'];
  /** An object relationship */
  description: Text_Translation;
  description_id: Scalars['uuid'];
  description_text?: Maybe<Scalars['String']>;
  id: Scalars['uuid'];
  sort_index: Scalars['numeric'];
  /** An object relationship */
  task: Task;
  task_id: Scalars['uuid'];
  /** An array relationship */
  task_step_hazards: Array<Task_Step_Hazard>;
  /** An aggregated array relationship */
  task_step_hazards_aggregate: Task_Step_Hazard_Aggregate;
};


/**
 * sorted by sort_index
 * 
 * 
 * columns and relationships of "task_step"
 */
export type Task_StepTask_Step_HazardsArgs = {
  distinct_on?: Maybe<Array<Task_Step_Hazard_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Step_Hazard_Order_By>>;
  where?: Maybe<Task_Step_Hazard_Bool_Exp>;
};


/**
 * sorted by sort_index
 * 
 * 
 * columns and relationships of "task_step"
 */
export type Task_StepTask_Step_Hazards_AggregateArgs = {
  distinct_on?: Maybe<Array<Task_Step_Hazard_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Step_Hazard_Order_By>>;
  where?: Maybe<Task_Step_Hazard_Bool_Exp>;
};

/** aggregated selection of "task_step" */
export type Task_Step_Aggregate = {
   __typename?: 'task_step_aggregate';
  aggregate?: Maybe<Task_Step_Aggregate_Fields>;
  nodes: Array<Task_Step>;
};

/** aggregate fields of "task_step" */
export type Task_Step_Aggregate_Fields = {
   __typename?: 'task_step_aggregate_fields';
  avg?: Maybe<Task_Step_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Task_Step_Max_Fields>;
  min?: Maybe<Task_Step_Min_Fields>;
  stddev?: Maybe<Task_Step_Stddev_Fields>;
  stddev_pop?: Maybe<Task_Step_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Task_Step_Stddev_Samp_Fields>;
  sum?: Maybe<Task_Step_Sum_Fields>;
  var_pop?: Maybe<Task_Step_Var_Pop_Fields>;
  var_samp?: Maybe<Task_Step_Var_Samp_Fields>;
  variance?: Maybe<Task_Step_Variance_Fields>;
};


/** aggregate fields of "task_step" */
export type Task_Step_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Task_Step_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "task_step" */
export type Task_Step_Aggregate_Order_By = {
  avg?: Maybe<Task_Step_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Task_Step_Max_Order_By>;
  min?: Maybe<Task_Step_Min_Order_By>;
  stddev?: Maybe<Task_Step_Stddev_Order_By>;
  stddev_pop?: Maybe<Task_Step_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Task_Step_Stddev_Samp_Order_By>;
  sum?: Maybe<Task_Step_Sum_Order_By>;
  var_pop?: Maybe<Task_Step_Var_Pop_Order_By>;
  var_samp?: Maybe<Task_Step_Var_Samp_Order_By>;
  variance?: Maybe<Task_Step_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "task_step" */
export type Task_Step_Arr_Rel_Insert_Input = {
  data: Array<Task_Step_Insert_Input>;
  on_conflict?: Maybe<Task_Step_On_Conflict>;
};

/** aggregate avg on columns */
export type Task_Step_Avg_Fields = {
   __typename?: 'task_step_avg_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "task_step" */
export type Task_Step_Avg_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "task_step". All fields are combined with a logical 'AND'. */
export type Task_Step_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Task_Step_Bool_Exp>>>;
  _not?: Maybe<Task_Step_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Task_Step_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  description?: Maybe<Text_Translation_Bool_Exp>;
  description_id?: Maybe<Uuid_Comparison_Exp>;
  description_text?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  sort_index?: Maybe<Numeric_Comparison_Exp>;
  task?: Maybe<Task_Bool_Exp>;
  task_id?: Maybe<Uuid_Comparison_Exp>;
  task_step_hazards?: Maybe<Task_Step_Hazard_Bool_Exp>;
};

/** unique or primary key constraints on table "task_step" */
export enum Task_Step_Constraint {
  /** unique or primary key constraint */
  TaskStepPkey = 'task_step_pkey'
}

/**
 * sorted by id
 * 
 * 
 * columns and relationships of "task_step_hazard"
 */
export type Task_Step_Hazard = {
   __typename?: 'task_step_hazard';
  /** An object relationship */
  control: Text_Translation;
  control_id: Scalars['uuid'];
  control_text: Scalars['String'];
  created_at: Scalars['timestamptz'];
  /** An object relationship */
  description: Text_Translation;
  description_id: Scalars['uuid'];
  description_text: Scalars['String'];
  id: Scalars['uuid'];
  sort_index: Scalars['numeric'];
  step_id: Scalars['uuid'];
  /** An object relationship */
  task_step: Task_Step;
};

/** aggregated selection of "task_step_hazard" */
export type Task_Step_Hazard_Aggregate = {
   __typename?: 'task_step_hazard_aggregate';
  aggregate?: Maybe<Task_Step_Hazard_Aggregate_Fields>;
  nodes: Array<Task_Step_Hazard>;
};

/** aggregate fields of "task_step_hazard" */
export type Task_Step_Hazard_Aggregate_Fields = {
   __typename?: 'task_step_hazard_aggregate_fields';
  avg?: Maybe<Task_Step_Hazard_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Task_Step_Hazard_Max_Fields>;
  min?: Maybe<Task_Step_Hazard_Min_Fields>;
  stddev?: Maybe<Task_Step_Hazard_Stddev_Fields>;
  stddev_pop?: Maybe<Task_Step_Hazard_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Task_Step_Hazard_Stddev_Samp_Fields>;
  sum?: Maybe<Task_Step_Hazard_Sum_Fields>;
  var_pop?: Maybe<Task_Step_Hazard_Var_Pop_Fields>;
  var_samp?: Maybe<Task_Step_Hazard_Var_Samp_Fields>;
  variance?: Maybe<Task_Step_Hazard_Variance_Fields>;
};


/** aggregate fields of "task_step_hazard" */
export type Task_Step_Hazard_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Task_Step_Hazard_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "task_step_hazard" */
export type Task_Step_Hazard_Aggregate_Order_By = {
  avg?: Maybe<Task_Step_Hazard_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Task_Step_Hazard_Max_Order_By>;
  min?: Maybe<Task_Step_Hazard_Min_Order_By>;
  stddev?: Maybe<Task_Step_Hazard_Stddev_Order_By>;
  stddev_pop?: Maybe<Task_Step_Hazard_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Task_Step_Hazard_Stddev_Samp_Order_By>;
  sum?: Maybe<Task_Step_Hazard_Sum_Order_By>;
  var_pop?: Maybe<Task_Step_Hazard_Var_Pop_Order_By>;
  var_samp?: Maybe<Task_Step_Hazard_Var_Samp_Order_By>;
  variance?: Maybe<Task_Step_Hazard_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "task_step_hazard" */
export type Task_Step_Hazard_Arr_Rel_Insert_Input = {
  data: Array<Task_Step_Hazard_Insert_Input>;
  on_conflict?: Maybe<Task_Step_Hazard_On_Conflict>;
};

/** aggregate avg on columns */
export type Task_Step_Hazard_Avg_Fields = {
   __typename?: 'task_step_hazard_avg_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "task_step_hazard" */
export type Task_Step_Hazard_Avg_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "task_step_hazard". All fields are combined with a logical 'AND'. */
export type Task_Step_Hazard_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Task_Step_Hazard_Bool_Exp>>>;
  _not?: Maybe<Task_Step_Hazard_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Task_Step_Hazard_Bool_Exp>>>;
  control?: Maybe<Text_Translation_Bool_Exp>;
  control_id?: Maybe<Uuid_Comparison_Exp>;
  control_text?: Maybe<String_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  description?: Maybe<Text_Translation_Bool_Exp>;
  description_id?: Maybe<Uuid_Comparison_Exp>;
  description_text?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  sort_index?: Maybe<Numeric_Comparison_Exp>;
  step_id?: Maybe<Uuid_Comparison_Exp>;
  task_step?: Maybe<Task_Step_Bool_Exp>;
};

/** unique or primary key constraints on table "task_step_hazard" */
export enum Task_Step_Hazard_Constraint {
  /** unique or primary key constraint */
  TaskStepHazardPkey = 'task_step_hazard_pkey'
}

/** input type for incrementing integer column in table "task_step_hazard" */
export type Task_Step_Hazard_Inc_Input = {
  sort_index?: Maybe<Scalars['numeric']>;
};

/** input type for inserting data into table "task_step_hazard" */
export type Task_Step_Hazard_Insert_Input = {
  control?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  control_id?: Maybe<Scalars['uuid']>;
  control_text?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  description_id?: Maybe<Scalars['uuid']>;
  description_text?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  sort_index?: Maybe<Scalars['numeric']>;
  step_id?: Maybe<Scalars['uuid']>;
  task_step?: Maybe<Task_Step_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Task_Step_Hazard_Max_Fields = {
   __typename?: 'task_step_hazard_max_fields';
  control_id?: Maybe<Scalars['uuid']>;
  control_text?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  description_id?: Maybe<Scalars['uuid']>;
  description_text?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  sort_index?: Maybe<Scalars['numeric']>;
  step_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "task_step_hazard" */
export type Task_Step_Hazard_Max_Order_By = {
  control_id?: Maybe<Order_By>;
  control_text?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  description_id?: Maybe<Order_By>;
  description_text?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  sort_index?: Maybe<Order_By>;
  step_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Task_Step_Hazard_Min_Fields = {
   __typename?: 'task_step_hazard_min_fields';
  control_id?: Maybe<Scalars['uuid']>;
  control_text?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  description_id?: Maybe<Scalars['uuid']>;
  description_text?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  sort_index?: Maybe<Scalars['numeric']>;
  step_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "task_step_hazard" */
export type Task_Step_Hazard_Min_Order_By = {
  control_id?: Maybe<Order_By>;
  control_text?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  description_id?: Maybe<Order_By>;
  description_text?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  sort_index?: Maybe<Order_By>;
  step_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "task_step_hazard" */
export type Task_Step_Hazard_Mutation_Response = {
   __typename?: 'task_step_hazard_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Task_Step_Hazard>;
};

/** input type for inserting object relation for remote table "task_step_hazard" */
export type Task_Step_Hazard_Obj_Rel_Insert_Input = {
  data: Task_Step_Hazard_Insert_Input;
  on_conflict?: Maybe<Task_Step_Hazard_On_Conflict>;
};

/** on conflict condition type for table "task_step_hazard" */
export type Task_Step_Hazard_On_Conflict = {
  constraint: Task_Step_Hazard_Constraint;
  update_columns: Array<Task_Step_Hazard_Update_Column>;
  where?: Maybe<Task_Step_Hazard_Bool_Exp>;
};

/** ordering options when selecting data from "task_step_hazard" */
export type Task_Step_Hazard_Order_By = {
  control?: Maybe<Text_Translation_Order_By>;
  control_id?: Maybe<Order_By>;
  control_text?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  description?: Maybe<Text_Translation_Order_By>;
  description_id?: Maybe<Order_By>;
  description_text?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  sort_index?: Maybe<Order_By>;
  step_id?: Maybe<Order_By>;
  task_step?: Maybe<Task_Step_Order_By>;
};

/** primary key columns input for table: "task_step_hazard" */
export type Task_Step_Hazard_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "task_step_hazard" */
export enum Task_Step_Hazard_Select_Column {
  /** column name */
  ControlId = 'control_id',
  /** column name */
  ControlText = 'control_text',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DescriptionId = 'description_id',
  /** column name */
  DescriptionText = 'description_text',
  /** column name */
  Id = 'id',
  /** column name */
  SortIndex = 'sort_index',
  /** column name */
  StepId = 'step_id'
}

/** input type for updating data in table "task_step_hazard" */
export type Task_Step_Hazard_Set_Input = {
  control_id?: Maybe<Scalars['uuid']>;
  control_text?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  description_id?: Maybe<Scalars['uuid']>;
  description_text?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  sort_index?: Maybe<Scalars['numeric']>;
  step_id?: Maybe<Scalars['uuid']>;
};

/** aggregate stddev on columns */
export type Task_Step_Hazard_Stddev_Fields = {
   __typename?: 'task_step_hazard_stddev_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "task_step_hazard" */
export type Task_Step_Hazard_Stddev_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Task_Step_Hazard_Stddev_Pop_Fields = {
   __typename?: 'task_step_hazard_stddev_pop_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "task_step_hazard" */
export type Task_Step_Hazard_Stddev_Pop_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Task_Step_Hazard_Stddev_Samp_Fields = {
   __typename?: 'task_step_hazard_stddev_samp_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "task_step_hazard" */
export type Task_Step_Hazard_Stddev_Samp_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Task_Step_Hazard_Sum_Fields = {
   __typename?: 'task_step_hazard_sum_fields';
  sort_index?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "task_step_hazard" */
export type Task_Step_Hazard_Sum_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** update columns of table "task_step_hazard" */
export enum Task_Step_Hazard_Update_Column {
  /** column name */
  ControlId = 'control_id',
  /** column name */
  ControlText = 'control_text',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DescriptionId = 'description_id',
  /** column name */
  DescriptionText = 'description_text',
  /** column name */
  Id = 'id',
  /** column name */
  SortIndex = 'sort_index',
  /** column name */
  StepId = 'step_id'
}

/** aggregate var_pop on columns */
export type Task_Step_Hazard_Var_Pop_Fields = {
   __typename?: 'task_step_hazard_var_pop_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "task_step_hazard" */
export type Task_Step_Hazard_Var_Pop_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Task_Step_Hazard_Var_Samp_Fields = {
   __typename?: 'task_step_hazard_var_samp_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "task_step_hazard" */
export type Task_Step_Hazard_Var_Samp_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Task_Step_Hazard_Variance_Fields = {
   __typename?: 'task_step_hazard_variance_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "task_step_hazard" */
export type Task_Step_Hazard_Variance_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** input type for incrementing integer column in table "task_step" */
export type Task_Step_Inc_Input = {
  sort_index?: Maybe<Scalars['numeric']>;
};

/** input type for inserting data into table "task_step" */
export type Task_Step_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  description_id?: Maybe<Scalars['uuid']>;
  description_text?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  sort_index?: Maybe<Scalars['numeric']>;
  task?: Maybe<Task_Obj_Rel_Insert_Input>;
  task_id?: Maybe<Scalars['uuid']>;
  task_step_hazards?: Maybe<Task_Step_Hazard_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Task_Step_Max_Fields = {
   __typename?: 'task_step_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  description_id?: Maybe<Scalars['uuid']>;
  description_text?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  sort_index?: Maybe<Scalars['numeric']>;
  task_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "task_step" */
export type Task_Step_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  description_id?: Maybe<Order_By>;
  description_text?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  sort_index?: Maybe<Order_By>;
  task_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Task_Step_Min_Fields = {
   __typename?: 'task_step_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  description_id?: Maybe<Scalars['uuid']>;
  description_text?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  sort_index?: Maybe<Scalars['numeric']>;
  task_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "task_step" */
export type Task_Step_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  description_id?: Maybe<Order_By>;
  description_text?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  sort_index?: Maybe<Order_By>;
  task_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "task_step" */
export type Task_Step_Mutation_Response = {
   __typename?: 'task_step_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Task_Step>;
};

/** input type for inserting object relation for remote table "task_step" */
export type Task_Step_Obj_Rel_Insert_Input = {
  data: Task_Step_Insert_Input;
  on_conflict?: Maybe<Task_Step_On_Conflict>;
};

/** on conflict condition type for table "task_step" */
export type Task_Step_On_Conflict = {
  constraint: Task_Step_Constraint;
  update_columns: Array<Task_Step_Update_Column>;
  where?: Maybe<Task_Step_Bool_Exp>;
};

/** ordering options when selecting data from "task_step" */
export type Task_Step_Order_By = {
  created_at?: Maybe<Order_By>;
  description?: Maybe<Text_Translation_Order_By>;
  description_id?: Maybe<Order_By>;
  description_text?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  sort_index?: Maybe<Order_By>;
  task?: Maybe<Task_Order_By>;
  task_id?: Maybe<Order_By>;
  task_step_hazards_aggregate?: Maybe<Task_Step_Hazard_Aggregate_Order_By>;
};

/** primary key columns input for table: "task_step" */
export type Task_Step_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "task_step" */
export enum Task_Step_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DescriptionId = 'description_id',
  /** column name */
  DescriptionText = 'description_text',
  /** column name */
  Id = 'id',
  /** column name */
  SortIndex = 'sort_index',
  /** column name */
  TaskId = 'task_id'
}

/** input type for updating data in table "task_step" */
export type Task_Step_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  description_id?: Maybe<Scalars['uuid']>;
  description_text?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  sort_index?: Maybe<Scalars['numeric']>;
  task_id?: Maybe<Scalars['uuid']>;
};

/** aggregate stddev on columns */
export type Task_Step_Stddev_Fields = {
   __typename?: 'task_step_stddev_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "task_step" */
export type Task_Step_Stddev_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Task_Step_Stddev_Pop_Fields = {
   __typename?: 'task_step_stddev_pop_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "task_step" */
export type Task_Step_Stddev_Pop_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Task_Step_Stddev_Samp_Fields = {
   __typename?: 'task_step_stddev_samp_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "task_step" */
export type Task_Step_Stddev_Samp_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Task_Step_Sum_Fields = {
   __typename?: 'task_step_sum_fields';
  sort_index?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "task_step" */
export type Task_Step_Sum_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** update columns of table "task_step" */
export enum Task_Step_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DescriptionId = 'description_id',
  /** column name */
  DescriptionText = 'description_text',
  /** column name */
  Id = 'id',
  /** column name */
  SortIndex = 'sort_index',
  /** column name */
  TaskId = 'task_id'
}

/** aggregate var_pop on columns */
export type Task_Step_Var_Pop_Fields = {
   __typename?: 'task_step_var_pop_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "task_step" */
export type Task_Step_Var_Pop_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Task_Step_Var_Samp_Fields = {
   __typename?: 'task_step_var_samp_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "task_step" */
export type Task_Step_Var_Samp_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Task_Step_Variance_Fields = {
   __typename?: 'task_step_variance_fields';
  sort_index?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "task_step" */
export type Task_Step_Variance_Order_By = {
  sort_index?: Maybe<Order_By>;
};

/** update columns of table "task" */
export enum Task_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CreatedByUid = 'created_by_uid',
  /** column name */
  DescriptionId = 'description_id',
  /** column name */
  DescriptionText = 'description_text',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  ReportId = 'report_id',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UpdatedByUid = 'updated_by_uid'
}

/** columns and relationships of "text_translation" */
export type Text_Translation = {
   __typename?: 'text_translation';
  clientText: Scalars['String'];
  en: Scalars['String'];
  es: Scalars['String'];
  id: Scalars['uuid'];
  lang: Scalars['String'];
  original: Scalars['String'];
  pt: Scalars['String'];
  score?: Maybe<Scalars['numeric']>;
};

/** aggregated selection of "text_translation" */
export type Text_Translation_Aggregate = {
   __typename?: 'text_translation_aggregate';
  aggregate?: Maybe<Text_Translation_Aggregate_Fields>;
  nodes: Array<Text_Translation>;
};

/** aggregate fields of "text_translation" */
export type Text_Translation_Aggregate_Fields = {
   __typename?: 'text_translation_aggregate_fields';
  avg?: Maybe<Text_Translation_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Text_Translation_Max_Fields>;
  min?: Maybe<Text_Translation_Min_Fields>;
  stddev?: Maybe<Text_Translation_Stddev_Fields>;
  stddev_pop?: Maybe<Text_Translation_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Text_Translation_Stddev_Samp_Fields>;
  sum?: Maybe<Text_Translation_Sum_Fields>;
  var_pop?: Maybe<Text_Translation_Var_Pop_Fields>;
  var_samp?: Maybe<Text_Translation_Var_Samp_Fields>;
  variance?: Maybe<Text_Translation_Variance_Fields>;
};


/** aggregate fields of "text_translation" */
export type Text_Translation_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Text_Translation_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "text_translation" */
export type Text_Translation_Aggregate_Order_By = {
  avg?: Maybe<Text_Translation_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Text_Translation_Max_Order_By>;
  min?: Maybe<Text_Translation_Min_Order_By>;
  stddev?: Maybe<Text_Translation_Stddev_Order_By>;
  stddev_pop?: Maybe<Text_Translation_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Text_Translation_Stddev_Samp_Order_By>;
  sum?: Maybe<Text_Translation_Sum_Order_By>;
  var_pop?: Maybe<Text_Translation_Var_Pop_Order_By>;
  var_samp?: Maybe<Text_Translation_Var_Samp_Order_By>;
  variance?: Maybe<Text_Translation_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "text_translation" */
export type Text_Translation_Arr_Rel_Insert_Input = {
  data: Array<Text_Translation_Insert_Input>;
  on_conflict?: Maybe<Text_Translation_On_Conflict>;
};

/** aggregate avg on columns */
export type Text_Translation_Avg_Fields = {
   __typename?: 'text_translation_avg_fields';
  score?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "text_translation" */
export type Text_Translation_Avg_Order_By = {
  score?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "text_translation". All fields are combined with a logical 'AND'. */
export type Text_Translation_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Text_Translation_Bool_Exp>>>;
  _not?: Maybe<Text_Translation_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Text_Translation_Bool_Exp>>>;
  en?: Maybe<String_Comparison_Exp>;
  es?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  lang?: Maybe<String_Comparison_Exp>;
  original?: Maybe<String_Comparison_Exp>;
  pt?: Maybe<String_Comparison_Exp>;
  score?: Maybe<Numeric_Comparison_Exp>;
};

/** unique or primary key constraints on table "text_translation" */
export enum Text_Translation_Constraint {
  /** unique or primary key constraint */
  TextTranslationPkey = 'text_translation_pkey'
}

/** input type for incrementing integer column in table "text_translation" */
export type Text_Translation_Inc_Input = {
  score?: Maybe<Scalars['numeric']>;
};

/** input type for inserting data into table "text_translation" */
export type Text_Translation_Insert_Input = {
  en?: Maybe<Scalars['String']>;
  es?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  lang?: Maybe<Scalars['String']>;
  original?: Maybe<Scalars['String']>;
  pt?: Maybe<Scalars['String']>;
  score?: Maybe<Scalars['numeric']>;
};

/** aggregate max on columns */
export type Text_Translation_Max_Fields = {
   __typename?: 'text_translation_max_fields';
  en?: Maybe<Scalars['String']>;
  es?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  lang?: Maybe<Scalars['String']>;
  original?: Maybe<Scalars['String']>;
  pt?: Maybe<Scalars['String']>;
  score?: Maybe<Scalars['numeric']>;
};

/** order by max() on columns of table "text_translation" */
export type Text_Translation_Max_Order_By = {
  en?: Maybe<Order_By>;
  es?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  lang?: Maybe<Order_By>;
  original?: Maybe<Order_By>;
  pt?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Text_Translation_Min_Fields = {
   __typename?: 'text_translation_min_fields';
  en?: Maybe<Scalars['String']>;
  es?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  lang?: Maybe<Scalars['String']>;
  original?: Maybe<Scalars['String']>;
  pt?: Maybe<Scalars['String']>;
  score?: Maybe<Scalars['numeric']>;
};

/** order by min() on columns of table "text_translation" */
export type Text_Translation_Min_Order_By = {
  en?: Maybe<Order_By>;
  es?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  lang?: Maybe<Order_By>;
  original?: Maybe<Order_By>;
  pt?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
};

/** response of any mutation on the table "text_translation" */
export type Text_Translation_Mutation_Response = {
   __typename?: 'text_translation_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Text_Translation>;
};

/** input type for inserting object relation for remote table "text_translation" */
export type Text_Translation_Obj_Rel_Insert_Input = {
  data: Text_Translation_Insert_Input;
  on_conflict?: Maybe<Text_Translation_On_Conflict>;
};

/** on conflict condition type for table "text_translation" */
export type Text_Translation_On_Conflict = {
  constraint: Text_Translation_Constraint;
  update_columns: Array<Text_Translation_Update_Column>;
  where?: Maybe<Text_Translation_Bool_Exp>;
};

/** ordering options when selecting data from "text_translation" */
export type Text_Translation_Order_By = {
  en?: Maybe<Order_By>;
  es?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  lang?: Maybe<Order_By>;
  original?: Maybe<Order_By>;
  pt?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
};

/** primary key columns input for table: "text_translation" */
export type Text_Translation_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "text_translation" */
export enum Text_Translation_Select_Column {
  /** column name */
  En = 'en',
  /** column name */
  Es = 'es',
  /** column name */
  Id = 'id',
  /** column name */
  Lang = 'lang',
  /** column name */
  Original = 'original',
  /** column name */
  Pt = 'pt',
  /** column name */
  Score = 'score'
}

/** input type for updating data in table "text_translation" */
export type Text_Translation_Set_Input = {
  en?: Maybe<Scalars['String']>;
  es?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  lang?: Maybe<Scalars['String']>;
  original?: Maybe<Scalars['String']>;
  pt?: Maybe<Scalars['String']>;
  score?: Maybe<Scalars['numeric']>;
};

/** aggregate stddev on columns */
export type Text_Translation_Stddev_Fields = {
   __typename?: 'text_translation_stddev_fields';
  score?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "text_translation" */
export type Text_Translation_Stddev_Order_By = {
  score?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Text_Translation_Stddev_Pop_Fields = {
   __typename?: 'text_translation_stddev_pop_fields';
  score?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "text_translation" */
export type Text_Translation_Stddev_Pop_Order_By = {
  score?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Text_Translation_Stddev_Samp_Fields = {
   __typename?: 'text_translation_stddev_samp_fields';
  score?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "text_translation" */
export type Text_Translation_Stddev_Samp_Order_By = {
  score?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Text_Translation_Sum_Fields = {
   __typename?: 'text_translation_sum_fields';
  score?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "text_translation" */
export type Text_Translation_Sum_Order_By = {
  score?: Maybe<Order_By>;
};

/** update columns of table "text_translation" */
export enum Text_Translation_Update_Column {
  /** column name */
  En = 'en',
  /** column name */
  Es = 'es',
  /** column name */
  Id = 'id',
  /** column name */
  Lang = 'lang',
  /** column name */
  Original = 'original',
  /** column name */
  Pt = 'pt',
  /** column name */
  Score = 'score'
}

/** aggregate var_pop on columns */
export type Text_Translation_Var_Pop_Fields = {
   __typename?: 'text_translation_var_pop_fields';
  score?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "text_translation" */
export type Text_Translation_Var_Pop_Order_By = {
  score?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Text_Translation_Var_Samp_Fields = {
   __typename?: 'text_translation_var_samp_fields';
  score?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "text_translation" */
export type Text_Translation_Var_Samp_Order_By = {
  score?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Text_Translation_Variance_Fields = {
   __typename?: 'text_translation_variance_fields';
  score?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "text_translation" */
export type Text_Translation_Variance_Order_By = {
  score?: Maybe<Order_By>;
};

export type TextTranslation = {
   __typename?: 'TextTranslation';
  en: Scalars['String'];
  es: Scalars['String'];
  lang: Scalars['String'];
  original: Scalars['String'];
  pt: Scalars['String'];
  score: Scalars['Float'];
};


/** expression to compare columns of type time. All fields are combined with logical 'AND'. */
export type Time_Comparison_Exp = {
  _eq?: Maybe<Scalars['time']>;
  _gt?: Maybe<Scalars['time']>;
  _gte?: Maybe<Scalars['time']>;
  _in?: Maybe<Array<Scalars['time']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['time']>;
  _lte?: Maybe<Scalars['time']>;
  _neq?: Maybe<Scalars['time']>;
  _nin?: Maybe<Array<Scalars['time']>>;
};


/** expression to compare columns of type timestamp. All fields are combined with logical 'AND'. */
export type Timestamp_Comparison_Exp = {
  _eq?: Maybe<Scalars['timestamp']>;
  _gt?: Maybe<Scalars['timestamp']>;
  _gte?: Maybe<Scalars['timestamp']>;
  _in?: Maybe<Array<Scalars['timestamp']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['timestamp']>;
  _lte?: Maybe<Scalars['timestamp']>;
  _neq?: Maybe<Scalars['timestamp']>;
  _nin?: Maybe<Array<Scalars['timestamp']>>;
};


/** expression to compare columns of type timestamptz. All fields are combined with logical 'AND'. */
export type Timestamptz_Comparison_Exp = {
  _eq?: Maybe<Scalars['timestamptz']>;
  _gt?: Maybe<Scalars['timestamptz']>;
  _gte?: Maybe<Scalars['timestamptz']>;
  _in?: Maybe<Array<Scalars['timestamptz']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['timestamptz']>;
  _lte?: Maybe<Scalars['timestamptz']>;
  _neq?: Maybe<Scalars['timestamptz']>;
  _nin?: Maybe<Array<Scalars['timestamptz']>>;
};

/** columns and relationships of "todo" */
export type Todo = {
   __typename?: 'todo';
  /** An array relationship */
  assigned_to: Array<Todo_Assignee>;
  /** An aggregated array relationship */
  assigned_to_aggregate: Todo_Assignee_Aggregate;
  /** An array relationship */
  chat_items: Array<Chat_Item>;
  /** An aggregated array relationship */
  chat_items_aggregate: Chat_Item_Aggregate;
  completed_at?: Maybe<Scalars['timestamptz']>;
  created_at: Scalars['timestamptz'];
  /** An object relationship */
  description: Text_Translation;
  description_text_id: Scalars['uuid'];
  due_at: Scalars['timestamptz'];
  id: Scalars['uuid'];
  /** An array relationship */
  images: Array<Image>;
  /** An aggregated array relationship */
  images_aggregate: Image_Aggregate;
  isCreator?: Maybe<Scalars['Boolean']>;
  /** An array relationship */
  notifyees: Array<Todo_Notifyee>;
  /** An aggregated array relationship */
  notifyees_aggregate: Todo_Notifyee_Aggregate;
  priority?: Maybe<Scalars['numeric']>;
  /** An object relationship */
  project: Project;
  project_id: Scalars['uuid'];
  /** An object relationship */
  source_chat_item?: Maybe<Chat_Item>;
  source_chat_item_id?: Maybe<Scalars['uuid']>;
  type: Scalars['String'];
  updated_at: Scalars['timestamptz'];
};


/** columns and relationships of "todo" */
export type TodoAssigned_ToArgs = {
  distinct_on?: Maybe<Array<Todo_Assignee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Todo_Assignee_Order_By>>;
  where?: Maybe<Todo_Assignee_Bool_Exp>;
};


/** columns and relationships of "todo" */
export type TodoAssigned_To_AggregateArgs = {
  distinct_on?: Maybe<Array<Todo_Assignee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Todo_Assignee_Order_By>>;
  where?: Maybe<Todo_Assignee_Bool_Exp>;
};


/** columns and relationships of "todo" */
export type TodoChat_ItemsArgs = {
  distinct_on?: Maybe<Array<Chat_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Item_Order_By>>;
  where?: Maybe<Chat_Item_Bool_Exp>;
};


/** columns and relationships of "todo" */
export type TodoChat_Items_AggregateArgs = {
  distinct_on?: Maybe<Array<Chat_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Item_Order_By>>;
  where?: Maybe<Chat_Item_Bool_Exp>;
};


/** columns and relationships of "todo" */
export type TodoImagesArgs = {
  distinct_on?: Maybe<Array<Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Image_Order_By>>;
  where?: Maybe<Image_Bool_Exp>;
};


/** columns and relationships of "todo" */
export type TodoImages_AggregateArgs = {
  distinct_on?: Maybe<Array<Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Image_Order_By>>;
  where?: Maybe<Image_Bool_Exp>;
};


/** columns and relationships of "todo" */
export type TodoNotifyeesArgs = {
  distinct_on?: Maybe<Array<Todo_Notifyee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Todo_Notifyee_Order_By>>;
  where?: Maybe<Todo_Notifyee_Bool_Exp>;
};


/** columns and relationships of "todo" */
export type TodoNotifyees_AggregateArgs = {
  distinct_on?: Maybe<Array<Todo_Notifyee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Todo_Notifyee_Order_By>>;
  where?: Maybe<Todo_Notifyee_Bool_Exp>;
};

/** aggregated selection of "todo" */
export type Todo_Aggregate = {
   __typename?: 'todo_aggregate';
  aggregate?: Maybe<Todo_Aggregate_Fields>;
  nodes: Array<Todo>;
};

/** aggregate fields of "todo" */
export type Todo_Aggregate_Fields = {
   __typename?: 'todo_aggregate_fields';
  avg?: Maybe<Todo_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Todo_Max_Fields>;
  min?: Maybe<Todo_Min_Fields>;
  stddev?: Maybe<Todo_Stddev_Fields>;
  stddev_pop?: Maybe<Todo_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Todo_Stddev_Samp_Fields>;
  sum?: Maybe<Todo_Sum_Fields>;
  var_pop?: Maybe<Todo_Var_Pop_Fields>;
  var_samp?: Maybe<Todo_Var_Samp_Fields>;
  variance?: Maybe<Todo_Variance_Fields>;
};


/** aggregate fields of "todo" */
export type Todo_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Todo_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "todo" */
export type Todo_Aggregate_Order_By = {
  avg?: Maybe<Todo_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Todo_Max_Order_By>;
  min?: Maybe<Todo_Min_Order_By>;
  stddev?: Maybe<Todo_Stddev_Order_By>;
  stddev_pop?: Maybe<Todo_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Todo_Stddev_Samp_Order_By>;
  sum?: Maybe<Todo_Sum_Order_By>;
  var_pop?: Maybe<Todo_Var_Pop_Order_By>;
  var_samp?: Maybe<Todo_Var_Samp_Order_By>;
  variance?: Maybe<Todo_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "todo" */
export type Todo_Arr_Rel_Insert_Input = {
  data: Array<Todo_Insert_Input>;
  on_conflict?: Maybe<Todo_On_Conflict>;
};

/**
 * assignor being NULL means assignee is todo creator
 * 
 * 
 * columns and relationships of "todo_assignee"
 */
export type Todo_Assignee = {
   __typename?: 'todo_assignee';
  /** An object relationship */
  assignee: Project_User;
  assignee_completed_type: Scalars['String'];
  assignee_project_user_id: Scalars['uuid'];
  /** An array relationship */
  assignees: Array<Todo_Assignee>;
  /** An aggregated array relationship */
  assignees_aggregate: Todo_Assignee_Aggregate;
  /** An object relationship */
  assignor?: Maybe<Todo_Assignee>;
  assignor_id?: Maybe<Scalars['uuid']>;
  /** An array relationship */
  chat_items: Array<Chat_Item>;
  /** An aggregated array relationship */
  chat_items_aggregate: Chat_Item_Aggregate;
  completed_at?: Maybe<Scalars['timestamptz']>;
  created_at: Scalars['timestamptz'];
  id: Scalars['uuid'];
  marked_complete: Scalars['Boolean'];
  /** An object relationship */
  todo: Todo;
  todo_id: Scalars['uuid'];
};


/**
 * assignor being NULL means assignee is todo creator
 * 
 * 
 * columns and relationships of "todo_assignee"
 */
export type Todo_AssigneeAssigneesArgs = {
  distinct_on?: Maybe<Array<Todo_Assignee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Todo_Assignee_Order_By>>;
  where?: Maybe<Todo_Assignee_Bool_Exp>;
};


/**
 * assignor being NULL means assignee is todo creator
 * 
 * 
 * columns and relationships of "todo_assignee"
 */
export type Todo_AssigneeAssignees_AggregateArgs = {
  distinct_on?: Maybe<Array<Todo_Assignee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Todo_Assignee_Order_By>>;
  where?: Maybe<Todo_Assignee_Bool_Exp>;
};


/**
 * assignor being NULL means assignee is todo creator
 * 
 * 
 * columns and relationships of "todo_assignee"
 */
export type Todo_AssigneeChat_ItemsArgs = {
  distinct_on?: Maybe<Array<Chat_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Item_Order_By>>;
  where?: Maybe<Chat_Item_Bool_Exp>;
};


/**
 * assignor being NULL means assignee is todo creator
 * 
 * 
 * columns and relationships of "todo_assignee"
 */
export type Todo_AssigneeChat_Items_AggregateArgs = {
  distinct_on?: Maybe<Array<Chat_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Item_Order_By>>;
  where?: Maybe<Chat_Item_Bool_Exp>;
};

/** aggregated selection of "todo_assignee" */
export type Todo_Assignee_Aggregate = {
   __typename?: 'todo_assignee_aggregate';
  aggregate?: Maybe<Todo_Assignee_Aggregate_Fields>;
  nodes: Array<Todo_Assignee>;
};

/** aggregate fields of "todo_assignee" */
export type Todo_Assignee_Aggregate_Fields = {
   __typename?: 'todo_assignee_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Todo_Assignee_Max_Fields>;
  min?: Maybe<Todo_Assignee_Min_Fields>;
};


/** aggregate fields of "todo_assignee" */
export type Todo_Assignee_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Todo_Assignee_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "todo_assignee" */
export type Todo_Assignee_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Todo_Assignee_Max_Order_By>;
  min?: Maybe<Todo_Assignee_Min_Order_By>;
};

/** input type for inserting array relation for remote table "todo_assignee" */
export type Todo_Assignee_Arr_Rel_Insert_Input = {
  data: Array<Todo_Assignee_Insert_Input>;
  on_conflict?: Maybe<Todo_Assignee_On_Conflict>;
};

/** Boolean expression to filter rows from the table "todo_assignee". All fields are combined with a logical 'AND'. */
export type Todo_Assignee_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Todo_Assignee_Bool_Exp>>>;
  _not?: Maybe<Todo_Assignee_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Todo_Assignee_Bool_Exp>>>;
  assignee?: Maybe<Project_User_Bool_Exp>;
  assignee_completed_type?: Maybe<String_Comparison_Exp>;
  assignee_project_user_id?: Maybe<Uuid_Comparison_Exp>;
  assignees?: Maybe<Todo_Assignee_Bool_Exp>;
  assignor?: Maybe<Todo_Assignee_Bool_Exp>;
  assignor_id?: Maybe<Uuid_Comparison_Exp>;
  chat_items?: Maybe<Chat_Item_Bool_Exp>;
  completed_at?: Maybe<Timestamptz_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  marked_complete?: Maybe<Boolean_Comparison_Exp>;
  todo?: Maybe<Todo_Bool_Exp>;
  todo_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "todo_assignee" */
export enum Todo_Assignee_Constraint {
  /** unique or primary key constraint */
  TodoAssignedToPkey = 'todo_assigned_to_pkey'
}

/** input type for inserting data into table "todo_assignee" */
export type Todo_Assignee_Insert_Input = {
  assignee?: Maybe<Project_User_Obj_Rel_Insert_Input>;
  assignee_completed_type?: Maybe<Scalars['String']>;
  assignee_project_user_id?: Maybe<Scalars['uuid']>;
  assignees?: Maybe<Todo_Assignee_Arr_Rel_Insert_Input>;
  assignor?: Maybe<Todo_Assignee_Obj_Rel_Insert_Input>;
  assignor_id?: Maybe<Scalars['uuid']>;
  chat_items?: Maybe<Chat_Item_Arr_Rel_Insert_Input>;
  completed_at?: Maybe<Scalars['timestamptz']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  marked_complete?: Maybe<Scalars['Boolean']>;
  todo?: Maybe<Todo_Obj_Rel_Insert_Input>;
  todo_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Todo_Assignee_Max_Fields = {
   __typename?: 'todo_assignee_max_fields';
  assignee_completed_type?: Maybe<Scalars['String']>;
  assignee_project_user_id?: Maybe<Scalars['uuid']>;
  assignor_id?: Maybe<Scalars['uuid']>;
  completed_at?: Maybe<Scalars['timestamptz']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  todo_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "todo_assignee" */
export type Todo_Assignee_Max_Order_By = {
  assignee_completed_type?: Maybe<Order_By>;
  assignee_project_user_id?: Maybe<Order_By>;
  assignor_id?: Maybe<Order_By>;
  completed_at?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  todo_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Todo_Assignee_Min_Fields = {
   __typename?: 'todo_assignee_min_fields';
  assignee_completed_type?: Maybe<Scalars['String']>;
  assignee_project_user_id?: Maybe<Scalars['uuid']>;
  assignor_id?: Maybe<Scalars['uuid']>;
  completed_at?: Maybe<Scalars['timestamptz']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  todo_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "todo_assignee" */
export type Todo_Assignee_Min_Order_By = {
  assignee_completed_type?: Maybe<Order_By>;
  assignee_project_user_id?: Maybe<Order_By>;
  assignor_id?: Maybe<Order_By>;
  completed_at?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  todo_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "todo_assignee" */
export type Todo_Assignee_Mutation_Response = {
   __typename?: 'todo_assignee_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Todo_Assignee>;
};

/** input type for inserting object relation for remote table "todo_assignee" */
export type Todo_Assignee_Obj_Rel_Insert_Input = {
  data: Todo_Assignee_Insert_Input;
  on_conflict?: Maybe<Todo_Assignee_On_Conflict>;
};

/** on conflict condition type for table "todo_assignee" */
export type Todo_Assignee_On_Conflict = {
  constraint: Todo_Assignee_Constraint;
  update_columns: Array<Todo_Assignee_Update_Column>;
  where?: Maybe<Todo_Assignee_Bool_Exp>;
};

/** ordering options when selecting data from "todo_assignee" */
export type Todo_Assignee_Order_By = {
  assignee?: Maybe<Project_User_Order_By>;
  assignee_completed_type?: Maybe<Order_By>;
  assignee_project_user_id?: Maybe<Order_By>;
  assignees_aggregate?: Maybe<Todo_Assignee_Aggregate_Order_By>;
  assignor?: Maybe<Todo_Assignee_Order_By>;
  assignor_id?: Maybe<Order_By>;
  chat_items_aggregate?: Maybe<Chat_Item_Aggregate_Order_By>;
  completed_at?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  marked_complete?: Maybe<Order_By>;
  todo?: Maybe<Todo_Order_By>;
  todo_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "todo_assignee" */
export type Todo_Assignee_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "todo_assignee" */
export enum Todo_Assignee_Select_Column {
  /** column name */
  AssigneeCompletedType = 'assignee_completed_type',
  /** column name */
  AssigneeProjectUserId = 'assignee_project_user_id',
  /** column name */
  AssignorId = 'assignor_id',
  /** column name */
  CompletedAt = 'completed_at',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  MarkedComplete = 'marked_complete',
  /** column name */
  TodoId = 'todo_id'
}

/** input type for updating data in table "todo_assignee" */
export type Todo_Assignee_Set_Input = {
  assignee_completed_type?: Maybe<Scalars['String']>;
  assignee_project_user_id?: Maybe<Scalars['uuid']>;
  assignor_id?: Maybe<Scalars['uuid']>;
  completed_at?: Maybe<Scalars['timestamptz']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  marked_complete?: Maybe<Scalars['Boolean']>;
  todo_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "todo_assignee" */
export enum Todo_Assignee_Update_Column {
  /** column name */
  AssigneeCompletedType = 'assignee_completed_type',
  /** column name */
  AssigneeProjectUserId = 'assignee_project_user_id',
  /** column name */
  AssignorId = 'assignor_id',
  /** column name */
  CompletedAt = 'completed_at',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  MarkedComplete = 'marked_complete',
  /** column name */
  TodoId = 'todo_id'
}

/** aggregate avg on columns */
export type Todo_Avg_Fields = {
   __typename?: 'todo_avg_fields';
  priority?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "todo" */
export type Todo_Avg_Order_By = {
  priority?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "todo". All fields are combined with a logical 'AND'. */
export type Todo_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Todo_Bool_Exp>>>;
  _not?: Maybe<Todo_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Todo_Bool_Exp>>>;
  assigned_to?: Maybe<Todo_Assignee_Bool_Exp>;
  chat_items?: Maybe<Chat_Item_Bool_Exp>;
  completed_at?: Maybe<Timestamptz_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  description?: Maybe<Text_Translation_Bool_Exp>;
  description_text_id?: Maybe<Uuid_Comparison_Exp>;
  due_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  images?: Maybe<Image_Bool_Exp>;
  notifyees?: Maybe<Todo_Notifyee_Bool_Exp>;
  priority?: Maybe<Numeric_Comparison_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  source_chat_item?: Maybe<Chat_Item_Bool_Exp>;
  source_chat_item_id?: Maybe<Uuid_Comparison_Exp>;
  type?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "todo" */
export enum Todo_Constraint {
  /** unique or primary key constraint */
  TodoPkey = 'todo_pkey'
}

/** input type for incrementing integer column in table "todo" */
export type Todo_Inc_Input = {
  priority?: Maybe<Scalars['numeric']>;
};

/** input type for inserting data into table "todo" */
export type Todo_Insert_Input = {
  assigned_to?: Maybe<Todo_Assignee_Arr_Rel_Insert_Input>;
  chat_items?: Maybe<Chat_Item_Arr_Rel_Insert_Input>;
  completed_at?: Maybe<Scalars['timestamptz']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  description_text_id?: Maybe<Scalars['uuid']>;
  due_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  images?: Maybe<Image_Arr_Rel_Insert_Input>;
  notifyees?: Maybe<Todo_Notifyee_Arr_Rel_Insert_Input>;
  priority?: Maybe<Scalars['numeric']>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_id?: Maybe<Scalars['uuid']>;
  source_chat_item?: Maybe<Chat_Item_Obj_Rel_Insert_Input>;
  source_chat_item_id?: Maybe<Scalars['uuid']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate max on columns */
export type Todo_Max_Fields = {
   __typename?: 'todo_max_fields';
  completed_at?: Maybe<Scalars['timestamptz']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  description_text_id?: Maybe<Scalars['uuid']>;
  due_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  priority?: Maybe<Scalars['numeric']>;
  project_id?: Maybe<Scalars['uuid']>;
  source_chat_item_id?: Maybe<Scalars['uuid']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** order by max() on columns of table "todo" */
export type Todo_Max_Order_By = {
  completed_at?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  description_text_id?: Maybe<Order_By>;
  due_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  priority?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  source_chat_item_id?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Todo_Min_Fields = {
   __typename?: 'todo_min_fields';
  completed_at?: Maybe<Scalars['timestamptz']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  description_text_id?: Maybe<Scalars['uuid']>;
  due_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  priority?: Maybe<Scalars['numeric']>;
  project_id?: Maybe<Scalars['uuid']>;
  source_chat_item_id?: Maybe<Scalars['uuid']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** order by min() on columns of table "todo" */
export type Todo_Min_Order_By = {
  completed_at?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  description_text_id?: Maybe<Order_By>;
  due_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  priority?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  source_chat_item_id?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** response of any mutation on the table "todo" */
export type Todo_Mutation_Response = {
   __typename?: 'todo_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Todo>;
};

/** columns and relationships of "todo_notifyee" */
export type Todo_Notifyee = {
   __typename?: 'todo_notifyee';
  created_at: Scalars['timestamptz'];
  id: Scalars['uuid'];
  /** An object relationship */
  notifyee: Project_User;
  project_user_id: Scalars['uuid'];
  /** An object relationship */
  todo: Todo;
  todo_id: Scalars['uuid'];
};

/** aggregated selection of "todo_notifyee" */
export type Todo_Notifyee_Aggregate = {
   __typename?: 'todo_notifyee_aggregate';
  aggregate?: Maybe<Todo_Notifyee_Aggregate_Fields>;
  nodes: Array<Todo_Notifyee>;
};

/** aggregate fields of "todo_notifyee" */
export type Todo_Notifyee_Aggregate_Fields = {
   __typename?: 'todo_notifyee_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Todo_Notifyee_Max_Fields>;
  min?: Maybe<Todo_Notifyee_Min_Fields>;
};


/** aggregate fields of "todo_notifyee" */
export type Todo_Notifyee_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Todo_Notifyee_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "todo_notifyee" */
export type Todo_Notifyee_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Todo_Notifyee_Max_Order_By>;
  min?: Maybe<Todo_Notifyee_Min_Order_By>;
};

/** input type for inserting array relation for remote table "todo_notifyee" */
export type Todo_Notifyee_Arr_Rel_Insert_Input = {
  data: Array<Todo_Notifyee_Insert_Input>;
  on_conflict?: Maybe<Todo_Notifyee_On_Conflict>;
};

/** Boolean expression to filter rows from the table "todo_notifyee". All fields are combined with a logical 'AND'. */
export type Todo_Notifyee_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Todo_Notifyee_Bool_Exp>>>;
  _not?: Maybe<Todo_Notifyee_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Todo_Notifyee_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  notifyee?: Maybe<Project_User_Bool_Exp>;
  project_user_id?: Maybe<Uuid_Comparison_Exp>;
  todo?: Maybe<Todo_Bool_Exp>;
  todo_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "todo_notifyee" */
export enum Todo_Notifyee_Constraint {
  /** unique or primary key constraint */
  TodoNotifyeePkey = 'todo_notifyee_pkey'
}

/** input type for inserting data into table "todo_notifyee" */
export type Todo_Notifyee_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  notifyee?: Maybe<Project_User_Obj_Rel_Insert_Input>;
  project_user_id?: Maybe<Scalars['uuid']>;
  todo?: Maybe<Todo_Obj_Rel_Insert_Input>;
  todo_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Todo_Notifyee_Max_Fields = {
   __typename?: 'todo_notifyee_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_user_id?: Maybe<Scalars['uuid']>;
  todo_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "todo_notifyee" */
export type Todo_Notifyee_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_user_id?: Maybe<Order_By>;
  todo_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Todo_Notifyee_Min_Fields = {
   __typename?: 'todo_notifyee_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_user_id?: Maybe<Scalars['uuid']>;
  todo_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "todo_notifyee" */
export type Todo_Notifyee_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_user_id?: Maybe<Order_By>;
  todo_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "todo_notifyee" */
export type Todo_Notifyee_Mutation_Response = {
   __typename?: 'todo_notifyee_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Todo_Notifyee>;
};

/** input type for inserting object relation for remote table "todo_notifyee" */
export type Todo_Notifyee_Obj_Rel_Insert_Input = {
  data: Todo_Notifyee_Insert_Input;
  on_conflict?: Maybe<Todo_Notifyee_On_Conflict>;
};

/** on conflict condition type for table "todo_notifyee" */
export type Todo_Notifyee_On_Conflict = {
  constraint: Todo_Notifyee_Constraint;
  update_columns: Array<Todo_Notifyee_Update_Column>;
  where?: Maybe<Todo_Notifyee_Bool_Exp>;
};

/** ordering options when selecting data from "todo_notifyee" */
export type Todo_Notifyee_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  notifyee?: Maybe<Project_User_Order_By>;
  project_user_id?: Maybe<Order_By>;
  todo?: Maybe<Todo_Order_By>;
  todo_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "todo_notifyee" */
export type Todo_Notifyee_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "todo_notifyee" */
export enum Todo_Notifyee_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectUserId = 'project_user_id',
  /** column name */
  TodoId = 'todo_id'
}

/** input type for updating data in table "todo_notifyee" */
export type Todo_Notifyee_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_user_id?: Maybe<Scalars['uuid']>;
  todo_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "todo_notifyee" */
export enum Todo_Notifyee_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectUserId = 'project_user_id',
  /** column name */
  TodoId = 'todo_id'
}

/** input type for inserting object relation for remote table "todo" */
export type Todo_Obj_Rel_Insert_Input = {
  data: Todo_Insert_Input;
  on_conflict?: Maybe<Todo_On_Conflict>;
};

/** on conflict condition type for table "todo" */
export type Todo_On_Conflict = {
  constraint: Todo_Constraint;
  update_columns: Array<Todo_Update_Column>;
  where?: Maybe<Todo_Bool_Exp>;
};

/** ordering options when selecting data from "todo" */
export type Todo_Order_By = {
  assigned_to_aggregate?: Maybe<Todo_Assignee_Aggregate_Order_By>;
  chat_items_aggregate?: Maybe<Chat_Item_Aggregate_Order_By>;
  completed_at?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  description?: Maybe<Text_Translation_Order_By>;
  description_text_id?: Maybe<Order_By>;
  due_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  images_aggregate?: Maybe<Image_Aggregate_Order_By>;
  notifyees_aggregate?: Maybe<Todo_Notifyee_Aggregate_Order_By>;
  priority?: Maybe<Order_By>;
  project?: Maybe<Project_Order_By>;
  project_id?: Maybe<Order_By>;
  source_chat_item?: Maybe<Chat_Item_Order_By>;
  source_chat_item_id?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** primary key columns input for table: "todo" */
export type Todo_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "todo" */
export enum Todo_Select_Column {
  /** column name */
  CompletedAt = 'completed_at',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DescriptionTextId = 'description_text_id',
  /** column name */
  DueAt = 'due_at',
  /** column name */
  Id = 'id',
  /** column name */
  Priority = 'priority',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  SourceChatItemId = 'source_chat_item_id',
  /** column name */
  Type = 'type',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** input type for updating data in table "todo" */
export type Todo_Set_Input = {
  completed_at?: Maybe<Scalars['timestamptz']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  description_text_id?: Maybe<Scalars['uuid']>;
  due_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  priority?: Maybe<Scalars['numeric']>;
  project_id?: Maybe<Scalars['uuid']>;
  source_chat_item_id?: Maybe<Scalars['uuid']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate stddev on columns */
export type Todo_Stddev_Fields = {
   __typename?: 'todo_stddev_fields';
  priority?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "todo" */
export type Todo_Stddev_Order_By = {
  priority?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Todo_Stddev_Pop_Fields = {
   __typename?: 'todo_stddev_pop_fields';
  priority?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "todo" */
export type Todo_Stddev_Pop_Order_By = {
  priority?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Todo_Stddev_Samp_Fields = {
   __typename?: 'todo_stddev_samp_fields';
  priority?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "todo" */
export type Todo_Stddev_Samp_Order_By = {
  priority?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Todo_Sum_Fields = {
   __typename?: 'todo_sum_fields';
  priority?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "todo" */
export type Todo_Sum_Order_By = {
  priority?: Maybe<Order_By>;
};

/** update columns of table "todo" */
export enum Todo_Update_Column {
  /** column name */
  CompletedAt = 'completed_at',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DescriptionTextId = 'description_text_id',
  /** column name */
  DueAt = 'due_at',
  /** column name */
  Id = 'id',
  /** column name */
  Priority = 'priority',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  SourceChatItemId = 'source_chat_item_id',
  /** column name */
  Type = 'type',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** aggregate var_pop on columns */
export type Todo_Var_Pop_Fields = {
   __typename?: 'todo_var_pop_fields';
  priority?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "todo" */
export type Todo_Var_Pop_Order_By = {
  priority?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Todo_Var_Samp_Fields = {
   __typename?: 'todo_var_samp_fields';
  priority?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "todo" */
export type Todo_Var_Samp_Order_By = {
  priority?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Todo_Variance_Fields = {
   __typename?: 'todo_variance_fields';
  priority?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "todo" */
export type Todo_Variance_Order_By = {
  priority?: Maybe<Order_By>;
};

/** columns and relationships of "toolbox_talk" */
export type Toolbox_Talk = {
   __typename?: 'toolbox_talk';
  created_at: Scalars['timestamptz'];
  /** An object relationship */
  description: Text_Translation;
  description_id: Scalars['uuid'];
  description_text: Scalars['String'];
  id: Scalars['uuid'];
  /** An array relationship */
  images: Array<Image>;
  /** An aggregated array relationship */
  images_aggregate: Image_Aggregate;
  /** An object relationship */
  led_by_project_worker: Project_Worker;
  led_by_project_worker_id: Scalars['uuid'];
  /** An object relationship */
  project: Project;
  /** An object relationship */
  project_crew?: Maybe<Project_Crew>;
  project_crew_id?: Maybe<Scalars['uuid']>;
  project_id: Scalars['uuid'];
  sign_in_type: Sign_In_Type_Enum;
  /** An object relationship */
  subcontractor: Subcontractor;
  subcontractor_id: Scalars['uuid'];
  /** An array relationship */
  submission_images: Array<Submission_Image>;
  /** An aggregated array relationship */
  submission_images_aggregate: Submission_Image_Aggregate;
  submitted_language_code: Scalars['String'];
  /** An object relationship */
  submitter_project_worker: Project_Worker;
  submitter_project_worker_id: Scalars['uuid'];
  /** An object relationship */
  submitter_signature?: Maybe<Image>;
  submitter_signature_id?: Maybe<Scalars['uuid']>;
  /** An array relationship */
  toolbox_talk_project_workers: Array<Toolbox_Talk_Project_Worker>;
  /** An aggregated array relationship */
  toolbox_talk_project_workers_aggregate: Toolbox_Talk_Project_Worker_Aggregate;
};


/** columns and relationships of "toolbox_talk" */
export type Toolbox_TalkImagesArgs = {
  distinct_on?: Maybe<Array<Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Image_Order_By>>;
  where?: Maybe<Image_Bool_Exp>;
};


/** columns and relationships of "toolbox_talk" */
export type Toolbox_TalkImages_AggregateArgs = {
  distinct_on?: Maybe<Array<Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Image_Order_By>>;
  where?: Maybe<Image_Bool_Exp>;
};


/** columns and relationships of "toolbox_talk" */
export type Toolbox_TalkSubmission_ImagesArgs = {
  distinct_on?: Maybe<Array<Submission_Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Submission_Image_Order_By>>;
  where?: Maybe<Submission_Image_Bool_Exp>;
};


/** columns and relationships of "toolbox_talk" */
export type Toolbox_TalkSubmission_Images_AggregateArgs = {
  distinct_on?: Maybe<Array<Submission_Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Submission_Image_Order_By>>;
  where?: Maybe<Submission_Image_Bool_Exp>;
};


/** columns and relationships of "toolbox_talk" */
export type Toolbox_TalkToolbox_Talk_Project_WorkersArgs = {
  distinct_on?: Maybe<Array<Toolbox_Talk_Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Toolbox_Talk_Project_Worker_Order_By>>;
  where?: Maybe<Toolbox_Talk_Project_Worker_Bool_Exp>;
};


/** columns and relationships of "toolbox_talk" */
export type Toolbox_TalkToolbox_Talk_Project_Workers_AggregateArgs = {
  distinct_on?: Maybe<Array<Toolbox_Talk_Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Toolbox_Talk_Project_Worker_Order_By>>;
  where?: Maybe<Toolbox_Talk_Project_Worker_Bool_Exp>;
};

/** aggregated selection of "toolbox_talk" */
export type Toolbox_Talk_Aggregate = {
   __typename?: 'toolbox_talk_aggregate';
  aggregate?: Maybe<Toolbox_Talk_Aggregate_Fields>;
  nodes: Array<Toolbox_Talk>;
};

/** aggregate fields of "toolbox_talk" */
export type Toolbox_Talk_Aggregate_Fields = {
   __typename?: 'toolbox_talk_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Toolbox_Talk_Max_Fields>;
  min?: Maybe<Toolbox_Talk_Min_Fields>;
};


/** aggregate fields of "toolbox_talk" */
export type Toolbox_Talk_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Toolbox_Talk_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "toolbox_talk" */
export type Toolbox_Talk_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Toolbox_Talk_Max_Order_By>;
  min?: Maybe<Toolbox_Talk_Min_Order_By>;
};

/** input type for inserting array relation for remote table "toolbox_talk" */
export type Toolbox_Talk_Arr_Rel_Insert_Input = {
  data: Array<Toolbox_Talk_Insert_Input>;
  on_conflict?: Maybe<Toolbox_Talk_On_Conflict>;
};

/** Boolean expression to filter rows from the table "toolbox_talk". All fields are combined with a logical 'AND'. */
export type Toolbox_Talk_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Toolbox_Talk_Bool_Exp>>>;
  _not?: Maybe<Toolbox_Talk_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Toolbox_Talk_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  description?: Maybe<Text_Translation_Bool_Exp>;
  description_id?: Maybe<Uuid_Comparison_Exp>;
  description_text?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  images?: Maybe<Image_Bool_Exp>;
  led_by_project_worker?: Maybe<Project_Worker_Bool_Exp>;
  led_by_project_worker_id?: Maybe<Uuid_Comparison_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_crew?: Maybe<Project_Crew_Bool_Exp>;
  project_crew_id?: Maybe<Uuid_Comparison_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  sign_in_type?: Maybe<Sign_In_Type_Enum_Comparison_Exp>;
  subcontractor?: Maybe<Subcontractor_Bool_Exp>;
  subcontractor_id?: Maybe<Uuid_Comparison_Exp>;
  submission_images?: Maybe<Submission_Image_Bool_Exp>;
  submitted_language_code?: Maybe<String_Comparison_Exp>;
  submitter_project_worker?: Maybe<Project_Worker_Bool_Exp>;
  submitter_project_worker_id?: Maybe<Uuid_Comparison_Exp>;
  submitter_signature?: Maybe<Image_Bool_Exp>;
  submitter_signature_id?: Maybe<Uuid_Comparison_Exp>;
  toolbox_talk_project_workers?: Maybe<Toolbox_Talk_Project_Worker_Bool_Exp>;
};

/** unique or primary key constraints on table "toolbox_talk" */
export enum Toolbox_Talk_Constraint {
  /** unique or primary key constraint */
  ToolboxTalkPkey = 'toolbox_talk_pkey'
}

/** input type for inserting data into table "toolbox_talk" */
export type Toolbox_Talk_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  description_id?: Maybe<Scalars['uuid']>;
  description_text?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  images?: Maybe<Image_Arr_Rel_Insert_Input>;
  led_by_project_worker?: Maybe<Project_Worker_Obj_Rel_Insert_Input>;
  led_by_project_worker_id?: Maybe<Scalars['uuid']>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_crew?: Maybe<Project_Crew_Obj_Rel_Insert_Input>;
  project_crew_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  sign_in_type?: Maybe<Sign_In_Type_Enum>;
  subcontractor?: Maybe<Subcontractor_Obj_Rel_Insert_Input>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  submission_images?: Maybe<Submission_Image_Arr_Rel_Insert_Input>;
  submitted_language_code?: Maybe<Scalars['String']>;
  submitter_project_worker?: Maybe<Project_Worker_Obj_Rel_Insert_Input>;
  submitter_project_worker_id?: Maybe<Scalars['uuid']>;
  submitter_signature?: Maybe<Image_Obj_Rel_Insert_Input>;
  submitter_signature_id?: Maybe<Scalars['uuid']>;
  toolbox_talk_project_workers?: Maybe<Toolbox_Talk_Project_Worker_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Toolbox_Talk_Max_Fields = {
   __typename?: 'toolbox_talk_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  description_id?: Maybe<Scalars['uuid']>;
  description_text?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  led_by_project_worker_id?: Maybe<Scalars['uuid']>;
  project_crew_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  submitted_language_code?: Maybe<Scalars['String']>;
  submitter_project_worker_id?: Maybe<Scalars['uuid']>;
  submitter_signature_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "toolbox_talk" */
export type Toolbox_Talk_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  description_id?: Maybe<Order_By>;
  description_text?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  led_by_project_worker_id?: Maybe<Order_By>;
  project_crew_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  submitted_language_code?: Maybe<Order_By>;
  submitter_project_worker_id?: Maybe<Order_By>;
  submitter_signature_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Toolbox_Talk_Min_Fields = {
   __typename?: 'toolbox_talk_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  description_id?: Maybe<Scalars['uuid']>;
  description_text?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  led_by_project_worker_id?: Maybe<Scalars['uuid']>;
  project_crew_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  submitted_language_code?: Maybe<Scalars['String']>;
  submitter_project_worker_id?: Maybe<Scalars['uuid']>;
  submitter_signature_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "toolbox_talk" */
export type Toolbox_Talk_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  description_id?: Maybe<Order_By>;
  description_text?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  led_by_project_worker_id?: Maybe<Order_By>;
  project_crew_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  submitted_language_code?: Maybe<Order_By>;
  submitter_project_worker_id?: Maybe<Order_By>;
  submitter_signature_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "toolbox_talk" */
export type Toolbox_Talk_Mutation_Response = {
   __typename?: 'toolbox_talk_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Toolbox_Talk>;
};

/** input type for inserting object relation for remote table "toolbox_talk" */
export type Toolbox_Talk_Obj_Rel_Insert_Input = {
  data: Toolbox_Talk_Insert_Input;
  on_conflict?: Maybe<Toolbox_Talk_On_Conflict>;
};

/** on conflict condition type for table "toolbox_talk" */
export type Toolbox_Talk_On_Conflict = {
  constraint: Toolbox_Talk_Constraint;
  update_columns: Array<Toolbox_Talk_Update_Column>;
  where?: Maybe<Toolbox_Talk_Bool_Exp>;
};

/** ordering options when selecting data from "toolbox_talk" */
export type Toolbox_Talk_Order_By = {
  created_at?: Maybe<Order_By>;
  description?: Maybe<Text_Translation_Order_By>;
  description_id?: Maybe<Order_By>;
  description_text?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  images_aggregate?: Maybe<Image_Aggregate_Order_By>;
  led_by_project_worker?: Maybe<Project_Worker_Order_By>;
  led_by_project_worker_id?: Maybe<Order_By>;
  project?: Maybe<Project_Order_By>;
  project_crew?: Maybe<Project_Crew_Order_By>;
  project_crew_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  sign_in_type?: Maybe<Order_By>;
  subcontractor?: Maybe<Subcontractor_Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  submission_images_aggregate?: Maybe<Submission_Image_Aggregate_Order_By>;
  submitted_language_code?: Maybe<Order_By>;
  submitter_project_worker?: Maybe<Project_Worker_Order_By>;
  submitter_project_worker_id?: Maybe<Order_By>;
  submitter_signature?: Maybe<Image_Order_By>;
  submitter_signature_id?: Maybe<Order_By>;
  toolbox_talk_project_workers_aggregate?: Maybe<Toolbox_Talk_Project_Worker_Aggregate_Order_By>;
};

/** columns and relationships of "toolbox_talk_pdf" */
export type Toolbox_Talk_Pdf = {
   __typename?: 'toolbox_talk_pdf';
  created_at: Scalars['timestamptz'];
  id: Scalars['uuid'];
  name: Scalars['String'];
  /** An object relationship */
  subcontractor: Subcontractor;
  subcontractor_id: Scalars['uuid'];
  url: Scalars['String'];
};

/** aggregated selection of "toolbox_talk_pdf" */
export type Toolbox_Talk_Pdf_Aggregate = {
   __typename?: 'toolbox_talk_pdf_aggregate';
  aggregate?: Maybe<Toolbox_Talk_Pdf_Aggregate_Fields>;
  nodes: Array<Toolbox_Talk_Pdf>;
};

/** aggregate fields of "toolbox_talk_pdf" */
export type Toolbox_Talk_Pdf_Aggregate_Fields = {
   __typename?: 'toolbox_talk_pdf_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Toolbox_Talk_Pdf_Max_Fields>;
  min?: Maybe<Toolbox_Talk_Pdf_Min_Fields>;
};


/** aggregate fields of "toolbox_talk_pdf" */
export type Toolbox_Talk_Pdf_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Toolbox_Talk_Pdf_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "toolbox_talk_pdf" */
export type Toolbox_Talk_Pdf_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Toolbox_Talk_Pdf_Max_Order_By>;
  min?: Maybe<Toolbox_Talk_Pdf_Min_Order_By>;
};

/** input type for inserting array relation for remote table "toolbox_talk_pdf" */
export type Toolbox_Talk_Pdf_Arr_Rel_Insert_Input = {
  data: Array<Toolbox_Talk_Pdf_Insert_Input>;
  on_conflict?: Maybe<Toolbox_Talk_Pdf_On_Conflict>;
};

/** Boolean expression to filter rows from the table "toolbox_talk_pdf". All fields are combined with a logical 'AND'. */
export type Toolbox_Talk_Pdf_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Toolbox_Talk_Pdf_Bool_Exp>>>;
  _not?: Maybe<Toolbox_Talk_Pdf_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Toolbox_Talk_Pdf_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  subcontractor?: Maybe<Subcontractor_Bool_Exp>;
  subcontractor_id?: Maybe<Uuid_Comparison_Exp>;
  url?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "toolbox_talk_pdf" */
export enum Toolbox_Talk_Pdf_Constraint {
  /** unique or primary key constraint */
  ToolboxTalkPdfPkey = 'toolbox_talk_pdf_pkey'
}

/** input type for inserting data into table "toolbox_talk_pdf" */
export type Toolbox_Talk_Pdf_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  subcontractor?: Maybe<Subcontractor_Obj_Rel_Insert_Input>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Toolbox_Talk_Pdf_Max_Fields = {
   __typename?: 'toolbox_talk_pdf_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "toolbox_talk_pdf" */
export type Toolbox_Talk_Pdf_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  url?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Toolbox_Talk_Pdf_Min_Fields = {
   __typename?: 'toolbox_talk_pdf_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "toolbox_talk_pdf" */
export type Toolbox_Talk_Pdf_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  url?: Maybe<Order_By>;
};

/** response of any mutation on the table "toolbox_talk_pdf" */
export type Toolbox_Talk_Pdf_Mutation_Response = {
   __typename?: 'toolbox_talk_pdf_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Toolbox_Talk_Pdf>;
};

/** input type for inserting object relation for remote table "toolbox_talk_pdf" */
export type Toolbox_Talk_Pdf_Obj_Rel_Insert_Input = {
  data: Toolbox_Talk_Pdf_Insert_Input;
  on_conflict?: Maybe<Toolbox_Talk_Pdf_On_Conflict>;
};

/** on conflict condition type for table "toolbox_talk_pdf" */
export type Toolbox_Talk_Pdf_On_Conflict = {
  constraint: Toolbox_Talk_Pdf_Constraint;
  update_columns: Array<Toolbox_Talk_Pdf_Update_Column>;
  where?: Maybe<Toolbox_Talk_Pdf_Bool_Exp>;
};

/** ordering options when selecting data from "toolbox_talk_pdf" */
export type Toolbox_Talk_Pdf_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  subcontractor?: Maybe<Subcontractor_Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  url?: Maybe<Order_By>;
};

/** primary key columns input for table: "toolbox_talk_pdf" */
export type Toolbox_Talk_Pdf_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "toolbox_talk_pdf" */
export enum Toolbox_Talk_Pdf_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  Url = 'url'
}

/** input type for updating data in table "toolbox_talk_pdf" */
export type Toolbox_Talk_Pdf_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
};

/** update columns of table "toolbox_talk_pdf" */
export enum Toolbox_Talk_Pdf_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  Url = 'url'
}

/** primary key columns input for table: "toolbox_talk" */
export type Toolbox_Talk_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** columns and relationships of "toolbox_talk_project_worker" */
export type Toolbox_Talk_Project_Worker = {
   __typename?: 'toolbox_talk_project_worker';
  id: Scalars['uuid'];
  /** An object relationship */
  project_worker: Project_Worker;
  project_worker_id: Scalars['uuid'];
  /** An object relationship */
  signature_image?: Maybe<Image>;
  signature_image_id?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  toolbox_talk: Toolbox_Talk;
  toolbox_talk_id: Scalars['uuid'];
};

/** aggregated selection of "toolbox_talk_project_worker" */
export type Toolbox_Talk_Project_Worker_Aggregate = {
   __typename?: 'toolbox_talk_project_worker_aggregate';
  aggregate?: Maybe<Toolbox_Talk_Project_Worker_Aggregate_Fields>;
  nodes: Array<Toolbox_Talk_Project_Worker>;
};

/** aggregate fields of "toolbox_talk_project_worker" */
export type Toolbox_Talk_Project_Worker_Aggregate_Fields = {
   __typename?: 'toolbox_talk_project_worker_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Toolbox_Talk_Project_Worker_Max_Fields>;
  min?: Maybe<Toolbox_Talk_Project_Worker_Min_Fields>;
};


/** aggregate fields of "toolbox_talk_project_worker" */
export type Toolbox_Talk_Project_Worker_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Toolbox_Talk_Project_Worker_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "toolbox_talk_project_worker" */
export type Toolbox_Talk_Project_Worker_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Toolbox_Talk_Project_Worker_Max_Order_By>;
  min?: Maybe<Toolbox_Talk_Project_Worker_Min_Order_By>;
};

/** input type for inserting array relation for remote table "toolbox_talk_project_worker" */
export type Toolbox_Talk_Project_Worker_Arr_Rel_Insert_Input = {
  data: Array<Toolbox_Talk_Project_Worker_Insert_Input>;
  on_conflict?: Maybe<Toolbox_Talk_Project_Worker_On_Conflict>;
};

/**
 * Boolean expression to filter rows from the table "toolbox_talk_project_worker".
 * All fields are combined with a logical 'AND'.
 */
export type Toolbox_Talk_Project_Worker_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Toolbox_Talk_Project_Worker_Bool_Exp>>>;
  _not?: Maybe<Toolbox_Talk_Project_Worker_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Toolbox_Talk_Project_Worker_Bool_Exp>>>;
  id?: Maybe<Uuid_Comparison_Exp>;
  project_worker?: Maybe<Project_Worker_Bool_Exp>;
  project_worker_id?: Maybe<Uuid_Comparison_Exp>;
  signature_image?: Maybe<Image_Bool_Exp>;
  signature_image_id?: Maybe<Uuid_Comparison_Exp>;
  toolbox_talk?: Maybe<Toolbox_Talk_Bool_Exp>;
  toolbox_talk_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "toolbox_talk_project_worker" */
export enum Toolbox_Talk_Project_Worker_Constraint {
  /** unique or primary key constraint */
  ToolboxTalkProjectWorkerIdKey = 'toolbox_talk_project_worker_id_key',
  /** unique or primary key constraint */
  ToolboxTalkProjectWorkerPkey = 'toolbox_talk_project_worker_pkey',
  /** unique or primary key constraint */
  ToolboxTalkProjectWorkerProjectWorkerIdToolboxTalkIdK = 'toolbox_talk_project_worker_project_worker_id_toolbox_talk_id_k'
}

/** input type for inserting data into table "toolbox_talk_project_worker" */
export type Toolbox_Talk_Project_Worker_Insert_Input = {
  id?: Maybe<Scalars['uuid']>;
  project_worker?: Maybe<Project_Worker_Obj_Rel_Insert_Input>;
  project_worker_id?: Maybe<Scalars['uuid']>;
  signature_image?: Maybe<Image_Obj_Rel_Insert_Input>;
  signature_image_id?: Maybe<Scalars['uuid']>;
  toolbox_talk?: Maybe<Toolbox_Talk_Obj_Rel_Insert_Input>;
  toolbox_talk_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Toolbox_Talk_Project_Worker_Max_Fields = {
   __typename?: 'toolbox_talk_project_worker_max_fields';
  id?: Maybe<Scalars['uuid']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
  signature_image_id?: Maybe<Scalars['uuid']>;
  toolbox_talk_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "toolbox_talk_project_worker" */
export type Toolbox_Talk_Project_Worker_Max_Order_By = {
  id?: Maybe<Order_By>;
  project_worker_id?: Maybe<Order_By>;
  signature_image_id?: Maybe<Order_By>;
  toolbox_talk_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Toolbox_Talk_Project_Worker_Min_Fields = {
   __typename?: 'toolbox_talk_project_worker_min_fields';
  id?: Maybe<Scalars['uuid']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
  signature_image_id?: Maybe<Scalars['uuid']>;
  toolbox_talk_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "toolbox_talk_project_worker" */
export type Toolbox_Talk_Project_Worker_Min_Order_By = {
  id?: Maybe<Order_By>;
  project_worker_id?: Maybe<Order_By>;
  signature_image_id?: Maybe<Order_By>;
  toolbox_talk_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "toolbox_talk_project_worker" */
export type Toolbox_Talk_Project_Worker_Mutation_Response = {
   __typename?: 'toolbox_talk_project_worker_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Toolbox_Talk_Project_Worker>;
};

/** input type for inserting object relation for remote table "toolbox_talk_project_worker" */
export type Toolbox_Talk_Project_Worker_Obj_Rel_Insert_Input = {
  data: Toolbox_Talk_Project_Worker_Insert_Input;
  on_conflict?: Maybe<Toolbox_Talk_Project_Worker_On_Conflict>;
};

/** on conflict condition type for table "toolbox_talk_project_worker" */
export type Toolbox_Talk_Project_Worker_On_Conflict = {
  constraint: Toolbox_Talk_Project_Worker_Constraint;
  update_columns: Array<Toolbox_Talk_Project_Worker_Update_Column>;
  where?: Maybe<Toolbox_Talk_Project_Worker_Bool_Exp>;
};

/** ordering options when selecting data from "toolbox_talk_project_worker" */
export type Toolbox_Talk_Project_Worker_Order_By = {
  id?: Maybe<Order_By>;
  project_worker?: Maybe<Project_Worker_Order_By>;
  project_worker_id?: Maybe<Order_By>;
  signature_image?: Maybe<Image_Order_By>;
  signature_image_id?: Maybe<Order_By>;
  toolbox_talk?: Maybe<Toolbox_Talk_Order_By>;
  toolbox_talk_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "toolbox_talk_project_worker" */
export type Toolbox_Talk_Project_Worker_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "toolbox_talk_project_worker" */
export enum Toolbox_Talk_Project_Worker_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  ProjectWorkerId = 'project_worker_id',
  /** column name */
  SignatureImageId = 'signature_image_id',
  /** column name */
  ToolboxTalkId = 'toolbox_talk_id'
}

/** input type for updating data in table "toolbox_talk_project_worker" */
export type Toolbox_Talk_Project_Worker_Set_Input = {
  id?: Maybe<Scalars['uuid']>;
  project_worker_id?: Maybe<Scalars['uuid']>;
  signature_image_id?: Maybe<Scalars['uuid']>;
  toolbox_talk_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "toolbox_talk_project_worker" */
export enum Toolbox_Talk_Project_Worker_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  ProjectWorkerId = 'project_worker_id',
  /** column name */
  SignatureImageId = 'signature_image_id',
  /** column name */
  ToolboxTalkId = 'toolbox_talk_id'
}

/** select columns of table "toolbox_talk" */
export enum Toolbox_Talk_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DescriptionId = 'description_id',
  /** column name */
  DescriptionText = 'description_text',
  /** column name */
  Id = 'id',
  /** column name */
  LedByProjectWorkerId = 'led_by_project_worker_id',
  /** column name */
  ProjectCrewId = 'project_crew_id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  SignInType = 'sign_in_type',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  SubmittedLanguageCode = 'submitted_language_code',
  /** column name */
  SubmitterProjectWorkerId = 'submitter_project_worker_id',
  /** column name */
  SubmitterSignatureId = 'submitter_signature_id'
}

/** input type for updating data in table "toolbox_talk" */
export type Toolbox_Talk_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  description_id?: Maybe<Scalars['uuid']>;
  description_text?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  led_by_project_worker_id?: Maybe<Scalars['uuid']>;
  project_crew_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  sign_in_type?: Maybe<Sign_In_Type_Enum>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  submitted_language_code?: Maybe<Scalars['String']>;
  submitter_project_worker_id?: Maybe<Scalars['uuid']>;
  submitter_signature_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "toolbox_talk" */
export enum Toolbox_Talk_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DescriptionId = 'description_id',
  /** column name */
  DescriptionText = 'description_text',
  /** column name */
  Id = 'id',
  /** column name */
  LedByProjectWorkerId = 'led_by_project_worker_id',
  /** column name */
  ProjectCrewId = 'project_crew_id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  SignInType = 'sign_in_type',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  SubmittedLanguageCode = 'submitted_language_code',
  /** column name */
  SubmitterProjectWorkerId = 'submitter_project_worker_id',
  /** column name */
  SubmitterSignatureId = 'submitter_signature_id'
}

export type ToolboxTalkForm = {
   __typename?: 'ToolboxTalkForm';
  description?: Maybe<Scalars['String']>;
  ledByProjectWorkerId?: Maybe<Scalars['uuid']>;
  projectWorkerIds: Array<Scalars['uuid']>;
  imageUris: Array<Scalars['String']>;
};

export type TranslateInput = {
  suggestedFrom?: Maybe<Scalars['String']>;
  toTranslate: Array<Scalars['String']>;
};

export type TranslateOutput = {
   __typename?: 'TranslateOutput';
  translations: Array<TextTranslation>;
};

export type UpdatePasswordInput = {
  newPassword: Scalars['String'];
  oldPassword: Scalars['String'];
  uid: Scalars['String'];
};

export type UpdateWorkerCrewInput = {
  crewId?: Maybe<Scalars['String']>;
  isLead?: Maybe<Scalars['Boolean']>;
  projectWorkerId: Scalars['String'];
};

export type UploadBase64FileInput = {
  base64?: Maybe<Scalars['String']>;
};

/** columns and relationships of "user" */
export type User = {
   __typename?: 'user';
  allow_reset_password?: Maybe<Scalars['Boolean']>;
  birth_date?: Maybe<Scalars['date']>;
  created_at: Scalars['timestamptz'];
  created_password: Scalars['Boolean'];
  /** An array relationship */
  created_tasks: Array<Task>;
  /** An aggregated array relationship */
  created_tasks_aggregate: Task_Aggregate;
  email?: Maybe<Scalars['String']>;
  /** An object relationship */
  employee?: Maybe<General_Contractor_Employee>;
  /** An array relationship */
  expo_push_tokens: Array<Expo_Push_Token>;
  /** An aggregated array relationship */
  expo_push_tokens_aggregate: Expo_Push_Token_Aggregate;
  /** An object relationship */
  government_identification?: Maybe<Government_Identification>;
  id: Scalars['uuid'];
  /** An array relationship */
  invites: Array<Invite>;
  /** An aggregated array relationship */
  invites_aggregate: Invite_Aggregate;
  lang: Lang_Code_Enum;
  name: Scalars['String'];
  /** An array relationship */
  notifications: Array<User_Notification>;
  /** An aggregated array relationship */
  notifications_aggregate: User_Notification_Aggregate;
  password_hash?: Maybe<Scalars['String']>;
  phone_number?: Maybe<Scalars['String']>;
  /** An object relationship */
  profile_picture?: Maybe<Image>;
  profile_picture_id?: Maybe<Scalars['uuid']>;
  role: Scalars['String'];
  /** An object relationship */
  subcontractor_employee?: Maybe<Subcontractor_Employee>;
  timezone?: Maybe<Scalars['String']>;
  updated_at: Scalars['timestamptz'];
  /** An array relationship */
  user_saved_emails: Array<User_Saved_Email>;
  /** An aggregated array relationship */
  user_saved_emails_aggregate: User_Saved_Email_Aggregate;
  username?: Maybe<Scalars['String']>;
  /** An object relationship */
  worker?: Maybe<Worker>;
};


/** columns and relationships of "user" */
export type UserCreated_TasksArgs = {
  distinct_on?: Maybe<Array<Task_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Order_By>>;
  where?: Maybe<Task_Bool_Exp>;
};


/** columns and relationships of "user" */
export type UserCreated_Tasks_AggregateArgs = {
  distinct_on?: Maybe<Array<Task_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Order_By>>;
  where?: Maybe<Task_Bool_Exp>;
};


/** columns and relationships of "user" */
export type UserExpo_Push_TokensArgs = {
  distinct_on?: Maybe<Array<Expo_Push_Token_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Expo_Push_Token_Order_By>>;
  where?: Maybe<Expo_Push_Token_Bool_Exp>;
};


/** columns and relationships of "user" */
export type UserExpo_Push_Tokens_AggregateArgs = {
  distinct_on?: Maybe<Array<Expo_Push_Token_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Expo_Push_Token_Order_By>>;
  where?: Maybe<Expo_Push_Token_Bool_Exp>;
};


/** columns and relationships of "user" */
export type UserInvitesArgs = {
  distinct_on?: Maybe<Array<Invite_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Invite_Order_By>>;
  where?: Maybe<Invite_Bool_Exp>;
};


/** columns and relationships of "user" */
export type UserInvites_AggregateArgs = {
  distinct_on?: Maybe<Array<Invite_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Invite_Order_By>>;
  where?: Maybe<Invite_Bool_Exp>;
};


/** columns and relationships of "user" */
export type UserNotificationsArgs = {
  distinct_on?: Maybe<Array<User_Notification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Notification_Order_By>>;
  where?: Maybe<User_Notification_Bool_Exp>;
};


/** columns and relationships of "user" */
export type UserNotifications_AggregateArgs = {
  distinct_on?: Maybe<Array<User_Notification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Notification_Order_By>>;
  where?: Maybe<User_Notification_Bool_Exp>;
};


/** columns and relationships of "user" */
export type UserUser_Saved_EmailsArgs = {
  distinct_on?: Maybe<Array<User_Saved_Email_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Saved_Email_Order_By>>;
  where?: Maybe<User_Saved_Email_Bool_Exp>;
};


/** columns and relationships of "user" */
export type UserUser_Saved_Emails_AggregateArgs = {
  distinct_on?: Maybe<Array<User_Saved_Email_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Saved_Email_Order_By>>;
  where?: Maybe<User_Saved_Email_Bool_Exp>;
};

/** aggregated selection of "user" */
export type User_Aggregate = {
   __typename?: 'user_aggregate';
  aggregate?: Maybe<User_Aggregate_Fields>;
  nodes: Array<User>;
};

/** aggregate fields of "user" */
export type User_Aggregate_Fields = {
   __typename?: 'user_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<User_Max_Fields>;
  min?: Maybe<User_Min_Fields>;
};


/** aggregate fields of "user" */
export type User_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<User_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "user" */
export type User_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<User_Max_Order_By>;
  min?: Maybe<User_Min_Order_By>;
};

/** input type for inserting array relation for remote table "user" */
export type User_Arr_Rel_Insert_Input = {
  data: Array<User_Insert_Input>;
  on_conflict?: Maybe<User_On_Conflict>;
};

/** Boolean expression to filter rows from the table "user". All fields are combined with a logical 'AND'. */
export type User_Bool_Exp = {
  _and?: Maybe<Array<Maybe<User_Bool_Exp>>>;
  _not?: Maybe<User_Bool_Exp>;
  _or?: Maybe<Array<Maybe<User_Bool_Exp>>>;
  allow_reset_password?: Maybe<Boolean_Comparison_Exp>;
  birth_date?: Maybe<Date_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  created_password?: Maybe<Boolean_Comparison_Exp>;
  created_tasks?: Maybe<Task_Bool_Exp>;
  email?: Maybe<String_Comparison_Exp>;
  employee?: Maybe<General_Contractor_Employee_Bool_Exp>;
  expo_push_tokens?: Maybe<Expo_Push_Token_Bool_Exp>;
  government_identification?: Maybe<Government_Identification_Bool_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  invites?: Maybe<Invite_Bool_Exp>;
  lang?: Maybe<Lang_Code_Enum_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  notifications?: Maybe<User_Notification_Bool_Exp>;
  password_hash?: Maybe<String_Comparison_Exp>;
  phone_number?: Maybe<String_Comparison_Exp>;
  profile_picture?: Maybe<Image_Bool_Exp>;
  profile_picture_id?: Maybe<Uuid_Comparison_Exp>;
  role?: Maybe<String_Comparison_Exp>;
  subcontractor_employee?: Maybe<Subcontractor_Employee_Bool_Exp>;
  timezone?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  user_saved_emails?: Maybe<User_Saved_Email_Bool_Exp>;
  username?: Maybe<String_Comparison_Exp>;
  worker?: Maybe<Worker_Bool_Exp>;
};

/** unique or primary key constraints on table "user" */
export enum User_Constraint {
  /** unique or primary key constraint */
  EmailUpper = 'email_upper',
  /** unique or primary key constraint */
  UserEmailKey = 'user_email_key',
  /** unique or primary key constraint */
  UserIdKey = 'user_id_key',
  /** unique or primary key constraint */
  UserPkey = 'user_pkey',
  /** unique or primary key constraint */
  UserUsernameKey = 'user_username_key'
}

/** input type for inserting data into table "user" */
export type User_Insert_Input = {
  allow_reset_password?: Maybe<Scalars['Boolean']>;
  birth_date?: Maybe<Scalars['date']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  created_password?: Maybe<Scalars['Boolean']>;
  created_tasks?: Maybe<Task_Arr_Rel_Insert_Input>;
  email?: Maybe<Scalars['String']>;
  employee?: Maybe<General_Contractor_Employee_Obj_Rel_Insert_Input>;
  expo_push_tokens?: Maybe<Expo_Push_Token_Arr_Rel_Insert_Input>;
  government_identification?: Maybe<Government_Identification_Obj_Rel_Insert_Input>;
  id?: Maybe<Scalars['uuid']>;
  invites?: Maybe<Invite_Arr_Rel_Insert_Input>;
  lang?: Maybe<Lang_Code_Enum>;
  name?: Maybe<Scalars['String']>;
  notifications?: Maybe<User_Notification_Arr_Rel_Insert_Input>;
  password_hash?: Maybe<Scalars['String']>;
  phone_number?: Maybe<Scalars['String']>;
  profile_picture?: Maybe<Image_Obj_Rel_Insert_Input>;
  profile_picture_id?: Maybe<Scalars['uuid']>;
  role?: Maybe<Scalars['String']>;
  subcontractor_employee?: Maybe<Subcontractor_Employee_Obj_Rel_Insert_Input>;
  timezone?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  user_saved_emails?: Maybe<User_Saved_Email_Arr_Rel_Insert_Input>;
  username?: Maybe<Scalars['String']>;
  worker?: Maybe<Worker_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type User_Max_Fields = {
   __typename?: 'user_max_fields';
  birth_date?: Maybe<Scalars['date']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  password_hash?: Maybe<Scalars['String']>;
  phone_number?: Maybe<Scalars['String']>;
  profile_picture_id?: Maybe<Scalars['uuid']>;
  role?: Maybe<Scalars['String']>;
  timezone?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  username?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "user" */
export type User_Max_Order_By = {
  birth_date?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  email?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  password_hash?: Maybe<Order_By>;
  phone_number?: Maybe<Order_By>;
  profile_picture_id?: Maybe<Order_By>;
  role?: Maybe<Order_By>;
  timezone?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  username?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type User_Min_Fields = {
   __typename?: 'user_min_fields';
  birth_date?: Maybe<Scalars['date']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  password_hash?: Maybe<Scalars['String']>;
  phone_number?: Maybe<Scalars['String']>;
  profile_picture_id?: Maybe<Scalars['uuid']>;
  role?: Maybe<Scalars['String']>;
  timezone?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  username?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "user" */
export type User_Min_Order_By = {
  birth_date?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  email?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  password_hash?: Maybe<Order_By>;
  phone_number?: Maybe<Order_By>;
  profile_picture_id?: Maybe<Order_By>;
  role?: Maybe<Order_By>;
  timezone?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  username?: Maybe<Order_By>;
};

/** response of any mutation on the table "user" */
export type User_Mutation_Response = {
   __typename?: 'user_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<User>;
};

/** columns and relationships of "user_notification" */
export type User_Notification = {
   __typename?: 'user_notification';
  /** An object relationship */
  chat?: Maybe<Chat>;
  chat_id?: Maybe<Scalars['uuid']>;
  cleared_at?: Maybe<Scalars['timestamptz']>;
  created_at: Scalars['timestamptz'];
  event_type: User_Notification_Event_Type_Enum;
  id: Scalars['uuid'];
  include_in_badge: Scalars['Boolean'];
  /** An object relationship */
  permit?: Maybe<Permit>;
  permit_id?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  project?: Maybe<Project>;
  project_id?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  report?: Maybe<Report>;
  safety_report_id?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  todo?: Maybe<Todo>;
  todo_id?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  user: User;
  user_id: Scalars['uuid'];
};

/** aggregated selection of "user_notification" */
export type User_Notification_Aggregate = {
   __typename?: 'user_notification_aggregate';
  aggregate?: Maybe<User_Notification_Aggregate_Fields>;
  nodes: Array<User_Notification>;
};

/** aggregate fields of "user_notification" */
export type User_Notification_Aggregate_Fields = {
   __typename?: 'user_notification_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<User_Notification_Max_Fields>;
  min?: Maybe<User_Notification_Min_Fields>;
};


/** aggregate fields of "user_notification" */
export type User_Notification_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<User_Notification_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "user_notification" */
export type User_Notification_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<User_Notification_Max_Order_By>;
  min?: Maybe<User_Notification_Min_Order_By>;
};

/** input type for inserting array relation for remote table "user_notification" */
export type User_Notification_Arr_Rel_Insert_Input = {
  data: Array<User_Notification_Insert_Input>;
  on_conflict?: Maybe<User_Notification_On_Conflict>;
};

/** Boolean expression to filter rows from the table "user_notification". All fields are combined with a logical 'AND'. */
export type User_Notification_Bool_Exp = {
  _and?: Maybe<Array<Maybe<User_Notification_Bool_Exp>>>;
  _not?: Maybe<User_Notification_Bool_Exp>;
  _or?: Maybe<Array<Maybe<User_Notification_Bool_Exp>>>;
  chat?: Maybe<Chat_Bool_Exp>;
  chat_id?: Maybe<Uuid_Comparison_Exp>;
  cleared_at?: Maybe<Timestamptz_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  event_type?: Maybe<User_Notification_Event_Type_Enum_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  include_in_badge?: Maybe<Boolean_Comparison_Exp>;
  permit?: Maybe<Permit_Bool_Exp>;
  permit_id?: Maybe<Uuid_Comparison_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  report?: Maybe<Report_Bool_Exp>;
  safety_report_id?: Maybe<Uuid_Comparison_Exp>;
  todo?: Maybe<Todo_Bool_Exp>;
  todo_id?: Maybe<Uuid_Comparison_Exp>;
  user?: Maybe<User_Bool_Exp>;
  user_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "user_notification" */
export enum User_Notification_Constraint {
  /** unique or primary key constraint */
  SentNotificationPkey = 'sent_notification_pkey'
}

/** columns and relationships of "user_notification_event_type" */
export type User_Notification_Event_Type = {
   __typename?: 'user_notification_event_type';
  value: Scalars['String'];
};

/** aggregated selection of "user_notification_event_type" */
export type User_Notification_Event_Type_Aggregate = {
   __typename?: 'user_notification_event_type_aggregate';
  aggregate?: Maybe<User_Notification_Event_Type_Aggregate_Fields>;
  nodes: Array<User_Notification_Event_Type>;
};

/** aggregate fields of "user_notification_event_type" */
export type User_Notification_Event_Type_Aggregate_Fields = {
   __typename?: 'user_notification_event_type_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<User_Notification_Event_Type_Max_Fields>;
  min?: Maybe<User_Notification_Event_Type_Min_Fields>;
};


/** aggregate fields of "user_notification_event_type" */
export type User_Notification_Event_Type_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<User_Notification_Event_Type_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "user_notification_event_type" */
export type User_Notification_Event_Type_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<User_Notification_Event_Type_Max_Order_By>;
  min?: Maybe<User_Notification_Event_Type_Min_Order_By>;
};

/** input type for inserting array relation for remote table "user_notification_event_type" */
export type User_Notification_Event_Type_Arr_Rel_Insert_Input = {
  data: Array<User_Notification_Event_Type_Insert_Input>;
  on_conflict?: Maybe<User_Notification_Event_Type_On_Conflict>;
};

/**
 * Boolean expression to filter rows from the table "user_notification_event_type".
 * All fields are combined with a logical 'AND'.
 */
export type User_Notification_Event_Type_Bool_Exp = {
  _and?: Maybe<Array<Maybe<User_Notification_Event_Type_Bool_Exp>>>;
  _not?: Maybe<User_Notification_Event_Type_Bool_Exp>;
  _or?: Maybe<Array<Maybe<User_Notification_Event_Type_Bool_Exp>>>;
  value?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "user_notification_event_type" */
export enum User_Notification_Event_Type_Constraint {
  /** unique or primary key constraint */
  UserNotificationEventTypePkey = 'user_notification_event_type_pkey'
}

export enum User_Notification_Event_Type_Enum {
  PermitApproved = 'permit_approved',
  PermitClosed = 'permit_closed',
  PermitClosedOffsite = 'permit_closed_offsite',
  PermitRejected = 'permit_rejected',
  PermitResubmitted = 'permit_resubmitted',
  PermitSubmitted = 'permit_submitted',
  SafetyReportInjury = 'safety_report_injury',
  TodoAssigned = 'todo_assigned',
  TodoComplete = 'todo_complete',
  TodoIncompleteReminder = 'todo_incomplete_reminder',
  TodoReopened = 'todo_reopened',
  UserChatMessage = 'user_chat_message'
}

/** expression to compare columns of type user_notification_event_type_enum. All fields are combined with logical 'AND'. */
export type User_Notification_Event_Type_Enum_Comparison_Exp = {
  _eq?: Maybe<User_Notification_Event_Type_Enum>;
  _in?: Maybe<Array<User_Notification_Event_Type_Enum>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _neq?: Maybe<User_Notification_Event_Type_Enum>;
  _nin?: Maybe<Array<User_Notification_Event_Type_Enum>>;
};

/** input type for inserting data into table "user_notification_event_type" */
export type User_Notification_Event_Type_Insert_Input = {
  value?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type User_Notification_Event_Type_Max_Fields = {
   __typename?: 'user_notification_event_type_max_fields';
  value?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "user_notification_event_type" */
export type User_Notification_Event_Type_Max_Order_By = {
  value?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type User_Notification_Event_Type_Min_Fields = {
   __typename?: 'user_notification_event_type_min_fields';
  value?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "user_notification_event_type" */
export type User_Notification_Event_Type_Min_Order_By = {
  value?: Maybe<Order_By>;
};

/** response of any mutation on the table "user_notification_event_type" */
export type User_Notification_Event_Type_Mutation_Response = {
   __typename?: 'user_notification_event_type_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<User_Notification_Event_Type>;
};

/** input type for inserting object relation for remote table "user_notification_event_type" */
export type User_Notification_Event_Type_Obj_Rel_Insert_Input = {
  data: User_Notification_Event_Type_Insert_Input;
  on_conflict?: Maybe<User_Notification_Event_Type_On_Conflict>;
};

/** on conflict condition type for table "user_notification_event_type" */
export type User_Notification_Event_Type_On_Conflict = {
  constraint: User_Notification_Event_Type_Constraint;
  update_columns: Array<User_Notification_Event_Type_Update_Column>;
  where?: Maybe<User_Notification_Event_Type_Bool_Exp>;
};

/** ordering options when selecting data from "user_notification_event_type" */
export type User_Notification_Event_Type_Order_By = {
  value?: Maybe<Order_By>;
};

/** primary key columns input for table: "user_notification_event_type" */
export type User_Notification_Event_Type_Pk_Columns_Input = {
  value: Scalars['String'];
};

/** select columns of table "user_notification_event_type" */
export enum User_Notification_Event_Type_Select_Column {
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "user_notification_event_type" */
export type User_Notification_Event_Type_Set_Input = {
  value?: Maybe<Scalars['String']>;
};

/** update columns of table "user_notification_event_type" */
export enum User_Notification_Event_Type_Update_Column {
  /** column name */
  Value = 'value'
}

/** input type for inserting data into table "user_notification" */
export type User_Notification_Insert_Input = {
  chat?: Maybe<Chat_Obj_Rel_Insert_Input>;
  chat_id?: Maybe<Scalars['uuid']>;
  cleared_at?: Maybe<Scalars['timestamptz']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  event_type?: Maybe<User_Notification_Event_Type_Enum>;
  id?: Maybe<Scalars['uuid']>;
  include_in_badge?: Maybe<Scalars['Boolean']>;
  permit?: Maybe<Permit_Obj_Rel_Insert_Input>;
  permit_id?: Maybe<Scalars['uuid']>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_id?: Maybe<Scalars['uuid']>;
  report?: Maybe<Report_Obj_Rel_Insert_Input>;
  safety_report_id?: Maybe<Scalars['uuid']>;
  todo?: Maybe<Todo_Obj_Rel_Insert_Input>;
  todo_id?: Maybe<Scalars['uuid']>;
  user?: Maybe<User_Obj_Rel_Insert_Input>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type User_Notification_Max_Fields = {
   __typename?: 'user_notification_max_fields';
  chat_id?: Maybe<Scalars['uuid']>;
  cleared_at?: Maybe<Scalars['timestamptz']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  permit_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  safety_report_id?: Maybe<Scalars['uuid']>;
  todo_id?: Maybe<Scalars['uuid']>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "user_notification" */
export type User_Notification_Max_Order_By = {
  chat_id?: Maybe<Order_By>;
  cleared_at?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  permit_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  safety_report_id?: Maybe<Order_By>;
  todo_id?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type User_Notification_Min_Fields = {
   __typename?: 'user_notification_min_fields';
  chat_id?: Maybe<Scalars['uuid']>;
  cleared_at?: Maybe<Scalars['timestamptz']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  permit_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  safety_report_id?: Maybe<Scalars['uuid']>;
  todo_id?: Maybe<Scalars['uuid']>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "user_notification" */
export type User_Notification_Min_Order_By = {
  chat_id?: Maybe<Order_By>;
  cleared_at?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  permit_id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  safety_report_id?: Maybe<Order_By>;
  todo_id?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "user_notification" */
export type User_Notification_Mutation_Response = {
   __typename?: 'user_notification_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<User_Notification>;
};

/** input type for inserting object relation for remote table "user_notification" */
export type User_Notification_Obj_Rel_Insert_Input = {
  data: User_Notification_Insert_Input;
  on_conflict?: Maybe<User_Notification_On_Conflict>;
};

/** on conflict condition type for table "user_notification" */
export type User_Notification_On_Conflict = {
  constraint: User_Notification_Constraint;
  update_columns: Array<User_Notification_Update_Column>;
  where?: Maybe<User_Notification_Bool_Exp>;
};

/** ordering options when selecting data from "user_notification" */
export type User_Notification_Order_By = {
  chat?: Maybe<Chat_Order_By>;
  chat_id?: Maybe<Order_By>;
  cleared_at?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  event_type?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  include_in_badge?: Maybe<Order_By>;
  permit?: Maybe<Permit_Order_By>;
  permit_id?: Maybe<Order_By>;
  project?: Maybe<Project_Order_By>;
  project_id?: Maybe<Order_By>;
  report?: Maybe<Report_Order_By>;
  safety_report_id?: Maybe<Order_By>;
  todo?: Maybe<Todo_Order_By>;
  todo_id?: Maybe<Order_By>;
  user?: Maybe<User_Order_By>;
  user_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "user_notification" */
export type User_Notification_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "user_notification" */
export enum User_Notification_Select_Column {
  /** column name */
  ChatId = 'chat_id',
  /** column name */
  ClearedAt = 'cleared_at',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  EventType = 'event_type',
  /** column name */
  Id = 'id',
  /** column name */
  IncludeInBadge = 'include_in_badge',
  /** column name */
  PermitId = 'permit_id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  SafetyReportId = 'safety_report_id',
  /** column name */
  TodoId = 'todo_id',
  /** column name */
  UserId = 'user_id'
}

/** input type for updating data in table "user_notification" */
export type User_Notification_Set_Input = {
  chat_id?: Maybe<Scalars['uuid']>;
  cleared_at?: Maybe<Scalars['timestamptz']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  event_type?: Maybe<User_Notification_Event_Type_Enum>;
  id?: Maybe<Scalars['uuid']>;
  include_in_badge?: Maybe<Scalars['Boolean']>;
  permit_id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  safety_report_id?: Maybe<Scalars['uuid']>;
  todo_id?: Maybe<Scalars['uuid']>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "user_notification" */
export enum User_Notification_Update_Column {
  /** column name */
  ChatId = 'chat_id',
  /** column name */
  ClearedAt = 'cleared_at',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  EventType = 'event_type',
  /** column name */
  Id = 'id',
  /** column name */
  IncludeInBadge = 'include_in_badge',
  /** column name */
  PermitId = 'permit_id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  SafetyReportId = 'safety_report_id',
  /** column name */
  TodoId = 'todo_id',
  /** column name */
  UserId = 'user_id'
}

/** input type for inserting object relation for remote table "user" */
export type User_Obj_Rel_Insert_Input = {
  data: User_Insert_Input;
  on_conflict?: Maybe<User_On_Conflict>;
};

/** on conflict condition type for table "user" */
export type User_On_Conflict = {
  constraint: User_Constraint;
  update_columns: Array<User_Update_Column>;
  where?: Maybe<User_Bool_Exp>;
};

/** ordering options when selecting data from "user" */
export type User_Order_By = {
  allow_reset_password?: Maybe<Order_By>;
  birth_date?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  created_password?: Maybe<Order_By>;
  created_tasks_aggregate?: Maybe<Task_Aggregate_Order_By>;
  email?: Maybe<Order_By>;
  employee?: Maybe<General_Contractor_Employee_Order_By>;
  expo_push_tokens_aggregate?: Maybe<Expo_Push_Token_Aggregate_Order_By>;
  government_identification?: Maybe<Government_Identification_Order_By>;
  id?: Maybe<Order_By>;
  invites_aggregate?: Maybe<Invite_Aggregate_Order_By>;
  lang?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  notifications_aggregate?: Maybe<User_Notification_Aggregate_Order_By>;
  password_hash?: Maybe<Order_By>;
  phone_number?: Maybe<Order_By>;
  profile_picture?: Maybe<Image_Order_By>;
  profile_picture_id?: Maybe<Order_By>;
  role?: Maybe<Order_By>;
  subcontractor_employee?: Maybe<Subcontractor_Employee_Order_By>;
  timezone?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  user_saved_emails_aggregate?: Maybe<User_Saved_Email_Aggregate_Order_By>;
  username?: Maybe<Order_By>;
  worker?: Maybe<Worker_Order_By>;
};

/** primary key columns input for table: "user" */
export type User_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** columns and relationships of "user_project_filter_calendar" */
export type User_Project_Filter_Calendar = {
   __typename?: 'user_project_filter_calendar';
  /** An object relationship */
  calendar?: Maybe<Calendar>;
  calendar_id: Scalars['uuid'];
  id: Scalars['uuid'];
  /** An object relationship */
  project?: Maybe<Project>;
  project_id: Scalars['uuid'];
  /** An object relationship */
  user?: Maybe<User>;
  user_id: Scalars['uuid'];
};

/** aggregated selection of "user_project_filter_calendar" */
export type User_Project_Filter_Calendar_Aggregate = {
   __typename?: 'user_project_filter_calendar_aggregate';
  aggregate?: Maybe<User_Project_Filter_Calendar_Aggregate_Fields>;
  nodes: Array<User_Project_Filter_Calendar>;
};

/** aggregate fields of "user_project_filter_calendar" */
export type User_Project_Filter_Calendar_Aggregate_Fields = {
   __typename?: 'user_project_filter_calendar_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<User_Project_Filter_Calendar_Max_Fields>;
  min?: Maybe<User_Project_Filter_Calendar_Min_Fields>;
};


/** aggregate fields of "user_project_filter_calendar" */
export type User_Project_Filter_Calendar_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<User_Project_Filter_Calendar_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "user_project_filter_calendar" */
export type User_Project_Filter_Calendar_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<User_Project_Filter_Calendar_Max_Order_By>;
  min?: Maybe<User_Project_Filter_Calendar_Min_Order_By>;
};

/** input type for inserting array relation for remote table "user_project_filter_calendar" */
export type User_Project_Filter_Calendar_Arr_Rel_Insert_Input = {
  data: Array<User_Project_Filter_Calendar_Insert_Input>;
  on_conflict?: Maybe<User_Project_Filter_Calendar_On_Conflict>;
};

/**
 * Boolean expression to filter rows from the table "user_project_filter_calendar".
 * All fields are combined with a logical 'AND'.
 */
export type User_Project_Filter_Calendar_Bool_Exp = {
  _and?: Maybe<Array<Maybe<User_Project_Filter_Calendar_Bool_Exp>>>;
  _not?: Maybe<User_Project_Filter_Calendar_Bool_Exp>;
  _or?: Maybe<Array<Maybe<User_Project_Filter_Calendar_Bool_Exp>>>;
  calendar?: Maybe<Calendar_Bool_Exp>;
  calendar_id?: Maybe<Uuid_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  project?: Maybe<Project_Bool_Exp>;
  project_id?: Maybe<Uuid_Comparison_Exp>;
  user?: Maybe<User_Bool_Exp>;
  user_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "user_project_filter_calendar" */
export enum User_Project_Filter_Calendar_Constraint {
  /** unique or primary key constraint */
  UserProjectFilterCalendarPkey = 'user_project_filter_calendar_pkey'
}

/** input type for inserting data into table "user_project_filter_calendar" */
export type User_Project_Filter_Calendar_Insert_Input = {
  calendar?: Maybe<Calendar_Obj_Rel_Insert_Input>;
  calendar_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  project?: Maybe<Project_Obj_Rel_Insert_Input>;
  project_id?: Maybe<Scalars['uuid']>;
  user?: Maybe<User_Obj_Rel_Insert_Input>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type User_Project_Filter_Calendar_Max_Fields = {
   __typename?: 'user_project_filter_calendar_max_fields';
  calendar_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "user_project_filter_calendar" */
export type User_Project_Filter_Calendar_Max_Order_By = {
  calendar_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type User_Project_Filter_Calendar_Min_Fields = {
   __typename?: 'user_project_filter_calendar_min_fields';
  calendar_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "user_project_filter_calendar" */
export type User_Project_Filter_Calendar_Min_Order_By = {
  calendar_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_id?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "user_project_filter_calendar" */
export type User_Project_Filter_Calendar_Mutation_Response = {
   __typename?: 'user_project_filter_calendar_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<User_Project_Filter_Calendar>;
};

/** input type for inserting object relation for remote table "user_project_filter_calendar" */
export type User_Project_Filter_Calendar_Obj_Rel_Insert_Input = {
  data: User_Project_Filter_Calendar_Insert_Input;
  on_conflict?: Maybe<User_Project_Filter_Calendar_On_Conflict>;
};

/** on conflict condition type for table "user_project_filter_calendar" */
export type User_Project_Filter_Calendar_On_Conflict = {
  constraint: User_Project_Filter_Calendar_Constraint;
  update_columns: Array<User_Project_Filter_Calendar_Update_Column>;
  where?: Maybe<User_Project_Filter_Calendar_Bool_Exp>;
};

/** ordering options when selecting data from "user_project_filter_calendar" */
export type User_Project_Filter_Calendar_Order_By = {
  calendar?: Maybe<Calendar_Order_By>;
  calendar_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project?: Maybe<Project_Order_By>;
  project_id?: Maybe<Order_By>;
  user?: Maybe<User_Order_By>;
  user_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "user_project_filter_calendar" */
export type User_Project_Filter_Calendar_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "user_project_filter_calendar" */
export enum User_Project_Filter_Calendar_Select_Column {
  /** column name */
  CalendarId = 'calendar_id',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  UserId = 'user_id'
}

/** input type for updating data in table "user_project_filter_calendar" */
export type User_Project_Filter_Calendar_Set_Input = {
  calendar_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  project_id?: Maybe<Scalars['uuid']>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "user_project_filter_calendar" */
export enum User_Project_Filter_Calendar_Update_Column {
  /** column name */
  CalendarId = 'calendar_id',
  /** column name */
  Id = 'id',
  /** column name */
  ProjectId = 'project_id',
  /** column name */
  UserId = 'user_id'
}

/** columns and relationships of "user_saved_email" */
export type User_Saved_Email = {
   __typename?: 'user_saved_email';
  created_at: Scalars['timestamptz'];
  email: Scalars['String'];
  id: Scalars['uuid'];
  /** An object relationship */
  user: User;
  user_id: Scalars['uuid'];
};

/** aggregated selection of "user_saved_email" */
export type User_Saved_Email_Aggregate = {
   __typename?: 'user_saved_email_aggregate';
  aggregate?: Maybe<User_Saved_Email_Aggregate_Fields>;
  nodes: Array<User_Saved_Email>;
};

/** aggregate fields of "user_saved_email" */
export type User_Saved_Email_Aggregate_Fields = {
   __typename?: 'user_saved_email_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<User_Saved_Email_Max_Fields>;
  min?: Maybe<User_Saved_Email_Min_Fields>;
};


/** aggregate fields of "user_saved_email" */
export type User_Saved_Email_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<User_Saved_Email_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "user_saved_email" */
export type User_Saved_Email_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<User_Saved_Email_Max_Order_By>;
  min?: Maybe<User_Saved_Email_Min_Order_By>;
};

/** input type for inserting array relation for remote table "user_saved_email" */
export type User_Saved_Email_Arr_Rel_Insert_Input = {
  data: Array<User_Saved_Email_Insert_Input>;
  on_conflict?: Maybe<User_Saved_Email_On_Conflict>;
};

/** Boolean expression to filter rows from the table "user_saved_email". All fields are combined with a logical 'AND'. */
export type User_Saved_Email_Bool_Exp = {
  _and?: Maybe<Array<Maybe<User_Saved_Email_Bool_Exp>>>;
  _not?: Maybe<User_Saved_Email_Bool_Exp>;
  _or?: Maybe<Array<Maybe<User_Saved_Email_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  email?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  user?: Maybe<User_Bool_Exp>;
  user_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "user_saved_email" */
export enum User_Saved_Email_Constraint {
  /** unique or primary key constraint */
  UserSavedEmailPkey = 'user_saved_email_pkey',
  /** unique or primary key constraint */
  UserSavedEmailUserIdEmailKey = 'user_saved_email_user_id_email_key'
}

/** input type for inserting data into table "user_saved_email" */
export type User_Saved_Email_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  user?: Maybe<User_Obj_Rel_Insert_Input>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type User_Saved_Email_Max_Fields = {
   __typename?: 'user_saved_email_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "user_saved_email" */
export type User_Saved_Email_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  email?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type User_Saved_Email_Min_Fields = {
   __typename?: 'user_saved_email_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "user_saved_email" */
export type User_Saved_Email_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  email?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "user_saved_email" */
export type User_Saved_Email_Mutation_Response = {
   __typename?: 'user_saved_email_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<User_Saved_Email>;
};

/** input type for inserting object relation for remote table "user_saved_email" */
export type User_Saved_Email_Obj_Rel_Insert_Input = {
  data: User_Saved_Email_Insert_Input;
  on_conflict?: Maybe<User_Saved_Email_On_Conflict>;
};

/** on conflict condition type for table "user_saved_email" */
export type User_Saved_Email_On_Conflict = {
  constraint: User_Saved_Email_Constraint;
  update_columns: Array<User_Saved_Email_Update_Column>;
  where?: Maybe<User_Saved_Email_Bool_Exp>;
};

/** ordering options when selecting data from "user_saved_email" */
export type User_Saved_Email_Order_By = {
  created_at?: Maybe<Order_By>;
  email?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  user?: Maybe<User_Order_By>;
  user_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "user_saved_email" */
export type User_Saved_Email_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "user_saved_email" */
export enum User_Saved_Email_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Email = 'email',
  /** column name */
  Id = 'id',
  /** column name */
  UserId = 'user_id'
}

/** input type for updating data in table "user_saved_email" */
export type User_Saved_Email_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "user_saved_email" */
export enum User_Saved_Email_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Email = 'email',
  /** column name */
  Id = 'id',
  /** column name */
  UserId = 'user_id'
}

/** select columns of table "user" */
export enum User_Select_Column {
  /** column name */
  AllowResetPassword = 'allow_reset_password',
  /** column name */
  BirthDate = 'birth_date',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CreatedPassword = 'created_password',
  /** column name */
  Email = 'email',
  /** column name */
  Id = 'id',
  /** column name */
  Lang = 'lang',
  /** column name */
  Name = 'name',
  /** column name */
  PasswordHash = 'password_hash',
  /** column name */
  PhoneNumber = 'phone_number',
  /** column name */
  ProfilePictureId = 'profile_picture_id',
  /** column name */
  Role = 'role',
  /** column name */
  Timezone = 'timezone',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  Username = 'username'
}

/** input type for updating data in table "user" */
export type User_Set_Input = {
  allow_reset_password?: Maybe<Scalars['Boolean']>;
  birth_date?: Maybe<Scalars['date']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  created_password?: Maybe<Scalars['Boolean']>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  lang?: Maybe<Lang_Code_Enum>;
  name?: Maybe<Scalars['String']>;
  password_hash?: Maybe<Scalars['String']>;
  phone_number?: Maybe<Scalars['String']>;
  profile_picture_id?: Maybe<Scalars['uuid']>;
  role?: Maybe<Scalars['String']>;
  timezone?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  username?: Maybe<Scalars['String']>;
};

/** update columns of table "user" */
export enum User_Update_Column {
  /** column name */
  AllowResetPassword = 'allow_reset_password',
  /** column name */
  BirthDate = 'birth_date',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CreatedPassword = 'created_password',
  /** column name */
  Email = 'email',
  /** column name */
  Id = 'id',
  /** column name */
  Lang = 'lang',
  /** column name */
  Name = 'name',
  /** column name */
  PasswordHash = 'password_hash',
  /** column name */
  PhoneNumber = 'phone_number',
  /** column name */
  ProfilePictureId = 'profile_picture_id',
  /** column name */
  Role = 'role',
  /** column name */
  Timezone = 'timezone',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  Username = 'username'
}


/** expression to compare columns of type uuid. All fields are combined with logical 'AND'. */
export type Uuid_Comparison_Exp = {
  _eq?: Maybe<Scalars['uuid']>;
  _gt?: Maybe<Scalars['uuid']>;
  _gte?: Maybe<Scalars['uuid']>;
  _in?: Maybe<Array<Scalars['uuid']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['uuid']>;
  _lte?: Maybe<Scalars['uuid']>;
  _neq?: Maybe<Scalars['uuid']>;
  _nin?: Maybe<Array<Scalars['uuid']>>;
};

export type ViewingTask = {
   __typename?: 'ViewingTask';
  taskId?: Maybe<Scalars['String']>;
  editing: Scalars['Boolean'];
};

/** columns and relationships of "work_above_permit" */
export type Work_Above_Permit = {
   __typename?: 'work_above_permit';
  /** An object relationship */
  applicant_project_worker: Project_Worker;
  applicant_project_worker_id: Scalars['uuid'];
  created_at: Scalars['timestamptz'];
  /** An object relationship */
  permit: Permit;
  permit_id: Scalars['uuid'];
  updated_at: Scalars['timestamptz'];
  /** An object relationship */
  work_description: Text_Translation;
  work_description_id: Scalars['uuid'];
  work_duration?: Maybe<Scalars['interval']>;
  /** An object relationship */
  work_location: Text_Translation;
  work_location_id: Scalars['uuid'];
  work_start_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregated selection of "work_above_permit" */
export type Work_Above_Permit_Aggregate = {
   __typename?: 'work_above_permit_aggregate';
  aggregate?: Maybe<Work_Above_Permit_Aggregate_Fields>;
  nodes: Array<Work_Above_Permit>;
};

/** aggregate fields of "work_above_permit" */
export type Work_Above_Permit_Aggregate_Fields = {
   __typename?: 'work_above_permit_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Work_Above_Permit_Max_Fields>;
  min?: Maybe<Work_Above_Permit_Min_Fields>;
};


/** aggregate fields of "work_above_permit" */
export type Work_Above_Permit_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Work_Above_Permit_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "work_above_permit" */
export type Work_Above_Permit_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Work_Above_Permit_Max_Order_By>;
  min?: Maybe<Work_Above_Permit_Min_Order_By>;
};

/** input type for inserting array relation for remote table "work_above_permit" */
export type Work_Above_Permit_Arr_Rel_Insert_Input = {
  data: Array<Work_Above_Permit_Insert_Input>;
  on_conflict?: Maybe<Work_Above_Permit_On_Conflict>;
};

/** Boolean expression to filter rows from the table "work_above_permit". All fields are combined with a logical 'AND'. */
export type Work_Above_Permit_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Work_Above_Permit_Bool_Exp>>>;
  _not?: Maybe<Work_Above_Permit_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Work_Above_Permit_Bool_Exp>>>;
  applicant_project_worker?: Maybe<Project_Worker_Bool_Exp>;
  applicant_project_worker_id?: Maybe<Uuid_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  permit?: Maybe<Permit_Bool_Exp>;
  permit_id?: Maybe<Uuid_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  work_description?: Maybe<Text_Translation_Bool_Exp>;
  work_description_id?: Maybe<Uuid_Comparison_Exp>;
  work_duration?: Maybe<Interval_Comparison_Exp>;
  work_location?: Maybe<Text_Translation_Bool_Exp>;
  work_location_id?: Maybe<Uuid_Comparison_Exp>;
  work_start_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "work_above_permit" */
export enum Work_Above_Permit_Constraint {
  /** unique or primary key constraint */
  WorkAbovePermitPkey = 'work_above_permit_pkey'
}

/** input type for inserting data into table "work_above_permit" */
export type Work_Above_Permit_Insert_Input = {
  applicant_project_worker?: Maybe<Project_Worker_Obj_Rel_Insert_Input>;
  applicant_project_worker_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  permit?: Maybe<Permit_Obj_Rel_Insert_Input>;
  permit_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  work_description?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  work_description_id?: Maybe<Scalars['uuid']>;
  work_duration?: Maybe<Scalars['interval']>;
  work_location?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  work_location_id?: Maybe<Scalars['uuid']>;
  work_start_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate max on columns */
export type Work_Above_Permit_Max_Fields = {
   __typename?: 'work_above_permit_max_fields';
  applicant_project_worker_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  permit_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  work_description_id?: Maybe<Scalars['uuid']>;
  work_location_id?: Maybe<Scalars['uuid']>;
  work_start_at?: Maybe<Scalars['timestamptz']>;
};

/** order by max() on columns of table "work_above_permit" */
export type Work_Above_Permit_Max_Order_By = {
  applicant_project_worker_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  permit_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  work_description_id?: Maybe<Order_By>;
  work_location_id?: Maybe<Order_By>;
  work_start_at?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Work_Above_Permit_Min_Fields = {
   __typename?: 'work_above_permit_min_fields';
  applicant_project_worker_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  permit_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  work_description_id?: Maybe<Scalars['uuid']>;
  work_location_id?: Maybe<Scalars['uuid']>;
  work_start_at?: Maybe<Scalars['timestamptz']>;
};

/** order by min() on columns of table "work_above_permit" */
export type Work_Above_Permit_Min_Order_By = {
  applicant_project_worker_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  permit_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  work_description_id?: Maybe<Order_By>;
  work_location_id?: Maybe<Order_By>;
  work_start_at?: Maybe<Order_By>;
};

/** response of any mutation on the table "work_above_permit" */
export type Work_Above_Permit_Mutation_Response = {
   __typename?: 'work_above_permit_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Work_Above_Permit>;
};

/** input type for inserting object relation for remote table "work_above_permit" */
export type Work_Above_Permit_Obj_Rel_Insert_Input = {
  data: Work_Above_Permit_Insert_Input;
  on_conflict?: Maybe<Work_Above_Permit_On_Conflict>;
};

/** on conflict condition type for table "work_above_permit" */
export type Work_Above_Permit_On_Conflict = {
  constraint: Work_Above_Permit_Constraint;
  update_columns: Array<Work_Above_Permit_Update_Column>;
  where?: Maybe<Work_Above_Permit_Bool_Exp>;
};

/** ordering options when selecting data from "work_above_permit" */
export type Work_Above_Permit_Order_By = {
  applicant_project_worker?: Maybe<Project_Worker_Order_By>;
  applicant_project_worker_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  permit?: Maybe<Permit_Order_By>;
  permit_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  work_description?: Maybe<Text_Translation_Order_By>;
  work_description_id?: Maybe<Order_By>;
  work_duration?: Maybe<Order_By>;
  work_location?: Maybe<Text_Translation_Order_By>;
  work_location_id?: Maybe<Order_By>;
  work_start_at?: Maybe<Order_By>;
};

/** primary key columns input for table: "work_above_permit" */
export type Work_Above_Permit_Pk_Columns_Input = {
  permit_id: Scalars['uuid'];
};

/** select columns of table "work_above_permit" */
export enum Work_Above_Permit_Select_Column {
  /** column name */
  ApplicantProjectWorkerId = 'applicant_project_worker_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  PermitId = 'permit_id',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  WorkDescriptionId = 'work_description_id',
  /** column name */
  WorkDuration = 'work_duration',
  /** column name */
  WorkLocationId = 'work_location_id',
  /** column name */
  WorkStartAt = 'work_start_at'
}

/** input type for updating data in table "work_above_permit" */
export type Work_Above_Permit_Set_Input = {
  applicant_project_worker_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  permit_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  work_description_id?: Maybe<Scalars['uuid']>;
  work_duration?: Maybe<Scalars['interval']>;
  work_location_id?: Maybe<Scalars['uuid']>;
  work_start_at?: Maybe<Scalars['timestamptz']>;
};

/** update columns of table "work_above_permit" */
export enum Work_Above_Permit_Update_Column {
  /** column name */
  ApplicantProjectWorkerId = 'applicant_project_worker_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  PermitId = 'permit_id',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  WorkDescriptionId = 'work_description_id',
  /** column name */
  WorkDuration = 'work_duration',
  /** column name */
  WorkLocationId = 'work_location_id',
  /** column name */
  WorkStartAt = 'work_start_at'
}

/** columns and relationships of "worker" */
export type Worker = {
   __typename?: 'worker';
  created_at: Scalars['timestamptz'];
  current_worker_role: Scalars['String'];
  email_daily_report_on_submit: Scalars['Boolean'];
  email_safety_report_on_submit: Scalars['Boolean'];
  email_toolbox_talk_on_submit: Scalars['Boolean'];
  hire_date?: Maybe<Scalars['date']>;
  /** An object relationship */
  subcontractor?: Maybe<Subcontractor>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  /** An array relationship */
  subcontractor_workers: Array<Subcontractor_Worker>;
  /** An aggregated array relationship */
  subcontractor_workers_aggregate: Subcontractor_Worker_Aggregate;
  uid: Scalars['uuid'];
  updated_at: Scalars['timestamptz'];
  /** An object relationship */
  user: User;
  /** An array relationship */
  worker_automatic_emails: Array<Worker_Automatic_Email>;
  /** An aggregated array relationship */
  worker_automatic_emails_aggregate: Worker_Automatic_Email_Aggregate;
  /** An array relationship */
  worker_certifications: Array<Worker_Certification>;
  /** An aggregated array relationship */
  worker_certifications_aggregate: Worker_Certification_Aggregate;
  /** An array relationship */
  worker_drug_tests: Array<Worker_Drug_Test>;
  /** An aggregated array relationship */
  worker_drug_tests_aggregate: Worker_Drug_Test_Aggregate;
  /** An array relationship */
  worker_enabled_automatic_email_events: Array<Worker_Enabled_Automatic_Email_Event>;
  /** An aggregated array relationship */
  worker_enabled_automatic_email_events_aggregate: Worker_Enabled_Automatic_Email_Event_Aggregate;
  /** An array relationship */
  worker_projects: Array<Project_Worker>;
  /** An aggregated array relationship */
  worker_projects_aggregate: Project_Worker_Aggregate;
  /** An object relationship */
  worker_role: Worker_Role;
  /** An object relationship */
  worker_title?: Maybe<Worker_Title>;
  worker_title_id?: Maybe<Scalars['uuid']>;
};


/** columns and relationships of "worker" */
export type WorkerSubcontractor_WorkersArgs = {
  distinct_on?: Maybe<Array<Subcontractor_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Subcontractor_Worker_Order_By>>;
  where?: Maybe<Subcontractor_Worker_Bool_Exp>;
};


/** columns and relationships of "worker" */
export type WorkerSubcontractor_Workers_AggregateArgs = {
  distinct_on?: Maybe<Array<Subcontractor_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Subcontractor_Worker_Order_By>>;
  where?: Maybe<Subcontractor_Worker_Bool_Exp>;
};


/** columns and relationships of "worker" */
export type WorkerWorker_Automatic_EmailsArgs = {
  distinct_on?: Maybe<Array<Worker_Automatic_Email_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Automatic_Email_Order_By>>;
  where?: Maybe<Worker_Automatic_Email_Bool_Exp>;
};


/** columns and relationships of "worker" */
export type WorkerWorker_Automatic_Emails_AggregateArgs = {
  distinct_on?: Maybe<Array<Worker_Automatic_Email_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Automatic_Email_Order_By>>;
  where?: Maybe<Worker_Automatic_Email_Bool_Exp>;
};


/** columns and relationships of "worker" */
export type WorkerWorker_CertificationsArgs = {
  distinct_on?: Maybe<Array<Worker_Certification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Certification_Order_By>>;
  where?: Maybe<Worker_Certification_Bool_Exp>;
};


/** columns and relationships of "worker" */
export type WorkerWorker_Certifications_AggregateArgs = {
  distinct_on?: Maybe<Array<Worker_Certification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Certification_Order_By>>;
  where?: Maybe<Worker_Certification_Bool_Exp>;
};


/** columns and relationships of "worker" */
export type WorkerWorker_Drug_TestsArgs = {
  distinct_on?: Maybe<Array<Worker_Drug_Test_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Drug_Test_Order_By>>;
  where?: Maybe<Worker_Drug_Test_Bool_Exp>;
};


/** columns and relationships of "worker" */
export type WorkerWorker_Drug_Tests_AggregateArgs = {
  distinct_on?: Maybe<Array<Worker_Drug_Test_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Drug_Test_Order_By>>;
  where?: Maybe<Worker_Drug_Test_Bool_Exp>;
};


/** columns and relationships of "worker" */
export type WorkerWorker_Enabled_Automatic_Email_EventsArgs = {
  distinct_on?: Maybe<Array<Worker_Enabled_Automatic_Email_Event_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Enabled_Automatic_Email_Event_Order_By>>;
  where?: Maybe<Worker_Enabled_Automatic_Email_Event_Bool_Exp>;
};


/** columns and relationships of "worker" */
export type WorkerWorker_Enabled_Automatic_Email_Events_AggregateArgs = {
  distinct_on?: Maybe<Array<Worker_Enabled_Automatic_Email_Event_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Worker_Enabled_Automatic_Email_Event_Order_By>>;
  where?: Maybe<Worker_Enabled_Automatic_Email_Event_Bool_Exp>;
};


/** columns and relationships of "worker" */
export type WorkerWorker_ProjectsArgs = {
  distinct_on?: Maybe<Array<Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Worker_Order_By>>;
  where?: Maybe<Project_Worker_Bool_Exp>;
};


/** columns and relationships of "worker" */
export type WorkerWorker_Projects_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Worker_Order_By>>;
  where?: Maybe<Project_Worker_Bool_Exp>;
};

/** aggregated selection of "worker" */
export type Worker_Aggregate = {
   __typename?: 'worker_aggregate';
  aggregate?: Maybe<Worker_Aggregate_Fields>;
  nodes: Array<Worker>;
};

/** aggregate fields of "worker" */
export type Worker_Aggregate_Fields = {
   __typename?: 'worker_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Worker_Max_Fields>;
  min?: Maybe<Worker_Min_Fields>;
};


/** aggregate fields of "worker" */
export type Worker_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Worker_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "worker" */
export type Worker_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Worker_Max_Order_By>;
  min?: Maybe<Worker_Min_Order_By>;
};

/** input type for inserting array relation for remote table "worker" */
export type Worker_Arr_Rel_Insert_Input = {
  data: Array<Worker_Insert_Input>;
  on_conflict?: Maybe<Worker_On_Conflict>;
};

/** columns and relationships of "worker_automatic_email" */
export type Worker_Automatic_Email = {
   __typename?: 'worker_automatic_email';
  created_at: Scalars['timestamptz'];
  email: Scalars['String'];
  event: Worker_Automatic_Email_Event_Type_Enum;
  id: Scalars['uuid'];
  user_id: Scalars['uuid'];
  /** An object relationship */
  worker: Worker;
};

/** aggregated selection of "worker_automatic_email" */
export type Worker_Automatic_Email_Aggregate = {
   __typename?: 'worker_automatic_email_aggregate';
  aggregate?: Maybe<Worker_Automatic_Email_Aggregate_Fields>;
  nodes: Array<Worker_Automatic_Email>;
};

/** aggregate fields of "worker_automatic_email" */
export type Worker_Automatic_Email_Aggregate_Fields = {
   __typename?: 'worker_automatic_email_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Worker_Automatic_Email_Max_Fields>;
  min?: Maybe<Worker_Automatic_Email_Min_Fields>;
};


/** aggregate fields of "worker_automatic_email" */
export type Worker_Automatic_Email_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Worker_Automatic_Email_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "worker_automatic_email" */
export type Worker_Automatic_Email_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Worker_Automatic_Email_Max_Order_By>;
  min?: Maybe<Worker_Automatic_Email_Min_Order_By>;
};

/** input type for inserting array relation for remote table "worker_automatic_email" */
export type Worker_Automatic_Email_Arr_Rel_Insert_Input = {
  data: Array<Worker_Automatic_Email_Insert_Input>;
  on_conflict?: Maybe<Worker_Automatic_Email_On_Conflict>;
};

/** Boolean expression to filter rows from the table "worker_automatic_email". All fields are combined with a logical 'AND'. */
export type Worker_Automatic_Email_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Worker_Automatic_Email_Bool_Exp>>>;
  _not?: Maybe<Worker_Automatic_Email_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Worker_Automatic_Email_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  email?: Maybe<String_Comparison_Exp>;
  event?: Maybe<Worker_Automatic_Email_Event_Type_Enum_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  user_id?: Maybe<Uuid_Comparison_Exp>;
  worker?: Maybe<Worker_Bool_Exp>;
};

/** unique or primary key constraints on table "worker_automatic_email" */
export enum Worker_Automatic_Email_Constraint {
  /** unique or primary key constraint */
  WorkerAutomaticEmailPkey = 'worker_automatic_email_pkey',
  /** unique or primary key constraint */
  WorkerAutomaticEmailUserIdEmailEventKey = 'worker_automatic_email_user_id_email_event_key'
}

/** columns and relationships of "worker_automatic_email_event_type" */
export type Worker_Automatic_Email_Event_Type = {
   __typename?: 'worker_automatic_email_event_type';
  value: Scalars['String'];
};

/** aggregated selection of "worker_automatic_email_event_type" */
export type Worker_Automatic_Email_Event_Type_Aggregate = {
   __typename?: 'worker_automatic_email_event_type_aggregate';
  aggregate?: Maybe<Worker_Automatic_Email_Event_Type_Aggregate_Fields>;
  nodes: Array<Worker_Automatic_Email_Event_Type>;
};

/** aggregate fields of "worker_automatic_email_event_type" */
export type Worker_Automatic_Email_Event_Type_Aggregate_Fields = {
   __typename?: 'worker_automatic_email_event_type_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Worker_Automatic_Email_Event_Type_Max_Fields>;
  min?: Maybe<Worker_Automatic_Email_Event_Type_Min_Fields>;
};


/** aggregate fields of "worker_automatic_email_event_type" */
export type Worker_Automatic_Email_Event_Type_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Worker_Automatic_Email_Event_Type_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "worker_automatic_email_event_type" */
export type Worker_Automatic_Email_Event_Type_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Worker_Automatic_Email_Event_Type_Max_Order_By>;
  min?: Maybe<Worker_Automatic_Email_Event_Type_Min_Order_By>;
};

/** input type for inserting array relation for remote table "worker_automatic_email_event_type" */
export type Worker_Automatic_Email_Event_Type_Arr_Rel_Insert_Input = {
  data: Array<Worker_Automatic_Email_Event_Type_Insert_Input>;
  on_conflict?: Maybe<Worker_Automatic_Email_Event_Type_On_Conflict>;
};

/**
 * Boolean expression to filter rows from the table
 * "worker_automatic_email_event_type". All fields are combined with a logical 'AND'.
 */
export type Worker_Automatic_Email_Event_Type_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Worker_Automatic_Email_Event_Type_Bool_Exp>>>;
  _not?: Maybe<Worker_Automatic_Email_Event_Type_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Worker_Automatic_Email_Event_Type_Bool_Exp>>>;
  value?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "worker_automatic_email_event_type" */
export enum Worker_Automatic_Email_Event_Type_Constraint {
  /** unique or primary key constraint */
  WorkerAutomaticEmailTypePkey = 'worker_automatic_email_type_pkey'
}

export enum Worker_Automatic_Email_Event_Type_Enum {
  DailyReportSubmit = 'daily_report_submit',
  PermitApproved = 'permit_approved',
  SafetyReportSubmit = 'safety_report_submit',
  ToolboxTalkSubmit = 'toolbox_talk_submit'
}

/** expression to compare columns of type worker_automatic_email_event_type_enum. All fields are combined with logical 'AND'. */
export type Worker_Automatic_Email_Event_Type_Enum_Comparison_Exp = {
  _eq?: Maybe<Worker_Automatic_Email_Event_Type_Enum>;
  _in?: Maybe<Array<Worker_Automatic_Email_Event_Type_Enum>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _neq?: Maybe<Worker_Automatic_Email_Event_Type_Enum>;
  _nin?: Maybe<Array<Worker_Automatic_Email_Event_Type_Enum>>;
};

/** input type for inserting data into table "worker_automatic_email_event_type" */
export type Worker_Automatic_Email_Event_Type_Insert_Input = {
  value?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Worker_Automatic_Email_Event_Type_Max_Fields = {
   __typename?: 'worker_automatic_email_event_type_max_fields';
  value?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "worker_automatic_email_event_type" */
export type Worker_Automatic_Email_Event_Type_Max_Order_By = {
  value?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Worker_Automatic_Email_Event_Type_Min_Fields = {
   __typename?: 'worker_automatic_email_event_type_min_fields';
  value?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "worker_automatic_email_event_type" */
export type Worker_Automatic_Email_Event_Type_Min_Order_By = {
  value?: Maybe<Order_By>;
};

/** response of any mutation on the table "worker_automatic_email_event_type" */
export type Worker_Automatic_Email_Event_Type_Mutation_Response = {
   __typename?: 'worker_automatic_email_event_type_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Worker_Automatic_Email_Event_Type>;
};

/** input type for inserting object relation for remote table "worker_automatic_email_event_type" */
export type Worker_Automatic_Email_Event_Type_Obj_Rel_Insert_Input = {
  data: Worker_Automatic_Email_Event_Type_Insert_Input;
  on_conflict?: Maybe<Worker_Automatic_Email_Event_Type_On_Conflict>;
};

/** on conflict condition type for table "worker_automatic_email_event_type" */
export type Worker_Automatic_Email_Event_Type_On_Conflict = {
  constraint: Worker_Automatic_Email_Event_Type_Constraint;
  update_columns: Array<Worker_Automatic_Email_Event_Type_Update_Column>;
  where?: Maybe<Worker_Automatic_Email_Event_Type_Bool_Exp>;
};

/** ordering options when selecting data from "worker_automatic_email_event_type" */
export type Worker_Automatic_Email_Event_Type_Order_By = {
  value?: Maybe<Order_By>;
};

/** primary key columns input for table: "worker_automatic_email_event_type" */
export type Worker_Automatic_Email_Event_Type_Pk_Columns_Input = {
  value: Scalars['String'];
};

/** select columns of table "worker_automatic_email_event_type" */
export enum Worker_Automatic_Email_Event_Type_Select_Column {
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "worker_automatic_email_event_type" */
export type Worker_Automatic_Email_Event_Type_Set_Input = {
  value?: Maybe<Scalars['String']>;
};

/** update columns of table "worker_automatic_email_event_type" */
export enum Worker_Automatic_Email_Event_Type_Update_Column {
  /** column name */
  Value = 'value'
}

/** input type for inserting data into table "worker_automatic_email" */
export type Worker_Automatic_Email_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  email?: Maybe<Scalars['String']>;
  event?: Maybe<Worker_Automatic_Email_Event_Type_Enum>;
  id?: Maybe<Scalars['uuid']>;
  user_id?: Maybe<Scalars['uuid']>;
  worker?: Maybe<Worker_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Worker_Automatic_Email_Max_Fields = {
   __typename?: 'worker_automatic_email_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "worker_automatic_email" */
export type Worker_Automatic_Email_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  email?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Worker_Automatic_Email_Min_Fields = {
   __typename?: 'worker_automatic_email_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "worker_automatic_email" */
export type Worker_Automatic_Email_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  email?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "worker_automatic_email" */
export type Worker_Automatic_Email_Mutation_Response = {
   __typename?: 'worker_automatic_email_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Worker_Automatic_Email>;
};

/** input type for inserting object relation for remote table "worker_automatic_email" */
export type Worker_Automatic_Email_Obj_Rel_Insert_Input = {
  data: Worker_Automatic_Email_Insert_Input;
  on_conflict?: Maybe<Worker_Automatic_Email_On_Conflict>;
};

/** on conflict condition type for table "worker_automatic_email" */
export type Worker_Automatic_Email_On_Conflict = {
  constraint: Worker_Automatic_Email_Constraint;
  update_columns: Array<Worker_Automatic_Email_Update_Column>;
  where?: Maybe<Worker_Automatic_Email_Bool_Exp>;
};

/** ordering options when selecting data from "worker_automatic_email" */
export type Worker_Automatic_Email_Order_By = {
  created_at?: Maybe<Order_By>;
  email?: Maybe<Order_By>;
  event?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
  worker?: Maybe<Worker_Order_By>;
};

/** primary key columns input for table: "worker_automatic_email" */
export type Worker_Automatic_Email_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "worker_automatic_email" */
export enum Worker_Automatic_Email_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Email = 'email',
  /** column name */
  Event = 'event',
  /** column name */
  Id = 'id',
  /** column name */
  UserId = 'user_id'
}

/** input type for updating data in table "worker_automatic_email" */
export type Worker_Automatic_Email_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  email?: Maybe<Scalars['String']>;
  event?: Maybe<Worker_Automatic_Email_Event_Type_Enum>;
  id?: Maybe<Scalars['uuid']>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "worker_automatic_email" */
export enum Worker_Automatic_Email_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Email = 'email',
  /** column name */
  Event = 'event',
  /** column name */
  Id = 'id',
  /** column name */
  UserId = 'user_id'
}

/** Boolean expression to filter rows from the table "worker". All fields are combined with a logical 'AND'. */
export type Worker_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Worker_Bool_Exp>>>;
  _not?: Maybe<Worker_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Worker_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  current_worker_role?: Maybe<String_Comparison_Exp>;
  email_daily_report_on_submit?: Maybe<Boolean_Comparison_Exp>;
  email_safety_report_on_submit?: Maybe<Boolean_Comparison_Exp>;
  email_toolbox_talk_on_submit?: Maybe<Boolean_Comparison_Exp>;
  hire_date?: Maybe<Date_Comparison_Exp>;
  subcontractor?: Maybe<Subcontractor_Bool_Exp>;
  subcontractor_id?: Maybe<Uuid_Comparison_Exp>;
  subcontractor_workers?: Maybe<Subcontractor_Worker_Bool_Exp>;
  uid?: Maybe<Uuid_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  user?: Maybe<User_Bool_Exp>;
  worker_automatic_emails?: Maybe<Worker_Automatic_Email_Bool_Exp>;
  worker_certifications?: Maybe<Worker_Certification_Bool_Exp>;
  worker_drug_tests?: Maybe<Worker_Drug_Test_Bool_Exp>;
  worker_enabled_automatic_email_events?: Maybe<Worker_Enabled_Automatic_Email_Event_Bool_Exp>;
  worker_projects?: Maybe<Project_Worker_Bool_Exp>;
  worker_role?: Maybe<Worker_Role_Bool_Exp>;
  worker_title?: Maybe<Worker_Title_Bool_Exp>;
  worker_title_id?: Maybe<Uuid_Comparison_Exp>;
};

/** columns and relationships of "worker_certification" */
export type Worker_Certification = {
   __typename?: 'worker_certification';
  /** An object relationship */
  certification: Certification;
  certification_id: Scalars['uuid'];
  created_at?: Maybe<Scalars['timestamptz']>;
  expires_on?: Maybe<Scalars['timestamptz']>;
  id: Scalars['uuid'];
  /** An array relationship */
  images: Array<Image>;
  /** An aggregated array relationship */
  images_aggregate: Image_Aggregate;
  issued_on?: Maybe<Scalars['timestamptz']>;
  updated_at: Scalars['timestamptz'];
  /** An object relationship */
  worker: Worker;
  worker_id: Scalars['uuid'];
};


/** columns and relationships of "worker_certification" */
export type Worker_CertificationImagesArgs = {
  distinct_on?: Maybe<Array<Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Image_Order_By>>;
  where?: Maybe<Image_Bool_Exp>;
};


/** columns and relationships of "worker_certification" */
export type Worker_CertificationImages_AggregateArgs = {
  distinct_on?: Maybe<Array<Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Image_Order_By>>;
  where?: Maybe<Image_Bool_Exp>;
};

/** aggregated selection of "worker_certification" */
export type Worker_Certification_Aggregate = {
   __typename?: 'worker_certification_aggregate';
  aggregate?: Maybe<Worker_Certification_Aggregate_Fields>;
  nodes: Array<Worker_Certification>;
};

/** aggregate fields of "worker_certification" */
export type Worker_Certification_Aggregate_Fields = {
   __typename?: 'worker_certification_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Worker_Certification_Max_Fields>;
  min?: Maybe<Worker_Certification_Min_Fields>;
};


/** aggregate fields of "worker_certification" */
export type Worker_Certification_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Worker_Certification_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "worker_certification" */
export type Worker_Certification_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Worker_Certification_Max_Order_By>;
  min?: Maybe<Worker_Certification_Min_Order_By>;
};

/** input type for inserting array relation for remote table "worker_certification" */
export type Worker_Certification_Arr_Rel_Insert_Input = {
  data: Array<Worker_Certification_Insert_Input>;
  on_conflict?: Maybe<Worker_Certification_On_Conflict>;
};

/** Boolean expression to filter rows from the table "worker_certification". All fields are combined with a logical 'AND'. */
export type Worker_Certification_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Worker_Certification_Bool_Exp>>>;
  _not?: Maybe<Worker_Certification_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Worker_Certification_Bool_Exp>>>;
  certification?: Maybe<Certification_Bool_Exp>;
  certification_id?: Maybe<Uuid_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  expires_on?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  images?: Maybe<Image_Bool_Exp>;
  issued_on?: Maybe<Timestamptz_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  worker?: Maybe<Worker_Bool_Exp>;
  worker_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "worker_certification" */
export enum Worker_Certification_Constraint {
  /** unique or primary key constraint */
  WorkerCertificationPkey = 'worker_certification_pkey'
}

/** input type for inserting data into table "worker_certification" */
export type Worker_Certification_Insert_Input = {
  certification?: Maybe<Certification_Obj_Rel_Insert_Input>;
  certification_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  expires_on?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  images?: Maybe<Image_Arr_Rel_Insert_Input>;
  issued_on?: Maybe<Scalars['timestamptz']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  worker?: Maybe<Worker_Obj_Rel_Insert_Input>;
  worker_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Worker_Certification_Max_Fields = {
   __typename?: 'worker_certification_max_fields';
  certification_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  expires_on?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  issued_on?: Maybe<Scalars['timestamptz']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  worker_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "worker_certification" */
export type Worker_Certification_Max_Order_By = {
  certification_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  expires_on?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  issued_on?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  worker_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Worker_Certification_Min_Fields = {
   __typename?: 'worker_certification_min_fields';
  certification_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  expires_on?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  issued_on?: Maybe<Scalars['timestamptz']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  worker_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "worker_certification" */
export type Worker_Certification_Min_Order_By = {
  certification_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  expires_on?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  issued_on?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  worker_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "worker_certification" */
export type Worker_Certification_Mutation_Response = {
   __typename?: 'worker_certification_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Worker_Certification>;
};

/** input type for inserting object relation for remote table "worker_certification" */
export type Worker_Certification_Obj_Rel_Insert_Input = {
  data: Worker_Certification_Insert_Input;
  on_conflict?: Maybe<Worker_Certification_On_Conflict>;
};

/** on conflict condition type for table "worker_certification" */
export type Worker_Certification_On_Conflict = {
  constraint: Worker_Certification_Constraint;
  update_columns: Array<Worker_Certification_Update_Column>;
  where?: Maybe<Worker_Certification_Bool_Exp>;
};

/** ordering options when selecting data from "worker_certification" */
export type Worker_Certification_Order_By = {
  certification?: Maybe<Certification_Order_By>;
  certification_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  expires_on?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  images_aggregate?: Maybe<Image_Aggregate_Order_By>;
  issued_on?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  worker?: Maybe<Worker_Order_By>;
  worker_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "worker_certification" */
export type Worker_Certification_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "worker_certification" */
export enum Worker_Certification_Select_Column {
  /** column name */
  CertificationId = 'certification_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  ExpiresOn = 'expires_on',
  /** column name */
  Id = 'id',
  /** column name */
  IssuedOn = 'issued_on',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  WorkerId = 'worker_id'
}

/** input type for updating data in table "worker_certification" */
export type Worker_Certification_Set_Input = {
  certification_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  expires_on?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  issued_on?: Maybe<Scalars['timestamptz']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  worker_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "worker_certification" */
export enum Worker_Certification_Update_Column {
  /** column name */
  CertificationId = 'certification_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  ExpiresOn = 'expires_on',
  /** column name */
  Id = 'id',
  /** column name */
  IssuedOn = 'issued_on',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  WorkerId = 'worker_id'
}

/** unique or primary key constraints on table "worker" */
export enum Worker_Constraint {
  /** unique or primary key constraint */
  WorkerPkey = 'worker_pkey'
}

/** columns and relationships of "worker_drug_test" */
export type Worker_Drug_Test = {
   __typename?: 'worker_drug_test';
  created_at: Scalars['timestamptz'];
  drug_test_date: Scalars['timestamptz'];
  id: Scalars['uuid'];
  /** An array relationship */
  images: Array<Image>;
  /** An aggregated array relationship */
  images_aggregate: Image_Aggregate;
  name: Scalars['String'];
  /** An object relationship */
  worker: Worker;
  worker_id: Scalars['uuid'];
};


/** columns and relationships of "worker_drug_test" */
export type Worker_Drug_TestImagesArgs = {
  distinct_on?: Maybe<Array<Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Image_Order_By>>;
  where?: Maybe<Image_Bool_Exp>;
};


/** columns and relationships of "worker_drug_test" */
export type Worker_Drug_TestImages_AggregateArgs = {
  distinct_on?: Maybe<Array<Image_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Image_Order_By>>;
  where?: Maybe<Image_Bool_Exp>;
};

/** aggregated selection of "worker_drug_test" */
export type Worker_Drug_Test_Aggregate = {
   __typename?: 'worker_drug_test_aggregate';
  aggregate?: Maybe<Worker_Drug_Test_Aggregate_Fields>;
  nodes: Array<Worker_Drug_Test>;
};

/** aggregate fields of "worker_drug_test" */
export type Worker_Drug_Test_Aggregate_Fields = {
   __typename?: 'worker_drug_test_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Worker_Drug_Test_Max_Fields>;
  min?: Maybe<Worker_Drug_Test_Min_Fields>;
};


/** aggregate fields of "worker_drug_test" */
export type Worker_Drug_Test_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Worker_Drug_Test_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "worker_drug_test" */
export type Worker_Drug_Test_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Worker_Drug_Test_Max_Order_By>;
  min?: Maybe<Worker_Drug_Test_Min_Order_By>;
};

/** input type for inserting array relation for remote table "worker_drug_test" */
export type Worker_Drug_Test_Arr_Rel_Insert_Input = {
  data: Array<Worker_Drug_Test_Insert_Input>;
  on_conflict?: Maybe<Worker_Drug_Test_On_Conflict>;
};

/** Boolean expression to filter rows from the table "worker_drug_test". All fields are combined with a logical 'AND'. */
export type Worker_Drug_Test_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Worker_Drug_Test_Bool_Exp>>>;
  _not?: Maybe<Worker_Drug_Test_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Worker_Drug_Test_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  drug_test_date?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  images?: Maybe<Image_Bool_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  worker?: Maybe<Worker_Bool_Exp>;
  worker_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "worker_drug_test" */
export enum Worker_Drug_Test_Constraint {
  /** unique or primary key constraint */
  WorkerDrugTestPkey = 'worker_drug_test_pkey',
  /** unique or primary key constraint */
  WorkerDrugTestWorkerIdNameDrugTestDateKey = 'worker_drug_test_worker_id_name_drug_test_date_key'
}

/** input type for inserting data into table "worker_drug_test" */
export type Worker_Drug_Test_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  drug_test_date?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  images?: Maybe<Image_Arr_Rel_Insert_Input>;
  name?: Maybe<Scalars['String']>;
  worker?: Maybe<Worker_Obj_Rel_Insert_Input>;
  worker_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Worker_Drug_Test_Max_Fields = {
   __typename?: 'worker_drug_test_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  drug_test_date?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  worker_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "worker_drug_test" */
export type Worker_Drug_Test_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  drug_test_date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  worker_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Worker_Drug_Test_Min_Fields = {
   __typename?: 'worker_drug_test_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  drug_test_date?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  worker_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "worker_drug_test" */
export type Worker_Drug_Test_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  drug_test_date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  worker_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "worker_drug_test" */
export type Worker_Drug_Test_Mutation_Response = {
   __typename?: 'worker_drug_test_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Worker_Drug_Test>;
};

/** input type for inserting object relation for remote table "worker_drug_test" */
export type Worker_Drug_Test_Obj_Rel_Insert_Input = {
  data: Worker_Drug_Test_Insert_Input;
  on_conflict?: Maybe<Worker_Drug_Test_On_Conflict>;
};

/** on conflict condition type for table "worker_drug_test" */
export type Worker_Drug_Test_On_Conflict = {
  constraint: Worker_Drug_Test_Constraint;
  update_columns: Array<Worker_Drug_Test_Update_Column>;
  where?: Maybe<Worker_Drug_Test_Bool_Exp>;
};

/** ordering options when selecting data from "worker_drug_test" */
export type Worker_Drug_Test_Order_By = {
  created_at?: Maybe<Order_By>;
  drug_test_date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  images_aggregate?: Maybe<Image_Aggregate_Order_By>;
  name?: Maybe<Order_By>;
  worker?: Maybe<Worker_Order_By>;
  worker_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "worker_drug_test" */
export type Worker_Drug_Test_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "worker_drug_test" */
export enum Worker_Drug_Test_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DrugTestDate = 'drug_test_date',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  WorkerId = 'worker_id'
}

/** input type for updating data in table "worker_drug_test" */
export type Worker_Drug_Test_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  drug_test_date?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  worker_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "worker_drug_test" */
export enum Worker_Drug_Test_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DrugTestDate = 'drug_test_date',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  WorkerId = 'worker_id'
}

/** columns and relationships of "worker_enabled_automatic_email_event" */
export type Worker_Enabled_Automatic_Email_Event = {
   __typename?: 'worker_enabled_automatic_email_event';
  created_at: Scalars['timestamptz'];
  event: Worker_Automatic_Email_Event_Type_Enum;
  id: Scalars['uuid'];
  user_id: Scalars['uuid'];
  /** An object relationship */
  worker: Worker;
};

/** aggregated selection of "worker_enabled_automatic_email_event" */
export type Worker_Enabled_Automatic_Email_Event_Aggregate = {
   __typename?: 'worker_enabled_automatic_email_event_aggregate';
  aggregate?: Maybe<Worker_Enabled_Automatic_Email_Event_Aggregate_Fields>;
  nodes: Array<Worker_Enabled_Automatic_Email_Event>;
};

/** aggregate fields of "worker_enabled_automatic_email_event" */
export type Worker_Enabled_Automatic_Email_Event_Aggregate_Fields = {
   __typename?: 'worker_enabled_automatic_email_event_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Worker_Enabled_Automatic_Email_Event_Max_Fields>;
  min?: Maybe<Worker_Enabled_Automatic_Email_Event_Min_Fields>;
};


/** aggregate fields of "worker_enabled_automatic_email_event" */
export type Worker_Enabled_Automatic_Email_Event_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Worker_Enabled_Automatic_Email_Event_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "worker_enabled_automatic_email_event" */
export type Worker_Enabled_Automatic_Email_Event_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Worker_Enabled_Automatic_Email_Event_Max_Order_By>;
  min?: Maybe<Worker_Enabled_Automatic_Email_Event_Min_Order_By>;
};

/** input type for inserting array relation for remote table "worker_enabled_automatic_email_event" */
export type Worker_Enabled_Automatic_Email_Event_Arr_Rel_Insert_Input = {
  data: Array<Worker_Enabled_Automatic_Email_Event_Insert_Input>;
  on_conflict?: Maybe<Worker_Enabled_Automatic_Email_Event_On_Conflict>;
};

/**
 * Boolean expression to filter rows from the table
 * "worker_enabled_automatic_email_event". All fields are combined with a logical 'AND'.
 */
export type Worker_Enabled_Automatic_Email_Event_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Worker_Enabled_Automatic_Email_Event_Bool_Exp>>>;
  _not?: Maybe<Worker_Enabled_Automatic_Email_Event_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Worker_Enabled_Automatic_Email_Event_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  event?: Maybe<Worker_Automatic_Email_Event_Type_Enum_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  user_id?: Maybe<Uuid_Comparison_Exp>;
  worker?: Maybe<Worker_Bool_Exp>;
};

/** unique or primary key constraints on table "worker_enabled_automatic_email_event" */
export enum Worker_Enabled_Automatic_Email_Event_Constraint {
  /** unique or primary key constraint */
  WorkerEnabledAutomaticEmailEventPkey = 'worker_enabled_automatic_email_event_pkey',
  /** unique or primary key constraint */
  WorkerEnabledAutomaticEmailEventUserIdEventKey = 'worker_enabled_automatic_email_event_user_id_event_key'
}

/** input type for inserting data into table "worker_enabled_automatic_email_event" */
export type Worker_Enabled_Automatic_Email_Event_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  event?: Maybe<Worker_Automatic_Email_Event_Type_Enum>;
  id?: Maybe<Scalars['uuid']>;
  user_id?: Maybe<Scalars['uuid']>;
  worker?: Maybe<Worker_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Worker_Enabled_Automatic_Email_Event_Max_Fields = {
   __typename?: 'worker_enabled_automatic_email_event_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "worker_enabled_automatic_email_event" */
export type Worker_Enabled_Automatic_Email_Event_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Worker_Enabled_Automatic_Email_Event_Min_Fields = {
   __typename?: 'worker_enabled_automatic_email_event_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "worker_enabled_automatic_email_event" */
export type Worker_Enabled_Automatic_Email_Event_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "worker_enabled_automatic_email_event" */
export type Worker_Enabled_Automatic_Email_Event_Mutation_Response = {
   __typename?: 'worker_enabled_automatic_email_event_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Worker_Enabled_Automatic_Email_Event>;
};

/** input type for inserting object relation for remote table "worker_enabled_automatic_email_event" */
export type Worker_Enabled_Automatic_Email_Event_Obj_Rel_Insert_Input = {
  data: Worker_Enabled_Automatic_Email_Event_Insert_Input;
  on_conflict?: Maybe<Worker_Enabled_Automatic_Email_Event_On_Conflict>;
};

/** on conflict condition type for table "worker_enabled_automatic_email_event" */
export type Worker_Enabled_Automatic_Email_Event_On_Conflict = {
  constraint: Worker_Enabled_Automatic_Email_Event_Constraint;
  update_columns: Array<Worker_Enabled_Automatic_Email_Event_Update_Column>;
  where?: Maybe<Worker_Enabled_Automatic_Email_Event_Bool_Exp>;
};

/** ordering options when selecting data from "worker_enabled_automatic_email_event" */
export type Worker_Enabled_Automatic_Email_Event_Order_By = {
  created_at?: Maybe<Order_By>;
  event?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
  worker?: Maybe<Worker_Order_By>;
};

/** primary key columns input for table: "worker_enabled_automatic_email_event" */
export type Worker_Enabled_Automatic_Email_Event_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "worker_enabled_automatic_email_event" */
export enum Worker_Enabled_Automatic_Email_Event_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Event = 'event',
  /** column name */
  Id = 'id',
  /** column name */
  UserId = 'user_id'
}

/** input type for updating data in table "worker_enabled_automatic_email_event" */
export type Worker_Enabled_Automatic_Email_Event_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  event?: Maybe<Worker_Automatic_Email_Event_Type_Enum>;
  id?: Maybe<Scalars['uuid']>;
  user_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "worker_enabled_automatic_email_event" */
export enum Worker_Enabled_Automatic_Email_Event_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Event = 'event',
  /** column name */
  Id = 'id',
  /** column name */
  UserId = 'user_id'
}

/** input type for inserting data into table "worker" */
export type Worker_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  current_worker_role?: Maybe<Scalars['String']>;
  email_daily_report_on_submit?: Maybe<Scalars['Boolean']>;
  email_safety_report_on_submit?: Maybe<Scalars['Boolean']>;
  email_toolbox_talk_on_submit?: Maybe<Scalars['Boolean']>;
  hire_date?: Maybe<Scalars['date']>;
  subcontractor?: Maybe<Subcontractor_Obj_Rel_Insert_Input>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  subcontractor_workers?: Maybe<Subcontractor_Worker_Arr_Rel_Insert_Input>;
  uid?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  user?: Maybe<User_Obj_Rel_Insert_Input>;
  worker_automatic_emails?: Maybe<Worker_Automatic_Email_Arr_Rel_Insert_Input>;
  worker_certifications?: Maybe<Worker_Certification_Arr_Rel_Insert_Input>;
  worker_drug_tests?: Maybe<Worker_Drug_Test_Arr_Rel_Insert_Input>;
  worker_enabled_automatic_email_events?: Maybe<Worker_Enabled_Automatic_Email_Event_Arr_Rel_Insert_Input>;
  worker_projects?: Maybe<Project_Worker_Arr_Rel_Insert_Input>;
  worker_role?: Maybe<Worker_Role_Obj_Rel_Insert_Input>;
  worker_title?: Maybe<Worker_Title_Obj_Rel_Insert_Input>;
  worker_title_id?: Maybe<Scalars['uuid']>;
};

export type Worker_Manhour_Stats_Args = {
  projectid?: Maybe<Scalars['uuid']>;
};

export type Worker_Manhour_Stats_By_Range_Args = {
  projectid?: Maybe<Scalars['uuid']>;
};

/** columns and relationships of "worker_manhour_stats_by_range_table" */
export type Worker_Manhour_Stats_By_Range_Table = {
   __typename?: 'worker_manhour_stats_by_range_table';
  apprentice?: Maybe<Scalars['bigint']>;
  foreman?: Maybe<Scalars['bigint']>;
  journeyman?: Maybe<Scalars['bigint']>;
  report_created_at: Scalars['date'];
  total?: Maybe<Scalars['bigint']>;
};

/** aggregated selection of "worker_manhour_stats_by_range_table" */
export type Worker_Manhour_Stats_By_Range_Table_Aggregate = {
   __typename?: 'worker_manhour_stats_by_range_table_aggregate';
  aggregate?: Maybe<Worker_Manhour_Stats_By_Range_Table_Aggregate_Fields>;
  nodes: Array<Worker_Manhour_Stats_By_Range_Table>;
};

/** aggregate fields of "worker_manhour_stats_by_range_table" */
export type Worker_Manhour_Stats_By_Range_Table_Aggregate_Fields = {
   __typename?: 'worker_manhour_stats_by_range_table_aggregate_fields';
  avg?: Maybe<Worker_Manhour_Stats_By_Range_Table_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Worker_Manhour_Stats_By_Range_Table_Max_Fields>;
  min?: Maybe<Worker_Manhour_Stats_By_Range_Table_Min_Fields>;
  stddev?: Maybe<Worker_Manhour_Stats_By_Range_Table_Stddev_Fields>;
  stddev_pop?: Maybe<Worker_Manhour_Stats_By_Range_Table_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Worker_Manhour_Stats_By_Range_Table_Stddev_Samp_Fields>;
  sum?: Maybe<Worker_Manhour_Stats_By_Range_Table_Sum_Fields>;
  var_pop?: Maybe<Worker_Manhour_Stats_By_Range_Table_Var_Pop_Fields>;
  var_samp?: Maybe<Worker_Manhour_Stats_By_Range_Table_Var_Samp_Fields>;
  variance?: Maybe<Worker_Manhour_Stats_By_Range_Table_Variance_Fields>;
};


/** aggregate fields of "worker_manhour_stats_by_range_table" */
export type Worker_Manhour_Stats_By_Range_Table_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Worker_Manhour_Stats_By_Range_Table_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "worker_manhour_stats_by_range_table" */
export type Worker_Manhour_Stats_By_Range_Table_Aggregate_Order_By = {
  avg?: Maybe<Worker_Manhour_Stats_By_Range_Table_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Worker_Manhour_Stats_By_Range_Table_Max_Order_By>;
  min?: Maybe<Worker_Manhour_Stats_By_Range_Table_Min_Order_By>;
  stddev?: Maybe<Worker_Manhour_Stats_By_Range_Table_Stddev_Order_By>;
  stddev_pop?: Maybe<Worker_Manhour_Stats_By_Range_Table_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Worker_Manhour_Stats_By_Range_Table_Stddev_Samp_Order_By>;
  sum?: Maybe<Worker_Manhour_Stats_By_Range_Table_Sum_Order_By>;
  var_pop?: Maybe<Worker_Manhour_Stats_By_Range_Table_Var_Pop_Order_By>;
  var_samp?: Maybe<Worker_Manhour_Stats_By_Range_Table_Var_Samp_Order_By>;
  variance?: Maybe<Worker_Manhour_Stats_By_Range_Table_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "worker_manhour_stats_by_range_table" */
export type Worker_Manhour_Stats_By_Range_Table_Arr_Rel_Insert_Input = {
  data: Array<Worker_Manhour_Stats_By_Range_Table_Insert_Input>;
  on_conflict?: Maybe<Worker_Manhour_Stats_By_Range_Table_On_Conflict>;
};

/** aggregate avg on columns */
export type Worker_Manhour_Stats_By_Range_Table_Avg_Fields = {
   __typename?: 'worker_manhour_stats_by_range_table_avg_fields';
  apprentice?: Maybe<Scalars['Float']>;
  foreman?: Maybe<Scalars['Float']>;
  journeyman?: Maybe<Scalars['Float']>;
  total?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "worker_manhour_stats_by_range_table" */
export type Worker_Manhour_Stats_By_Range_Table_Avg_Order_By = {
  apprentice?: Maybe<Order_By>;
  foreman?: Maybe<Order_By>;
  journeyman?: Maybe<Order_By>;
  total?: Maybe<Order_By>;
};

/**
 * Boolean expression to filter rows from the table
 * "worker_manhour_stats_by_range_table". All fields are combined with a logical 'AND'.
 */
export type Worker_Manhour_Stats_By_Range_Table_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Worker_Manhour_Stats_By_Range_Table_Bool_Exp>>>;
  _not?: Maybe<Worker_Manhour_Stats_By_Range_Table_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Worker_Manhour_Stats_By_Range_Table_Bool_Exp>>>;
  apprentice?: Maybe<Bigint_Comparison_Exp>;
  foreman?: Maybe<Bigint_Comparison_Exp>;
  journeyman?: Maybe<Bigint_Comparison_Exp>;
  report_created_at?: Maybe<Date_Comparison_Exp>;
  total?: Maybe<Bigint_Comparison_Exp>;
};

/** unique or primary key constraints on table "worker_manhour_stats_by_range_table" */
export enum Worker_Manhour_Stats_By_Range_Table_Constraint {
  /** unique or primary key constraint */
  WorkerManhourStatsByRangeTablePk = 'worker_manhour_stats_by_range_table_pk'
}

/** input type for incrementing integer column in table "worker_manhour_stats_by_range_table" */
export type Worker_Manhour_Stats_By_Range_Table_Inc_Input = {
  apprentice?: Maybe<Scalars['bigint']>;
  foreman?: Maybe<Scalars['bigint']>;
  journeyman?: Maybe<Scalars['bigint']>;
  total?: Maybe<Scalars['bigint']>;
};

/** input type for inserting data into table "worker_manhour_stats_by_range_table" */
export type Worker_Manhour_Stats_By_Range_Table_Insert_Input = {
  apprentice?: Maybe<Scalars['bigint']>;
  foreman?: Maybe<Scalars['bigint']>;
  journeyman?: Maybe<Scalars['bigint']>;
  report_created_at?: Maybe<Scalars['date']>;
  total?: Maybe<Scalars['bigint']>;
};

/** aggregate max on columns */
export type Worker_Manhour_Stats_By_Range_Table_Max_Fields = {
   __typename?: 'worker_manhour_stats_by_range_table_max_fields';
  apprentice?: Maybe<Scalars['bigint']>;
  foreman?: Maybe<Scalars['bigint']>;
  journeyman?: Maybe<Scalars['bigint']>;
  report_created_at?: Maybe<Scalars['date']>;
  total?: Maybe<Scalars['bigint']>;
};

/** order by max() on columns of table "worker_manhour_stats_by_range_table" */
export type Worker_Manhour_Stats_By_Range_Table_Max_Order_By = {
  apprentice?: Maybe<Order_By>;
  foreman?: Maybe<Order_By>;
  journeyman?: Maybe<Order_By>;
  report_created_at?: Maybe<Order_By>;
  total?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Worker_Manhour_Stats_By_Range_Table_Min_Fields = {
   __typename?: 'worker_manhour_stats_by_range_table_min_fields';
  apprentice?: Maybe<Scalars['bigint']>;
  foreman?: Maybe<Scalars['bigint']>;
  journeyman?: Maybe<Scalars['bigint']>;
  report_created_at?: Maybe<Scalars['date']>;
  total?: Maybe<Scalars['bigint']>;
};

/** order by min() on columns of table "worker_manhour_stats_by_range_table" */
export type Worker_Manhour_Stats_By_Range_Table_Min_Order_By = {
  apprentice?: Maybe<Order_By>;
  foreman?: Maybe<Order_By>;
  journeyman?: Maybe<Order_By>;
  report_created_at?: Maybe<Order_By>;
  total?: Maybe<Order_By>;
};

/** response of any mutation on the table "worker_manhour_stats_by_range_table" */
export type Worker_Manhour_Stats_By_Range_Table_Mutation_Response = {
   __typename?: 'worker_manhour_stats_by_range_table_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Worker_Manhour_Stats_By_Range_Table>;
};

/** input type for inserting object relation for remote table "worker_manhour_stats_by_range_table" */
export type Worker_Manhour_Stats_By_Range_Table_Obj_Rel_Insert_Input = {
  data: Worker_Manhour_Stats_By_Range_Table_Insert_Input;
  on_conflict?: Maybe<Worker_Manhour_Stats_By_Range_Table_On_Conflict>;
};

/** on conflict condition type for table "worker_manhour_stats_by_range_table" */
export type Worker_Manhour_Stats_By_Range_Table_On_Conflict = {
  constraint: Worker_Manhour_Stats_By_Range_Table_Constraint;
  update_columns: Array<Worker_Manhour_Stats_By_Range_Table_Update_Column>;
  where?: Maybe<Worker_Manhour_Stats_By_Range_Table_Bool_Exp>;
};

/** ordering options when selecting data from "worker_manhour_stats_by_range_table" */
export type Worker_Manhour_Stats_By_Range_Table_Order_By = {
  apprentice?: Maybe<Order_By>;
  foreman?: Maybe<Order_By>;
  journeyman?: Maybe<Order_By>;
  report_created_at?: Maybe<Order_By>;
  total?: Maybe<Order_By>;
};

/** primary key columns input for table: "worker_manhour_stats_by_range_table" */
export type Worker_Manhour_Stats_By_Range_Table_Pk_Columns_Input = {
  report_created_at: Scalars['date'];
};

/** select columns of table "worker_manhour_stats_by_range_table" */
export enum Worker_Manhour_Stats_By_Range_Table_Select_Column {
  /** column name */
  Apprentice = 'apprentice',
  /** column name */
  Foreman = 'foreman',
  /** column name */
  Journeyman = 'journeyman',
  /** column name */
  ReportCreatedAt = 'report_created_at',
  /** column name */
  Total = 'total'
}

/** input type for updating data in table "worker_manhour_stats_by_range_table" */
export type Worker_Manhour_Stats_By_Range_Table_Set_Input = {
  apprentice?: Maybe<Scalars['bigint']>;
  foreman?: Maybe<Scalars['bigint']>;
  journeyman?: Maybe<Scalars['bigint']>;
  report_created_at?: Maybe<Scalars['date']>;
  total?: Maybe<Scalars['bigint']>;
};

/** aggregate stddev on columns */
export type Worker_Manhour_Stats_By_Range_Table_Stddev_Fields = {
   __typename?: 'worker_manhour_stats_by_range_table_stddev_fields';
  apprentice?: Maybe<Scalars['Float']>;
  foreman?: Maybe<Scalars['Float']>;
  journeyman?: Maybe<Scalars['Float']>;
  total?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "worker_manhour_stats_by_range_table" */
export type Worker_Manhour_Stats_By_Range_Table_Stddev_Order_By = {
  apprentice?: Maybe<Order_By>;
  foreman?: Maybe<Order_By>;
  journeyman?: Maybe<Order_By>;
  total?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Worker_Manhour_Stats_By_Range_Table_Stddev_Pop_Fields = {
   __typename?: 'worker_manhour_stats_by_range_table_stddev_pop_fields';
  apprentice?: Maybe<Scalars['Float']>;
  foreman?: Maybe<Scalars['Float']>;
  journeyman?: Maybe<Scalars['Float']>;
  total?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "worker_manhour_stats_by_range_table" */
export type Worker_Manhour_Stats_By_Range_Table_Stddev_Pop_Order_By = {
  apprentice?: Maybe<Order_By>;
  foreman?: Maybe<Order_By>;
  journeyman?: Maybe<Order_By>;
  total?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Worker_Manhour_Stats_By_Range_Table_Stddev_Samp_Fields = {
   __typename?: 'worker_manhour_stats_by_range_table_stddev_samp_fields';
  apprentice?: Maybe<Scalars['Float']>;
  foreman?: Maybe<Scalars['Float']>;
  journeyman?: Maybe<Scalars['Float']>;
  total?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "worker_manhour_stats_by_range_table" */
export type Worker_Manhour_Stats_By_Range_Table_Stddev_Samp_Order_By = {
  apprentice?: Maybe<Order_By>;
  foreman?: Maybe<Order_By>;
  journeyman?: Maybe<Order_By>;
  total?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Worker_Manhour_Stats_By_Range_Table_Sum_Fields = {
   __typename?: 'worker_manhour_stats_by_range_table_sum_fields';
  apprentice?: Maybe<Scalars['bigint']>;
  foreman?: Maybe<Scalars['bigint']>;
  journeyman?: Maybe<Scalars['bigint']>;
  total?: Maybe<Scalars['bigint']>;
};

/** order by sum() on columns of table "worker_manhour_stats_by_range_table" */
export type Worker_Manhour_Stats_By_Range_Table_Sum_Order_By = {
  apprentice?: Maybe<Order_By>;
  foreman?: Maybe<Order_By>;
  journeyman?: Maybe<Order_By>;
  total?: Maybe<Order_By>;
};

/** update columns of table "worker_manhour_stats_by_range_table" */
export enum Worker_Manhour_Stats_By_Range_Table_Update_Column {
  /** column name */
  Apprentice = 'apprentice',
  /** column name */
  Foreman = 'foreman',
  /** column name */
  Journeyman = 'journeyman',
  /** column name */
  ReportCreatedAt = 'report_created_at',
  /** column name */
  Total = 'total'
}

/** aggregate var_pop on columns */
export type Worker_Manhour_Stats_By_Range_Table_Var_Pop_Fields = {
   __typename?: 'worker_manhour_stats_by_range_table_var_pop_fields';
  apprentice?: Maybe<Scalars['Float']>;
  foreman?: Maybe<Scalars['Float']>;
  journeyman?: Maybe<Scalars['Float']>;
  total?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "worker_manhour_stats_by_range_table" */
export type Worker_Manhour_Stats_By_Range_Table_Var_Pop_Order_By = {
  apprentice?: Maybe<Order_By>;
  foreman?: Maybe<Order_By>;
  journeyman?: Maybe<Order_By>;
  total?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Worker_Manhour_Stats_By_Range_Table_Var_Samp_Fields = {
   __typename?: 'worker_manhour_stats_by_range_table_var_samp_fields';
  apprentice?: Maybe<Scalars['Float']>;
  foreman?: Maybe<Scalars['Float']>;
  journeyman?: Maybe<Scalars['Float']>;
  total?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "worker_manhour_stats_by_range_table" */
export type Worker_Manhour_Stats_By_Range_Table_Var_Samp_Order_By = {
  apprentice?: Maybe<Order_By>;
  foreman?: Maybe<Order_By>;
  journeyman?: Maybe<Order_By>;
  total?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Worker_Manhour_Stats_By_Range_Table_Variance_Fields = {
   __typename?: 'worker_manhour_stats_by_range_table_variance_fields';
  apprentice?: Maybe<Scalars['Float']>;
  foreman?: Maybe<Scalars['Float']>;
  journeyman?: Maybe<Scalars['Float']>;
  total?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "worker_manhour_stats_by_range_table" */
export type Worker_Manhour_Stats_By_Range_Table_Variance_Order_By = {
  apprentice?: Maybe<Order_By>;
  foreman?: Maybe<Order_By>;
  journeyman?: Maybe<Order_By>;
  total?: Maybe<Order_By>;
};

/**
 * placeholder table for worker_stats_table function requiring SET OF
 * 
 * 
 * columns and relationships of "worker_manhour_stats_table"
 */
export type Worker_Manhour_Stats_Table = {
   __typename?: 'worker_manhour_stats_table';
  apprentice_today: Scalars['bigint'];
  foreman_today: Scalars['bigint'];
  journeymen_today: Scalars['bigint'];
  man_hours_last_mo?: Maybe<Scalars['bigint']>;
  man_hours_last_wk?: Maybe<Scalars['bigint']>;
  man_hours_this_mo?: Maybe<Scalars['bigint']>;
  man_hours_this_wk?: Maybe<Scalars['bigint']>;
  man_hours_today?: Maybe<Scalars['bigint']>;
  man_hours_total?: Maybe<Scalars['bigint']>;
  man_hours_two_mo_ago?: Maybe<Scalars['bigint']>;
  man_hours_ytd?: Maybe<Scalars['bigint']>;
  sub_id: Scalars['uuid'];
  sub_name: Scalars['String'];
  sub_trade: Scalars['String'];
};

/** aggregated selection of "worker_manhour_stats_table" */
export type Worker_Manhour_Stats_Table_Aggregate = {
   __typename?: 'worker_manhour_stats_table_aggregate';
  aggregate?: Maybe<Worker_Manhour_Stats_Table_Aggregate_Fields>;
  nodes: Array<Worker_Manhour_Stats_Table>;
};

/** aggregate fields of "worker_manhour_stats_table" */
export type Worker_Manhour_Stats_Table_Aggregate_Fields = {
   __typename?: 'worker_manhour_stats_table_aggregate_fields';
  avg?: Maybe<Worker_Manhour_Stats_Table_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Worker_Manhour_Stats_Table_Max_Fields>;
  min?: Maybe<Worker_Manhour_Stats_Table_Min_Fields>;
  stddev?: Maybe<Worker_Manhour_Stats_Table_Stddev_Fields>;
  stddev_pop?: Maybe<Worker_Manhour_Stats_Table_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Worker_Manhour_Stats_Table_Stddev_Samp_Fields>;
  sum?: Maybe<Worker_Manhour_Stats_Table_Sum_Fields>;
  var_pop?: Maybe<Worker_Manhour_Stats_Table_Var_Pop_Fields>;
  var_samp?: Maybe<Worker_Manhour_Stats_Table_Var_Samp_Fields>;
  variance?: Maybe<Worker_Manhour_Stats_Table_Variance_Fields>;
};


/** aggregate fields of "worker_manhour_stats_table" */
export type Worker_Manhour_Stats_Table_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Worker_Manhour_Stats_Table_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "worker_manhour_stats_table" */
export type Worker_Manhour_Stats_Table_Aggregate_Order_By = {
  avg?: Maybe<Worker_Manhour_Stats_Table_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Worker_Manhour_Stats_Table_Max_Order_By>;
  min?: Maybe<Worker_Manhour_Stats_Table_Min_Order_By>;
  stddev?: Maybe<Worker_Manhour_Stats_Table_Stddev_Order_By>;
  stddev_pop?: Maybe<Worker_Manhour_Stats_Table_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Worker_Manhour_Stats_Table_Stddev_Samp_Order_By>;
  sum?: Maybe<Worker_Manhour_Stats_Table_Sum_Order_By>;
  var_pop?: Maybe<Worker_Manhour_Stats_Table_Var_Pop_Order_By>;
  var_samp?: Maybe<Worker_Manhour_Stats_Table_Var_Samp_Order_By>;
  variance?: Maybe<Worker_Manhour_Stats_Table_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "worker_manhour_stats_table" */
export type Worker_Manhour_Stats_Table_Arr_Rel_Insert_Input = {
  data: Array<Worker_Manhour_Stats_Table_Insert_Input>;
  on_conflict?: Maybe<Worker_Manhour_Stats_Table_On_Conflict>;
};

/** aggregate avg on columns */
export type Worker_Manhour_Stats_Table_Avg_Fields = {
   __typename?: 'worker_manhour_stats_table_avg_fields';
  apprentice_today?: Maybe<Scalars['Float']>;
  foreman_today?: Maybe<Scalars['Float']>;
  journeymen_today?: Maybe<Scalars['Float']>;
  man_hours_last_mo?: Maybe<Scalars['Float']>;
  man_hours_last_wk?: Maybe<Scalars['Float']>;
  man_hours_this_mo?: Maybe<Scalars['Float']>;
  man_hours_this_wk?: Maybe<Scalars['Float']>;
  man_hours_today?: Maybe<Scalars['Float']>;
  man_hours_total?: Maybe<Scalars['Float']>;
  man_hours_two_mo_ago?: Maybe<Scalars['Float']>;
  man_hours_ytd?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "worker_manhour_stats_table" */
export type Worker_Manhour_Stats_Table_Avg_Order_By = {
  apprentice_today?: Maybe<Order_By>;
  foreman_today?: Maybe<Order_By>;
  journeymen_today?: Maybe<Order_By>;
  man_hours_last_mo?: Maybe<Order_By>;
  man_hours_last_wk?: Maybe<Order_By>;
  man_hours_this_mo?: Maybe<Order_By>;
  man_hours_this_wk?: Maybe<Order_By>;
  man_hours_today?: Maybe<Order_By>;
  man_hours_total?: Maybe<Order_By>;
  man_hours_two_mo_ago?: Maybe<Order_By>;
  man_hours_ytd?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "worker_manhour_stats_table". All fields are combined with a logical 'AND'. */
export type Worker_Manhour_Stats_Table_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Worker_Manhour_Stats_Table_Bool_Exp>>>;
  _not?: Maybe<Worker_Manhour_Stats_Table_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Worker_Manhour_Stats_Table_Bool_Exp>>>;
  apprentice_today?: Maybe<Bigint_Comparison_Exp>;
  foreman_today?: Maybe<Bigint_Comparison_Exp>;
  journeymen_today?: Maybe<Bigint_Comparison_Exp>;
  man_hours_last_mo?: Maybe<Bigint_Comparison_Exp>;
  man_hours_last_wk?: Maybe<Bigint_Comparison_Exp>;
  man_hours_this_mo?: Maybe<Bigint_Comparison_Exp>;
  man_hours_this_wk?: Maybe<Bigint_Comparison_Exp>;
  man_hours_today?: Maybe<Bigint_Comparison_Exp>;
  man_hours_total?: Maybe<Bigint_Comparison_Exp>;
  man_hours_two_mo_ago?: Maybe<Bigint_Comparison_Exp>;
  man_hours_ytd?: Maybe<Bigint_Comparison_Exp>;
  sub_id?: Maybe<Uuid_Comparison_Exp>;
  sub_name?: Maybe<String_Comparison_Exp>;
  sub_trade?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "worker_manhour_stats_table" */
export enum Worker_Manhour_Stats_Table_Constraint {
  /** unique or primary key constraint */
  WorkerStatsTablePkey = 'worker_stats_table_pkey'
}

/** input type for incrementing integer column in table "worker_manhour_stats_table" */
export type Worker_Manhour_Stats_Table_Inc_Input = {
  apprentice_today?: Maybe<Scalars['bigint']>;
  foreman_today?: Maybe<Scalars['bigint']>;
  journeymen_today?: Maybe<Scalars['bigint']>;
  man_hours_last_mo?: Maybe<Scalars['bigint']>;
  man_hours_last_wk?: Maybe<Scalars['bigint']>;
  man_hours_this_mo?: Maybe<Scalars['bigint']>;
  man_hours_this_wk?: Maybe<Scalars['bigint']>;
  man_hours_today?: Maybe<Scalars['bigint']>;
  man_hours_total?: Maybe<Scalars['bigint']>;
  man_hours_two_mo_ago?: Maybe<Scalars['bigint']>;
  man_hours_ytd?: Maybe<Scalars['bigint']>;
};

/** input type for inserting data into table "worker_manhour_stats_table" */
export type Worker_Manhour_Stats_Table_Insert_Input = {
  apprentice_today?: Maybe<Scalars['bigint']>;
  foreman_today?: Maybe<Scalars['bigint']>;
  journeymen_today?: Maybe<Scalars['bigint']>;
  man_hours_last_mo?: Maybe<Scalars['bigint']>;
  man_hours_last_wk?: Maybe<Scalars['bigint']>;
  man_hours_this_mo?: Maybe<Scalars['bigint']>;
  man_hours_this_wk?: Maybe<Scalars['bigint']>;
  man_hours_today?: Maybe<Scalars['bigint']>;
  man_hours_total?: Maybe<Scalars['bigint']>;
  man_hours_two_mo_ago?: Maybe<Scalars['bigint']>;
  man_hours_ytd?: Maybe<Scalars['bigint']>;
  sub_id?: Maybe<Scalars['uuid']>;
  sub_name?: Maybe<Scalars['String']>;
  sub_trade?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Worker_Manhour_Stats_Table_Max_Fields = {
   __typename?: 'worker_manhour_stats_table_max_fields';
  apprentice_today?: Maybe<Scalars['bigint']>;
  foreman_today?: Maybe<Scalars['bigint']>;
  journeymen_today?: Maybe<Scalars['bigint']>;
  man_hours_last_mo?: Maybe<Scalars['bigint']>;
  man_hours_last_wk?: Maybe<Scalars['bigint']>;
  man_hours_this_mo?: Maybe<Scalars['bigint']>;
  man_hours_this_wk?: Maybe<Scalars['bigint']>;
  man_hours_today?: Maybe<Scalars['bigint']>;
  man_hours_total?: Maybe<Scalars['bigint']>;
  man_hours_two_mo_ago?: Maybe<Scalars['bigint']>;
  man_hours_ytd?: Maybe<Scalars['bigint']>;
  sub_id?: Maybe<Scalars['uuid']>;
  sub_name?: Maybe<Scalars['String']>;
  sub_trade?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "worker_manhour_stats_table" */
export type Worker_Manhour_Stats_Table_Max_Order_By = {
  apprentice_today?: Maybe<Order_By>;
  foreman_today?: Maybe<Order_By>;
  journeymen_today?: Maybe<Order_By>;
  man_hours_last_mo?: Maybe<Order_By>;
  man_hours_last_wk?: Maybe<Order_By>;
  man_hours_this_mo?: Maybe<Order_By>;
  man_hours_this_wk?: Maybe<Order_By>;
  man_hours_today?: Maybe<Order_By>;
  man_hours_total?: Maybe<Order_By>;
  man_hours_two_mo_ago?: Maybe<Order_By>;
  man_hours_ytd?: Maybe<Order_By>;
  sub_id?: Maybe<Order_By>;
  sub_name?: Maybe<Order_By>;
  sub_trade?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Worker_Manhour_Stats_Table_Min_Fields = {
   __typename?: 'worker_manhour_stats_table_min_fields';
  apprentice_today?: Maybe<Scalars['bigint']>;
  foreman_today?: Maybe<Scalars['bigint']>;
  journeymen_today?: Maybe<Scalars['bigint']>;
  man_hours_last_mo?: Maybe<Scalars['bigint']>;
  man_hours_last_wk?: Maybe<Scalars['bigint']>;
  man_hours_this_mo?: Maybe<Scalars['bigint']>;
  man_hours_this_wk?: Maybe<Scalars['bigint']>;
  man_hours_today?: Maybe<Scalars['bigint']>;
  man_hours_total?: Maybe<Scalars['bigint']>;
  man_hours_two_mo_ago?: Maybe<Scalars['bigint']>;
  man_hours_ytd?: Maybe<Scalars['bigint']>;
  sub_id?: Maybe<Scalars['uuid']>;
  sub_name?: Maybe<Scalars['String']>;
  sub_trade?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "worker_manhour_stats_table" */
export type Worker_Manhour_Stats_Table_Min_Order_By = {
  apprentice_today?: Maybe<Order_By>;
  foreman_today?: Maybe<Order_By>;
  journeymen_today?: Maybe<Order_By>;
  man_hours_last_mo?: Maybe<Order_By>;
  man_hours_last_wk?: Maybe<Order_By>;
  man_hours_this_mo?: Maybe<Order_By>;
  man_hours_this_wk?: Maybe<Order_By>;
  man_hours_today?: Maybe<Order_By>;
  man_hours_total?: Maybe<Order_By>;
  man_hours_two_mo_ago?: Maybe<Order_By>;
  man_hours_ytd?: Maybe<Order_By>;
  sub_id?: Maybe<Order_By>;
  sub_name?: Maybe<Order_By>;
  sub_trade?: Maybe<Order_By>;
};

/** response of any mutation on the table "worker_manhour_stats_table" */
export type Worker_Manhour_Stats_Table_Mutation_Response = {
   __typename?: 'worker_manhour_stats_table_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Worker_Manhour_Stats_Table>;
};

/** input type for inserting object relation for remote table "worker_manhour_stats_table" */
export type Worker_Manhour_Stats_Table_Obj_Rel_Insert_Input = {
  data: Worker_Manhour_Stats_Table_Insert_Input;
  on_conflict?: Maybe<Worker_Manhour_Stats_Table_On_Conflict>;
};

/** on conflict condition type for table "worker_manhour_stats_table" */
export type Worker_Manhour_Stats_Table_On_Conflict = {
  constraint: Worker_Manhour_Stats_Table_Constraint;
  update_columns: Array<Worker_Manhour_Stats_Table_Update_Column>;
  where?: Maybe<Worker_Manhour_Stats_Table_Bool_Exp>;
};

/** ordering options when selecting data from "worker_manhour_stats_table" */
export type Worker_Manhour_Stats_Table_Order_By = {
  apprentice_today?: Maybe<Order_By>;
  foreman_today?: Maybe<Order_By>;
  journeymen_today?: Maybe<Order_By>;
  man_hours_last_mo?: Maybe<Order_By>;
  man_hours_last_wk?: Maybe<Order_By>;
  man_hours_this_mo?: Maybe<Order_By>;
  man_hours_this_wk?: Maybe<Order_By>;
  man_hours_today?: Maybe<Order_By>;
  man_hours_total?: Maybe<Order_By>;
  man_hours_two_mo_ago?: Maybe<Order_By>;
  man_hours_ytd?: Maybe<Order_By>;
  sub_id?: Maybe<Order_By>;
  sub_name?: Maybe<Order_By>;
  sub_trade?: Maybe<Order_By>;
};

/** primary key columns input for table: "worker_manhour_stats_table" */
export type Worker_Manhour_Stats_Table_Pk_Columns_Input = {
  sub_id: Scalars['uuid'];
};

/** select columns of table "worker_manhour_stats_table" */
export enum Worker_Manhour_Stats_Table_Select_Column {
  /** column name */
  ApprenticeToday = 'apprentice_today',
  /** column name */
  ForemanToday = 'foreman_today',
  /** column name */
  JourneymenToday = 'journeymen_today',
  /** column name */
  ManHoursLastMo = 'man_hours_last_mo',
  /** column name */
  ManHoursLastWk = 'man_hours_last_wk',
  /** column name */
  ManHoursThisMo = 'man_hours_this_mo',
  /** column name */
  ManHoursThisWk = 'man_hours_this_wk',
  /** column name */
  ManHoursToday = 'man_hours_today',
  /** column name */
  ManHoursTotal = 'man_hours_total',
  /** column name */
  ManHoursTwoMoAgo = 'man_hours_two_mo_ago',
  /** column name */
  ManHoursYtd = 'man_hours_ytd',
  /** column name */
  SubId = 'sub_id',
  /** column name */
  SubName = 'sub_name',
  /** column name */
  SubTrade = 'sub_trade'
}

/** input type for updating data in table "worker_manhour_stats_table" */
export type Worker_Manhour_Stats_Table_Set_Input = {
  apprentice_today?: Maybe<Scalars['bigint']>;
  foreman_today?: Maybe<Scalars['bigint']>;
  journeymen_today?: Maybe<Scalars['bigint']>;
  man_hours_last_mo?: Maybe<Scalars['bigint']>;
  man_hours_last_wk?: Maybe<Scalars['bigint']>;
  man_hours_this_mo?: Maybe<Scalars['bigint']>;
  man_hours_this_wk?: Maybe<Scalars['bigint']>;
  man_hours_today?: Maybe<Scalars['bigint']>;
  man_hours_total?: Maybe<Scalars['bigint']>;
  man_hours_two_mo_ago?: Maybe<Scalars['bigint']>;
  man_hours_ytd?: Maybe<Scalars['bigint']>;
  sub_id?: Maybe<Scalars['uuid']>;
  sub_name?: Maybe<Scalars['String']>;
  sub_trade?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Worker_Manhour_Stats_Table_Stddev_Fields = {
   __typename?: 'worker_manhour_stats_table_stddev_fields';
  apprentice_today?: Maybe<Scalars['Float']>;
  foreman_today?: Maybe<Scalars['Float']>;
  journeymen_today?: Maybe<Scalars['Float']>;
  man_hours_last_mo?: Maybe<Scalars['Float']>;
  man_hours_last_wk?: Maybe<Scalars['Float']>;
  man_hours_this_mo?: Maybe<Scalars['Float']>;
  man_hours_this_wk?: Maybe<Scalars['Float']>;
  man_hours_today?: Maybe<Scalars['Float']>;
  man_hours_total?: Maybe<Scalars['Float']>;
  man_hours_two_mo_ago?: Maybe<Scalars['Float']>;
  man_hours_ytd?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "worker_manhour_stats_table" */
export type Worker_Manhour_Stats_Table_Stddev_Order_By = {
  apprentice_today?: Maybe<Order_By>;
  foreman_today?: Maybe<Order_By>;
  journeymen_today?: Maybe<Order_By>;
  man_hours_last_mo?: Maybe<Order_By>;
  man_hours_last_wk?: Maybe<Order_By>;
  man_hours_this_mo?: Maybe<Order_By>;
  man_hours_this_wk?: Maybe<Order_By>;
  man_hours_today?: Maybe<Order_By>;
  man_hours_total?: Maybe<Order_By>;
  man_hours_two_mo_ago?: Maybe<Order_By>;
  man_hours_ytd?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Worker_Manhour_Stats_Table_Stddev_Pop_Fields = {
   __typename?: 'worker_manhour_stats_table_stddev_pop_fields';
  apprentice_today?: Maybe<Scalars['Float']>;
  foreman_today?: Maybe<Scalars['Float']>;
  journeymen_today?: Maybe<Scalars['Float']>;
  man_hours_last_mo?: Maybe<Scalars['Float']>;
  man_hours_last_wk?: Maybe<Scalars['Float']>;
  man_hours_this_mo?: Maybe<Scalars['Float']>;
  man_hours_this_wk?: Maybe<Scalars['Float']>;
  man_hours_today?: Maybe<Scalars['Float']>;
  man_hours_total?: Maybe<Scalars['Float']>;
  man_hours_two_mo_ago?: Maybe<Scalars['Float']>;
  man_hours_ytd?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "worker_manhour_stats_table" */
export type Worker_Manhour_Stats_Table_Stddev_Pop_Order_By = {
  apprentice_today?: Maybe<Order_By>;
  foreman_today?: Maybe<Order_By>;
  journeymen_today?: Maybe<Order_By>;
  man_hours_last_mo?: Maybe<Order_By>;
  man_hours_last_wk?: Maybe<Order_By>;
  man_hours_this_mo?: Maybe<Order_By>;
  man_hours_this_wk?: Maybe<Order_By>;
  man_hours_today?: Maybe<Order_By>;
  man_hours_total?: Maybe<Order_By>;
  man_hours_two_mo_ago?: Maybe<Order_By>;
  man_hours_ytd?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Worker_Manhour_Stats_Table_Stddev_Samp_Fields = {
   __typename?: 'worker_manhour_stats_table_stddev_samp_fields';
  apprentice_today?: Maybe<Scalars['Float']>;
  foreman_today?: Maybe<Scalars['Float']>;
  journeymen_today?: Maybe<Scalars['Float']>;
  man_hours_last_mo?: Maybe<Scalars['Float']>;
  man_hours_last_wk?: Maybe<Scalars['Float']>;
  man_hours_this_mo?: Maybe<Scalars['Float']>;
  man_hours_this_wk?: Maybe<Scalars['Float']>;
  man_hours_today?: Maybe<Scalars['Float']>;
  man_hours_total?: Maybe<Scalars['Float']>;
  man_hours_two_mo_ago?: Maybe<Scalars['Float']>;
  man_hours_ytd?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "worker_manhour_stats_table" */
export type Worker_Manhour_Stats_Table_Stddev_Samp_Order_By = {
  apprentice_today?: Maybe<Order_By>;
  foreman_today?: Maybe<Order_By>;
  journeymen_today?: Maybe<Order_By>;
  man_hours_last_mo?: Maybe<Order_By>;
  man_hours_last_wk?: Maybe<Order_By>;
  man_hours_this_mo?: Maybe<Order_By>;
  man_hours_this_wk?: Maybe<Order_By>;
  man_hours_today?: Maybe<Order_By>;
  man_hours_total?: Maybe<Order_By>;
  man_hours_two_mo_ago?: Maybe<Order_By>;
  man_hours_ytd?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Worker_Manhour_Stats_Table_Sum_Fields = {
   __typename?: 'worker_manhour_stats_table_sum_fields';
  apprentice_today?: Maybe<Scalars['bigint']>;
  foreman_today?: Maybe<Scalars['bigint']>;
  journeymen_today?: Maybe<Scalars['bigint']>;
  man_hours_last_mo?: Maybe<Scalars['bigint']>;
  man_hours_last_wk?: Maybe<Scalars['bigint']>;
  man_hours_this_mo?: Maybe<Scalars['bigint']>;
  man_hours_this_wk?: Maybe<Scalars['bigint']>;
  man_hours_today?: Maybe<Scalars['bigint']>;
  man_hours_total?: Maybe<Scalars['bigint']>;
  man_hours_two_mo_ago?: Maybe<Scalars['bigint']>;
  man_hours_ytd?: Maybe<Scalars['bigint']>;
};

/** order by sum() on columns of table "worker_manhour_stats_table" */
export type Worker_Manhour_Stats_Table_Sum_Order_By = {
  apprentice_today?: Maybe<Order_By>;
  foreman_today?: Maybe<Order_By>;
  journeymen_today?: Maybe<Order_By>;
  man_hours_last_mo?: Maybe<Order_By>;
  man_hours_last_wk?: Maybe<Order_By>;
  man_hours_this_mo?: Maybe<Order_By>;
  man_hours_this_wk?: Maybe<Order_By>;
  man_hours_today?: Maybe<Order_By>;
  man_hours_total?: Maybe<Order_By>;
  man_hours_two_mo_ago?: Maybe<Order_By>;
  man_hours_ytd?: Maybe<Order_By>;
};

/** update columns of table "worker_manhour_stats_table" */
export enum Worker_Manhour_Stats_Table_Update_Column {
  /** column name */
  ApprenticeToday = 'apprentice_today',
  /** column name */
  ForemanToday = 'foreman_today',
  /** column name */
  JourneymenToday = 'journeymen_today',
  /** column name */
  ManHoursLastMo = 'man_hours_last_mo',
  /** column name */
  ManHoursLastWk = 'man_hours_last_wk',
  /** column name */
  ManHoursThisMo = 'man_hours_this_mo',
  /** column name */
  ManHoursThisWk = 'man_hours_this_wk',
  /** column name */
  ManHoursToday = 'man_hours_today',
  /** column name */
  ManHoursTotal = 'man_hours_total',
  /** column name */
  ManHoursTwoMoAgo = 'man_hours_two_mo_ago',
  /** column name */
  ManHoursYtd = 'man_hours_ytd',
  /** column name */
  SubId = 'sub_id',
  /** column name */
  SubName = 'sub_name',
  /** column name */
  SubTrade = 'sub_trade'
}

/** aggregate var_pop on columns */
export type Worker_Manhour_Stats_Table_Var_Pop_Fields = {
   __typename?: 'worker_manhour_stats_table_var_pop_fields';
  apprentice_today?: Maybe<Scalars['Float']>;
  foreman_today?: Maybe<Scalars['Float']>;
  journeymen_today?: Maybe<Scalars['Float']>;
  man_hours_last_mo?: Maybe<Scalars['Float']>;
  man_hours_last_wk?: Maybe<Scalars['Float']>;
  man_hours_this_mo?: Maybe<Scalars['Float']>;
  man_hours_this_wk?: Maybe<Scalars['Float']>;
  man_hours_today?: Maybe<Scalars['Float']>;
  man_hours_total?: Maybe<Scalars['Float']>;
  man_hours_two_mo_ago?: Maybe<Scalars['Float']>;
  man_hours_ytd?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "worker_manhour_stats_table" */
export type Worker_Manhour_Stats_Table_Var_Pop_Order_By = {
  apprentice_today?: Maybe<Order_By>;
  foreman_today?: Maybe<Order_By>;
  journeymen_today?: Maybe<Order_By>;
  man_hours_last_mo?: Maybe<Order_By>;
  man_hours_last_wk?: Maybe<Order_By>;
  man_hours_this_mo?: Maybe<Order_By>;
  man_hours_this_wk?: Maybe<Order_By>;
  man_hours_today?: Maybe<Order_By>;
  man_hours_total?: Maybe<Order_By>;
  man_hours_two_mo_ago?: Maybe<Order_By>;
  man_hours_ytd?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Worker_Manhour_Stats_Table_Var_Samp_Fields = {
   __typename?: 'worker_manhour_stats_table_var_samp_fields';
  apprentice_today?: Maybe<Scalars['Float']>;
  foreman_today?: Maybe<Scalars['Float']>;
  journeymen_today?: Maybe<Scalars['Float']>;
  man_hours_last_mo?: Maybe<Scalars['Float']>;
  man_hours_last_wk?: Maybe<Scalars['Float']>;
  man_hours_this_mo?: Maybe<Scalars['Float']>;
  man_hours_this_wk?: Maybe<Scalars['Float']>;
  man_hours_today?: Maybe<Scalars['Float']>;
  man_hours_total?: Maybe<Scalars['Float']>;
  man_hours_two_mo_ago?: Maybe<Scalars['Float']>;
  man_hours_ytd?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "worker_manhour_stats_table" */
export type Worker_Manhour_Stats_Table_Var_Samp_Order_By = {
  apprentice_today?: Maybe<Order_By>;
  foreman_today?: Maybe<Order_By>;
  journeymen_today?: Maybe<Order_By>;
  man_hours_last_mo?: Maybe<Order_By>;
  man_hours_last_wk?: Maybe<Order_By>;
  man_hours_this_mo?: Maybe<Order_By>;
  man_hours_this_wk?: Maybe<Order_By>;
  man_hours_today?: Maybe<Order_By>;
  man_hours_total?: Maybe<Order_By>;
  man_hours_two_mo_ago?: Maybe<Order_By>;
  man_hours_ytd?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Worker_Manhour_Stats_Table_Variance_Fields = {
   __typename?: 'worker_manhour_stats_table_variance_fields';
  apprentice_today?: Maybe<Scalars['Float']>;
  foreman_today?: Maybe<Scalars['Float']>;
  journeymen_today?: Maybe<Scalars['Float']>;
  man_hours_last_mo?: Maybe<Scalars['Float']>;
  man_hours_last_wk?: Maybe<Scalars['Float']>;
  man_hours_this_mo?: Maybe<Scalars['Float']>;
  man_hours_this_wk?: Maybe<Scalars['Float']>;
  man_hours_today?: Maybe<Scalars['Float']>;
  man_hours_total?: Maybe<Scalars['Float']>;
  man_hours_two_mo_ago?: Maybe<Scalars['Float']>;
  man_hours_ytd?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "worker_manhour_stats_table" */
export type Worker_Manhour_Stats_Table_Variance_Order_By = {
  apprentice_today?: Maybe<Order_By>;
  foreman_today?: Maybe<Order_By>;
  journeymen_today?: Maybe<Order_By>;
  man_hours_last_mo?: Maybe<Order_By>;
  man_hours_last_wk?: Maybe<Order_By>;
  man_hours_this_mo?: Maybe<Order_By>;
  man_hours_this_wk?: Maybe<Order_By>;
  man_hours_today?: Maybe<Order_By>;
  man_hours_total?: Maybe<Order_By>;
  man_hours_two_mo_ago?: Maybe<Order_By>;
  man_hours_ytd?: Maybe<Order_By>;
};

/** aggregate max on columns */
export type Worker_Max_Fields = {
   __typename?: 'worker_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  current_worker_role?: Maybe<Scalars['String']>;
  hire_date?: Maybe<Scalars['date']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  uid?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  worker_title_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "worker" */
export type Worker_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  current_worker_role?: Maybe<Order_By>;
  hire_date?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  uid?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  worker_title_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Worker_Min_Fields = {
   __typename?: 'worker_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  current_worker_role?: Maybe<Scalars['String']>;
  hire_date?: Maybe<Scalars['date']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  uid?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  worker_title_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "worker" */
export type Worker_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  current_worker_role?: Maybe<Order_By>;
  hire_date?: Maybe<Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  uid?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  worker_title_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "worker" */
export type Worker_Mutation_Response = {
   __typename?: 'worker_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Worker>;
};

/** input type for inserting object relation for remote table "worker" */
export type Worker_Obj_Rel_Insert_Input = {
  data: Worker_Insert_Input;
  on_conflict?: Maybe<Worker_On_Conflict>;
};

/** on conflict condition type for table "worker" */
export type Worker_On_Conflict = {
  constraint: Worker_Constraint;
  update_columns: Array<Worker_Update_Column>;
  where?: Maybe<Worker_Bool_Exp>;
};

/** ordering options when selecting data from "worker" */
export type Worker_Order_By = {
  created_at?: Maybe<Order_By>;
  current_worker_role?: Maybe<Order_By>;
  email_daily_report_on_submit?: Maybe<Order_By>;
  email_safety_report_on_submit?: Maybe<Order_By>;
  email_toolbox_talk_on_submit?: Maybe<Order_By>;
  hire_date?: Maybe<Order_By>;
  subcontractor?: Maybe<Subcontractor_Order_By>;
  subcontractor_id?: Maybe<Order_By>;
  subcontractor_workers_aggregate?: Maybe<Subcontractor_Worker_Aggregate_Order_By>;
  uid?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  user?: Maybe<User_Order_By>;
  worker_automatic_emails_aggregate?: Maybe<Worker_Automatic_Email_Aggregate_Order_By>;
  worker_certifications_aggregate?: Maybe<Worker_Certification_Aggregate_Order_By>;
  worker_drug_tests_aggregate?: Maybe<Worker_Drug_Test_Aggregate_Order_By>;
  worker_enabled_automatic_email_events_aggregate?: Maybe<Worker_Enabled_Automatic_Email_Event_Aggregate_Order_By>;
  worker_projects_aggregate?: Maybe<Project_Worker_Aggregate_Order_By>;
  worker_role?: Maybe<Worker_Role_Order_By>;
  worker_title?: Maybe<Worker_Title_Order_By>;
  worker_title_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "worker" */
export type Worker_Pk_Columns_Input = {
  uid: Scalars['uuid'];
};

/** columns and relationships of "worker_role" */
export type Worker_Role = {
   __typename?: 'worker_role';
  /** An object relationship */
  translation: Text_Translation;
  translation_id: Scalars['uuid'];
  value: Scalars['String'];
};

/** aggregated selection of "worker_role" */
export type Worker_Role_Aggregate = {
   __typename?: 'worker_role_aggregate';
  aggregate?: Maybe<Worker_Role_Aggregate_Fields>;
  nodes: Array<Worker_Role>;
};

/** aggregate fields of "worker_role" */
export type Worker_Role_Aggregate_Fields = {
   __typename?: 'worker_role_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Worker_Role_Max_Fields>;
  min?: Maybe<Worker_Role_Min_Fields>;
};


/** aggregate fields of "worker_role" */
export type Worker_Role_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Worker_Role_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "worker_role" */
export type Worker_Role_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Worker_Role_Max_Order_By>;
  min?: Maybe<Worker_Role_Min_Order_By>;
};

/** input type for inserting array relation for remote table "worker_role" */
export type Worker_Role_Arr_Rel_Insert_Input = {
  data: Array<Worker_Role_Insert_Input>;
  on_conflict?: Maybe<Worker_Role_On_Conflict>;
};

/** Boolean expression to filter rows from the table "worker_role". All fields are combined with a logical 'AND'. */
export type Worker_Role_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Worker_Role_Bool_Exp>>>;
  _not?: Maybe<Worker_Role_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Worker_Role_Bool_Exp>>>;
  translation?: Maybe<Text_Translation_Bool_Exp>;
  translation_id?: Maybe<Uuid_Comparison_Exp>;
  value?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "worker_role" */
export enum Worker_Role_Constraint {
  /** unique or primary key constraint */
  ProjectWorkerRoleNameKey = 'project_worker_role_name_key',
  /** unique or primary key constraint */
  ProjectWorkerRolePkey = 'project_worker_role_pkey'
}

/** input type for inserting data into table "worker_role" */
export type Worker_Role_Insert_Input = {
  translation?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  translation_id?: Maybe<Scalars['uuid']>;
  value?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Worker_Role_Max_Fields = {
   __typename?: 'worker_role_max_fields';
  translation_id?: Maybe<Scalars['uuid']>;
  value?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "worker_role" */
export type Worker_Role_Max_Order_By = {
  translation_id?: Maybe<Order_By>;
  value?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Worker_Role_Min_Fields = {
   __typename?: 'worker_role_min_fields';
  translation_id?: Maybe<Scalars['uuid']>;
  value?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "worker_role" */
export type Worker_Role_Min_Order_By = {
  translation_id?: Maybe<Order_By>;
  value?: Maybe<Order_By>;
};

/** response of any mutation on the table "worker_role" */
export type Worker_Role_Mutation_Response = {
   __typename?: 'worker_role_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Worker_Role>;
};

/** input type for inserting object relation for remote table "worker_role" */
export type Worker_Role_Obj_Rel_Insert_Input = {
  data: Worker_Role_Insert_Input;
  on_conflict?: Maybe<Worker_Role_On_Conflict>;
};

/** on conflict condition type for table "worker_role" */
export type Worker_Role_On_Conflict = {
  constraint: Worker_Role_Constraint;
  update_columns: Array<Worker_Role_Update_Column>;
  where?: Maybe<Worker_Role_Bool_Exp>;
};

/** ordering options when selecting data from "worker_role" */
export type Worker_Role_Order_By = {
  translation?: Maybe<Text_Translation_Order_By>;
  translation_id?: Maybe<Order_By>;
  value?: Maybe<Order_By>;
};

/** primary key columns input for table: "worker_role" */
export type Worker_Role_Pk_Columns_Input = {
  value: Scalars['String'];
};

/** select columns of table "worker_role" */
export enum Worker_Role_Select_Column {
  /** column name */
  TranslationId = 'translation_id',
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "worker_role" */
export type Worker_Role_Set_Input = {
  translation_id?: Maybe<Scalars['uuid']>;
  value?: Maybe<Scalars['String']>;
};

/** update columns of table "worker_role" */
export enum Worker_Role_Update_Column {
  /** column name */
  TranslationId = 'translation_id',
  /** column name */
  Value = 'value'
}

/** select columns of table "worker" */
export enum Worker_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CurrentWorkerRole = 'current_worker_role',
  /** column name */
  EmailDailyReportOnSubmit = 'email_daily_report_on_submit',
  /** column name */
  EmailSafetyReportOnSubmit = 'email_safety_report_on_submit',
  /** column name */
  EmailToolboxTalkOnSubmit = 'email_toolbox_talk_on_submit',
  /** column name */
  HireDate = 'hire_date',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  Uid = 'uid',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  WorkerTitleId = 'worker_title_id'
}

/** input type for updating data in table "worker" */
export type Worker_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  current_worker_role?: Maybe<Scalars['String']>;
  email_daily_report_on_submit?: Maybe<Scalars['Boolean']>;
  email_safety_report_on_submit?: Maybe<Scalars['Boolean']>;
  email_toolbox_talk_on_submit?: Maybe<Scalars['Boolean']>;
  hire_date?: Maybe<Scalars['date']>;
  subcontractor_id?: Maybe<Scalars['uuid']>;
  uid?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  worker_title_id?: Maybe<Scalars['uuid']>;
};

export type Worker_Stats_Args = {
  projectid?: Maybe<Scalars['uuid']>;
};

export type Worker_Stats_By_Range_Args = {
  projectid?: Maybe<Scalars['uuid']>;
};

/** columns and relationships of "worker_stats_by_range_table" */
export type Worker_Stats_By_Range_Table = {
   __typename?: 'worker_stats_by_range_table';
  apprentice?: Maybe<Scalars['bigint']>;
  foreman?: Maybe<Scalars['bigint']>;
  journeyman?: Maybe<Scalars['bigint']>;
  report_created_at: Scalars['date'];
  total?: Maybe<Scalars['bigint']>;
};

/** aggregated selection of "worker_stats_by_range_table" */
export type Worker_Stats_By_Range_Table_Aggregate = {
   __typename?: 'worker_stats_by_range_table_aggregate';
  aggregate?: Maybe<Worker_Stats_By_Range_Table_Aggregate_Fields>;
  nodes: Array<Worker_Stats_By_Range_Table>;
};

/** aggregate fields of "worker_stats_by_range_table" */
export type Worker_Stats_By_Range_Table_Aggregate_Fields = {
   __typename?: 'worker_stats_by_range_table_aggregate_fields';
  avg?: Maybe<Worker_Stats_By_Range_Table_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Worker_Stats_By_Range_Table_Max_Fields>;
  min?: Maybe<Worker_Stats_By_Range_Table_Min_Fields>;
  stddev?: Maybe<Worker_Stats_By_Range_Table_Stddev_Fields>;
  stddev_pop?: Maybe<Worker_Stats_By_Range_Table_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Worker_Stats_By_Range_Table_Stddev_Samp_Fields>;
  sum?: Maybe<Worker_Stats_By_Range_Table_Sum_Fields>;
  var_pop?: Maybe<Worker_Stats_By_Range_Table_Var_Pop_Fields>;
  var_samp?: Maybe<Worker_Stats_By_Range_Table_Var_Samp_Fields>;
  variance?: Maybe<Worker_Stats_By_Range_Table_Variance_Fields>;
};


/** aggregate fields of "worker_stats_by_range_table" */
export type Worker_Stats_By_Range_Table_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Worker_Stats_By_Range_Table_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "worker_stats_by_range_table" */
export type Worker_Stats_By_Range_Table_Aggregate_Order_By = {
  avg?: Maybe<Worker_Stats_By_Range_Table_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Worker_Stats_By_Range_Table_Max_Order_By>;
  min?: Maybe<Worker_Stats_By_Range_Table_Min_Order_By>;
  stddev?: Maybe<Worker_Stats_By_Range_Table_Stddev_Order_By>;
  stddev_pop?: Maybe<Worker_Stats_By_Range_Table_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Worker_Stats_By_Range_Table_Stddev_Samp_Order_By>;
  sum?: Maybe<Worker_Stats_By_Range_Table_Sum_Order_By>;
  var_pop?: Maybe<Worker_Stats_By_Range_Table_Var_Pop_Order_By>;
  var_samp?: Maybe<Worker_Stats_By_Range_Table_Var_Samp_Order_By>;
  variance?: Maybe<Worker_Stats_By_Range_Table_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "worker_stats_by_range_table" */
export type Worker_Stats_By_Range_Table_Arr_Rel_Insert_Input = {
  data: Array<Worker_Stats_By_Range_Table_Insert_Input>;
  on_conflict?: Maybe<Worker_Stats_By_Range_Table_On_Conflict>;
};

/** aggregate avg on columns */
export type Worker_Stats_By_Range_Table_Avg_Fields = {
   __typename?: 'worker_stats_by_range_table_avg_fields';
  apprentice?: Maybe<Scalars['Float']>;
  foreman?: Maybe<Scalars['Float']>;
  journeyman?: Maybe<Scalars['Float']>;
  total?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "worker_stats_by_range_table" */
export type Worker_Stats_By_Range_Table_Avg_Order_By = {
  apprentice?: Maybe<Order_By>;
  foreman?: Maybe<Order_By>;
  journeyman?: Maybe<Order_By>;
  total?: Maybe<Order_By>;
};

/**
 * Boolean expression to filter rows from the table "worker_stats_by_range_table".
 * All fields are combined with a logical 'AND'.
 */
export type Worker_Stats_By_Range_Table_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Worker_Stats_By_Range_Table_Bool_Exp>>>;
  _not?: Maybe<Worker_Stats_By_Range_Table_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Worker_Stats_By_Range_Table_Bool_Exp>>>;
  apprentice?: Maybe<Bigint_Comparison_Exp>;
  foreman?: Maybe<Bigint_Comparison_Exp>;
  journeyman?: Maybe<Bigint_Comparison_Exp>;
  report_created_at?: Maybe<Date_Comparison_Exp>;
  total?: Maybe<Bigint_Comparison_Exp>;
};

/** unique or primary key constraints on table "worker_stats_by_range_table" */
export enum Worker_Stats_By_Range_Table_Constraint {
  /** unique or primary key constraint */
  ReportCreatedAtPk = 'report_created_at_pk'
}

/** input type for incrementing integer column in table "worker_stats_by_range_table" */
export type Worker_Stats_By_Range_Table_Inc_Input = {
  apprentice?: Maybe<Scalars['bigint']>;
  foreman?: Maybe<Scalars['bigint']>;
  journeyman?: Maybe<Scalars['bigint']>;
  total?: Maybe<Scalars['bigint']>;
};

/** input type for inserting data into table "worker_stats_by_range_table" */
export type Worker_Stats_By_Range_Table_Insert_Input = {
  apprentice?: Maybe<Scalars['bigint']>;
  foreman?: Maybe<Scalars['bigint']>;
  journeyman?: Maybe<Scalars['bigint']>;
  report_created_at?: Maybe<Scalars['date']>;
  total?: Maybe<Scalars['bigint']>;
};

/** aggregate max on columns */
export type Worker_Stats_By_Range_Table_Max_Fields = {
   __typename?: 'worker_stats_by_range_table_max_fields';
  apprentice?: Maybe<Scalars['bigint']>;
  foreman?: Maybe<Scalars['bigint']>;
  journeyman?: Maybe<Scalars['bigint']>;
  report_created_at?: Maybe<Scalars['date']>;
  total?: Maybe<Scalars['bigint']>;
};

/** order by max() on columns of table "worker_stats_by_range_table" */
export type Worker_Stats_By_Range_Table_Max_Order_By = {
  apprentice?: Maybe<Order_By>;
  foreman?: Maybe<Order_By>;
  journeyman?: Maybe<Order_By>;
  report_created_at?: Maybe<Order_By>;
  total?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Worker_Stats_By_Range_Table_Min_Fields = {
   __typename?: 'worker_stats_by_range_table_min_fields';
  apprentice?: Maybe<Scalars['bigint']>;
  foreman?: Maybe<Scalars['bigint']>;
  journeyman?: Maybe<Scalars['bigint']>;
  report_created_at?: Maybe<Scalars['date']>;
  total?: Maybe<Scalars['bigint']>;
};

/** order by min() on columns of table "worker_stats_by_range_table" */
export type Worker_Stats_By_Range_Table_Min_Order_By = {
  apprentice?: Maybe<Order_By>;
  foreman?: Maybe<Order_By>;
  journeyman?: Maybe<Order_By>;
  report_created_at?: Maybe<Order_By>;
  total?: Maybe<Order_By>;
};

/** response of any mutation on the table "worker_stats_by_range_table" */
export type Worker_Stats_By_Range_Table_Mutation_Response = {
   __typename?: 'worker_stats_by_range_table_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Worker_Stats_By_Range_Table>;
};

/** input type for inserting object relation for remote table "worker_stats_by_range_table" */
export type Worker_Stats_By_Range_Table_Obj_Rel_Insert_Input = {
  data: Worker_Stats_By_Range_Table_Insert_Input;
  on_conflict?: Maybe<Worker_Stats_By_Range_Table_On_Conflict>;
};

/** on conflict condition type for table "worker_stats_by_range_table" */
export type Worker_Stats_By_Range_Table_On_Conflict = {
  constraint: Worker_Stats_By_Range_Table_Constraint;
  update_columns: Array<Worker_Stats_By_Range_Table_Update_Column>;
  where?: Maybe<Worker_Stats_By_Range_Table_Bool_Exp>;
};

/** ordering options when selecting data from "worker_stats_by_range_table" */
export type Worker_Stats_By_Range_Table_Order_By = {
  apprentice?: Maybe<Order_By>;
  foreman?: Maybe<Order_By>;
  journeyman?: Maybe<Order_By>;
  report_created_at?: Maybe<Order_By>;
  total?: Maybe<Order_By>;
};

/** primary key columns input for table: "worker_stats_by_range_table" */
export type Worker_Stats_By_Range_Table_Pk_Columns_Input = {
  report_created_at: Scalars['date'];
};

/** select columns of table "worker_stats_by_range_table" */
export enum Worker_Stats_By_Range_Table_Select_Column {
  /** column name */
  Apprentice = 'apprentice',
  /** column name */
  Foreman = 'foreman',
  /** column name */
  Journeyman = 'journeyman',
  /** column name */
  ReportCreatedAt = 'report_created_at',
  /** column name */
  Total = 'total'
}

/** input type for updating data in table "worker_stats_by_range_table" */
export type Worker_Stats_By_Range_Table_Set_Input = {
  apprentice?: Maybe<Scalars['bigint']>;
  foreman?: Maybe<Scalars['bigint']>;
  journeyman?: Maybe<Scalars['bigint']>;
  report_created_at?: Maybe<Scalars['date']>;
  total?: Maybe<Scalars['bigint']>;
};

/** aggregate stddev on columns */
export type Worker_Stats_By_Range_Table_Stddev_Fields = {
   __typename?: 'worker_stats_by_range_table_stddev_fields';
  apprentice?: Maybe<Scalars['Float']>;
  foreman?: Maybe<Scalars['Float']>;
  journeyman?: Maybe<Scalars['Float']>;
  total?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "worker_stats_by_range_table" */
export type Worker_Stats_By_Range_Table_Stddev_Order_By = {
  apprentice?: Maybe<Order_By>;
  foreman?: Maybe<Order_By>;
  journeyman?: Maybe<Order_By>;
  total?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Worker_Stats_By_Range_Table_Stddev_Pop_Fields = {
   __typename?: 'worker_stats_by_range_table_stddev_pop_fields';
  apprentice?: Maybe<Scalars['Float']>;
  foreman?: Maybe<Scalars['Float']>;
  journeyman?: Maybe<Scalars['Float']>;
  total?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "worker_stats_by_range_table" */
export type Worker_Stats_By_Range_Table_Stddev_Pop_Order_By = {
  apprentice?: Maybe<Order_By>;
  foreman?: Maybe<Order_By>;
  journeyman?: Maybe<Order_By>;
  total?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Worker_Stats_By_Range_Table_Stddev_Samp_Fields = {
   __typename?: 'worker_stats_by_range_table_stddev_samp_fields';
  apprentice?: Maybe<Scalars['Float']>;
  foreman?: Maybe<Scalars['Float']>;
  journeyman?: Maybe<Scalars['Float']>;
  total?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "worker_stats_by_range_table" */
export type Worker_Stats_By_Range_Table_Stddev_Samp_Order_By = {
  apprentice?: Maybe<Order_By>;
  foreman?: Maybe<Order_By>;
  journeyman?: Maybe<Order_By>;
  total?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Worker_Stats_By_Range_Table_Sum_Fields = {
   __typename?: 'worker_stats_by_range_table_sum_fields';
  apprentice?: Maybe<Scalars['bigint']>;
  foreman?: Maybe<Scalars['bigint']>;
  journeyman?: Maybe<Scalars['bigint']>;
  total?: Maybe<Scalars['bigint']>;
};

/** order by sum() on columns of table "worker_stats_by_range_table" */
export type Worker_Stats_By_Range_Table_Sum_Order_By = {
  apprentice?: Maybe<Order_By>;
  foreman?: Maybe<Order_By>;
  journeyman?: Maybe<Order_By>;
  total?: Maybe<Order_By>;
};

/** update columns of table "worker_stats_by_range_table" */
export enum Worker_Stats_By_Range_Table_Update_Column {
  /** column name */
  Apprentice = 'apprentice',
  /** column name */
  Foreman = 'foreman',
  /** column name */
  Journeyman = 'journeyman',
  /** column name */
  ReportCreatedAt = 'report_created_at',
  /** column name */
  Total = 'total'
}

/** aggregate var_pop on columns */
export type Worker_Stats_By_Range_Table_Var_Pop_Fields = {
   __typename?: 'worker_stats_by_range_table_var_pop_fields';
  apprentice?: Maybe<Scalars['Float']>;
  foreman?: Maybe<Scalars['Float']>;
  journeyman?: Maybe<Scalars['Float']>;
  total?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "worker_stats_by_range_table" */
export type Worker_Stats_By_Range_Table_Var_Pop_Order_By = {
  apprentice?: Maybe<Order_By>;
  foreman?: Maybe<Order_By>;
  journeyman?: Maybe<Order_By>;
  total?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Worker_Stats_By_Range_Table_Var_Samp_Fields = {
   __typename?: 'worker_stats_by_range_table_var_samp_fields';
  apprentice?: Maybe<Scalars['Float']>;
  foreman?: Maybe<Scalars['Float']>;
  journeyman?: Maybe<Scalars['Float']>;
  total?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "worker_stats_by_range_table" */
export type Worker_Stats_By_Range_Table_Var_Samp_Order_By = {
  apprentice?: Maybe<Order_By>;
  foreman?: Maybe<Order_By>;
  journeyman?: Maybe<Order_By>;
  total?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Worker_Stats_By_Range_Table_Variance_Fields = {
   __typename?: 'worker_stats_by_range_table_variance_fields';
  apprentice?: Maybe<Scalars['Float']>;
  foreman?: Maybe<Scalars['Float']>;
  journeyman?: Maybe<Scalars['Float']>;
  total?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "worker_stats_by_range_table" */
export type Worker_Stats_By_Range_Table_Variance_Order_By = {
  apprentice?: Maybe<Order_By>;
  foreman?: Maybe<Order_By>;
  journeyman?: Maybe<Order_By>;
  total?: Maybe<Order_By>;
};

/** columns and relationships of "worker_stats_table" */
export type Worker_Stats_Table = {
   __typename?: 'worker_stats_table';
  apprentice_today?: Maybe<Scalars['bigint']>;
  foreman_today?: Maybe<Scalars['bigint']>;
  journeymen_today?: Maybe<Scalars['bigint']>;
  onsite_last7_days?: Maybe<Scalars['bigint']>;
  onsite_last_mo?: Maybe<Scalars['bigint']>;
  onsite_last_wk?: Maybe<Scalars['bigint']>;
  onsite_this_mo?: Maybe<Scalars['bigint']>;
  onsite_this_wk?: Maybe<Scalars['bigint']>;
  onsite_today?: Maybe<Scalars['bigint']>;
  onsite_total?: Maybe<Scalars['bigint']>;
  onsite_two_mo_ago?: Maybe<Scalars['bigint']>;
  onsite_ytd?: Maybe<Scalars['bigint']>;
  sub_id: Scalars['uuid'];
  sub_name: Scalars['String'];
  sub_trade: Scalars['String'];
};

/** aggregated selection of "worker_stats_table" */
export type Worker_Stats_Table_Aggregate = {
   __typename?: 'worker_stats_table_aggregate';
  aggregate?: Maybe<Worker_Stats_Table_Aggregate_Fields>;
  nodes: Array<Worker_Stats_Table>;
};

/** aggregate fields of "worker_stats_table" */
export type Worker_Stats_Table_Aggregate_Fields = {
   __typename?: 'worker_stats_table_aggregate_fields';
  avg?: Maybe<Worker_Stats_Table_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Worker_Stats_Table_Max_Fields>;
  min?: Maybe<Worker_Stats_Table_Min_Fields>;
  stddev?: Maybe<Worker_Stats_Table_Stddev_Fields>;
  stddev_pop?: Maybe<Worker_Stats_Table_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Worker_Stats_Table_Stddev_Samp_Fields>;
  sum?: Maybe<Worker_Stats_Table_Sum_Fields>;
  var_pop?: Maybe<Worker_Stats_Table_Var_Pop_Fields>;
  var_samp?: Maybe<Worker_Stats_Table_Var_Samp_Fields>;
  variance?: Maybe<Worker_Stats_Table_Variance_Fields>;
};


/** aggregate fields of "worker_stats_table" */
export type Worker_Stats_Table_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Worker_Stats_Table_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "worker_stats_table" */
export type Worker_Stats_Table_Aggregate_Order_By = {
  avg?: Maybe<Worker_Stats_Table_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Worker_Stats_Table_Max_Order_By>;
  min?: Maybe<Worker_Stats_Table_Min_Order_By>;
  stddev?: Maybe<Worker_Stats_Table_Stddev_Order_By>;
  stddev_pop?: Maybe<Worker_Stats_Table_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Worker_Stats_Table_Stddev_Samp_Order_By>;
  sum?: Maybe<Worker_Stats_Table_Sum_Order_By>;
  var_pop?: Maybe<Worker_Stats_Table_Var_Pop_Order_By>;
  var_samp?: Maybe<Worker_Stats_Table_Var_Samp_Order_By>;
  variance?: Maybe<Worker_Stats_Table_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "worker_stats_table" */
export type Worker_Stats_Table_Arr_Rel_Insert_Input = {
  data: Array<Worker_Stats_Table_Insert_Input>;
  on_conflict?: Maybe<Worker_Stats_Table_On_Conflict>;
};

/** aggregate avg on columns */
export type Worker_Stats_Table_Avg_Fields = {
   __typename?: 'worker_stats_table_avg_fields';
  apprentice_today?: Maybe<Scalars['Float']>;
  foreman_today?: Maybe<Scalars['Float']>;
  journeymen_today?: Maybe<Scalars['Float']>;
  onsite_last7_days?: Maybe<Scalars['Float']>;
  onsite_last_mo?: Maybe<Scalars['Float']>;
  onsite_last_wk?: Maybe<Scalars['Float']>;
  onsite_this_mo?: Maybe<Scalars['Float']>;
  onsite_this_wk?: Maybe<Scalars['Float']>;
  onsite_today?: Maybe<Scalars['Float']>;
  onsite_total?: Maybe<Scalars['Float']>;
  onsite_two_mo_ago?: Maybe<Scalars['Float']>;
  onsite_ytd?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "worker_stats_table" */
export type Worker_Stats_Table_Avg_Order_By = {
  apprentice_today?: Maybe<Order_By>;
  foreman_today?: Maybe<Order_By>;
  journeymen_today?: Maybe<Order_By>;
  onsite_last7_days?: Maybe<Order_By>;
  onsite_last_mo?: Maybe<Order_By>;
  onsite_last_wk?: Maybe<Order_By>;
  onsite_this_mo?: Maybe<Order_By>;
  onsite_this_wk?: Maybe<Order_By>;
  onsite_today?: Maybe<Order_By>;
  onsite_total?: Maybe<Order_By>;
  onsite_two_mo_ago?: Maybe<Order_By>;
  onsite_ytd?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "worker_stats_table". All fields are combined with a logical 'AND'. */
export type Worker_Stats_Table_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Worker_Stats_Table_Bool_Exp>>>;
  _not?: Maybe<Worker_Stats_Table_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Worker_Stats_Table_Bool_Exp>>>;
  apprentice_today?: Maybe<Bigint_Comparison_Exp>;
  foreman_today?: Maybe<Bigint_Comparison_Exp>;
  journeymen_today?: Maybe<Bigint_Comparison_Exp>;
  onsite_last7_days?: Maybe<Bigint_Comparison_Exp>;
  onsite_last_mo?: Maybe<Bigint_Comparison_Exp>;
  onsite_last_wk?: Maybe<Bigint_Comparison_Exp>;
  onsite_this_mo?: Maybe<Bigint_Comparison_Exp>;
  onsite_this_wk?: Maybe<Bigint_Comparison_Exp>;
  onsite_today?: Maybe<Bigint_Comparison_Exp>;
  onsite_total?: Maybe<Bigint_Comparison_Exp>;
  onsite_two_mo_ago?: Maybe<Bigint_Comparison_Exp>;
  onsite_ytd?: Maybe<Bigint_Comparison_Exp>;
  sub_id?: Maybe<Uuid_Comparison_Exp>;
  sub_name?: Maybe<String_Comparison_Exp>;
  sub_trade?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "worker_stats_table" */
export enum Worker_Stats_Table_Constraint {
  /** unique or primary key constraint */
  SubIdPk = 'sub_id_pk'
}

/** input type for incrementing integer column in table "worker_stats_table" */
export type Worker_Stats_Table_Inc_Input = {
  apprentice_today?: Maybe<Scalars['bigint']>;
  foreman_today?: Maybe<Scalars['bigint']>;
  journeymen_today?: Maybe<Scalars['bigint']>;
  onsite_last7_days?: Maybe<Scalars['bigint']>;
  onsite_last_mo?: Maybe<Scalars['bigint']>;
  onsite_last_wk?: Maybe<Scalars['bigint']>;
  onsite_this_mo?: Maybe<Scalars['bigint']>;
  onsite_this_wk?: Maybe<Scalars['bigint']>;
  onsite_today?: Maybe<Scalars['bigint']>;
  onsite_total?: Maybe<Scalars['bigint']>;
  onsite_two_mo_ago?: Maybe<Scalars['bigint']>;
  onsite_ytd?: Maybe<Scalars['bigint']>;
};

/** input type for inserting data into table "worker_stats_table" */
export type Worker_Stats_Table_Insert_Input = {
  apprentice_today?: Maybe<Scalars['bigint']>;
  foreman_today?: Maybe<Scalars['bigint']>;
  journeymen_today?: Maybe<Scalars['bigint']>;
  onsite_last7_days?: Maybe<Scalars['bigint']>;
  onsite_last_mo?: Maybe<Scalars['bigint']>;
  onsite_last_wk?: Maybe<Scalars['bigint']>;
  onsite_this_mo?: Maybe<Scalars['bigint']>;
  onsite_this_wk?: Maybe<Scalars['bigint']>;
  onsite_today?: Maybe<Scalars['bigint']>;
  onsite_total?: Maybe<Scalars['bigint']>;
  onsite_two_mo_ago?: Maybe<Scalars['bigint']>;
  onsite_ytd?: Maybe<Scalars['bigint']>;
  sub_id?: Maybe<Scalars['uuid']>;
  sub_name?: Maybe<Scalars['String']>;
  sub_trade?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Worker_Stats_Table_Max_Fields = {
   __typename?: 'worker_stats_table_max_fields';
  apprentice_today?: Maybe<Scalars['bigint']>;
  foreman_today?: Maybe<Scalars['bigint']>;
  journeymen_today?: Maybe<Scalars['bigint']>;
  onsite_last7_days?: Maybe<Scalars['bigint']>;
  onsite_last_mo?: Maybe<Scalars['bigint']>;
  onsite_last_wk?: Maybe<Scalars['bigint']>;
  onsite_this_mo?: Maybe<Scalars['bigint']>;
  onsite_this_wk?: Maybe<Scalars['bigint']>;
  onsite_today?: Maybe<Scalars['bigint']>;
  onsite_total?: Maybe<Scalars['bigint']>;
  onsite_two_mo_ago?: Maybe<Scalars['bigint']>;
  onsite_ytd?: Maybe<Scalars['bigint']>;
  sub_id?: Maybe<Scalars['uuid']>;
  sub_name?: Maybe<Scalars['String']>;
  sub_trade?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "worker_stats_table" */
export type Worker_Stats_Table_Max_Order_By = {
  apprentice_today?: Maybe<Order_By>;
  foreman_today?: Maybe<Order_By>;
  journeymen_today?: Maybe<Order_By>;
  onsite_last7_days?: Maybe<Order_By>;
  onsite_last_mo?: Maybe<Order_By>;
  onsite_last_wk?: Maybe<Order_By>;
  onsite_this_mo?: Maybe<Order_By>;
  onsite_this_wk?: Maybe<Order_By>;
  onsite_today?: Maybe<Order_By>;
  onsite_total?: Maybe<Order_By>;
  onsite_two_mo_ago?: Maybe<Order_By>;
  onsite_ytd?: Maybe<Order_By>;
  sub_id?: Maybe<Order_By>;
  sub_name?: Maybe<Order_By>;
  sub_trade?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Worker_Stats_Table_Min_Fields = {
   __typename?: 'worker_stats_table_min_fields';
  apprentice_today?: Maybe<Scalars['bigint']>;
  foreman_today?: Maybe<Scalars['bigint']>;
  journeymen_today?: Maybe<Scalars['bigint']>;
  onsite_last7_days?: Maybe<Scalars['bigint']>;
  onsite_last_mo?: Maybe<Scalars['bigint']>;
  onsite_last_wk?: Maybe<Scalars['bigint']>;
  onsite_this_mo?: Maybe<Scalars['bigint']>;
  onsite_this_wk?: Maybe<Scalars['bigint']>;
  onsite_today?: Maybe<Scalars['bigint']>;
  onsite_total?: Maybe<Scalars['bigint']>;
  onsite_two_mo_ago?: Maybe<Scalars['bigint']>;
  onsite_ytd?: Maybe<Scalars['bigint']>;
  sub_id?: Maybe<Scalars['uuid']>;
  sub_name?: Maybe<Scalars['String']>;
  sub_trade?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "worker_stats_table" */
export type Worker_Stats_Table_Min_Order_By = {
  apprentice_today?: Maybe<Order_By>;
  foreman_today?: Maybe<Order_By>;
  journeymen_today?: Maybe<Order_By>;
  onsite_last7_days?: Maybe<Order_By>;
  onsite_last_mo?: Maybe<Order_By>;
  onsite_last_wk?: Maybe<Order_By>;
  onsite_this_mo?: Maybe<Order_By>;
  onsite_this_wk?: Maybe<Order_By>;
  onsite_today?: Maybe<Order_By>;
  onsite_total?: Maybe<Order_By>;
  onsite_two_mo_ago?: Maybe<Order_By>;
  onsite_ytd?: Maybe<Order_By>;
  sub_id?: Maybe<Order_By>;
  sub_name?: Maybe<Order_By>;
  sub_trade?: Maybe<Order_By>;
};

/** response of any mutation on the table "worker_stats_table" */
export type Worker_Stats_Table_Mutation_Response = {
   __typename?: 'worker_stats_table_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Worker_Stats_Table>;
};

/** input type for inserting object relation for remote table "worker_stats_table" */
export type Worker_Stats_Table_Obj_Rel_Insert_Input = {
  data: Worker_Stats_Table_Insert_Input;
  on_conflict?: Maybe<Worker_Stats_Table_On_Conflict>;
};

/** on conflict condition type for table "worker_stats_table" */
export type Worker_Stats_Table_On_Conflict = {
  constraint: Worker_Stats_Table_Constraint;
  update_columns: Array<Worker_Stats_Table_Update_Column>;
  where?: Maybe<Worker_Stats_Table_Bool_Exp>;
};

/** ordering options when selecting data from "worker_stats_table" */
export type Worker_Stats_Table_Order_By = {
  apprentice_today?: Maybe<Order_By>;
  foreman_today?: Maybe<Order_By>;
  journeymen_today?: Maybe<Order_By>;
  onsite_last7_days?: Maybe<Order_By>;
  onsite_last_mo?: Maybe<Order_By>;
  onsite_last_wk?: Maybe<Order_By>;
  onsite_this_mo?: Maybe<Order_By>;
  onsite_this_wk?: Maybe<Order_By>;
  onsite_today?: Maybe<Order_By>;
  onsite_total?: Maybe<Order_By>;
  onsite_two_mo_ago?: Maybe<Order_By>;
  onsite_ytd?: Maybe<Order_By>;
  sub_id?: Maybe<Order_By>;
  sub_name?: Maybe<Order_By>;
  sub_trade?: Maybe<Order_By>;
};

/** primary key columns input for table: "worker_stats_table" */
export type Worker_Stats_Table_Pk_Columns_Input = {
  sub_id: Scalars['uuid'];
};

/** select columns of table "worker_stats_table" */
export enum Worker_Stats_Table_Select_Column {
  /** column name */
  ApprenticeToday = 'apprentice_today',
  /** column name */
  ForemanToday = 'foreman_today',
  /** column name */
  JourneymenToday = 'journeymen_today',
  /** column name */
  OnsiteLast7Days = 'onsite_last7_days',
  /** column name */
  OnsiteLastMo = 'onsite_last_mo',
  /** column name */
  OnsiteLastWk = 'onsite_last_wk',
  /** column name */
  OnsiteThisMo = 'onsite_this_mo',
  /** column name */
  OnsiteThisWk = 'onsite_this_wk',
  /** column name */
  OnsiteToday = 'onsite_today',
  /** column name */
  OnsiteTotal = 'onsite_total',
  /** column name */
  OnsiteTwoMoAgo = 'onsite_two_mo_ago',
  /** column name */
  OnsiteYtd = 'onsite_ytd',
  /** column name */
  SubId = 'sub_id',
  /** column name */
  SubName = 'sub_name',
  /** column name */
  SubTrade = 'sub_trade'
}

/** input type for updating data in table "worker_stats_table" */
export type Worker_Stats_Table_Set_Input = {
  apprentice_today?: Maybe<Scalars['bigint']>;
  foreman_today?: Maybe<Scalars['bigint']>;
  journeymen_today?: Maybe<Scalars['bigint']>;
  onsite_last7_days?: Maybe<Scalars['bigint']>;
  onsite_last_mo?: Maybe<Scalars['bigint']>;
  onsite_last_wk?: Maybe<Scalars['bigint']>;
  onsite_this_mo?: Maybe<Scalars['bigint']>;
  onsite_this_wk?: Maybe<Scalars['bigint']>;
  onsite_today?: Maybe<Scalars['bigint']>;
  onsite_total?: Maybe<Scalars['bigint']>;
  onsite_two_mo_ago?: Maybe<Scalars['bigint']>;
  onsite_ytd?: Maybe<Scalars['bigint']>;
  sub_id?: Maybe<Scalars['uuid']>;
  sub_name?: Maybe<Scalars['String']>;
  sub_trade?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Worker_Stats_Table_Stddev_Fields = {
   __typename?: 'worker_stats_table_stddev_fields';
  apprentice_today?: Maybe<Scalars['Float']>;
  foreman_today?: Maybe<Scalars['Float']>;
  journeymen_today?: Maybe<Scalars['Float']>;
  onsite_last7_days?: Maybe<Scalars['Float']>;
  onsite_last_mo?: Maybe<Scalars['Float']>;
  onsite_last_wk?: Maybe<Scalars['Float']>;
  onsite_this_mo?: Maybe<Scalars['Float']>;
  onsite_this_wk?: Maybe<Scalars['Float']>;
  onsite_today?: Maybe<Scalars['Float']>;
  onsite_total?: Maybe<Scalars['Float']>;
  onsite_two_mo_ago?: Maybe<Scalars['Float']>;
  onsite_ytd?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "worker_stats_table" */
export type Worker_Stats_Table_Stddev_Order_By = {
  apprentice_today?: Maybe<Order_By>;
  foreman_today?: Maybe<Order_By>;
  journeymen_today?: Maybe<Order_By>;
  onsite_last7_days?: Maybe<Order_By>;
  onsite_last_mo?: Maybe<Order_By>;
  onsite_last_wk?: Maybe<Order_By>;
  onsite_this_mo?: Maybe<Order_By>;
  onsite_this_wk?: Maybe<Order_By>;
  onsite_today?: Maybe<Order_By>;
  onsite_total?: Maybe<Order_By>;
  onsite_two_mo_ago?: Maybe<Order_By>;
  onsite_ytd?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Worker_Stats_Table_Stddev_Pop_Fields = {
   __typename?: 'worker_stats_table_stddev_pop_fields';
  apprentice_today?: Maybe<Scalars['Float']>;
  foreman_today?: Maybe<Scalars['Float']>;
  journeymen_today?: Maybe<Scalars['Float']>;
  onsite_last7_days?: Maybe<Scalars['Float']>;
  onsite_last_mo?: Maybe<Scalars['Float']>;
  onsite_last_wk?: Maybe<Scalars['Float']>;
  onsite_this_mo?: Maybe<Scalars['Float']>;
  onsite_this_wk?: Maybe<Scalars['Float']>;
  onsite_today?: Maybe<Scalars['Float']>;
  onsite_total?: Maybe<Scalars['Float']>;
  onsite_two_mo_ago?: Maybe<Scalars['Float']>;
  onsite_ytd?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "worker_stats_table" */
export type Worker_Stats_Table_Stddev_Pop_Order_By = {
  apprentice_today?: Maybe<Order_By>;
  foreman_today?: Maybe<Order_By>;
  journeymen_today?: Maybe<Order_By>;
  onsite_last7_days?: Maybe<Order_By>;
  onsite_last_mo?: Maybe<Order_By>;
  onsite_last_wk?: Maybe<Order_By>;
  onsite_this_mo?: Maybe<Order_By>;
  onsite_this_wk?: Maybe<Order_By>;
  onsite_today?: Maybe<Order_By>;
  onsite_total?: Maybe<Order_By>;
  onsite_two_mo_ago?: Maybe<Order_By>;
  onsite_ytd?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Worker_Stats_Table_Stddev_Samp_Fields = {
   __typename?: 'worker_stats_table_stddev_samp_fields';
  apprentice_today?: Maybe<Scalars['Float']>;
  foreman_today?: Maybe<Scalars['Float']>;
  journeymen_today?: Maybe<Scalars['Float']>;
  onsite_last7_days?: Maybe<Scalars['Float']>;
  onsite_last_mo?: Maybe<Scalars['Float']>;
  onsite_last_wk?: Maybe<Scalars['Float']>;
  onsite_this_mo?: Maybe<Scalars['Float']>;
  onsite_this_wk?: Maybe<Scalars['Float']>;
  onsite_today?: Maybe<Scalars['Float']>;
  onsite_total?: Maybe<Scalars['Float']>;
  onsite_two_mo_ago?: Maybe<Scalars['Float']>;
  onsite_ytd?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "worker_stats_table" */
export type Worker_Stats_Table_Stddev_Samp_Order_By = {
  apprentice_today?: Maybe<Order_By>;
  foreman_today?: Maybe<Order_By>;
  journeymen_today?: Maybe<Order_By>;
  onsite_last7_days?: Maybe<Order_By>;
  onsite_last_mo?: Maybe<Order_By>;
  onsite_last_wk?: Maybe<Order_By>;
  onsite_this_mo?: Maybe<Order_By>;
  onsite_this_wk?: Maybe<Order_By>;
  onsite_today?: Maybe<Order_By>;
  onsite_total?: Maybe<Order_By>;
  onsite_two_mo_ago?: Maybe<Order_By>;
  onsite_ytd?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Worker_Stats_Table_Sum_Fields = {
   __typename?: 'worker_stats_table_sum_fields';
  apprentice_today?: Maybe<Scalars['bigint']>;
  foreman_today?: Maybe<Scalars['bigint']>;
  journeymen_today?: Maybe<Scalars['bigint']>;
  onsite_last7_days?: Maybe<Scalars['bigint']>;
  onsite_last_mo?: Maybe<Scalars['bigint']>;
  onsite_last_wk?: Maybe<Scalars['bigint']>;
  onsite_this_mo?: Maybe<Scalars['bigint']>;
  onsite_this_wk?: Maybe<Scalars['bigint']>;
  onsite_today?: Maybe<Scalars['bigint']>;
  onsite_total?: Maybe<Scalars['bigint']>;
  onsite_two_mo_ago?: Maybe<Scalars['bigint']>;
  onsite_ytd?: Maybe<Scalars['bigint']>;
};

/** order by sum() on columns of table "worker_stats_table" */
export type Worker_Stats_Table_Sum_Order_By = {
  apprentice_today?: Maybe<Order_By>;
  foreman_today?: Maybe<Order_By>;
  journeymen_today?: Maybe<Order_By>;
  onsite_last7_days?: Maybe<Order_By>;
  onsite_last_mo?: Maybe<Order_By>;
  onsite_last_wk?: Maybe<Order_By>;
  onsite_this_mo?: Maybe<Order_By>;
  onsite_this_wk?: Maybe<Order_By>;
  onsite_today?: Maybe<Order_By>;
  onsite_total?: Maybe<Order_By>;
  onsite_two_mo_ago?: Maybe<Order_By>;
  onsite_ytd?: Maybe<Order_By>;
};

/** update columns of table "worker_stats_table" */
export enum Worker_Stats_Table_Update_Column {
  /** column name */
  ApprenticeToday = 'apprentice_today',
  /** column name */
  ForemanToday = 'foreman_today',
  /** column name */
  JourneymenToday = 'journeymen_today',
  /** column name */
  OnsiteLast7Days = 'onsite_last7_days',
  /** column name */
  OnsiteLastMo = 'onsite_last_mo',
  /** column name */
  OnsiteLastWk = 'onsite_last_wk',
  /** column name */
  OnsiteThisMo = 'onsite_this_mo',
  /** column name */
  OnsiteThisWk = 'onsite_this_wk',
  /** column name */
  OnsiteToday = 'onsite_today',
  /** column name */
  OnsiteTotal = 'onsite_total',
  /** column name */
  OnsiteTwoMoAgo = 'onsite_two_mo_ago',
  /** column name */
  OnsiteYtd = 'onsite_ytd',
  /** column name */
  SubId = 'sub_id',
  /** column name */
  SubName = 'sub_name',
  /** column name */
  SubTrade = 'sub_trade'
}

/** aggregate var_pop on columns */
export type Worker_Stats_Table_Var_Pop_Fields = {
   __typename?: 'worker_stats_table_var_pop_fields';
  apprentice_today?: Maybe<Scalars['Float']>;
  foreman_today?: Maybe<Scalars['Float']>;
  journeymen_today?: Maybe<Scalars['Float']>;
  onsite_last7_days?: Maybe<Scalars['Float']>;
  onsite_last_mo?: Maybe<Scalars['Float']>;
  onsite_last_wk?: Maybe<Scalars['Float']>;
  onsite_this_mo?: Maybe<Scalars['Float']>;
  onsite_this_wk?: Maybe<Scalars['Float']>;
  onsite_today?: Maybe<Scalars['Float']>;
  onsite_total?: Maybe<Scalars['Float']>;
  onsite_two_mo_ago?: Maybe<Scalars['Float']>;
  onsite_ytd?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "worker_stats_table" */
export type Worker_Stats_Table_Var_Pop_Order_By = {
  apprentice_today?: Maybe<Order_By>;
  foreman_today?: Maybe<Order_By>;
  journeymen_today?: Maybe<Order_By>;
  onsite_last7_days?: Maybe<Order_By>;
  onsite_last_mo?: Maybe<Order_By>;
  onsite_last_wk?: Maybe<Order_By>;
  onsite_this_mo?: Maybe<Order_By>;
  onsite_this_wk?: Maybe<Order_By>;
  onsite_today?: Maybe<Order_By>;
  onsite_total?: Maybe<Order_By>;
  onsite_two_mo_ago?: Maybe<Order_By>;
  onsite_ytd?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Worker_Stats_Table_Var_Samp_Fields = {
   __typename?: 'worker_stats_table_var_samp_fields';
  apprentice_today?: Maybe<Scalars['Float']>;
  foreman_today?: Maybe<Scalars['Float']>;
  journeymen_today?: Maybe<Scalars['Float']>;
  onsite_last7_days?: Maybe<Scalars['Float']>;
  onsite_last_mo?: Maybe<Scalars['Float']>;
  onsite_last_wk?: Maybe<Scalars['Float']>;
  onsite_this_mo?: Maybe<Scalars['Float']>;
  onsite_this_wk?: Maybe<Scalars['Float']>;
  onsite_today?: Maybe<Scalars['Float']>;
  onsite_total?: Maybe<Scalars['Float']>;
  onsite_two_mo_ago?: Maybe<Scalars['Float']>;
  onsite_ytd?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "worker_stats_table" */
export type Worker_Stats_Table_Var_Samp_Order_By = {
  apprentice_today?: Maybe<Order_By>;
  foreman_today?: Maybe<Order_By>;
  journeymen_today?: Maybe<Order_By>;
  onsite_last7_days?: Maybe<Order_By>;
  onsite_last_mo?: Maybe<Order_By>;
  onsite_last_wk?: Maybe<Order_By>;
  onsite_this_mo?: Maybe<Order_By>;
  onsite_this_wk?: Maybe<Order_By>;
  onsite_today?: Maybe<Order_By>;
  onsite_total?: Maybe<Order_By>;
  onsite_two_mo_ago?: Maybe<Order_By>;
  onsite_ytd?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Worker_Stats_Table_Variance_Fields = {
   __typename?: 'worker_stats_table_variance_fields';
  apprentice_today?: Maybe<Scalars['Float']>;
  foreman_today?: Maybe<Scalars['Float']>;
  journeymen_today?: Maybe<Scalars['Float']>;
  onsite_last7_days?: Maybe<Scalars['Float']>;
  onsite_last_mo?: Maybe<Scalars['Float']>;
  onsite_last_wk?: Maybe<Scalars['Float']>;
  onsite_this_mo?: Maybe<Scalars['Float']>;
  onsite_this_wk?: Maybe<Scalars['Float']>;
  onsite_today?: Maybe<Scalars['Float']>;
  onsite_total?: Maybe<Scalars['Float']>;
  onsite_two_mo_ago?: Maybe<Scalars['Float']>;
  onsite_ytd?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "worker_stats_table" */
export type Worker_Stats_Table_Variance_Order_By = {
  apprentice_today?: Maybe<Order_By>;
  foreman_today?: Maybe<Order_By>;
  journeymen_today?: Maybe<Order_By>;
  onsite_last7_days?: Maybe<Order_By>;
  onsite_last_mo?: Maybe<Order_By>;
  onsite_last_wk?: Maybe<Order_By>;
  onsite_this_mo?: Maybe<Order_By>;
  onsite_this_wk?: Maybe<Order_By>;
  onsite_today?: Maybe<Order_By>;
  onsite_total?: Maybe<Order_By>;
  onsite_two_mo_ago?: Maybe<Order_By>;
  onsite_ytd?: Maybe<Order_By>;
};

/** columns and relationships of "worker_title" */
export type Worker_Title = {
   __typename?: 'worker_title';
  created_at: Scalars['timestamptz'];
  id: Scalars['uuid'];
  /** An array relationship */
  project_workers: Array<Project_Worker>;
  /** An aggregated array relationship */
  project_workers_aggregate: Project_Worker_Aggregate;
  /** An object relationship */
  translation: Text_Translation;
  translation_id: Scalars['uuid'];
};


/** columns and relationships of "worker_title" */
export type Worker_TitleProject_WorkersArgs = {
  distinct_on?: Maybe<Array<Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Worker_Order_By>>;
  where?: Maybe<Project_Worker_Bool_Exp>;
};


/** columns and relationships of "worker_title" */
export type Worker_TitleProject_Workers_AggregateArgs = {
  distinct_on?: Maybe<Array<Project_Worker_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Project_Worker_Order_By>>;
  where?: Maybe<Project_Worker_Bool_Exp>;
};

/** aggregated selection of "worker_title" */
export type Worker_Title_Aggregate = {
   __typename?: 'worker_title_aggregate';
  aggregate?: Maybe<Worker_Title_Aggregate_Fields>;
  nodes: Array<Worker_Title>;
};

/** aggregate fields of "worker_title" */
export type Worker_Title_Aggregate_Fields = {
   __typename?: 'worker_title_aggregate_fields';
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Worker_Title_Max_Fields>;
  min?: Maybe<Worker_Title_Min_Fields>;
};


/** aggregate fields of "worker_title" */
export type Worker_Title_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Worker_Title_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "worker_title" */
export type Worker_Title_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Worker_Title_Max_Order_By>;
  min?: Maybe<Worker_Title_Min_Order_By>;
};

/** input type for inserting array relation for remote table "worker_title" */
export type Worker_Title_Arr_Rel_Insert_Input = {
  data: Array<Worker_Title_Insert_Input>;
  on_conflict?: Maybe<Worker_Title_On_Conflict>;
};

/** Boolean expression to filter rows from the table "worker_title". All fields are combined with a logical 'AND'. */
export type Worker_Title_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Worker_Title_Bool_Exp>>>;
  _not?: Maybe<Worker_Title_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Worker_Title_Bool_Exp>>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  project_workers?: Maybe<Project_Worker_Bool_Exp>;
  translation?: Maybe<Text_Translation_Bool_Exp>;
  translation_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "worker_title" */
export enum Worker_Title_Constraint {
  /** unique or primary key constraint */
  WorkerTitleIdKey = 'worker_title_id_key',
  /** unique or primary key constraint */
  WorkerTitlePkey = 'worker_title_pkey'
}

/** input type for inserting data into table "worker_title" */
export type Worker_Title_Insert_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  project_workers?: Maybe<Project_Worker_Arr_Rel_Insert_Input>;
  translation?: Maybe<Text_Translation_Obj_Rel_Insert_Input>;
  translation_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Worker_Title_Max_Fields = {
   __typename?: 'worker_title_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  translation_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "worker_title" */
export type Worker_Title_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  translation_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Worker_Title_Min_Fields = {
   __typename?: 'worker_title_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  translation_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "worker_title" */
export type Worker_Title_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  translation_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "worker_title" */
export type Worker_Title_Mutation_Response = {
   __typename?: 'worker_title_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Worker_Title>;
};

/** input type for inserting object relation for remote table "worker_title" */
export type Worker_Title_Obj_Rel_Insert_Input = {
  data: Worker_Title_Insert_Input;
  on_conflict?: Maybe<Worker_Title_On_Conflict>;
};

/** on conflict condition type for table "worker_title" */
export type Worker_Title_On_Conflict = {
  constraint: Worker_Title_Constraint;
  update_columns: Array<Worker_Title_Update_Column>;
  where?: Maybe<Worker_Title_Bool_Exp>;
};

/** ordering options when selecting data from "worker_title" */
export type Worker_Title_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  project_workers_aggregate?: Maybe<Project_Worker_Aggregate_Order_By>;
  translation?: Maybe<Text_Translation_Order_By>;
  translation_id?: Maybe<Order_By>;
};

/** primary key columns input for table: "worker_title" */
export type Worker_Title_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "worker_title" */
export enum Worker_Title_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  TranslationId = 'translation_id'
}

/** input type for updating data in table "worker_title" */
export type Worker_Title_Set_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  translation_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "worker_title" */
export enum Worker_Title_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  TranslationId = 'translation_id'
}

/** update columns of table "worker" */
export enum Worker_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CurrentWorkerRole = 'current_worker_role',
  /** column name */
  EmailDailyReportOnSubmit = 'email_daily_report_on_submit',
  /** column name */
  EmailSafetyReportOnSubmit = 'email_safety_report_on_submit',
  /** column name */
  EmailToolboxTalkOnSubmit = 'email_toolbox_talk_on_submit',
  /** column name */
  HireDate = 'hire_date',
  /** column name */
  SubcontractorId = 'subcontractor_id',
  /** column name */
  Uid = 'uid',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  WorkerTitleId = 'worker_title_id'
}

export type WorkerCreatePasswordInput = {
  password?: Maybe<Scalars['String']>;
  subcontractorId?: Maybe<Scalars['String']>;
  username: Scalars['String'];
};

export type WorkerCreatePasswordResponse = {
   __typename?: 'WorkerCreatePasswordResponse';
  subcontractors?: Maybe<Array<Maybe<WorkerCreatePasswordSub>>>;
  token?: Maybe<Scalars['String']>;
};

export type WorkerCreatePasswordSub = {
   __typename?: 'WorkerCreatePasswordSub';
  id: Scalars['String'];
  name: Scalars['String'];
};

export type WorkerData = {
   __typename?: 'WorkerData';
  user?: Maybe<User>;
  currentWorkerProject?: Maybe<Project_Worker>;
};

export type CreateInviteMutationVariables = {
  objects: Array<CreateInviteDataObject>;
};


export type CreateInviteMutation = (
  { __typename?: 'mutation_root' }
  & Pick<Mutation_Root, 'createInvite'>
);

export type DeleteAndInsertPermitChecklistItemMutationVariables = {
  where: Permit_Checklist_Item_Bool_Exp;
  objects: Array<Permit_Checklist_Item_Insert_Input>;
};


export type DeleteAndInsertPermitChecklistItemMutation = (
  { __typename?: 'mutation_root' }
  & { delete_permit_checklist_item?: Maybe<(
    { __typename?: 'permit_checklist_item_mutation_response' }
    & Pick<Permit_Checklist_Item_Mutation_Response, 'affected_rows'>
  )>, insert_permit_checklist_item?: Maybe<(
    { __typename?: 'permit_checklist_item_mutation_response' }
    & Pick<Permit_Checklist_Item_Mutation_Response, 'affected_rows'>
  )> }
);

export type DeleteCertificationMutationVariables = {
  where: Worker_Certification_Bool_Exp;
};


export type DeleteCertificationMutation = (
  { __typename?: 'mutation_root' }
  & { delete_worker_certification?: Maybe<(
    { __typename?: 'worker_certification_mutation_response' }
    & Pick<Worker_Certification_Mutation_Response, 'affected_rows'>
  )> }
);

export type DeleteConfinedSpacePermitMonitoringEquipmentMutationVariables = {
  where: Confined_Space_Permit_Monitoring_Equipment_Bool_Exp;
};


export type DeleteConfinedSpacePermitMonitoringEquipmentMutation = (
  { __typename?: 'mutation_root' }
  & { delete_confined_space_permit_monitoring_equipment?: Maybe<(
    { __typename?: 'confined_space_permit_monitoring_equipment_mutation_response' }
    & Pick<Confined_Space_Permit_Monitoring_Equipment_Mutation_Response, 'affected_rows'>
  )> }
);

export type DeleteConfinedSpacePermitReadingCustomItemMutationVariables = {
  where: Confined_Space_Permit_Reading_Custom_Item_Bool_Exp;
};


export type DeleteConfinedSpacePermitReadingCustomItemMutation = (
  { __typename?: 'mutation_root' }
  & { delete_confined_space_permit_reading_custom_item?: Maybe<(
    { __typename?: 'confined_space_permit_reading_custom_item_mutation_response' }
    & Pick<Confined_Space_Permit_Reading_Custom_Item_Mutation_Response, 'affected_rows'>
  )> }
);

export type DeleteDigPermitSelectOptionMutationVariables = {
  where: Dig_Permit_Select_Option_Bool_Exp;
};


export type DeleteDigPermitSelectOptionMutation = (
  { __typename?: 'mutation_root' }
  & { delete_dig_permit_select_option?: Maybe<(
    { __typename?: 'dig_permit_select_option_mutation_response' }
    & Pick<Dig_Permit_Select_Option_Mutation_Response, 'affected_rows'>
  )> }
);

export type DeleteDigPermitTicketMutationVariables = {
  where: Dig_Permit_Ticket_Bool_Exp;
};


export type DeleteDigPermitTicketMutation = (
  { __typename?: 'mutation_root' }
  & { delete_dig_permit_ticket?: Maybe<(
    { __typename?: 'dig_permit_ticket_mutation_response' }
    & Pick<Dig_Permit_Ticket_Mutation_Response, 'affected_rows'>
  )> }
);

export type DeleteDrugTestMutationVariables = {
  where: Worker_Drug_Test_Bool_Exp;
};


export type DeleteDrugTestMutation = (
  { __typename?: 'mutation_root' }
  & { delete_worker_drug_test?: Maybe<(
    { __typename?: 'worker_drug_test_mutation_response' }
    & Pick<Worker_Drug_Test_Mutation_Response, 'affected_rows'>
  )> }
);

export type DeleteExpoPushTokensMutationVariables = {
  where: Expo_Push_Token_Bool_Exp;
};


export type DeleteExpoPushTokensMutation = (
  { __typename?: 'mutation_root' }
  & { delete_expo_push_token?: Maybe<(
    { __typename?: 'expo_push_token_mutation_response' }
    & Pick<Expo_Push_Token_Mutation_Response, 'affected_rows'>
  )> }
);

export type DeleteExpoPushTokenByUidMutationVariables = {
  uid: Scalars['uuid'];
};


export type DeleteExpoPushTokenByUidMutation = (
  { __typename?: 'mutation_root' }
  & { delete_expo_push_token?: Maybe<(
    { __typename?: 'expo_push_token_mutation_response' }
    & Pick<Expo_Push_Token_Mutation_Response, 'affected_rows'>
  )> }
);

export type DeleteImagesMutationVariables = {
  where: Image_Bool_Exp;
};


export type DeleteImagesMutation = (
  { __typename?: 'mutation_root' }
  & { delete_image?: Maybe<(
    { __typename?: 'image_mutation_response' }
    & Pick<Image_Mutation_Response, 'affected_rows'>
  )> }
);

export type DeleteImageByPkMutationVariables = {
  id: Scalars['uuid'];
};


export type DeleteImageByPkMutation = (
  { __typename?: 'mutation_root' }
  & { delete_image_by_pk?: Maybe<(
    { __typename?: 'image' }
    & Pick<Image, 'id'>
  )> }
);

export type DeletePermitByPkMutationVariables = {
  id: Scalars['uuid'];
};


export type DeletePermitByPkMutation = (
  { __typename?: 'mutation_root' }
  & { delete_permit_by_pk?: Maybe<(
    { __typename?: 'permit' }
    & Pick<Permit, 'id'>
  )> }
);

export type DeletePermitChecklistItemMutationVariables = {
  where: Permit_Checklist_Item_Bool_Exp;
};


export type DeletePermitChecklistItemMutation = (
  { __typename?: 'mutation_root' }
  & { delete_permit_checklist_item?: Maybe<(
    { __typename?: 'permit_checklist_item_mutation_response' }
    & Pick<Permit_Checklist_Item_Mutation_Response, 'affected_rows'>
  )> }
);

export type DeletePermitSignInImageMutationVariables = {
  where: Permit_Sign_In_Image_Bool_Exp;
};


export type DeletePermitSignInImageMutation = (
  { __typename?: 'mutation_root' }
  & { delete_permit_sign_in_image?: Maybe<(
    { __typename?: 'permit_sign_in_image_mutation_response' }
    & Pick<Permit_Sign_In_Image_Mutation_Response, 'affected_rows'>
  )> }
);

export type DeleteProjectWorkerByPkMutationVariables = {
  id: Scalars['uuid'];
};


export type DeleteProjectWorkerByPkMutation = (
  { __typename?: 'mutation_root' }
  & { delete_project_worker_by_pk?: Maybe<(
    { __typename?: 'project_worker' }
    & Pick<Project_Worker, 'id'>
  )> }
);

export type DeleteTaskMutationVariables = {
  taskId: Scalars['uuid'];
};


export type DeleteTaskMutation = (
  { __typename?: 'mutation_root' }
  & { delete_task?: Maybe<(
    { __typename?: 'task_mutation_response' }
    & { returning: Array<(
      { __typename?: 'task' }
      & Pick<Task, 'id'>
    )> }
  )> }
);

export type DeleteTodoAssigneeMutationVariables = {
  where: Todo_Assignee_Bool_Exp;
};


export type DeleteTodoAssigneeMutation = (
  { __typename?: 'mutation_root' }
  & { delete_todo_assignee?: Maybe<(
    { __typename?: 'todo_assignee_mutation_response' }
    & Pick<Todo_Assignee_Mutation_Response, 'affected_rows'>
  )> }
);

export type DeleteTodoNotifyeesMutationVariables = {
  where: Todo_Notifyee_Bool_Exp;
};


export type DeleteTodoNotifyeesMutation = (
  { __typename?: 'mutation_root' }
  & { delete_todo_notifyee?: Maybe<(
    { __typename?: 'todo_notifyee_mutation_response' }
    & Pick<Todo_Notifyee_Mutation_Response, 'affected_rows'>
  )> }
);

export type EmailChecklistNotifyeesMutationVariables = {
  input: EmailChecklistNotifyeesInput;
};


export type EmailChecklistNotifyeesMutation = (
  { __typename?: 'mutation_root' }
  & Pick<Mutation_Root, 'emailChecklistNotifyees'>
);

export type EmailCovidTestedPositiveMutationVariables = {
  input: EmailCovidTestedPositiveInput;
};


export type EmailCovidTestedPositiveMutation = (
  { __typename?: 'mutation_root' }
  & Pick<Mutation_Root, 'emailCovidTestedPositive'>
);

export type EmailDailyLogsPdfMutationVariables = {
  input: EmailDailyLogsPdfInput;
};


export type EmailDailyLogsPdfMutation = (
  { __typename?: 'mutation_root' }
  & Pick<Mutation_Root, 'emailDailyLogsPdf'>
);

export type EmailDailyLogCommentMutationVariables = {
  input: EmailDailyLogCommentInput;
};


export type EmailDailyLogCommentMutation = (
  { __typename?: 'mutation_root' }
  & Pick<Mutation_Root, 'emailDailyLogComment'>
);

export type EmailDailyReportPdfMutationVariables = {
  input: EmailDailyReportPdfInput;
};


export type EmailDailyReportPdfMutation = (
  { __typename?: 'mutation_root' }
  & Pick<Mutation_Root, 'emailDailyReportPdf'>
);

export type EmailFailedCovidCertificationMutationVariables = {
  input: EmailFailedCovidCertificationInput;
};


export type EmailFailedCovidCertificationMutation = (
  { __typename?: 'mutation_root' }
  & Pick<Mutation_Root, 'emailFailedCovidCertification'>
);

export type EmailPermitPdfMutationVariables = {
  input: EmailPermitPdfInput;
};


export type EmailPermitPdfMutation = (
  { __typename?: 'mutation_root' }
  & Pick<Mutation_Root, 'emailPermitPdf'>
);

export type EmailSafetyReportPdfMutationVariables = {
  input: EmailSafetyReportPdfInput;
};


export type EmailSafetyReportPdfMutation = (
  { __typename?: 'mutation_root' }
  & Pick<Mutation_Root, 'emailSafetyReportPdf'>
);

export type EmailToolboxTalkPdfMutationVariables = {
  input: EmailToolboxTalkPdfInput;
};


export type EmailToolboxTalkPdfMutation = (
  { __typename?: 'mutation_root' }
  & Pick<Mutation_Root, 'emailToolboxTalkPdf'>
);

export type ForgotPasswordMutationVariables = {
  input: ForgotPasswordInput;
};


export type ForgotPasswordMutation = (
  { __typename?: 'mutation_root' }
  & Pick<Mutation_Root, 'forgotPassword'>
);

export type GetAddTodoNotifyeesQueryVariables = {
  todoId: Scalars['uuid'];
};


export type GetAddTodoNotifyeesQuery = (
  { __typename?: 'query_root' }
  & { general_contractor_employee: Array<(
    { __typename?: 'general_contractor_employee' }
    & GcEmployeeFragFragment
  )>, foremen: Array<(
    { __typename?: 'project_worker' }
    & ReportProjectWorkerFragmentFragment
  )>, project_subcontractor: Array<(
    { __typename?: 'project_subcontractor' }
    & { subcontractor: (
      { __typename?: 'subcontractor' }
      & Pick<Subcontractor, 'id' | 'name'>
      & { trade?: Maybe<(
        { __typename?: 'subcontractor_trade' }
        & Pick<Subcontractor_Trade, 'id' | 'name'>
      )> }
    ), project_workers: Array<(
      { __typename?: 'project_worker' }
      & ReportProjectWorkerFragmentFragment
    )> }
  )> }
);

export type GetAppNotificationCountsQueryVariables = {};


export type GetAppNotificationCountsQuery = (
  { __typename?: 'query_root' }
  & { notifCounts: (
    { __typename?: 'AppNotificationCounts' }
    & Pick<AppNotificationCounts, 'chats' | 'todos' | 'menu' | 'projects'>
  ) }
);

export type GetAwarenessQuestionsQueryVariables = {
  where?: Maybe<Awareness_Question_Bool_Exp>;
  order_by?: Maybe<Array<Awareness_Question_Order_By>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type GetAwarenessQuestionsQuery = (
  { __typename?: 'query_root' }
  & { awareness_question: Array<(
    { __typename?: 'awareness_question' }
    & Pick<Awareness_Question, 'id' | 'subcontractor_id'>
    & { question: (
      { __typename?: 'text_translation' }
      & TextTranslationFragFragment
    ) }
  )>, awareness_question_aggregate: (
    { __typename?: 'awareness_question_aggregate' }
    & { aggregate?: Maybe<(
      { __typename?: 'awareness_question_aggregate_fields' }
      & Pick<Awareness_Question_Aggregate_Fields, 'count'>
    )> }
  ) }
);

export type GetCacheUserQueryVariables = {};


export type GetCacheUserQuery = (
  { __typename?: 'query_root' }
  & { user: Array<(
    { __typename?: 'user' }
    & Pick<User, 'id'>
  )> }
);

export type GetCertificationsQueryVariables = {};


export type GetCertificationsQuery = (
  { __typename?: 'query_root' }
  & { certification: Array<(
    { __typename?: 'certification' }
    & Pick<Certification, 'id' | 'name'>
  )> }
);

export type GetChatAttachmentsQueryVariables = {
  where?: Maybe<Chat_Item_Attachment_Bool_Exp>;
  limit?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Chat_Item_Attachment_Order_By>>;
  aggregateWhere?: Maybe<Chat_Item_Attachment_Bool_Exp>;
};


export type GetChatAttachmentsQuery = (
  { __typename?: 'query_root' }
  & { chat_item_attachment: Array<(
    { __typename?: 'chat_item_attachment' }
    & Pick<Chat_Item_Attachment, 'id' | 'type' | 'created_at'>
    & { image?: Maybe<(
      { __typename?: 'image' }
      & Pick<Image, 'id' | 'url' | 'sm_url' | 'md_url' | 'lg_url' | 'blurhash'>
    )>, chat_item: (
      { __typename?: 'chat_item' }
      & ChatItemFragmentFragment
    ) }
  )>, chat_item_attachment_aggregate: (
    { __typename?: 'chat_item_attachment_aggregate' }
    & { aggregate?: Maybe<(
      { __typename?: 'chat_item_attachment_aggregate_fields' }
      & Pick<Chat_Item_Attachment_Aggregate_Fields, 'count'>
    )> }
  ) }
);

export type GetChatItemsQueryVariables = {
  where: Chat_Item_Bool_Exp;
  order_by: Array<Chat_Item_Order_By>;
  limit?: Maybe<Scalars['Int']>;
};


export type GetChatItemsQuery = (
  { __typename?: 'query_root' }
  & { chat_item: Array<(
    { __typename?: 'chat_item' }
    & ChatItemFragmentFragment
  )> }
);

export type GetChatMembersQueryVariables = {
  where?: Maybe<Chat_Member_Bool_Exp>;
  order_by?: Maybe<Array<Chat_Member_Order_By>>;
};


export type GetChatMembersQuery = (
  { __typename?: 'query_root' }
  & { chat_member: Array<(
    { __typename?: 'chat_member' }
    & ChatMemberFragFragment
  )> }
);

export type GetChatMembersScreenQueryVariables = {
  chatId: Scalars['uuid'];
};


export type GetChatMembersScreenQuery = (
  { __typename?: 'query_root' }
  & { chat_by_pk?: Maybe<(
    { __typename?: 'chat' }
    & Pick<Chat, 'id' | 'name' | 'created_by_employee_id' | 'created_by_project_worker_id'>
  )>, active: Array<(
    { __typename?: 'chat_member' }
    & ChatMemberFragFragment
  )>, pendingAccount: Array<(
    { __typename?: 'chat_member' }
    & ChatMemberFragFragment
  )> }
);

export type GetChatMembersToAddQueryVariables = {
  chatId: Scalars['uuid'];
};


export type GetChatMembersToAddQuery = (
  { __typename?: 'query_root' }
  & { general_contractor_employee: Array<(
    { __typename?: 'general_contractor_employee' }
    & GcEmployeeFragFragment
  )>, foremen: Array<(
    { __typename?: 'project_worker' }
    & ReportProjectWorkerFragmentFragment
  )>, project_subcontractor: Array<(
    { __typename?: 'project_subcontractor' }
    & { subcontractor: (
      { __typename?: 'subcontractor' }
      & Pick<Subcontractor, 'id' | 'name'>
      & { trade?: Maybe<(
        { __typename?: 'subcontractor_trade' }
        & Pick<Subcontractor_Trade, 'id' | 'name'>
      )> }
    ), project_workers: Array<(
      { __typename?: 'project_worker' }
      & ReportProjectWorkerFragmentFragment
    )> }
  )> }
);

export type GetChatWithItemsQueryVariables = {
  chatId: Scalars['uuid'];
};


export type GetChatWithItemsQuery = (
  { __typename?: 'query_root' }
  & { chat_by_pk?: Maybe<(
    { __typename?: 'chat' }
    & Pick<Chat, 'id'>
    & { items: Array<(
      { __typename?: 'chat_item' }
      & ChatItemFragmentFragment
    )> }
  )> }
);

export type GetClientCreateDailyReportInformationQueryVariables = {};


export type GetClientCreateDailyReportInformationQuery = (
  { __typename?: 'query_root' }
  & { dailyReportForm: (
    { __typename?: 'DailyReportForm' }
    & Pick<DailyReportForm, 'description'>
  ), project_worker: Array<(
    { __typename?: 'project_worker' }
    & Pick<Project_Worker, 'id'>
    & { title?: Maybe<(
      { __typename?: 'worker_title' }
      & WorkerTitleFragFragment
    )>, user?: Maybe<(
      { __typename?: 'user' }
      & Pick<User, 'name'>
    )> }
  )> }
);

export type GetClientCurrentEmployeeProjectQueryVariables = {};


export type GetClientCurrentEmployeeProjectQuery = (
  { __typename?: 'query_root' }
  & { employeeData?: Maybe<(
    { __typename?: 'EmployeeData' }
    & { user?: Maybe<(
      { __typename?: 'user' }
      & Pick<User, 'id' | 'name' | 'email' | 'username' | 'phone_number' | 'role'>
    )>, currentEmployeeProject?: Maybe<(
      { __typename?: 'project_employee' }
      & Pick<Project_Employee, 'id'>
      & { employee: (
        { __typename?: 'general_contractor_employee' }
        & Pick<General_Contractor_Employee, 'uid'>
        & { general_contractor: (
          { __typename?: 'general_contractor' }
          & Pick<General_Contractor, 'id' | 'name'>
        ) }
      ), project: (
        { __typename?: 'project' }
        & Pick<Project, 'id' | 'name' | 'external_id'>
        & { general_contractor: (
          { __typename?: 'general_contractor' }
          & Pick<General_Contractor, 'id' | 'name'>
        ), project_covid_config?: Maybe<(
          { __typename?: 'project_covid_config' }
          & Pick<Project_Covid_Config, 'project_id' | 'worker_restriction_length'>
          & { requirements: (
            { __typename?: 'text_translation' }
            & TextTranslationFragFragment
          ) }
        )> }
      ) }
    )> }
  )> }
);

export type GetClientCurrentWorkerProjectQueryVariables = {};


export type GetClientCurrentWorkerProjectQuery = (
  { __typename?: 'query_root' }
  & { workerData?: Maybe<(
    { __typename?: 'WorkerData' }
    & { user?: Maybe<(
      { __typename?: 'user' }
      & Pick<User, 'id' | 'name' | 'email'>
    )>, currentWorkerProject?: Maybe<(
      { __typename?: 'project_worker' }
      & Pick<Project_Worker, 'id' | 'created_at' | 'worker_role' | 'can_insert_report' | 'subcontractor_id'>
      & { subcontractor: (
        { __typename?: 'subcontractor' }
        & Pick<Subcontractor, 'id' | 'name'>
      ), project_crew?: Maybe<(
        { __typename?: 'project_crew' }
        & Pick<Project_Crew, 'id' | 'name'>
      )>, title?: Maybe<(
        { __typename?: 'worker_title' }
        & WorkerTitleFragFragment
      )>, project: (
        { __typename?: 'project' }
        & Pick<Project, 'id' | 'name' | 'external_id'>
        & { general_contractor: (
          { __typename?: 'general_contractor' }
          & Pick<General_Contractor, 'id' | 'name'>
        ), permit_contact_project_employee?: Maybe<(
          { __typename?: 'project_employee' }
          & Pick<Project_Employee, 'id'>
          & { employee: (
            { __typename?: 'general_contractor_employee' }
            & Pick<General_Contractor_Employee, 'uid'>
            & { user: (
              { __typename?: 'user' }
              & Pick<User, 'id' | 'name'>
            ) }
          ) }
        )>, address: (
          { __typename?: 'address' }
          & AddressFragmentFragment
        ), project_covid_config?: Maybe<(
          { __typename?: 'project_covid_config' }
          & Pick<Project_Covid_Config, 'project_id' | 'worker_restriction_length'>
          & { requirements: (
            { __typename?: 'text_translation' }
            & TextTranslationFragFragment
          ), project_covid_tested_positive_questions: Array<(
            { __typename?: 'project_covid_tested_positive_question' }
            & Pick<Project_Covid_Tested_Positive_Question, 'id'>
            & { question: (
              { __typename?: 'text_translation' }
              & TextTranslationFragFragment
            ) }
          )> }
        )> }
      ) }
      & ReportProjectWorkerFragmentFragment
    )> }
  )> }
);

export type GetClientHelperDataQueryVariables = {};


export type GetClientHelperDataQuery = (
  { __typename?: 'query_root' }
  & { ppe_category: Array<(
    { __typename?: 'ppe_category' }
    & PpeCategoryFragmentFragment
  )>, permit_type: Array<(
    { __typename?: 'permit_type' }
    & PermitTypeFragmentFragment
  )> }
);

export type GetClientStateQueryVariables = {};


export type GetClientStateQuery = (
  { __typename?: 'query_root' }
  & { clientState?: Maybe<(
    { __typename?: 'ClientState' }
    & Pick<ClientState, 'uid' | 'role' | 'isAppLoading'>
  )> }
);

export type GetClientSubEmployeeQueryVariables = {};


export type GetClientSubEmployeeQuery = (
  { __typename?: 'query_root' }
  & { subEmployeeData?: Maybe<(
    { __typename?: 'SubEmployeeData' }
    & { user?: Maybe<(
      { __typename?: 'user' }
      & Pick<User, 'id' | 'name' | 'email' | 'role' | 'username' | 'phone_number'>
    )>, currentSubProject?: Maybe<(
      { __typename?: 'project_subcontractor' }
      & { subcontractor: (
        { __typename?: 'subcontractor' }
        & Pick<Subcontractor, 'id' | 'name'>
        & { trade?: Maybe<(
          { __typename?: 'subcontractor_trade' }
          & Pick<Subcontractor_Trade, 'id' | 'name'>
        )> }
      ), project: (
        { __typename?: 'project' }
        & Pick<Project, 'id' | 'name'>
        & { general_contractor: (
          { __typename?: 'general_contractor' }
          & Pick<General_Contractor, 'id' | 'name'>
        ) }
      ) }
    )> }
  )> }
);

export type GetClientUserDataQueryVariables = {};


export type GetClientUserDataQuery = (
  { __typename?: 'query_root' }
  & { userData?: Maybe<(
    { __typename?: 'user' }
    & Pick<User, 'id' | 'name' | 'email'>
  )> }
);

export type GetClientWorkerToolboxTalksQueryVariables = {};


export type GetClientWorkerToolboxTalksQuery = (
  { __typename?: 'query_root' }
  & { toolbox_talk: Array<(
    { __typename?: 'toolbox_talk' }
    & ToolboxTalkFragmentFragment
  )> }
);

export type GetConfinedSpacePermitByPkQueryVariables = {
  permitId: Scalars['uuid'];
};


export type GetConfinedSpacePermitByPkQuery = (
  { __typename?: 'query_root' }
  & { permit_by_pk?: Maybe<(
    { __typename?: 'permit' }
    & Pick<Permit, 'id' | 'is_historical' | 'type' | 'created_at' | 'updated_at' | 'current_status'>
    & { project: (
      { __typename?: 'project' }
      & Pick<Project, 'id' | 'name'>
      & { address: (
        { __typename?: 'address' }
        & AddressFragmentFragment
      ), general_contractor: (
        { __typename?: 'general_contractor' }
        & Pick<General_Contractor, 'id' | 'name' | 'allow_permit_activation_location_change'>
      ), permit_contact_project_employee?: Maybe<(
        { __typename?: 'project_employee' }
        & Pick<Project_Employee, 'id'>
        & { employee: (
          { __typename?: 'general_contractor_employee' }
          & Pick<General_Contractor_Employee, 'uid'>
          & { employee_title?: Maybe<(
            { __typename?: 'employee_title' }
            & Pick<Employee_Title, 'id'>
            & { name: (
              { __typename?: 'text_translation' }
              & TextTranslationFragFragment
            ) }
          )>, user: (
            { __typename?: 'user' }
            & Pick<User, 'id' | 'name' | 'phone_number' | 'email'>
          ) }
        ) }
      )> }
    ), subcontractor: (
      { __typename?: 'subcontractor' }
      & Pick<Subcontractor, 'id' | 'name'>
    ), images: Array<(
      { __typename?: 'image' }
      & Pick<Image, 'id' | 'url'>
    )>, origin_permit_history?: Maybe<(
      { __typename?: 'permit_history' }
      & Pick<Permit_History, 'id' | 'permit_id' | 'updated_location' | 'status' | 'created_at'>
      & { comment?: Maybe<(
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      )>, created_by_user: (
        { __typename?: 'user' }
        & Pick<User, 'id' | 'name'>
      ), images: Array<(
        { __typename?: 'image' }
        & Pick<Image, 'id' | 'url'>
      )> }
    )>, permit_sign_in_images: Array<(
      { __typename?: 'permit_sign_in_image' }
      & { image: (
        { __typename?: 'image' }
        & Pick<Image, 'id' | 'url'>
      ) }
    )>, supervisorProjectWorkers: Array<(
      { __typename?: 'permit_project_worker' }
      & Pick<Permit_Project_Worker, 'id' | 'type'>
      & { project_worker: (
        { __typename?: 'project_worker' }
        & ReportProjectWorkerFragmentFragment
      ), signature_image?: Maybe<(
        { __typename?: 'image' }
        & Pick<Image, 'id' | 'url'>
      )> }
    )>, entrantProjectWorkers: Array<(
      { __typename?: 'permit_project_worker' }
      & Pick<Permit_Project_Worker, 'id' | 'type'>
      & { project_worker: (
        { __typename?: 'project_worker' }
        & ReportProjectWorkerFragmentFragment
      ), signature_image?: Maybe<(
        { __typename?: 'image' }
        & Pick<Image, 'id' | 'url'>
      )> }
    )>, attendantProjectWorkers: Array<(
      { __typename?: 'permit_project_worker' }
      & Pick<Permit_Project_Worker, 'id' | 'type'>
      & { project_worker: (
        { __typename?: 'project_worker' }
        & ReportProjectWorkerFragmentFragment
      ), signature_image?: Maybe<(
        { __typename?: 'image' }
        & Pick<Image, 'id' | 'url'>
      )> }
    )>, permit_checklist_items: Array<(
      { __typename?: 'permit_checklist_item' }
      & PermitChecklistItemFragmentFragment
    )>, closing_checklist_items: Array<(
      { __typename?: 'permit_checklist_item' }
      & PermitChecklistItemFragmentFragment
    )>, permit_histories: Array<(
      { __typename?: 'permit_history' }
      & Pick<Permit_History, 'id' | 'permit_id' | 'updated_location' | 'status' | 'created_at'>
      & { comment?: Maybe<(
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      )>, created_by_user: (
        { __typename?: 'user' }
        & Pick<User, 'id' | 'name'>
      ), images: Array<(
        { __typename?: 'image' }
        & Pick<Image, 'id' | 'url'>
      )> }
    )>, confined_space_permit?: Maybe<(
      { __typename?: 'confined_space_permit' }
      & Pick<Confined_Space_Permit, 'permit_id' | 'entry_date' | 'work_duration' | 'type' | 'expiry_date'>
      & { applicant_project_worker?: Maybe<(
        { __typename?: 'project_worker' }
        & ReportProjectWorkerFragmentFragment
      )>, work_location: (
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      ), work_description: (
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      ), confined_space_description: (
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      ), hazards_description: (
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      ), communication_procedure: (
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      ), equipment: (
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      ), rescue_plan: (
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      ), emergency_contact_employee?: Maybe<(
        { __typename?: 'general_contractor_employee' }
        & Pick<General_Contractor_Employee, 'uid'>
        & { employee_title?: Maybe<(
          { __typename?: 'employee_title' }
          & Pick<Employee_Title, 'id'>
          & { name: (
            { __typename?: 'text_translation' }
            & TextTranslationFragFragment
          ) }
        )>, user: (
          { __typename?: 'user' }
          & Pick<User, 'id' | 'name' | 'phone_number' | 'email'>
        ) }
      )>, monitoring_equipment: Array<(
        { __typename?: 'confined_space_permit_monitoring_equipment' }
        & Pick<Confined_Space_Permit_Monitoring_Equipment, 'id' | 'make' | 'model' | 'serial_number' | 'factory_calibration_date' | 'calibrated_by' | 'sort_index' | 'field_calibration_date' | 'name'>
      )>, confined_space_permit_readings: Array<(
        { __typename?: 'confined_space_permit_reading' }
        & Pick<Confined_Space_Permit_Reading, 'id' | 'type' | 'created_at' | 'taken_at' | 'o2_percent' | 'submitted_at' | 'lower_explosive_limit' | 'co_ppm' | 'h2s_ppm'>
        & { taken_by_project_worker?: Maybe<(
          { __typename?: 'project_worker' }
          & ReportProjectWorkerFragmentFragment
        )>, signature_image?: Maybe<(
          { __typename?: 'image' }
          & Pick<Image, 'id' | 'url'>
        )>, images: Array<(
          { __typename?: 'image' }
          & Pick<Image, 'id' | 'url' | 'sort_index'>
        )>, custom_items: Array<(
          { __typename?: 'confined_space_permit_reading_custom_item' }
          & Pick<Confined_Space_Permit_Reading_Custom_Item, 'id' | 'name' | 'type_id' | 'is_new' | 'unit_type' | 'value' | 'sort_index'>
        )> }
      )> }
    )> }
  )> }
);

export type GetConfinedSpacePermitFormQueryVariables = {};


export type GetConfinedSpacePermitFormQuery = (
  { __typename?: 'query_root' }
  & { confinedSpacePermitForm: (
    { __typename?: 'ConfinedSpacePermitForm' }
    & Pick<ConfinedSpacePermitForm, 'selectedIsPermitted'>
  ) }
);

export type GetConfinedSpacePermitOptionsQueryVariables = {
  subcontractorId: Scalars['uuid'];
};


export type GetConfinedSpacePermitOptionsQuery = (
  { __typename?: 'query_root' }
  & { respiratorTypes: Array<(
    { __typename?: 'select_option' }
    & Pick<Select_Option, 'id'>
    & { name: (
      { __typename?: 'text_translation' }
      & TextTranslationFragFragment
    ) }
  )> }
);

export type GetCreateDailyReportFormQueryVariables = {};


export type GetCreateDailyReportFormQuery = (
  { __typename?: 'query_root' }
  & { dailyReportForm: (
    { __typename?: 'DailyReportForm' }
    & Pick<DailyReportForm, 'description' | 'projectWorkerIds'>
  ) }
);

export type GetCreateDailyReportInformationQueryVariables = {
  projectId: Scalars['uuid'];
  subcontractorId: Scalars['uuid'];
};


export type GetCreateDailyReportInformationQuery = (
  { __typename?: 'query_root' }
  & { dailyReportForm: (
    { __typename?: 'DailyReportForm' }
    & Pick<DailyReportForm, 'description'>
  ), dummy_query: Array<(
    { __typename?: 'state' }
    & Pick<State, 'code'>
  )>, project_worker: Array<(
    { __typename?: 'project_worker' }
    & ReportProjectWorkerFragmentFragment
  )> }
);

export type GetCreateReportInformationQueryVariables = {
  projectId: Scalars['uuid'];
  awarenessCount: Scalars['Int'];
  subcontractorId: Scalars['uuid'];
  nowDate: Scalars['timestamptz'];
};


export type GetCreateReportInformationQuery = (
  { __typename?: 'query_root' }
  & { reportForm: (
    { __typename?: 'ReportForm' }
    & Pick<ReportForm, 'selectedTaskIds' | 'injuredProjectWorkerIds' | 'awarenessAnswers' | 'fallText' | 'caughtText' | 'electrocutionText' | 'struckText'>
    & { pictures: Array<(
      { __typename?: 'ReportPicture' }
      & Pick<ReportPicture, 'url' | 'description'>
    )> }
  ), get_awareness_question: Array<(
    { __typename?: 'awareness_question' }
    & GetAwarenessQuestionFragmentFragment
  )>, project_hazard: Array<(
    { __typename?: 'project_hazard' }
    & ProjectHazardFragmentFragment
  )>, task: Array<(
    { __typename?: 'task' }
    & TaskFragmentFragment
  )>, project_worker: Array<(
    { __typename?: 'project_worker' }
    & ReportProjectWorkerFragmentFragment
  )> }
);

export type GetCreateToolboxTalksDataQueryVariables = {
  projectId: Scalars['uuid'];
  subcontractorId: Scalars['uuid'];
};


export type GetCreateToolboxTalksDataQuery = (
  { __typename?: 'query_root' }
  & { toolboxTalkForm: (
    { __typename?: 'ToolboxTalkForm' }
    & Pick<ToolboxTalkForm, 'description' | 'imageUris' | 'ledByProjectWorkerId'>
  ), dummy_query: Array<(
    { __typename?: 'state' }
    & Pick<State, 'code'>
  )>, project_worker: Array<(
    { __typename?: 'project_worker' }
    & ReportProjectWorkerFragmentFragment
  )> }
);

export type GetCrewQueryVariables = {
  projectCrewId: Scalars['uuid'];
  selfProjectWorkerId: Scalars['uuid'];
};


export type GetCrewQuery = (
  { __typename?: 'query_root' }
  & { project_crew_by_pk?: Maybe<(
    { __typename?: 'project_crew' }
    & Pick<Project_Crew, 'id' | 'name'>
    & { subcontractor: (
      { __typename?: 'subcontractor' }
      & Pick<Subcontractor, 'id' | 'name'>
    ), project_workers: Array<(
      { __typename?: 'project_worker' }
      & Pick<Project_Worker, 'id' | 'hard_hat_number'>
      & { title?: Maybe<(
        { __typename?: 'worker_title' }
        & WorkerTitleFragFragment
      )>, user?: Maybe<(
        { __typename?: 'user' }
        & Pick<User, 'id' | 'name'>
        & { profile_picture?: Maybe<(
          { __typename?: 'image' }
          & ImageFragmentFragment
        )> }
      )> }
    )> }
  )> }
);

export type GetCrewAddWorkerQueryVariables = {
  projectId: Scalars['uuid'];
  subcontractorId: Scalars['uuid'];
};


export type GetCrewAddWorkerQuery = (
  { __typename?: 'query_root' }
  & { worker: Array<(
    { __typename?: 'worker' }
    & Pick<Worker, 'uid' | 'current_worker_role'>
    & { worker_title?: Maybe<(
      { __typename?: 'worker_title' }
      & WorkerTitleFragFragment
    )>, user: (
      { __typename?: 'user' }
      & Pick<User, 'id' | 'name' | 'email'>
      & { profile_picture?: Maybe<(
        { __typename?: 'image' }
        & Pick<Image, 'id' | 'url'>
      )> }
    ) }
  )> }
);

export type GetCrewSelfCertifyInformationQueryVariables = {
  subcontractorId?: Maybe<Scalars['uuid']>;
  projectId: Scalars['uuid'];
  restrictedSinceDate: Scalars['timestamptz'];
};


export type GetCrewSelfCertifyInformationQuery = (
  { __typename?: 'query_root' }
  & { crewSelfCertifyForm: (
    { __typename?: 'CrewSelfCertifyForm' }
    & Pick<CrewSelfCertifyForm, 'passedWorkerIds'>
    & { failedWorkers: Array<(
      { __typename?: 'CovidFailedWorker' }
      & Pick<CovidFailedWorker, 'projectWorkerId' | 'failedQuestionId'>
    )> }
  ), project_covid_config_by_pk?: Maybe<(
    { __typename?: 'project_covid_config' }
    & Pick<Project_Covid_Config, 'worker_restriction_length' | 'updated_at'>
    & { requirements: (
      { __typename?: 'text_translation' }
      & TextTranslationFragFragment
    ), project: (
      { __typename?: 'project' }
      & Pick<Project, 'id' | 'name' | 'external_id'>
    ), contact_project_employee?: Maybe<(
      { __typename?: 'project_employee' }
      & Pick<Project_Employee, 'id'>
      & { employee: (
        { __typename?: 'general_contractor_employee' }
        & Pick<General_Contractor_Employee, 'uid'>
        & { employee_title?: Maybe<(
          { __typename?: 'employee_title' }
          & Pick<Employee_Title, 'id'>
          & { name: (
            { __typename?: 'text_translation' }
            & TextTranslationFragFragment
          ) }
        )>, user: (
          { __typename?: 'user' }
          & Pick<User, 'id' | 'name' | 'email' | 'phone_number'>
        ) }
      ) }
    )> }
  )>, project_covid_yes_no_question: Array<(
    { __typename?: 'project_covid_yes_no_question' }
    & Pick<Project_Covid_Yes_No_Question, 'id' | 'answer_is_yes'>
    & { question: (
      { __typename?: 'text_translation' }
      & TextTranslationFragFragment
    ) }
  )>, project_worker: Array<(
    { __typename?: 'project_worker' }
    & { project_covid_tested_positives: Array<(
      { __typename?: 'project_covid_tested_positive_worker' }
      & Pick<Project_Covid_Tested_Positive_Worker, 'id'>
    )>, project_covid_certifies: Array<(
      { __typename?: 'project_covid_certify_worker' }
      & Pick<Project_Covid_Certify_Worker, 'id'>
    )> }
    & ReportProjectWorkerFragmentFragment
  )> }
);

export type GetCurrentWorkerTasksQueryVariables = {};


export type GetCurrentWorkerTasksQuery = (
  { __typename?: 'query_root' }
  & { task: Array<(
    { __typename?: 'task' }
    & TaskFragmentFragment
  )> }
);

export type GetDailyReportsQueryVariables = {
  where?: Maybe<Daily_Report_Bool_Exp>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type GetDailyReportsQuery = (
  { __typename?: 'query_root' }
  & { daily_report: Array<(
    { __typename?: 'daily_report' }
    & DailyReportFragmentFragment
  )>, daily_report_aggregate: (
    { __typename?: 'daily_report_aggregate' }
    & { aggregate?: Maybe<(
      { __typename?: 'daily_report_aggregate_fields' }
      & Pick<Daily_Report_Aggregate_Fields, 'count'>
    )> }
  ) }
);

export type GetDailyReportByPkQueryVariables = {
  dailyReportId: Scalars['uuid'];
};


export type GetDailyReportByPkQuery = (
  { __typename?: 'query_root' }
  & { daily_report_by_pk?: Maybe<(
    { __typename?: 'daily_report' }
    & DailyReportFragmentFragment
  )> }
);

export type GetDigPermitByPkQueryVariables = {
  permitId: Scalars['uuid'];
};


export type GetDigPermitByPkQuery = (
  { __typename?: 'query_root' }
  & { permit_by_pk?: Maybe<(
    { __typename?: 'permit' }
    & Pick<Permit, 'id' | 'is_historical' | 'type' | 'created_at' | 'updated_at' | 'current_status'>
    & { project: (
      { __typename?: 'project' }
      & Pick<Project, 'id' | 'name'>
      & { address: (
        { __typename?: 'address' }
        & AddressFragmentFragment
      ), general_contractor: (
        { __typename?: 'general_contractor' }
        & Pick<General_Contractor, 'id' | 'name' | 'allow_permit_activation_location_change'>
      ), permit_contact_project_employee?: Maybe<(
        { __typename?: 'project_employee' }
        & Pick<Project_Employee, 'id'>
        & { employee: (
          { __typename?: 'general_contractor_employee' }
          & Pick<General_Contractor_Employee, 'uid'>
          & { employee_title?: Maybe<(
            { __typename?: 'employee_title' }
            & Pick<Employee_Title, 'id'>
            & { name: (
              { __typename?: 'text_translation' }
              & TextTranslationFragFragment
            ) }
          )>, user: (
            { __typename?: 'user' }
            & Pick<User, 'id' | 'name' | 'phone_number' | 'email'>
          ) }
        ) }
      )> }
    ), subcontractor: (
      { __typename?: 'subcontractor' }
      & Pick<Subcontractor, 'id' | 'name'>
    ), images: Array<(
      { __typename?: 'image' }
      & Pick<Image, 'id' | 'url'>
    )>, origin_permit_history?: Maybe<(
      { __typename?: 'permit_history' }
      & Pick<Permit_History, 'id' | 'permit_id' | 'updated_location' | 'status' | 'created_at'>
      & { comment?: Maybe<(
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      )>, created_by_user: (
        { __typename?: 'user' }
        & Pick<User, 'id' | 'name'>
      ), images: Array<(
        { __typename?: 'image' }
        & Pick<Image, 'id' | 'url'>
      )> }
    )>, permit_sign_in_images: Array<(
      { __typename?: 'permit_sign_in_image' }
      & { image: (
        { __typename?: 'image' }
        & Pick<Image, 'id' | 'url'>
      ) }
    )>, supervisorProjectWorkers: Array<(
      { __typename?: 'permit_project_worker' }
      & Pick<Permit_Project_Worker, 'id' | 'type'>
      & { project_worker: (
        { __typename?: 'project_worker' }
        & ReportProjectWorkerFragmentFragment
      ), signature_image?: Maybe<(
        { __typename?: 'image' }
        & Pick<Image, 'id' | 'url'>
      )> }
    )>, workingProjectWorkers: Array<(
      { __typename?: 'permit_project_worker' }
      & Pick<Permit_Project_Worker, 'id' | 'type'>
      & { project_worker: (
        { __typename?: 'project_worker' }
        & ReportProjectWorkerFragmentFragment
      ), signature_image?: Maybe<(
        { __typename?: 'image' }
        & Pick<Image, 'id' | 'url'>
      )> }
    )>, permit_checklist_items: Array<(
      { __typename?: 'permit_checklist_item' }
      & PermitChecklistItemFragmentFragment
    )>, closing_checklist_items: Array<(
      { __typename?: 'permit_checklist_item' }
      & PermitChecklistItemFragmentFragment
    )>, permit_histories: Array<(
      { __typename?: 'permit_history' }
      & Pick<Permit_History, 'id' | 'permit_id' | 'updated_location' | 'status' | 'created_at'>
      & { comment?: Maybe<(
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      )>, created_by_user: (
        { __typename?: 'user' }
        & Pick<User, 'id' | 'name'>
      ), images: Array<(
        { __typename?: 'image' }
        & Pick<Image, 'id' | 'url'>
      )> }
    )>, dig_permit?: Maybe<(
      { __typename?: 'dig_permit' }
      & Pick<Dig_Permit, 'permit_id' | 'work_start_at' | 'work_duration' | 'excavation_deeper_20_feet' | 'did_utility_locates' | 'utilities_identified' | 'used_protection_system'>
      & { work_location: (
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      ), work_description: (
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      ), soil_type?: Maybe<(
        { __typename?: 'select_option' }
        & SelectOptionFragFragment
        & SelectOptionFragFragment
      )>, applicant_project_worker: (
        { __typename?: 'project_worker' }
        & ReportProjectWorkerFragmentFragment
      ), engineeredProtectionSystemImages: Array<(
        { __typename?: 'image' }
        & Pick<Image, 'id' | 'url'>
      )>, dig_permit_tickets: Array<(
        { __typename?: 'dig_permit_ticket' }
        & Pick<Dig_Permit_Ticket, 'id' | 'public_or_private' | 'ticket_number' | 'date_locate_performed' | 'company_name'>
      )>, excavationTypes: Array<(
        { __typename?: 'dig_permit_select_option' }
        & { select_option: (
          { __typename?: 'select_option' }
          & SelectOptionFragFragment
        ) }
      )>, protectionSystemTypes: Array<(
        { __typename?: 'dig_permit_select_option' }
        & { select_option: (
          { __typename?: 'select_option' }
          & SelectOptionFragFragment
        ) }
      )>, utilityIdentifyingMethods: Array<(
        { __typename?: 'dig_permit_select_option' }
        & { select_option: (
          { __typename?: 'select_option' }
          & SelectOptionFragFragment
        ) }
      )>, utilityTypes: Array<(
        { __typename?: 'dig_permit_select_option' }
        & { select_option: (
          { __typename?: 'select_option' }
          & SelectOptionFragFragment
        ) }
      )> }
    )> }
  )> }
);

export type GetDigPermitOptionsQueryVariables = {
  subcontractorId: Scalars['uuid'];
};


export type GetDigPermitOptionsQuery = (
  { __typename?: 'query_root' }
  & { excavationTypes: Array<(
    { __typename?: 'select_option' }
    & SelectOptionFragFragment
  )>, utilityIdentifyingMethods: Array<(
    { __typename?: 'select_option' }
    & SelectOptionFragFragment
  )>, utilityTypes: Array<(
    { __typename?: 'select_option' }
    & SelectOptionFragFragment
  )>, soilTypes: Array<(
    { __typename?: 'select_option' }
    & SelectOptionFragFragment
  )>, protectionSystemTypes: Array<(
    { __typename?: 'select_option' }
    & SelectOptionFragFragment
  )> }
);

export type GetEmployeeCovidWorkersQueryVariables = {
  projectId: Scalars['uuid'];
  endDate?: Maybe<Scalars['timestamptz']>;
  startDate?: Maybe<Scalars['timestamptz']>;
  restrictedSinceDate?: Maybe<Scalars['timestamptz']>;
};


export type GetEmployeeCovidWorkersQuery = (
  { __typename?: 'query_root' }
  & { testedPositive: Array<(
    { __typename?: 'project_covid_tested_positive_worker' }
    & Pick<Project_Covid_Tested_Positive_Worker, 'id' | 'external_id' | 'created_at' | 'cleared_at'>
    & { project_worker?: Maybe<(
      { __typename?: 'project_worker' }
      & Pick<Project_Worker, 'hard_hat_number'>
      & { user?: Maybe<(
        { __typename?: 'user' }
        & Pick<User, 'name'>
      )>, subcontractor: (
        { __typename?: 'subcontractor' }
        & Pick<Subcontractor, 'name'>
      ) }
    )> }
  )>, covidGuests: Array<(
    { __typename?: 'project_covid_guest_certification' }
    & Pick<Project_Covid_Guest_Certification, 'id' | 'name' | 'company_name' | 'created_at' | 'passed'>
    & { subcontractor?: Maybe<(
      { __typename?: 'subcontractor' }
      & Pick<Subcontractor, 'name'>
    )> }
  )>, covidWorkers: Array<(
    { __typename?: 'project_covid_certify_worker' }
    & Pick<Project_Covid_Certify_Worker, 'id' | 'external_id' | 'created_at' | 'cleared_at' | 'passed'>
    & { project_worker?: Maybe<(
      { __typename?: 'project_worker' }
      & Pick<Project_Worker, 'hard_hat_number'>
      & { user?: Maybe<(
        { __typename?: 'user' }
        & Pick<User, 'name'>
      )>, subcontractor: (
        { __typename?: 'subcontractor' }
        & Pick<Subcontractor, 'name'>
      ) }
    )> }
  )> }
);

export type GetEmployeeDailyReportsQueryVariables = {
  projectId: Scalars['uuid'];
};


export type GetEmployeeDailyReportsQuery = (
  { __typename?: 'query_root' }
  & { daily_report: Array<(
    { __typename?: 'daily_report' }
    & DailyReportFragmentFragment
  )> }
);

export type GetEmployeeHazardsQueryVariables = {
  projectId: Scalars['uuid'];
  nowDate: Scalars['timestamptz'];
};


export type GetEmployeeHazardsQuery = (
  { __typename?: 'query_root' }
  & { activeHazards: Array<(
    { __typename?: 'project_hazard' }
    & ProjectHazardFragmentFragment
  )>, expiredHazards: Array<(
    { __typename?: 'project_hazard' }
    & ProjectHazardFragmentFragment
  )> }
);

export type GetEmployeeInitialDataQueryVariables = {
  uid: Scalars['uuid'];
};


export type GetEmployeeInitialDataQuery = (
  { __typename?: 'query_root' }
  & { user_by_pk?: Maybe<(
    { __typename?: 'user' }
    & Pick<User, 'id' | 'name' | 'role' | 'username' | 'email' | 'phone_number' | 'lang'>
    & { user_saved_emails: Array<(
      { __typename?: 'user_saved_email' }
      & Pick<User_Saved_Email, 'id' | 'email'>
    )>, employee?: Maybe<(
      { __typename?: 'general_contractor_employee' }
      & { general_contractor: (
        { __typename?: 'general_contractor' }
        & Pick<General_Contractor, 'id' | 'name'>
      ), employee_projects: Array<(
        { __typename?: 'project_employee' }
        & Pick<Project_Employee, 'id'>
        & { employee: (
          { __typename?: 'general_contractor_employee' }
          & Pick<General_Contractor_Employee, 'uid'>
          & { general_contractor: (
            { __typename?: 'general_contractor' }
            & Pick<General_Contractor, 'id' | 'name'>
          ) }
        ), project: (
          { __typename?: 'project' }
          & Pick<Project, 'id' | 'external_id' | 'name'>
          & { general_contractor: (
            { __typename?: 'general_contractor' }
            & Pick<General_Contractor, 'id' | 'name'>
          ), address: (
            { __typename?: 'address' }
            & AddressFragmentFragment
          ), project_covid_config?: Maybe<(
            { __typename?: 'project_covid_config' }
            & Pick<Project_Covid_Config, 'project_id' | 'worker_restriction_length'>
            & { requirements: (
              { __typename?: 'text_translation' }
              & TextTranslationFragFragment
            ) }
          )> }
        ) }
      )> }
      & GcEmployeeFragFragment
    )> }
  )> }
);

export type GetEmployeeProjectsQueryVariables = {
  employeeId: Scalars['uuid'];
};


export type GetEmployeeProjectsQuery = (
  { __typename?: 'query_root' }
  & { project: Array<(
    { __typename?: 'project' }
    & Pick<Project, 'id' | 'name' | 'external_id'>
    & { general_contractor: (
      { __typename?: 'general_contractor' }
      & Pick<General_Contractor, 'id' | 'name'>
    ), project_covid_config?: Maybe<(
      { __typename?: 'project_covid_config' }
      & Pick<Project_Covid_Config, 'project_id' | 'requirements_text' | 'worker_restriction_length'>
      & { requirements: (
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      ) }
    )>, user_notifications_aggregate: (
      { __typename?: 'user_notification_aggregate' }
      & { aggregate?: Maybe<(
        { __typename?: 'user_notification_aggregate_fields' }
        & Pick<User_Notification_Aggregate_Fields, 'count'>
      )> }
    ) }
  )> }
);

export type GetEmployeeReportsQueryVariables = {
  projectId: Scalars['uuid'];
  subcontractorId?: Maybe<Scalars['uuid']>;
  datelt?: Maybe<Scalars['timestamptz']>;
  dategte?: Maybe<Scalars['timestamptz']>;
};


export type GetEmployeeReportsQuery = (
  { __typename?: 'query_root' }
  & { report: Array<(
    { __typename?: 'report' }
    & ReportFragmentFragment
  )> }
);

export type GetEmployeeToolboxTalksQueryVariables = {
  projectId: Scalars['uuid'];
  subcontractorId?: Maybe<Scalars['uuid']>;
  datelt?: Maybe<Scalars['timestamptz']>;
  dategte?: Maybe<Scalars['timestamptz']>;
};


export type GetEmployeeToolboxTalksQuery = (
  { __typename?: 'query_root' }
  & { toolbox_talk: Array<(
    { __typename?: 'toolbox_talk' }
    & ToolboxTalkFragmentFragment
  )> }
);

export type GetEmployeeWorkersScreenQueryVariables = {
  projectId: Scalars['uuid'];
};


export type GetEmployeeWorkersScreenQuery = (
  { __typename?: 'query_root' }
  & { pendingProjectWorkers: Array<(
    { __typename?: 'project_worker' }
    & ProjectWorkerFragmentFragment
  )>, project_worker: Array<(
    { __typename?: 'project_worker' }
    & ProjectWorkerFragmentFragment
  )>, project_subcontractor: Array<(
    { __typename?: 'project_subcontractor' }
    & { subcontractor: (
      { __typename?: 'subcontractor' }
      & Pick<Subcontractor, 'id' | 'name'>
      & { project_workers_aggregate: (
        { __typename?: 'project_worker_aggregate' }
        & { aggregate?: Maybe<(
          { __typename?: 'project_worker_aggregate_fields' }
          & Pick<Project_Worker_Aggregate_Fields, 'count'>
        )> }
      ) }
    ) }
  )> }
);

export type GetGcAddTodoAssigneesQueryVariables = {
  todoId: Scalars['uuid'];
};


export type GetGcAddTodoAssigneesQuery = (
  { __typename?: 'query_root' }
  & { general_contractor_employee: Array<(
    { __typename?: 'general_contractor_employee' }
    & GcEmployeeFragFragment
  )>, foremen: Array<(
    { __typename?: 'project_worker' }
    & ReportProjectWorkerFragmentFragment
  )>, project_subcontractor: Array<(
    { __typename?: 'project_subcontractor' }
    & { subcontractor: (
      { __typename?: 'subcontractor' }
      & Pick<Subcontractor, 'id' | 'name'>
      & { trade?: Maybe<(
        { __typename?: 'subcontractor_trade' }
        & Pick<Subcontractor_Trade, 'id' | 'name'>
      )> }
    ), project_workers: Array<(
      { __typename?: 'project_worker' }
      & ReportProjectWorkerFragmentFragment
    )> }
  )> }
);

export type GetGcCreateDirectMessageQueryVariables = {
  uid: Scalars['uuid'];
  projectId: Scalars['uuid'];
};


export type GetGcCreateDirectMessageQuery = (
  { __typename?: 'query_root' }
  & { general_contractor_employee: Array<(
    { __typename?: 'general_contractor_employee' }
    & { chat_members: Array<(
      { __typename?: 'chat_member' }
      & Pick<Chat_Member, 'id'>
      & { chat: (
        { __typename?: 'chat' }
        & Pick<Chat, 'id'>
        & { members: Array<(
          { __typename?: 'chat_member' }
          & Pick<Chat_Member, 'id'>
        )> }
      ) }
    )> }
    & GcEmployeeFragFragment
  )>, foremen: Array<(
    { __typename?: 'project_worker' }
    & { chat_members: Array<(
      { __typename?: 'chat_member' }
      & Pick<Chat_Member, 'id'>
      & { chat: (
        { __typename?: 'chat' }
        & Pick<Chat, 'id'>
        & { members: Array<(
          { __typename?: 'chat_member' }
          & Pick<Chat_Member, 'id'>
        )> }
      ) }
    )> }
    & ReportProjectWorkerFragmentFragment
  )>, project_subcontractor: Array<(
    { __typename?: 'project_subcontractor' }
    & { subcontractor: (
      { __typename?: 'subcontractor' }
      & Pick<Subcontractor, 'id' | 'name'>
      & { trade?: Maybe<(
        { __typename?: 'subcontractor_trade' }
        & Pick<Subcontractor_Trade, 'id' | 'name'>
      )> }
    ), project_workers: Array<(
      { __typename?: 'project_worker' }
      & { chat_members: Array<(
        { __typename?: 'chat_member' }
        & Pick<Chat_Member, 'id'>
        & { chat: (
          { __typename?: 'chat' }
          & Pick<Chat, 'id'>
          & { members: Array<(
            { __typename?: 'chat_member' }
            & Pick<Chat_Member, 'id'>
          )> }
        ) }
      )> }
      & ReportProjectWorkerFragmentFragment
    )> }
  )> }
);

export type GetGcPermitsScreenQueryVariables = {
  projectId: Scalars['uuid'];
  startAt?: Maybe<Scalars['timestamptz']>;
  endAt?: Maybe<Scalars['timestamptz']>;
  subcontractorId?: Maybe<Scalars['uuid']>;
};


export type GetGcPermitsScreenQuery = (
  { __typename?: 'query_root' }
  & { open: Array<(
    { __typename?: 'permit' }
    & PermitSnippetFragmentFragment
  )>, pendingApproval: Array<(
    { __typename?: 'permit' }
    & PermitSnippetFragmentFragment
  )>, closed: Array<(
    { __typename?: 'permit' }
    & PermitSnippetFragmentFragment
  )> }
);

export type GetGeneralContractorEmployeesQueryVariables = {
  where?: Maybe<General_Contractor_Employee_Bool_Exp>;
  order_by?: Maybe<Array<General_Contractor_Employee_Order_By>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type GetGeneralContractorEmployeesQuery = (
  { __typename?: 'query_root' }
  & { general_contractor_employee: Array<(
    { __typename?: 'general_contractor_employee' }
    & Pick<General_Contractor_Employee, 'uid'>
    & { employee_title?: Maybe<(
      { __typename?: 'employee_title' }
      & Pick<Employee_Title, 'id'>
      & { name: (
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      ) }
    )>, user: (
      { __typename?: 'user' }
      & Pick<User, 'id' | 'name' | 'username' | 'email' | 'phone_number'>
      & { profile_picture?: Maybe<(
        { __typename?: 'image' }
        & Pick<Image, 'id' | 'url'>
      )> }
    ) }
  )>, general_contractor_employee_aggregate: (
    { __typename?: 'general_contractor_employee_aggregate' }
    & { aggregate?: Maybe<(
      { __typename?: 'general_contractor_employee_aggregate_fields' }
      & Pick<General_Contractor_Employee_Aggregate_Fields, 'count'>
    )> }
  ) }
);

export type GetGeneralContractorEmployeeByPkQueryVariables = {
  uid: Scalars['uuid'];
};


export type GetGeneralContractorEmployeeByPkQuery = (
  { __typename?: 'query_root' }
  & { general_contractor_employee_by_pk?: Maybe<(
    { __typename?: 'general_contractor_employee' }
    & Pick<General_Contractor_Employee, 'uid'>
    & { employee_title?: Maybe<(
      { __typename?: 'employee_title' }
      & Pick<Employee_Title, 'id'>
      & { name: (
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      ) }
    )>, user: (
      { __typename?: 'user' }
      & Pick<User, 'id' | 'name' | 'username' | 'email' | 'phone_number'>
      & { profile_picture?: Maybe<(
        { __typename?: 'image' }
        & Pick<Image, 'id' | 'url'>
      )> }
    ) }
  )> }
);

export type GetGroupedProjectMembersQueryVariables = {
  projectId: Scalars['uuid'];
};


export type GetGroupedProjectMembersQuery = (
  { __typename?: 'query_root' }
  & { general_contractor_employee: Array<(
    { __typename?: 'general_contractor_employee' }
    & GcEmployeeFragFragment
  )>, foremen: Array<(
    { __typename?: 'project_worker' }
    & ReportProjectWorkerFragmentFragment
  )>, project_subcontractor: Array<(
    { __typename?: 'project_subcontractor' }
    & { subcontractor: (
      { __typename?: 'subcontractor' }
      & Pick<Subcontractor, 'id' | 'name'>
      & { trade?: Maybe<(
        { __typename?: 'subcontractor_trade' }
        & Pick<Subcontractor_Trade, 'id' | 'name'>
      )> }
    ), project_workers: Array<(
      { __typename?: 'project_worker' }
      & ReportProjectWorkerFragmentFragment
    )> }
  )> }
);

export type GetHardHatWorkersQueryVariables = {
  externalProjectId: Scalars['String'];
  hardHatNumber: Scalars['String'];
};


export type GetHardHatWorkersQuery = (
  { __typename?: 'query_root' }
  & { project_worker: Array<(
    { __typename?: 'project_worker' }
    & Pick<Project_Worker, 'id' | 'hard_hat_number'>
    & { user?: Maybe<(
      { __typename?: 'user' }
      & Pick<User, 'id' | 'name' | 'email' | 'username'>
    )> }
  )> }
);

export type GetHotWorkPermitByPkQueryVariables = {
  permitId: Scalars['uuid'];
};


export type GetHotWorkPermitByPkQuery = (
  { __typename?: 'query_root' }
  & { permit_by_pk?: Maybe<(
    { __typename?: 'permit' }
    & Pick<Permit, 'id' | 'is_historical' | 'type' | 'created_at' | 'updated_at' | 'current_status'>
    & { project: (
      { __typename?: 'project' }
      & Pick<Project, 'id' | 'name'>
      & { address: (
        { __typename?: 'address' }
        & AddressFragmentFragment
      ), general_contractor: (
        { __typename?: 'general_contractor' }
        & Pick<General_Contractor, 'id' | 'name' | 'allow_permit_activation_location_change'>
      ), permit_contact_project_employee?: Maybe<(
        { __typename?: 'project_employee' }
        & Pick<Project_Employee, 'id'>
        & { employee: (
          { __typename?: 'general_contractor_employee' }
          & Pick<General_Contractor_Employee, 'uid'>
          & { employee_title?: Maybe<(
            { __typename?: 'employee_title' }
            & Pick<Employee_Title, 'id'>
            & { name: (
              { __typename?: 'text_translation' }
              & TextTranslationFragFragment
            ) }
          )>, user: (
            { __typename?: 'user' }
            & Pick<User, 'id' | 'name' | 'phone_number' | 'email'>
          ) }
        ) }
      )> }
    ), subcontractor: (
      { __typename?: 'subcontractor' }
      & Pick<Subcontractor, 'id' | 'name'>
    ), images: Array<(
      { __typename?: 'image' }
      & Pick<Image, 'id' | 'url'>
    )>, origin_permit_history?: Maybe<(
      { __typename?: 'permit_history' }
      & Pick<Permit_History, 'id' | 'permit_id' | 'updated_location' | 'status' | 'created_at'>
      & { comment?: Maybe<(
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      )>, created_by_user: (
        { __typename?: 'user' }
        & Pick<User, 'id' | 'name'>
      ), images: Array<(
        { __typename?: 'image' }
        & Pick<Image, 'id' | 'url'>
      )> }
    )>, permit_sign_in_images: Array<(
      { __typename?: 'permit_sign_in_image' }
      & { image: (
        { __typename?: 'image' }
        & Pick<Image, 'id' | 'url'>
      ) }
    )>, supervisorProjectWorkers: Array<(
      { __typename?: 'permit_project_worker' }
      & Pick<Permit_Project_Worker, 'id' | 'type'>
      & { project_worker: (
        { __typename?: 'project_worker' }
        & ReportProjectWorkerFragmentFragment
      ), signature_image?: Maybe<(
        { __typename?: 'image' }
        & Pick<Image, 'id' | 'url'>
      )> }
    )>, workingProjectWorkers: Array<(
      { __typename?: 'permit_project_worker' }
      & Pick<Permit_Project_Worker, 'id' | 'type'>
      & { project_worker: (
        { __typename?: 'project_worker' }
        & ReportProjectWorkerFragmentFragment
      ), signature_image?: Maybe<(
        { __typename?: 'image' }
        & Pick<Image, 'id' | 'url'>
      )> }
    )>, firewatchProjectWorkers: Array<(
      { __typename?: 'permit_project_worker' }
      & Pick<Permit_Project_Worker, 'id' | 'type'>
      & { project_worker: (
        { __typename?: 'project_worker' }
        & ReportProjectWorkerFragmentFragment
      ), signature_image?: Maybe<(
        { __typename?: 'image' }
        & Pick<Image, 'id' | 'url'>
      )> }
    )>, owner_user?: Maybe<(
      { __typename?: 'user' }
      & Pick<User, 'id' | 'name'>
    )>, permit_checklist_items: Array<(
      { __typename?: 'permit_checklist_item' }
      & PermitChecklistItemFragmentFragment
    )>, closing_checklist_items: Array<(
      { __typename?: 'permit_checklist_item' }
      & PermitChecklistItemFragmentFragment
    )>, permit_histories: Array<(
      { __typename?: 'permit_history' }
      & Pick<Permit_History, 'id' | 'permit_id' | 'updated_location' | 'status' | 'created_at'>
      & { comment?: Maybe<(
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      )>, created_by_user: (
        { __typename?: 'user' }
        & Pick<User, 'id' | 'name'>
      ), images: Array<(
        { __typename?: 'image' }
        & Pick<Image, 'id' | 'url'>
      )> }
    )>, hot_work_permit?: Maybe<(
      { __typename?: 'hot_work_permit' }
      & Pick<Hot_Work_Permit, 'permit_id' | 'work_start_at' | 'work_duration' | 'has_special_precautions'>
      & { work_location: (
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      ), work_description: (
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      ), special_precautions_description: (
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      ), applicant_project_worker: (
        { __typename?: 'project_worker' }
        & ReportProjectWorkerFragmentFragment
      ) }
    )> }
  )> }
);

export type GetIndSelfCertifyInformationQueryVariables = {
  projectId: Scalars['uuid'];
};


export type GetIndSelfCertifyInformationQuery = (
  { __typename?: 'query_root' }
  & { project_covid_config_by_pk?: Maybe<(
    { __typename?: 'project_covid_config' }
    & Pick<Project_Covid_Config, 'worker_restriction_length' | 'updated_at'>
    & { requirements: (
      { __typename?: 'text_translation' }
      & TextTranslationFragFragment
    ), project: (
      { __typename?: 'project' }
      & Pick<Project, 'id' | 'name' | 'external_id'>
    ), contact_project_employee?: Maybe<(
      { __typename?: 'project_employee' }
      & Pick<Project_Employee, 'id'>
      & { employee: (
        { __typename?: 'general_contractor_employee' }
        & Pick<General_Contractor_Employee, 'uid'>
        & { employee_title?: Maybe<(
          { __typename?: 'employee_title' }
          & Pick<Employee_Title, 'id'>
          & { name: (
            { __typename?: 'text_translation' }
            & TextTranslationFragFragment
          ) }
        )>, user: (
          { __typename?: 'user' }
          & Pick<User, 'id' | 'name' | 'email' | 'phone_number'>
        ) }
      ) }
    )> }
  )>, project_covid_yes_no_question: Array<(
    { __typename?: 'project_covid_yes_no_question' }
    & Pick<Project_Covid_Yes_No_Question, 'id'>
    & { question: (
      { __typename?: 'text_translation' }
      & TextTranslationFragFragment
    ) }
  )> }
);

export type GetInsertHazardAddInfoQueryVariables = {
  projectId: Scalars['uuid'];
};


export type GetInsertHazardAddInfoQuery = (
  { __typename?: 'query_root' }
  & { project_subcontractor: Array<(
    { __typename?: 'project_subcontractor' }
    & { subcontractor: (
      { __typename?: 'subcontractor' }
      & Pick<Subcontractor, 'id' | 'name'>
    ) }
  )> }
);

export type GetInvitesQueryVariables = {
  where?: Maybe<Invite_Bool_Exp>;
  order_by?: Maybe<Array<Invite_Order_By>>;
};


export type GetInvitesQuery = (
  { __typename?: 'query_root' }
  & { invite: Array<(
    { __typename?: 'invite' }
    & Pick<Invite, 'id' | 'to_email' | 'to_phone_number' | 'created_at' | 'accepted_at'>
    & { project?: Maybe<(
      { __typename?: 'project' }
      & Pick<Project, 'id' | 'name'>
    )>, subcontractor?: Maybe<(
      { __typename?: 'subcontractor' }
      & Pick<Subcontractor, 'id' | 'name'>
    )>, general_contractor?: Maybe<(
      { __typename?: 'general_contractor' }
      & Pick<General_Contractor, 'id' | 'name'>
    )> }
  )> }
);

export type GetLanguageCodeQueryVariables = {};


export type GetLanguageCodeQuery = (
  { __typename?: 'query_root' }
  & Pick<Query_Root, 'languageCode'>
);

export type GetNameUsernameQueryVariables = {
  name: Scalars['String'];
};


export type GetNameUsernameQuery = (
  { __typename?: 'query_root' }
  & Pick<Query_Root, 'getNewUsername'>
);

export type GetPasswordHashQueryVariables = {
  string: Scalars['String'];
};


export type GetPasswordHashQuery = (
  { __typename?: 'query_root' }
  & Pick<Query_Root, 'getPasswordHash'>
);

export type GetPermitsQueryVariables = {
  where?: Maybe<Permit_Bool_Exp>;
  order_by?: Maybe<Array<Permit_Order_By>>;
};


export type GetPermitsQuery = (
  { __typename?: 'query_root' }
  & { permit: Array<(
    { __typename?: 'permit' }
    & Pick<Permit, 'owner_user_id' | 'created_at' | 'current_status'>
    & { project: (
      { __typename?: 'project' }
      & Pick<Project, 'id' | 'name'>
    ), permit_histories: Array<(
      { __typename?: 'permit_history' }
      & Pick<Permit_History, 'id' | 'status'>
      & { comment?: Maybe<(
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      )> }
    )>, subcontractor: (
      { __typename?: 'subcontractor' }
      & Pick<Subcontractor, 'id' | 'name'>
    ), hot_work_permit?: Maybe<(
      { __typename?: 'hot_work_permit' }
      & Pick<Hot_Work_Permit, 'permit_id'>
    )> }
  )> }
);

export type GetPermitChecklistItemsQueryVariables = {
  where?: Maybe<Permit_Checklist_Item_Bool_Exp>;
  order_by?: Maybe<Array<Permit_Checklist_Item_Order_By>>;
};


export type GetPermitChecklistItemsQuery = (
  { __typename?: 'query_root' }
  & { permit_checklist_item: Array<(
    { __typename?: 'permit_checklist_item' }
    & PermitChecklistItemFragmentFragment
  )> }
);

export type GetPermitChecklistQuestionsDataQueryVariables = {
  gcId: Scalars['uuid'];
  permitType: Scalars['String'];
};


export type GetPermitChecklistQuestionsDataQuery = (
  { __typename?: 'query_root' }
  & { permit_checklist_item: Array<(
    { __typename?: 'permit_checklist_item' }
    & PermitChecklistItemFragmentFragment
  )>, closing_checklist_items: Array<(
    { __typename?: 'permit_checklist_item' }
    & PermitChecklistItemFragmentFragment
  )> }
);

export type GetPermitHistoriesQueryVariables = {
  where?: Maybe<Permit_History_Bool_Exp>;
  order_by?: Maybe<Array<Permit_History_Order_By>>;
};


export type GetPermitHistoriesQuery = (
  { __typename?: 'query_root' }
  & { permit_history: Array<(
    { __typename?: 'permit_history' }
    & Pick<Permit_History, 'id' | 'status' | 'created_at' | 'updated_location' | 'outside_project_location'>
    & { comment?: Maybe<(
      { __typename?: 'text_translation' }
      & TextTranslationFragFragment
    )>, created_by_user: (
      { __typename?: 'user' }
      & Pick<User, 'id' | 'name'>
    ), permit: (
      { __typename?: 'permit' }
      & Pick<Permit, 'id'>
      & { subcontractor: (
        { __typename?: 'subcontractor' }
        & Pick<Subcontractor, 'id' | 'name'>
      ), hot_work_permit?: Maybe<(
        { __typename?: 'hot_work_permit' }
        & Pick<Hot_Work_Permit, 'permit_id'>
      )>, dig_permit?: Maybe<(
        { __typename?: 'dig_permit' }
        & Pick<Dig_Permit, 'permit_id'>
      )> }
    ), historical_permit: (
      { __typename?: 'permit' }
      & Pick<Permit, 'id'>
      & { hot_work_permit?: Maybe<(
        { __typename?: 'hot_work_permit' }
        & Pick<Hot_Work_Permit, 'permit_id'>
      )>, dig_permit?: Maybe<(
        { __typename?: 'dig_permit' }
        & Pick<Dig_Permit, 'permit_id'>
      )> }
    ) }
  )> }
);

export type GetPermitTypesQueryVariables = {};


export type GetPermitTypesQuery = (
  { __typename?: 'query_root' }
  & { permit_type: Array<(
    { __typename?: 'permit_type' }
    & Pick<Permit_Type, 'id'>
    & { name: (
      { __typename?: 'text_translation' }
      & TextTranslationFragFragment
    ) }
  )> }
);

export type GetPpeCategoriesQueryVariables = {
  ppeTypeWhere?: Maybe<Ppe_Type_Bool_Exp>;
};


export type GetPpeCategoriesQuery = (
  { __typename?: 'query_root' }
  & { ppe_category: Array<(
    { __typename?: 'ppe_category' }
    & Pick<Ppe_Category, 'id'>
    & { name: (
      { __typename?: 'text_translation' }
      & TextTranslationFragFragment
    ), ppe_types: Array<(
      { __typename?: 'ppe_type' }
      & Pick<Ppe_Type, 'id'>
      & { name: (
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      ) }
    )> }
  )> }
);

export type GetPpeTypesQueryVariables = {};


export type GetPpeTypesQuery = (
  { __typename?: 'query_root' }
  & { ppe_type: Array<(
    { __typename?: 'ppe_type' }
    & Pick<Ppe_Type, 'id'>
    & { name: (
      { __typename?: 'text_translation' }
      & TextTranslationFragFragment
    ) }
  )> }
);

export type GetProjectsQueryVariables = {
  where?: Maybe<Project_Bool_Exp>;
};


export type GetProjectsQuery = (
  { __typename?: 'query_root' }
  & { project: Array<(
    { __typename?: 'project' }
    & Pick<Project, 'id' | 'name' | 'external_id'>
    & { general_contractor: (
      { __typename?: 'general_contractor' }
      & Pick<General_Contractor, 'id' | 'name'>
    ) }
  )> }
);

export type GetProjectCovidConfigByPkQueryVariables = {
  projectId: Scalars['uuid'];
};


export type GetProjectCovidConfigByPkQuery = (
  { __typename?: 'query_root' }
  & { project_covid_config_by_pk?: Maybe<(
    { __typename?: 'project_covid_config' }
    & Pick<Project_Covid_Config, 'requirements_text' | 'worker_restriction_length' | 'updated_at'>
    & { requirements: (
      { __typename?: 'text_translation' }
      & TextTranslationFragFragment
    ), project: (
      { __typename?: 'project' }
      & Pick<Project, 'id' | 'name' | 'external_id'>
    ), project_covid_tested_positive_questions: Array<(
      { __typename?: 'project_covid_tested_positive_question' }
      & Pick<Project_Covid_Tested_Positive_Question, 'id'>
      & { question: (
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      ) }
    )>, contact_project_employee?: Maybe<(
      { __typename?: 'project_employee' }
      & Pick<Project_Employee, 'id'>
      & { employee: (
        { __typename?: 'general_contractor_employee' }
        & Pick<General_Contractor_Employee, 'uid'>
        & { employee_title?: Maybe<(
          { __typename?: 'employee_title' }
          & Pick<Employee_Title, 'id'>
          & { name: (
            { __typename?: 'text_translation' }
            & TextTranslationFragFragment
          ) }
        )>, user: (
          { __typename?: 'user' }
          & Pick<User, 'id' | 'name' | 'email' | 'phone_number'>
        ) }
      ) }
    )> }
  )>, project_covid_yes_no_question: Array<(
    { __typename?: 'project_covid_yes_no_question' }
    & Pick<Project_Covid_Yes_No_Question, 'id'>
    & { question: (
      { __typename?: 'text_translation' }
      & TextTranslationFragFragment
    ) }
  )> }
);

export type GetProjectCrewsQueryVariables = {
  where: Project_Crew_Bool_Exp;
  order_by?: Maybe<Array<Project_Crew_Order_By>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type GetProjectCrewsQuery = (
  { __typename?: 'query_root' }
  & { project_crew: Array<(
    { __typename?: 'project_crew' }
    & Pick<Project_Crew, 'id' | 'name' | 'subcontractor_id'>
    & { subcontractor: (
      { __typename?: 'subcontractor' }
      & Pick<Subcontractor, 'id' | 'name'>
    ), project_workers_aggregate: (
      { __typename?: 'project_worker_aggregate' }
      & { aggregate?: Maybe<(
        { __typename?: 'project_worker_aggregate_fields' }
        & Pick<Project_Worker_Aggregate_Fields, 'count'>
      )> }
    ), lead_foreman_project_worker?: Maybe<(
      { __typename?: 'project_worker' }
      & ProjectWorkerFragmentFragment
    )> }
  )>, project_crew_aggregate: (
    { __typename?: 'project_crew_aggregate' }
    & { aggregate?: Maybe<(
      { __typename?: 'project_crew_aggregate_fields' }
      & Pick<Project_Crew_Aggregate_Fields, 'count'>
    )> }
  ) }
);

export type GetProjectCrewByPkQueryVariables = {
  projectCrewId: Scalars['uuid'];
};


export type GetProjectCrewByPkQuery = (
  { __typename?: 'query_root' }
  & { project_crew_by_pk?: Maybe<(
    { __typename?: 'project_crew' }
    & Pick<Project_Crew, 'id' | 'name'>
    & { subcontractor: (
      { __typename?: 'subcontractor' }
      & Pick<Subcontractor, 'id' | 'name'>
    ), project: (
      { __typename?: 'project' }
      & Pick<Project, 'id' | 'name'>
    ), project_workers: Array<(
      { __typename?: 'project_worker' }
      & ProjectWorkerFragmentFragment
    )>, project_workers_aggregate: (
      { __typename?: 'project_worker_aggregate' }
      & { aggregate?: Maybe<(
        { __typename?: 'project_worker_aggregate_fields' }
        & Pick<Project_Worker_Aggregate_Fields, 'count'>
      )> }
    ), lead_foreman_project_worker?: Maybe<(
      { __typename?: 'project_worker' }
      & Pick<Project_Worker, 'id'>
      & { user?: Maybe<(
        { __typename?: 'user' }
        & Pick<User, 'id' | 'name' | 'username' | 'role'>
      )>, title?: Maybe<(
        { __typename?: 'worker_title' }
        & WorkerTitleFragFragment
      )> }
    )> }
  )> }
);

export type GetProjectDailyReportsQueryVariables = {
  projectId: Scalars['uuid'];
  subcontractorId: Scalars['uuid'];
};


export type GetProjectDailyReportsQuery = (
  { __typename?: 'query_root' }
  & { daily_report: Array<(
    { __typename?: 'daily_report' }
    & DailyReportFragmentFragment
  )> }
);

export type GetProjectEmployeesQueryVariables = {
  where?: Maybe<Project_Employee_Bool_Exp>;
};


export type GetProjectEmployeesQuery = (
  { __typename?: 'query_root' }
  & { project_employee: Array<(
    { __typename?: 'project_employee' }
    & Pick<Project_Employee, 'id'>
    & { project: (
      { __typename?: 'project' }
      & Pick<Project, 'id' | 'name'>
    ), employee: (
      { __typename?: 'general_contractor_employee' }
      & Pick<General_Contractor_Employee, 'uid'>
      & { employee_title?: Maybe<(
        { __typename?: 'employee_title' }
        & Pick<Employee_Title, 'id'>
        & { name: (
          { __typename?: 'text_translation' }
          & TextTranslationFragFragment
        ) }
      )>, user: (
        { __typename?: 'user' }
        & Pick<User, 'id' | 'name' | 'email' | 'phone_number'>
        & { profile_picture?: Maybe<(
          { __typename?: 'image' }
          & Pick<Image, 'id' | 'url'>
        )> }
      ) }
    ) }
  )> }
);

export type GetProjectHazardByPkQueryVariables = {
  hazardId: Scalars['uuid'];
};


export type GetProjectHazardByPkQuery = (
  { __typename?: 'query_root' }
  & { project_hazard_by_pk?: Maybe<(
    { __typename?: 'project_hazard' }
    & ProjectHazardFragmentFragment
  )> }
);

export type GetProjectSiteNotificationsQueryVariables = {
  where?: Maybe<Project_Site_Notification_Bool_Exp>;
  order_by?: Maybe<Array<Project_Site_Notification_Order_By>>;
};


export type GetProjectSiteNotificationsQuery = (
  { __typename?: 'query_root' }
  & { project_site_notification: Array<(
    { __typename?: 'project_site_notification' }
    & Pick<Project_Site_Notification, 'id' | 'created_at'>
    & { project: (
      { __typename?: 'project' }
      & Pick<Project, 'id' | 'name'>
    ), message: (
      { __typename?: 'text_translation' }
      & TextTranslationFragFragment
    ) }
  )> }
);

export type GetProjectSubcontractorsQueryVariables = {
  where?: Maybe<Project_Subcontractor_Bool_Exp>;
  order_by?: Maybe<Array<Project_Subcontractor_Order_By>>;
};


export type GetProjectSubcontractorsQuery = (
  { __typename?: 'query_root' }
  & { project_subcontractor: Array<(
    { __typename?: 'project_subcontractor' }
    & { project: (
      { __typename?: 'project' }
      & Pick<Project, 'id' | 'name'>
    ), subcontractor: (
      { __typename?: 'subcontractor' }
      & Pick<Subcontractor, 'id' | 'name'>
      & { trade?: Maybe<(
        { __typename?: 'subcontractor_trade' }
        & Pick<Subcontractor_Trade, 'id' | 'name'>
      )> }
    ), project_crews_aggregate: (
      { __typename?: 'project_crew_aggregate' }
      & { aggregate?: Maybe<(
        { __typename?: 'project_crew_aggregate_fields' }
        & Pick<Project_Crew_Aggregate_Fields, 'count'>
      )> }
    ), project_workers_aggregate: (
      { __typename?: 'project_worker_aggregate' }
      & { aggregate?: Maybe<(
        { __typename?: 'project_worker_aggregate_fields' }
        & Pick<Project_Worker_Aggregate_Fields, 'count'>
      )> }
    ) }
  )> }
);

export type GetProjectSubcontractorByPkQueryVariables = {
  project_id: Scalars['uuid'];
  subcontractor_id: Scalars['uuid'];
};


export type GetProjectSubcontractorByPkQuery = (
  { __typename?: 'query_root' }
  & { project_subcontractor: Array<(
    { __typename?: 'project_subcontractor' }
    & { project: (
      { __typename?: 'project' }
      & Pick<Project, 'id' | 'name'>
    ), subcontractor: (
      { __typename?: 'subcontractor' }
      & Pick<Subcontractor, 'id' | 'name'>
      & { trade?: Maybe<(
        { __typename?: 'subcontractor_trade' }
        & Pick<Subcontractor_Trade, 'id' | 'name'>
      )> }
    ), project_crews: Array<(
      { __typename?: 'project_crew' }
      & Pick<Project_Crew, 'id' | 'name'>
      & { lead_foreman_project_worker?: Maybe<(
        { __typename?: 'project_worker' }
        & Pick<Project_Worker, 'id' | 'worker_role'>
        & { title?: Maybe<(
          { __typename?: 'worker_title' }
          & WorkerTitleFragFragment
        )>, user?: Maybe<(
          { __typename?: 'user' }
          & Pick<User, 'id' | 'name' | 'email'>
        )> }
      )>, project_workers_aggregate: (
        { __typename?: 'project_worker_aggregate' }
        & { aggregate?: Maybe<(
          { __typename?: 'project_worker_aggregate_fields' }
          & Pick<Project_Worker_Aggregate_Fields, 'count'>
        )> }
      ) }
    )>, project_crews_aggregate: (
      { __typename?: 'project_crew_aggregate' }
      & { aggregate?: Maybe<(
        { __typename?: 'project_crew_aggregate_fields' }
        & Pick<Project_Crew_Aggregate_Fields, 'count'>
      )> }
    ), project_workers: Array<(
      { __typename?: 'project_worker' }
      & ProjectWorkerFragmentFragment
    )>, project_workers_aggregate: (
      { __typename?: 'project_worker_aggregate' }
      & { aggregate?: Maybe<(
        { __typename?: 'project_worker_aggregate_fields' }
        & Pick<Project_Worker_Aggregate_Fields, 'count'>
      )> }
    ) }
  )> }
);

export type ProjectSubcontractorProjectWorkersFragmentFragment = (
  { __typename?: 'query_root' }
  & { project_worker: Array<(
    { __typename?: 'project_worker' }
    & ReportProjectWorkerFragmentFragment
  )> }
);

export type GetProjectWithSubsQueryVariables = {
  where?: Maybe<Project_Bool_Exp>;
};


export type GetProjectWithSubsQuery = (
  { __typename?: 'query_root' }
  & { project: Array<(
    { __typename?: 'project' }
    & Pick<Project, 'id' | 'name' | 'external_id'>
    & { project_subcontractors: Array<(
      { __typename?: 'project_subcontractor' }
      & { subcontractor: (
        { __typename?: 'subcontractor' }
        & Pick<Subcontractor, 'id' | 'name'>
      ) }
    )> }
  )> }
);

export type GetProjectWorkersQueryVariables = {
  where?: Maybe<Project_Worker_Bool_Exp>;
  order_by?: Maybe<Array<Project_Worker_Order_By>>;
};


export type GetProjectWorkersQuery = (
  { __typename?: 'query_root' }
  & { project_worker: Array<(
    { __typename?: 'project_worker' }
    & ReportProjectWorkerFragmentFragment
  )>, project_worker_aggregate: (
    { __typename?: 'project_worker_aggregate' }
    & { aggregate?: Maybe<(
      { __typename?: 'project_worker_aggregate_fields' }
      & Pick<Project_Worker_Aggregate_Fields, 'count'>
    )> }
  ) }
);

export type GetProjectWorkersAndEmployeesQueryVariables = {
  projectId: Scalars['uuid'];
};


export type GetProjectWorkersAndEmployeesQuery = (
  { __typename?: 'query_root' }
  & { project_worker: Array<(
    { __typename?: 'project_worker' }
    & ReportProjectWorkerFragmentFragment
  )>, general_contractor_employee: Array<(
    { __typename?: 'general_contractor_employee' }
    & Pick<General_Contractor_Employee, 'uid'>
    & { employee_title?: Maybe<(
      { __typename?: 'employee_title' }
      & Pick<Employee_Title, 'id'>
      & { name: (
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      ) }
    )>, user: (
      { __typename?: 'user' }
      & Pick<User, 'id' | 'name'>
    ) }
  )> }
);

export type GetProjectWorkerByPkQueryVariables = {
  projectWorkerId: Scalars['uuid'];
};


export type GetProjectWorkerByPkQuery = (
  { __typename?: 'query_root' }
  & { project_worker_by_pk?: Maybe<(
    { __typename?: 'project_worker' }
    & Pick<Project_Worker, 'id' | 'created_at' | 'hard_hat_number' | 'can_insert_report' | 'worker_role'>
    & { title?: Maybe<(
      { __typename?: 'worker_title' }
      & WorkerTitleFragFragment
    )>, project: (
      { __typename?: 'project' }
      & Pick<Project, 'id' | 'name'>
    ), subcontractor: (
      { __typename?: 'subcontractor' }
      & Pick<Subcontractor, 'id' | 'name'>
    ), project_crew?: Maybe<(
      { __typename?: 'project_crew' }
      & Pick<Project_Crew, 'id' | 'name'>
      & { lead_foreman_project_worker?: Maybe<(
        { __typename?: 'project_worker' }
        & Pick<Project_Worker, 'id'>
        & { user?: Maybe<(
          { __typename?: 'user' }
          & Pick<User, 'id' | 'name'>
        )> }
      )> }
    )>, orientation_signature_image?: Maybe<(
      { __typename?: 'image' }
      & Pick<Image, 'id' | 'url'>
    )>, worker_role_detail: (
      { __typename?: 'worker_role' }
      & WorkerRoleFragFragment
    ), user?: Maybe<(
      { __typename?: 'user' }
      & Pick<User, 'id' | 'name' | 'username' | 'email' | 'phone_number' | 'created_password'>
      & { invites: Array<(
        { __typename?: 'invite' }
        & Pick<Invite, 'id' | 'to_email' | 'to_phone_number' | 'created_at' | 'claiming_account' | 'accepted_at'>
      )>, profile_picture?: Maybe<(
        { __typename?: 'image' }
        & Pick<Image, 'id' | 'url'>
      )>, government_identification?: Maybe<(
        { __typename?: 'government_identification' }
        & { front_image?: Maybe<(
          { __typename?: 'image' }
          & Pick<Image, 'id' | 'url'>
        )>, back_image?: Maybe<(
          { __typename?: 'image' }
          & Pick<Image, 'id' | 'url'>
        )> }
      )> }
    )>, worker: (
      { __typename?: 'worker' }
      & { subcontractor?: Maybe<(
        { __typename?: 'subcontractor' }
        & Pick<Subcontractor, 'id' | 'name'>
      )>, worker_certifications: Array<(
        { __typename?: 'worker_certification' }
        & Pick<Worker_Certification, 'id' | 'expires_on'>
        & { certification: (
          { __typename?: 'certification' }
          & Pick<Certification, 'id' | 'name'>
        ), images: Array<(
          { __typename?: 'image' }
          & Pick<Image, 'id' | 'url'>
        )> }
      )>, worker_drug_tests: Array<(
        { __typename?: 'worker_drug_test' }
        & Pick<Worker_Drug_Test, 'name' | 'drug_test_date' | 'created_at' | 'id'>
        & { images: Array<(
          { __typename?: 'image' }
          & Pick<Image, 'id' | 'url'>
        )> }
      )> }
    ) }
    & ProjectWorkerFragmentFragment
  )> }
);

export type GetProjectWorkerCreateDirectMessageQueryVariables = {
  projectWorkerId: Scalars['uuid'];
};


export type GetProjectWorkerCreateDirectMessageQuery = (
  { __typename?: 'query_root' }
  & { general_contractor_employee: Array<(
    { __typename?: 'general_contractor_employee' }
    & { chat_members: Array<(
      { __typename?: 'chat_member' }
      & Pick<Chat_Member, 'id'>
      & { chat: (
        { __typename?: 'chat' }
        & Pick<Chat, 'id'>
        & { members: Array<(
          { __typename?: 'chat_member' }
          & Pick<Chat_Member, 'id'>
        )> }
      ) }
    )> }
    & GcEmployeeFragFragment
  )>, foremen: Array<(
    { __typename?: 'project_worker' }
    & { chat_members: Array<(
      { __typename?: 'chat_member' }
      & Pick<Chat_Member, 'id'>
      & { chat: (
        { __typename?: 'chat' }
        & Pick<Chat, 'id'>
        & { members: Array<(
          { __typename?: 'chat_member' }
          & Pick<Chat_Member, 'id'>
        )> }
      ) }
    )> }
    & ReportProjectWorkerFragmentFragment
  )>, project_subcontractor: Array<(
    { __typename?: 'project_subcontractor' }
    & { subcontractor: (
      { __typename?: 'subcontractor' }
      & Pick<Subcontractor, 'id' | 'name'>
      & { trade?: Maybe<(
        { __typename?: 'subcontractor_trade' }
        & Pick<Subcontractor_Trade, 'id' | 'name'>
      )> }
    ), project_workers: Array<(
      { __typename?: 'project_worker' }
      & { chat_members: Array<(
        { __typename?: 'chat_member' }
        & Pick<Chat_Member, 'id'>
        & { chat: (
          { __typename?: 'chat' }
          & Pick<Chat, 'id'>
          & { members: Array<(
            { __typename?: 'chat_member' }
            & Pick<Chat_Member, 'id'>
          )> }
        ) }
      )> }
      & ReportProjectWorkerFragmentFragment
    )> }
  )> }
);

export type GetProjectWorkerOrientationQueryVariables = {
  projectWorkerId: Scalars['uuid'];
  projectId: Scalars['uuid'];
};


export type GetProjectWorkerOrientationQuery = (
  { __typename?: 'query_root' }
  & { project_worker_by_pk?: Maybe<(
    { __typename?: 'project_worker' }
    & Pick<Project_Worker, 'id' | 'hard_hat_number'>
    & { user?: Maybe<(
      { __typename?: 'user' }
      & Pick<User, 'id' | 'name' | 'username' | 'email'>
      & { profile_picture?: Maybe<(
        { __typename?: 'image' }
        & ImageFragmentFragment
      )>, government_identification?: Maybe<(
        { __typename?: 'government_identification' }
        & { front_image?: Maybe<(
          { __typename?: 'image' }
          & Pick<Image, 'id' | 'url'>
        )>, back_image?: Maybe<(
          { __typename?: 'image' }
          & Pick<Image, 'id' | 'url'>
        )> }
      )> }
    )>, worker: (
      { __typename?: 'worker' }
      & Pick<Worker, 'uid' | 'current_worker_role'>
      & { worker_title?: Maybe<(
        { __typename?: 'worker_title' }
        & WorkerTitleFragFragment
      )>, worker_certifications: Array<(
        { __typename?: 'worker_certification' }
        & Pick<Worker_Certification, 'id' | 'expires_on'>
        & { certification: (
          { __typename?: 'certification' }
          & Pick<Certification, 'id' | 'name'>
        ), images: Array<(
          { __typename?: 'image' }
          & Pick<Image, 'id' | 'url'>
        )> }
      )>, worker_drug_tests: Array<(
        { __typename?: 'worker_drug_test' }
        & Pick<Worker_Drug_Test, 'name' | 'drug_test_date' | 'created_at' | 'id'>
        & { images: Array<(
          { __typename?: 'image' }
          & Pick<Image, 'id' | 'url'>
        )> }
      )>, subcontractor?: Maybe<(
        { __typename?: 'subcontractor' }
        & Pick<Subcontractor, 'id' | 'name'>
        & { project_crews: Array<(
          { __typename?: 'project_crew' }
          & Pick<Project_Crew, 'id' | 'name'>
          & { lead_foreman_project_worker?: Maybe<(
            { __typename?: 'project_worker' }
            & Pick<Project_Worker, 'id'>
            & { user?: Maybe<(
              { __typename?: 'user' }
              & Pick<User, 'id' | 'name'>
            )> }
          )> }
        )>, trade?: Maybe<(
          { __typename?: 'subcontractor_trade' }
          & Pick<Subcontractor_Trade, 'id' | 'name'>
        )> }
      )> }
    ) }
  )>, worker_role: Array<(
    { __typename?: 'worker_role' }
    & Pick<Worker_Role, 'value'>
  )>, certification: Array<(
    { __typename?: 'certification' }
    & Pick<Certification, 'id' | 'name'>
  )> }
);

export type GetProjectWorkerRolesQueryVariables = {};


export type GetProjectWorkerRolesQuery = (
  { __typename?: 'query_root' }
  & { worker_role: Array<(
    { __typename?: 'worker_role' }
    & Pick<Worker_Role, 'value'>
  )> }
);

export type GetReportsQueryVariables = {
  where?: Maybe<Report_Bool_Exp>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type GetReportsQuery = (
  { __typename?: 'query_root' }
  & { report: Array<(
    { __typename?: 'report' }
    & ReportFragmentFragment
  )>, report_aggregate: (
    { __typename?: 'report_aggregate' }
    & { aggregate?: Maybe<(
      { __typename?: 'report_aggregate_fields' }
      & Pick<Report_Aggregate_Fields, 'count'>
    )> }
  ) }
);

export type GetReportByPkQueryVariables = {
  reportId: Scalars['uuid'];
};


export type GetReportByPkQuery = (
  { __typename?: 'query_root' }
  & { report_by_pk?: Maybe<(
    { __typename?: 'report' }
    & ReportFragmentFragment
  )> }
);

export type GetSafetyReportsListQueryVariables = {
  where?: Maybe<Report_Bool_Exp>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type GetSafetyReportsListQuery = (
  { __typename?: 'query_root' }
  & { report: Array<(
    { __typename?: 'report' }
    & SafetyReportListFragmentFragment
  )>, report_aggregate: (
    { __typename?: 'report_aggregate' }
    & { aggregate?: Maybe<(
      { __typename?: 'report_aggregate_fields' }
      & Pick<Report_Aggregate_Fields, 'count'>
    )> }
  ) }
);

export type GetSubcontractorsQueryVariables = {
  where?: Maybe<Subcontractor_Bool_Exp>;
};


export type GetSubcontractorsQuery = (
  { __typename?: 'query_root' }
  & { subcontractor: Array<(
    { __typename?: 'subcontractor' }
    & SubcontractorFragmentFragment
  )>, subcontractor_aggregate: (
    { __typename?: 'subcontractor_aggregate' }
    & { aggregate?: Maybe<(
      { __typename?: 'subcontractor_aggregate_fields' }
      & Pick<Subcontractor_Aggregate_Fields, 'count'>
    )> }
  ) }
);

export type GetSubcontractorByPkQueryVariables = {
  subcontractorId: Scalars['uuid'];
  projectId: Scalars['uuid'];
};


export type GetSubcontractorByPkQuery = (
  { __typename?: 'query_root' }
  & { subcontractor_by_pk?: Maybe<(
    { __typename?: 'subcontractor' }
    & Pick<Subcontractor, 'id' | 'name'>
    & { trade?: Maybe<(
      { __typename?: 'subcontractor_trade' }
      & Pick<Subcontractor_Trade, 'id' | 'name'>
    )>, project_workers: Array<(
      { __typename?: 'project_worker' }
      & ProjectWorkerFragmentFragment
    )> }
  )> }
);

export type GetSubcontractorEmployeesQueryVariables = {
  where?: Maybe<Subcontractor_Employee_Bool_Exp>;
  order_by?: Maybe<Array<Subcontractor_Employee_Order_By>>;
};


export type GetSubcontractorEmployeesQuery = (
  { __typename?: 'query_root' }
  & { subcontractor_employee: Array<(
    { __typename?: 'subcontractor_employee' }
    & Pick<Subcontractor_Employee, 'user_id'>
    & { employee_title?: Maybe<(
      { __typename?: 'subcontractor_employee_title' }
      & Pick<Subcontractor_Employee_Title, 'id'>
      & { name: (
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      ) }
    )>, user: (
      { __typename?: 'user' }
      & Pick<User, 'id' | 'name' | 'email' | 'phone_number'>
    ) }
  )> }
);

export type GetSubcontractorEmployeeByPkQueryVariables = {
  uid: Scalars['uuid'];
};


export type GetSubcontractorEmployeeByPkQuery = (
  { __typename?: 'query_root' }
  & { subcontractor_employee_by_pk?: Maybe<(
    { __typename?: 'subcontractor_employee' }
    & Pick<Subcontractor_Employee, 'user_id'>
    & { employee_title?: Maybe<(
      { __typename?: 'subcontractor_employee_title' }
      & Pick<Subcontractor_Employee_Title, 'id'>
      & { name: (
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      ) }
    )>, user: (
      { __typename?: 'user' }
      & Pick<User, 'id' | 'name' | 'email' | 'phone_number'>
    ) }
  )> }
);

export type GetSubProjectHazardsQueryVariables = {
  projectId: Scalars['uuid'];
  subcontractorId: Scalars['uuid'];
  nowDate: Scalars['timestamptz'];
};


export type GetSubProjectHazardsQuery = (
  { __typename?: 'query_root' }
  & { activeHazards: Array<(
    { __typename?: 'project_hazard' }
    & ProjectHazardFragmentFragment
  )>, expiredHazards: Array<(
    { __typename?: 'project_hazard' }
    & ProjectHazardFragmentFragment
  )> }
);

export type GetSubUserInitialDataQueryVariables = {
  uid: Scalars['uuid'];
};


export type GetSubUserInitialDataQuery = (
  { __typename?: 'query_root' }
  & { user_by_pk?: Maybe<(
    { __typename?: 'user' }
    & Pick<User, 'id' | 'name' | 'role' | 'username' | 'email' | 'phone_number' | 'lang'>
    & { subcontractor_employee?: Maybe<(
      { __typename?: 'subcontractor_employee' }
      & Pick<Subcontractor_Employee, 'user_id'>
      & { employee_title?: Maybe<(
        { __typename?: 'subcontractor_employee_title' }
        & Pick<Subcontractor_Employee_Title, 'id'>
        & { name: (
          { __typename?: 'text_translation' }
          & TextTranslationFragFragment
        ) }
      )>, subcontractor: (
        { __typename?: 'subcontractor' }
        & Pick<Subcontractor, 'id' | 'name'>
        & { trade?: Maybe<(
          { __typename?: 'subcontractor_trade' }
          & Pick<Subcontractor_Trade, 'id' | 'name'>
        )>, subcontractor_projects: Array<(
          { __typename?: 'project_subcontractor' }
          & { subcontractor: (
            { __typename?: 'subcontractor' }
            & Pick<Subcontractor, 'id' | 'name'>
            & { trade?: Maybe<(
              { __typename?: 'subcontractor_trade' }
              & Pick<Subcontractor_Trade, 'id' | 'name'>
            )> }
          ), project: (
            { __typename?: 'project' }
            & Pick<Project, 'id' | 'name'>
            & { general_contractor: (
              { __typename?: 'general_contractor' }
              & Pick<General_Contractor, 'id' | 'name'>
            ) }
          ) }
        )> }
      ) }
    )> }
  )> }
);

export type GetSubWorkersScreenQueryVariables = {
  projectId: Scalars['uuid'];
  subcontractorId: Scalars['uuid'];
};


export type GetSubWorkersScreenQuery = (
  { __typename?: 'query_root' }
  & { project_worker: Array<(
    { __typename?: 'project_worker' }
    & ProjectWorkerFragmentFragment
  )>, project_crew: Array<(
    { __typename?: 'project_crew' }
    & Pick<Project_Crew, 'id' | 'name'>
    & { subcontractor: (
      { __typename?: 'subcontractor' }
      & Pick<Subcontractor, 'id' | 'name'>
    ), project: (
      { __typename?: 'project' }
      & Pick<Project, 'id' | 'name'>
    ), lead_foreman_project_worker?: Maybe<(
      { __typename?: 'project_worker' }
      & ProjectWorkerFragmentFragment
    )>, project_workers_aggregate: (
      { __typename?: 'project_worker_aggregate' }
      & { aggregate?: Maybe<(
        { __typename?: 'project_worker_aggregate_fields' }
        & Pick<Project_Worker_Aggregate_Fields, 'count'>
      )> }
    ) }
  )>, worker: Array<(
    { __typename?: 'worker' }
    & Pick<Worker, 'current_worker_role'>
    & { worker_title?: Maybe<(
      { __typename?: 'worker_title' }
      & WorkerTitleFragFragment
    )>, user: (
      { __typename?: 'user' }
      & Pick<User, 'id' | 'name' | 'email' | 'phone_number'>
      & { profile_picture?: Maybe<(
        { __typename?: 'image' }
        & Pick<Image, 'id' | 'url'>
      )> }
    ) }
  )> }
);

export type GetTasksQueryVariables = {
  where?: Maybe<Task_Bool_Exp>;
};


export type GetTasksQuery = (
  { __typename?: 'query_root' }
  & { task: Array<(
    { __typename?: 'task' }
    & TaskFragmentFragment
  )> }
);

export type GetTaskByPkQueryVariables = {
  id: Scalars['uuid'];
};


export type GetTaskByPkQuery = (
  { __typename?: 'query_root' }
  & { task_by_pk?: Maybe<(
    { __typename?: 'task' }
    & TaskFragmentFragment
  )> }
);

export type GetTodosQueryVariables = {
  where?: Maybe<Todo_Bool_Exp>;
  order_by?: Maybe<Array<Todo_Order_By>>;
  limit?: Maybe<Scalars['Int']>;
};


export type GetTodosQuery = (
  { __typename?: 'query_root' }
  & { todo: Array<(
    { __typename?: 'todo' }
    & TodoDetailsFragFragment
  )> }
);

export type GetTodoByPkQueryVariables = {
  todoId: Scalars['uuid'];
};


export type GetTodoByPkQuery = (
  { __typename?: 'query_root' }
  & { todo_by_pk?: Maybe<(
    { __typename?: 'todo' }
    & TodoDetailsFragFragment
  )> }
);

export type GetToolboxTalksQueryVariables = {
  where?: Maybe<Toolbox_Talk_Bool_Exp>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type GetToolboxTalksQuery = (
  { __typename?: 'query_root' }
  & { toolbox_talk: Array<(
    { __typename?: 'toolbox_talk' }
    & ToolboxTalkFragmentFragment
  )> }
);

export type GetToolboxTalkByPkQueryVariables = {
  toolboxTalkId: Scalars['uuid'];
};


export type GetToolboxTalkByPkQuery = (
  { __typename?: 'query_root' }
  & { toolbox_talk_by_pk?: Maybe<(
    { __typename?: 'toolbox_talk' }
    & ToolboxTalkFragmentFragment
  )> }
);

export type GetUserByPkQueryVariables = {
  user_id: Scalars['uuid'];
};


export type GetUserByPkQuery = (
  { __typename?: 'query_root' }
  & { user_by_pk?: Maybe<(
    { __typename?: 'user' }
    & Pick<User, 'id' | 'name'>
    & { worker?: Maybe<(
      { __typename?: 'worker' }
      & { worker_projects: Array<(
        { __typename?: 'project_worker' }
        & Pick<Project_Worker, 'id' | 'created_at' | 'worker_role' | 'can_insert_report' | 'subcontractor_id'>
        & { project_crew?: Maybe<(
          { __typename?: 'project_crew' }
          & Pick<Project_Crew, 'id' | 'name'>
        )>, title?: Maybe<(
          { __typename?: 'worker_title' }
          & WorkerTitleFragFragment
        )>, project: (
          { __typename?: 'project' }
          & Pick<Project, 'id' | 'name'>
        ) }
      )> }
    )> }
  )> }
);

export type GetUserUidQueryVariables = {};


export type GetUserUidQuery = (
  { __typename?: 'query_root' }
  & Pick<Query_Root, 'uid'>
);

export type GetViewingTaskQueryVariables = {};


export type GetViewingTaskQuery = (
  { __typename?: 'query_root' }
  & { viewingTask: (
    { __typename?: 'ViewingTask' }
    & Pick<ViewingTask, 'taskId' | 'editing'>
  ) }
);

export type GetWorkersQueryVariables = {
  where?: Maybe<Worker_Bool_Exp>;
};


export type GetWorkersQuery = (
  { __typename?: 'query_root' }
  & { worker: Array<(
    { __typename?: 'worker' }
    & Pick<Worker, 'uid' | 'current_worker_role'>
    & { worker_title?: Maybe<(
      { __typename?: 'worker_title' }
      & WorkerTitleFragFragment
    )>, user: (
      { __typename?: 'user' }
      & Pick<User, 'id' | 'username' | 'phone_number' | 'email' | 'name'>
      & { profile_picture?: Maybe<(
        { __typename?: 'image' }
        & ImageFragmentFragment
      )> }
    ), subcontractor?: Maybe<(
      { __typename?: 'subcontractor' }
      & Pick<Subcontractor, 'id' | 'name'>
    )>, worker_projects_aggregate: (
      { __typename?: 'project_worker_aggregate' }
      & { aggregate?: Maybe<(
        { __typename?: 'project_worker_aggregate_fields' }
        & Pick<Project_Worker_Aggregate_Fields, 'count'>
      )> }
    ) }
  )> }
);

export type GetWorkersByNameQueryVariables = {
  nameSearch?: Maybe<Scalars['String']>;
};


export type GetWorkersByNameQuery = (
  { __typename?: 'query_root' }
  & { user: Array<(
    { __typename?: 'user' }
    & Pick<User, 'id' | 'name'>
    & { profile_picture?: Maybe<(
      { __typename?: 'image' }
      & Pick<Image, 'id' | 'url'>
    )> }
  )> }
);

export type GetWorkerAddTodoAssigneesQueryVariables = {
  todoId: Scalars['uuid'];
  subId: Scalars['uuid'];
};


export type GetWorkerAddTodoAssigneesQuery = (
  { __typename?: 'query_root' }
  & { project_worker: Array<(
    { __typename?: 'project_worker' }
    & ReportProjectWorkerFragmentFragment
  )> }
);

export type GetWorkerByPkQueryVariables = {
  userId: Scalars['uuid'];
};


export type GetWorkerByPkQuery = (
  { __typename?: 'query_root' }
  & { worker_by_pk?: Maybe<(
    { __typename?: 'worker' }
    & { user: (
      { __typename?: 'user' }
      & Pick<User, 'id' | 'name' | 'username' | 'email'>
      & { profile_picture?: Maybe<(
        { __typename?: 'image' }
        & Pick<Image, 'id' | 'url'>
      )>, government_identification?: Maybe<(
        { __typename?: 'government_identification' }
        & { front_image?: Maybe<(
          { __typename?: 'image' }
          & Pick<Image, 'id' | 'url'>
        )>, back_image?: Maybe<(
          { __typename?: 'image' }
          & Pick<Image, 'id' | 'url'>
        )> }
      )> }
    ), subcontractor?: Maybe<(
      { __typename?: 'subcontractor' }
      & Pick<Subcontractor, 'id' | 'name'>
    )>, worker_certifications: Array<(
      { __typename?: 'worker_certification' }
      & Pick<Worker_Certification, 'id' | 'expires_on'>
      & { certification: (
        { __typename?: 'certification' }
        & Pick<Certification, 'id' | 'name'>
      ), images: Array<(
        { __typename?: 'image' }
        & Pick<Image, 'id' | 'url'>
      )> }
    )>, worker_drug_tests: Array<(
      { __typename?: 'worker_drug_test' }
      & Pick<Worker_Drug_Test, 'name' | 'drug_test_date' | 'created_at' | 'id'>
      & { images: Array<(
        { __typename?: 'image' }
        & Pick<Image, 'id' | 'url'>
      )> }
    )>, worker_title?: Maybe<(
      { __typename?: 'worker_title' }
      & WorkerTitleFragFragment
    )>, worker_projects: Array<(
      { __typename?: 'project_worker' }
      & Pick<Project_Worker, 'id' | 'created_at' | 'worker_role' | 'hard_hat_number'>
      & { orientation_signature_image?: Maybe<(
        { __typename?: 'image' }
        & Pick<Image, 'id' | 'url' | 'created_at'>
      )>, project_worker_competencies: Array<(
        { __typename?: 'project_worker_competency' }
        & Pick<Project_Worker_Competency, 'description'>
      )>, title?: Maybe<(
        { __typename?: 'worker_title' }
        & WorkerTitleFragFragment
      )>, project_crew?: Maybe<(
        { __typename?: 'project_crew' }
        & Pick<Project_Crew, 'name'>
        & { subcontractor: (
          { __typename?: 'subcontractor' }
          & Pick<Subcontractor, 'id' | 'name'>
        ) }
      )>, project: (
        { __typename?: 'project' }
        & Pick<Project, 'name' | 'id'>
      ) }
    )> }
  )> }
);

export type GetWorkerByPkWithProjectQueryVariables = {
  workerId: Scalars['uuid'];
  projectWorkerId: Scalars['uuid'];
};


export type GetWorkerByPkWithProjectQuery = (
  { __typename?: 'query_root' }
  & { worker_by_pk?: Maybe<(
    { __typename?: 'worker' }
    & Pick<Worker, 'uid'>
  )> }
);

export type GetWorkerChatMembersToAddQueryVariables = {
  chatId: Scalars['uuid'];
  subId: Scalars['uuid'];
};


export type GetWorkerChatMembersToAddQuery = (
  { __typename?: 'query_root' }
  & { project_worker: Array<(
    { __typename?: 'project_worker' }
    & ReportProjectWorkerFragmentFragment
  )> }
);

export type GetWorkerInitialDataQueryVariables = {
  uid: Scalars['uuid'];
};


export type GetWorkerInitialDataQuery = (
  { __typename?: 'query_root' }
  & { user_by_pk?: Maybe<(
    { __typename?: 'user' }
    & Pick<User, 'id' | 'name' | 'role' | 'username' | 'email' | 'phone_number' | 'lang'>
    & { user_saved_emails: Array<(
      { __typename?: 'user_saved_email' }
      & Pick<User_Saved_Email, 'id' | 'email'>
    )>, worker?: Maybe<(
      { __typename?: 'worker' }
      & Pick<Worker, 'email_daily_report_on_submit' | 'email_safety_report_on_submit'>
      & { subcontractor?: Maybe<(
        { __typename?: 'subcontractor' }
        & Pick<Subcontractor, 'id' | 'name'>
        & { trade?: Maybe<(
          { __typename?: 'subcontractor_trade' }
          & Pick<Subcontractor_Trade, 'id' | 'name'>
        )> }
      )>, worker_projects: Array<(
        { __typename?: 'project_worker' }
        & Pick<Project_Worker, 'id' | 'created_at' | 'worker_role' | 'can_insert_report' | 'subcontractor_id'>
        & { subcontractor: (
          { __typename?: 'subcontractor' }
          & Pick<Subcontractor, 'id' | 'name'>
        ), auto_emails: Array<(
          { __typename?: 'auto_email' }
          & Pick<Auto_Email, 'email' | 'event'>
        )>, project_covid_tested_positives: Array<(
          { __typename?: 'project_covid_tested_positive_worker' }
          & Pick<Project_Covid_Tested_Positive_Worker, 'id' | 'created_at' | 'external_id'>
        )>, project_covid_certifies: Array<(
          { __typename?: 'project_covid_certify_worker' }
          & Pick<Project_Covid_Certify_Worker, 'id' | 'created_at' | 'external_id'>
          & { project_covid_certified_worker_answers: Array<(
            { __typename?: 'project_covid_certify_worker_answer' }
            & Pick<Project_Covid_Certify_Worker_Answer, 'answered_yes'>
            & { project_covid_yes_no_question: (
              { __typename?: 'project_covid_yes_no_question' }
              & Pick<Project_Covid_Yes_No_Question, 'id'>
              & { question: (
                { __typename?: 'text_translation' }
                & TextTranslationFragFragment
              ) }
            ) }
          )> }
        )>, project_crew?: Maybe<(
          { __typename?: 'project_crew' }
          & Pick<Project_Crew, 'id' | 'name'>
        )>, title?: Maybe<(
          { __typename?: 'worker_title' }
          & WorkerTitleFragFragment
        )>, project: (
          { __typename?: 'project' }
          & Pick<Project, 'id' | 'name' | 'external_id'>
          & { general_contractor: (
            { __typename?: 'general_contractor' }
            & Pick<General_Contractor, 'id' | 'name'>
          ), project_covid_config?: Maybe<(
            { __typename?: 'project_covid_config' }
            & Pick<Project_Covid_Config, 'project_id' | 'worker_restriction_length'>
            & { requirements: (
              { __typename?: 'text_translation' }
              & TextTranslationFragFragment
            ), project_covid_tested_positive_questions: Array<(
              { __typename?: 'project_covid_tested_positive_question' }
              & Pick<Project_Covid_Tested_Positive_Question, 'id'>
              & { question: (
                { __typename?: 'text_translation' }
                & TextTranslationFragFragment
              ) }
            )> }
          )>, permit_contact_project_employee?: Maybe<(
            { __typename?: 'project_employee' }
            & Pick<Project_Employee, 'id'>
            & { employee: (
              { __typename?: 'general_contractor_employee' }
              & Pick<General_Contractor_Employee, 'uid'>
              & { user: (
                { __typename?: 'user' }
                & Pick<User, 'id' | 'name'>
              ) }
            ) }
          )>, address: (
            { __typename?: 'address' }
            & AddressFragmentFragment
          ) }
        ) }
        & ReportProjectWorkerFragmentFragment
      )> }
    )> }
  )> }
);

export type GetWorkerPermitsScreenQueryVariables = {
  projectId: Scalars['uuid'];
  subcontractorId: Scalars['uuid'];
};


export type GetWorkerPermitsScreenQuery = (
  { __typename?: 'query_root' }
  & { pending: Array<(
    { __typename?: 'permit' }
    & PermitSnippetFragmentFragment
  )>, open: Array<(
    { __typename?: 'permit' }
    & PermitSnippetFragmentFragment
  )>, closed: Array<(
    { __typename?: 'permit' }
    & PermitSnippetFragmentFragment
  )> }
);

export type GetWorkerProjectsQueryVariables = {
  userId: Scalars['uuid'];
};


export type GetWorkerProjectsQuery = (
  { __typename?: 'query_root' }
  & { project: Array<(
    { __typename?: 'project' }
    & Pick<Project, 'id' | 'name' | 'external_id'>
    & { general_contractor: (
      { __typename?: 'general_contractor' }
      & Pick<General_Contractor, 'id' | 'name'>
    ), project_covid_config?: Maybe<(
      { __typename?: 'project_covid_config' }
      & Pick<Project_Covid_Config, 'project_id' | 'worker_restriction_length'>
      & { requirements: (
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      ) }
    )>, user_notifications_aggregate: (
      { __typename?: 'user_notification_aggregate' }
      & { aggregate?: Maybe<(
        { __typename?: 'user_notification_aggregate_fields' }
        & Pick<User_Notification_Aggregate_Fields, 'count'>
      )> }
    ), project_workers: Array<(
      { __typename?: 'project_worker' }
      & Pick<Project_Worker, 'id' | 'created_at' | 'worker_role' | 'can_insert_report' | 'subcontractor_id'>
      & { subcontractor: (
        { __typename?: 'subcontractor' }
        & Pick<Subcontractor, 'id' | 'name'>
      ), auto_emails: Array<(
        { __typename?: 'auto_email' }
        & Pick<Auto_Email, 'email' | 'event'>
      )>, project_covid_tested_positives: Array<(
        { __typename?: 'project_covid_tested_positive_worker' }
        & Pick<Project_Covid_Tested_Positive_Worker, 'id' | 'created_at' | 'external_id'>
      )>, project_covid_certifies: Array<(
        { __typename?: 'project_covid_certify_worker' }
        & Pick<Project_Covid_Certify_Worker, 'id' | 'created_at' | 'external_id'>
        & { project_covid_certified_worker_answers: Array<(
          { __typename?: 'project_covid_certify_worker_answer' }
          & Pick<Project_Covid_Certify_Worker_Answer, 'answered_yes'>
          & { project_covid_yes_no_question: (
            { __typename?: 'project_covid_yes_no_question' }
            & Pick<Project_Covid_Yes_No_Question, 'id'>
            & { question: (
              { __typename?: 'text_translation' }
              & TextTranslationFragFragment
            ) }
          ) }
        )> }
      )>, project_crew?: Maybe<(
        { __typename?: 'project_crew' }
        & Pick<Project_Crew, 'id' | 'name'>
      )>, title?: Maybe<(
        { __typename?: 'worker_title' }
        & WorkerTitleFragFragment
      )>, project: (
        { __typename?: 'project' }
        & Pick<Project, 'id' | 'name' | 'external_id'>
        & { general_contractor: (
          { __typename?: 'general_contractor' }
          & Pick<General_Contractor, 'id' | 'name'>
        ), permit_contact_project_employee?: Maybe<(
          { __typename?: 'project_employee' }
          & Pick<Project_Employee, 'id'>
          & { employee: (
            { __typename?: 'general_contractor_employee' }
            & Pick<General_Contractor_Employee, 'uid'>
            & { user: (
              { __typename?: 'user' }
              & Pick<User, 'id' | 'name'>
            ) }
          ) }
        )>, address: (
          { __typename?: 'address' }
          & AddressFragmentFragment
        ), project_covid_config?: Maybe<(
          { __typename?: 'project_covid_config' }
          & Pick<Project_Covid_Config, 'project_id' | 'requirements_text' | 'worker_restriction_length'>
          & { requirements: (
            { __typename?: 'text_translation' }
            & TextTranslationFragFragment
          ), project_covid_tested_positive_questions: Array<(
            { __typename?: 'project_covid_tested_positive_question' }
            & Pick<Project_Covid_Tested_Positive_Question, 'id'>
            & { question: (
              { __typename?: 'text_translation' }
              & TextTranslationFragFragment
            ) }
          )> }
        )> }
      ) }
      & ReportProjectWorkerFragmentFragment
    )> }
  )> }
);

export type GetWorkerReportsQueryVariables = {
  projectId: Scalars['uuid'];
  subcontractorId: Scalars['uuid'];
};


export type GetWorkerReportsQuery = (
  { __typename?: 'query_root' }
  & { report: Array<(
    { __typename?: 'report' }
    & ReportFragmentFragment
  )> }
);

export type GetWorkerTitlesQueryVariables = {};


export type GetWorkerTitlesQuery = (
  { __typename?: 'query_root' }
  & { worker_title: Array<(
    { __typename?: 'worker_title' }
    & WorkerTitleFragFragment
  )> }
);

export type GetWorkerTitlesAndRolesQueryVariables = {};


export type GetWorkerTitlesAndRolesQuery = (
  { __typename?: 'query_root' }
  & { worker_title: Array<(
    { __typename?: 'worker_title' }
    & WorkerTitleFragFragment
  )>, worker_role: Array<(
    { __typename?: 'worker_role' }
    & WorkerRoleFragFragment
  )> }
);

export type GetWorkerToolboxTalksQueryVariables = {
  projectId: Scalars['uuid'];
  subcontractorId: Scalars['uuid'];
};


export type GetWorkerToolboxTalksQuery = (
  { __typename?: 'query_root' }
  & { toolbox_talk: Array<(
    { __typename?: 'toolbox_talk' }
    & ToolboxTalkFragmentFragment
  )> }
);

export type GetWorkAbovePermitByPkQueryVariables = {
  permitId: Scalars['uuid'];
};


export type GetWorkAbovePermitByPkQuery = (
  { __typename?: 'query_root' }
  & { permit_by_pk?: Maybe<(
    { __typename?: 'permit' }
    & Pick<Permit, 'id' | 'is_historical' | 'type' | 'created_at' | 'updated_at' | 'current_status'>
    & { project: (
      { __typename?: 'project' }
      & Pick<Project, 'id' | 'name'>
      & { address: (
        { __typename?: 'address' }
        & AddressFragmentFragment
      ), general_contractor: (
        { __typename?: 'general_contractor' }
        & Pick<General_Contractor, 'id' | 'name' | 'allow_permit_activation_location_change'>
      ), permit_contact_project_employee?: Maybe<(
        { __typename?: 'project_employee' }
        & Pick<Project_Employee, 'id'>
        & { employee: (
          { __typename?: 'general_contractor_employee' }
          & Pick<General_Contractor_Employee, 'uid'>
          & { employee_title?: Maybe<(
            { __typename?: 'employee_title' }
            & Pick<Employee_Title, 'id'>
            & { name: (
              { __typename?: 'text_translation' }
              & TextTranslationFragFragment
            ) }
          )>, user: (
            { __typename?: 'user' }
            & Pick<User, 'id' | 'name' | 'phone_number' | 'email'>
          ) }
        ) }
      )> }
    ), subcontractor: (
      { __typename?: 'subcontractor' }
      & Pick<Subcontractor, 'id' | 'name'>
    ), images: Array<(
      { __typename?: 'image' }
      & Pick<Image, 'id' | 'url'>
    )>, origin_permit_history?: Maybe<(
      { __typename?: 'permit_history' }
      & Pick<Permit_History, 'id' | 'permit_id' | 'updated_location' | 'status' | 'created_at'>
      & { comment?: Maybe<(
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      )>, created_by_user: (
        { __typename?: 'user' }
        & Pick<User, 'id' | 'name'>
      ), images: Array<(
        { __typename?: 'image' }
        & Pick<Image, 'id' | 'url'>
      )> }
    )>, permit_sign_in_images: Array<(
      { __typename?: 'permit_sign_in_image' }
      & { image: (
        { __typename?: 'image' }
        & Pick<Image, 'id' | 'url'>
      ) }
    )>, supervisorProjectWorkers: Array<(
      { __typename?: 'permit_project_worker' }
      & Pick<Permit_Project_Worker, 'id' | 'type'>
      & { project_worker: (
        { __typename?: 'project_worker' }
        & ReportProjectWorkerFragmentFragment
      ), signature_image?: Maybe<(
        { __typename?: 'image' }
        & Pick<Image, 'id' | 'url'>
      )> }
    )>, workingProjectWorkers: Array<(
      { __typename?: 'permit_project_worker' }
      & Pick<Permit_Project_Worker, 'id' | 'type'>
      & { project_worker: (
        { __typename?: 'project_worker' }
        & ReportProjectWorkerFragmentFragment
      ), signature_image?: Maybe<(
        { __typename?: 'image' }
        & Pick<Image, 'id' | 'url'>
      )> }
    )>, permit_checklist_items: Array<(
      { __typename?: 'permit_checklist_item' }
      & PermitChecklistItemFragmentFragment
    )>, closing_checklist_items: Array<(
      { __typename?: 'permit_checklist_item' }
      & PermitChecklistItemFragmentFragment
    )>, permit_histories: Array<(
      { __typename?: 'permit_history' }
      & Pick<Permit_History, 'id' | 'permit_id' | 'updated_location' | 'status' | 'created_at'>
      & { comment?: Maybe<(
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      )>, created_by_user: (
        { __typename?: 'user' }
        & Pick<User, 'id' | 'name'>
      ), images: Array<(
        { __typename?: 'image' }
        & Pick<Image, 'id' | 'url'>
      )> }
    )>, work_above_permit?: Maybe<(
      { __typename?: 'work_above_permit' }
      & Pick<Work_Above_Permit, 'permit_id' | 'work_start_at' | 'work_duration'>
      & { work_location: (
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      ), work_description: (
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      ), applicant_project_worker: (
        { __typename?: 'project_worker' }
        & ReportProjectWorkerFragmentFragment
      ) }
    )> }
  )> }
);

export type InsertCertificationsMutationVariables = {
  objects: Array<Certification_Insert_Input>;
};


export type InsertCertificationsMutation = (
  { __typename?: 'mutation_root' }
  & { insert_certification?: Maybe<(
    { __typename?: 'certification_mutation_response' }
    & Pick<Certification_Mutation_Response, 'affected_rows'>
    & { returning: Array<(
      { __typename?: 'certification' }
      & Pick<Certification, 'id'>
    )> }
  )> }
);

export type InsertChatsMutationVariables = {
  objects: Array<Chat_Insert_Input>;
};


export type InsertChatsMutation = (
  { __typename?: 'mutation_root' }
  & { insert_chat?: Maybe<(
    { __typename?: 'chat_mutation_response' }
    & Pick<Chat_Mutation_Response, 'affected_rows'>
  )> }
);

export type InsertChatMembersMutationVariables = {
  objects: Array<Chat_Member_Insert_Input>;
};


export type InsertChatMembersMutation = (
  { __typename?: 'mutation_root' }
  & { insert_chat_member?: Maybe<(
    { __typename?: 'chat_member_mutation_response' }
    & Pick<Chat_Member_Mutation_Response, 'affected_rows'>
    & { returning: Array<(
      { __typename?: 'chat_member' }
      & ChatMemberFragFragment
    )> }
  )> }
);

export type InsertChatItemsMutationVariables = {
  objects: Array<Chat_Item_Insert_Input>;
};


export type InsertChatItemsMutation = (
  { __typename?: 'mutation_root' }
  & { insert_chat_item?: Maybe<(
    { __typename?: 'chat_item_mutation_response' }
    & Pick<Chat_Item_Mutation_Response, 'affected_rows'>
  )> }
);

export type InsertClearedCovidCertifyWorkersMutationVariables = {
  objects: Array<Cleared_Project_Covid_Certify_Worker_Insert_Input>;
};


export type InsertClearedCovidCertifyWorkersMutation = (
  { __typename?: 'mutation_root' }
  & { insert_cleared_project_covid_certify_worker?: Maybe<(
    { __typename?: 'cleared_project_covid_certify_worker_mutation_response' }
    & Pick<Cleared_Project_Covid_Certify_Worker_Mutation_Response, 'affected_rows'>
  )> }
);

export type InsertClearedProjectCovidTestedPositiveWorkersMutationVariables = {
  objects: Array<Cleared_Project_Covid_Tested_Positive_Worker_Insert_Input>;
};


export type InsertClearedProjectCovidTestedPositiveWorkersMutation = (
  { __typename?: 'mutation_root' }
  & { insert_cleared_project_covid_tested_positive_worker?: Maybe<(
    { __typename?: 'cleared_project_covid_tested_positive_worker_mutation_response' }
    & Pick<Cleared_Project_Covid_Tested_Positive_Worker_Mutation_Response, 'affected_rows'>
  )> }
);

export type InsertConfinedSpacePermitMonitoringEquipmentMutationVariables = {
  objects: Array<Confined_Space_Permit_Monitoring_Equipment_Insert_Input>;
};


export type InsertConfinedSpacePermitMonitoringEquipmentMutation = (
  { __typename?: 'mutation_root' }
  & { insert_confined_space_permit_monitoring_equipment?: Maybe<(
    { __typename?: 'confined_space_permit_monitoring_equipment_mutation_response' }
    & Pick<Confined_Space_Permit_Monitoring_Equipment_Mutation_Response, 'affected_rows'>
  )> }
);

export type InsertConfinedSpacePermitReadingMutationVariables = {
  objects: Array<Confined_Space_Permit_Reading_Insert_Input>;
};


export type InsertConfinedSpacePermitReadingMutation = (
  { __typename?: 'mutation_root' }
  & { insert_confined_space_permit_reading?: Maybe<(
    { __typename?: 'confined_space_permit_reading_mutation_response' }
    & Pick<Confined_Space_Permit_Reading_Mutation_Response, 'affected_rows'>
  )> }
);

export type InsertConfinedSpacePermitReadingCustomItemMutationVariables = {
  objects: Array<Confined_Space_Permit_Reading_Custom_Item_Insert_Input>;
};


export type InsertConfinedSpacePermitReadingCustomItemMutation = (
  { __typename?: 'mutation_root' }
  & { insert_confined_space_permit_reading_custom_item?: Maybe<(
    { __typename?: 'confined_space_permit_reading_custom_item_mutation_response' }
    & Pick<Confined_Space_Permit_Reading_Custom_Item_Mutation_Response, 'affected_rows'>
  )> }
);

export type InsertDailyReportMutationVariables = {
  objects: Array<Daily_Report_Insert_Input>;
};


export type InsertDailyReportMutation = (
  { __typename?: 'mutation_root' }
  & { insert_daily_report?: Maybe<(
    { __typename?: 'daily_report_mutation_response' }
    & Pick<Daily_Report_Mutation_Response, 'affected_rows'>
  )> }
);

export type InsertDigPermitSelectOptionMutationVariables = {
  objects: Array<Dig_Permit_Select_Option_Insert_Input>;
};


export type InsertDigPermitSelectOptionMutation = (
  { __typename?: 'mutation_root' }
  & { insert_dig_permit_select_option?: Maybe<(
    { __typename?: 'dig_permit_select_option_mutation_response' }
    & Pick<Dig_Permit_Select_Option_Mutation_Response, 'affected_rows'>
  )> }
);

export type InsertDigPermitTicketMutationVariables = {
  objects: Array<Dig_Permit_Ticket_Insert_Input>;
};


export type InsertDigPermitTicketMutation = (
  { __typename?: 'mutation_root' }
  & { insert_dig_permit_ticket?: Maybe<(
    { __typename?: 'dig_permit_ticket_mutation_response' }
    & Pick<Dig_Permit_Ticket_Mutation_Response, 'affected_rows'>
  )> }
);

export type InsertDrugTestsMutationVariables = {
  objects: Array<Worker_Drug_Test_Insert_Input>;
};


export type InsertDrugTestsMutation = (
  { __typename?: 'mutation_root' }
  & { insert_worker_drug_test?: Maybe<(
    { __typename?: 'worker_drug_test_mutation_response' }
    & Pick<Worker_Drug_Test_Mutation_Response, 'affected_rows'>
  )> }
);

export type InsertExpoPushTokenMutationVariables = {
  uid: Scalars['uuid'];
  token: Scalars['String'];
};


export type InsertExpoPushTokenMutation = (
  { __typename?: 'mutation_root' }
  & { insert_expo_push_token?: Maybe<(
    { __typename?: 'expo_push_token_mutation_response' }
    & Pick<Expo_Push_Token_Mutation_Response, 'affected_rows'>
  )> }
);

export type InsertFeedbackMutationVariables = {
  objects: Array<Feedback_Insert_Input>;
};


export type InsertFeedbackMutation = (
  { __typename?: 'mutation_root' }
  & { insert_feedback?: Maybe<(
    { __typename?: 'feedback_mutation_response' }
    & Pick<Feedback_Mutation_Response, 'affected_rows'>
  )> }
);

export type InsertHotWorkPermitMutationVariables = {
  objects: Array<Hot_Work_Permit_Insert_Input>;
};


export type InsertHotWorkPermitMutation = (
  { __typename?: 'mutation_root' }
  & { insert_hot_work_permit?: Maybe<(
    { __typename?: 'hot_work_permit_mutation_response' }
    & Pick<Hot_Work_Permit_Mutation_Response, 'affected_rows'>
  )> }
);

export type InsertImagesMutationVariables = {
  objects: Array<Image_Insert_Input>;
};


export type InsertImagesMutation = (
  { __typename?: 'mutation_root' }
  & { insert_image?: Maybe<(
    { __typename?: 'image_mutation_response' }
    & Pick<Image_Mutation_Response, 'affected_rows'>
  )> }
);

export type InsertPermitsMutationVariables = {
  objects: Array<Permit_Insert_Input>;
};


export type InsertPermitsMutation = (
  { __typename?: 'mutation_root' }
  & { insert_permit?: Maybe<(
    { __typename?: 'permit_mutation_response' }
    & Pick<Permit_Mutation_Response, 'affected_rows'>
  )> }
);

export type InsertPermitChecklistItemMutationVariables = {
  objects: Array<Permit_Checklist_Item_Insert_Input>;
};


export type InsertPermitChecklistItemMutation = (
  { __typename?: 'mutation_root' }
  & { insert_permit_checklist_item?: Maybe<(
    { __typename?: 'permit_checklist_item_mutation_response' }
    & Pick<Permit_Checklist_Item_Mutation_Response, 'affected_rows'>
  )> }
);

export type InsertPermitHistoryDataMutationVariables = {
  newStatus: Scalars['String'];
  permitId: Scalars['uuid'];
  historyObjects: Array<Permit_History_Insert_Input>;
};


export type InsertPermitHistoryDataMutation = (
  { __typename?: 'mutation_root' }
  & { update_permit?: Maybe<(
    { __typename?: 'permit_mutation_response' }
    & Pick<Permit_Mutation_Response, 'affected_rows'>
  )>, insert_permit_history?: Maybe<(
    { __typename?: 'permit_history_mutation_response' }
    & Pick<Permit_History_Mutation_Response, 'affected_rows'>
  )> }
);

export type InsertPermitSignInImagesMutationVariables = {
  objects: Array<Permit_Sign_In_Image_Insert_Input>;
};


export type InsertPermitSignInImagesMutation = (
  { __typename?: 'mutation_root' }
  & { insert_permit_sign_in_image?: Maybe<(
    { __typename?: 'permit_sign_in_image_mutation_response' }
    & Pick<Permit_Sign_In_Image_Mutation_Response, 'affected_rows'>
  )> }
);

export type InsertProjectCovidCertifiedWorkersMutationVariables = {
  objects: Array<Project_Covid_Certify_Worker_Insert_Input>;
};


export type InsertProjectCovidCertifiedWorkersMutation = (
  { __typename?: 'mutation_root' }
  & { insert_project_covid_certify_worker?: Maybe<(
    { __typename?: 'project_covid_certify_worker_mutation_response' }
    & Pick<Project_Covid_Certify_Worker_Mutation_Response, 'affected_rows'>
  )> }
);

export type InsertProjectCovidCertifyWorkersMutationVariables = {
  objects: Array<Project_Covid_Certify_Worker_Insert_Input>;
};


export type InsertProjectCovidCertifyWorkersMutation = (
  { __typename?: 'mutation_root' }
  & { insert_project_covid_certify_worker?: Maybe<(
    { __typename?: 'project_covid_certify_worker_mutation_response' }
    & Pick<Project_Covid_Certify_Worker_Mutation_Response, 'affected_rows'>
  )> }
);

export type InsertProjectCovidCrewCertifyMutationVariables = {
  objects: Array<Project_Covid_Crew_Certify_Insert_Input>;
};


export type InsertProjectCovidCrewCertifyMutation = (
  { __typename?: 'mutation_root' }
  & { insert_project_covid_crew_certify?: Maybe<(
    { __typename?: 'project_covid_crew_certify_mutation_response' }
    & Pick<Project_Covid_Crew_Certify_Mutation_Response, 'affected_rows'>
  )> }
);

export type InsertProjectCovidTestedPositiveWorkersMutationVariables = {
  objects: Array<Project_Covid_Tested_Positive_Worker_Insert_Input>;
};


export type InsertProjectCovidTestedPositiveWorkersMutation = (
  { __typename?: 'mutation_root' }
  & { insert_project_covid_tested_positive_worker?: Maybe<(
    { __typename?: 'project_covid_tested_positive_worker_mutation_response' }
    & Pick<Project_Covid_Tested_Positive_Worker_Mutation_Response, 'affected_rows'>
  )> }
);

export type InsertProjectCrewsMutationVariables = {
  objects: Array<Project_Crew_Insert_Input>;
};


export type InsertProjectCrewsMutation = (
  { __typename?: 'mutation_root' }
  & { insert_project_crew?: Maybe<(
    { __typename?: 'project_crew_mutation_response' }
    & Pick<Project_Crew_Mutation_Response, 'affected_rows'>
  )> }
);

export type InsertProjectEmployeesMutationVariables = {
  objects: Array<Project_Employee_Insert_Input>;
};


export type InsertProjectEmployeesMutation = (
  { __typename?: 'mutation_root' }
  & { insert_project_employee?: Maybe<(
    { __typename?: 'project_employee_mutation_response' }
    & Pick<Project_Employee_Mutation_Response, 'affected_rows'>
  )> }
);

export type InsertProjectHazardsMutationVariables = {
  objects: Array<Project_Hazard_Insert_Input>;
};


export type InsertProjectHazardsMutation = (
  { __typename?: 'mutation_root' }
  & { insert_project_hazard?: Maybe<(
    { __typename?: 'project_hazard_mutation_response' }
    & Pick<Project_Hazard_Mutation_Response, 'affected_rows'>
  )> }
);

export type InsertProjectWorkersMutationVariables = {
  objects: Array<Project_Worker_Insert_Input>;
};


export type InsertProjectWorkersMutation = (
  { __typename?: 'mutation_root' }
  & { insert_project_worker?: Maybe<(
    { __typename?: 'project_worker_mutation_response' }
    & Pick<Project_Worker_Mutation_Response, 'affected_rows'>
    & { returning: Array<(
      { __typename?: 'project_worker' }
      & { user?: Maybe<(
        { __typename?: 'user' }
        & Pick<User, 'id'>
      )> }
    )> }
  )> }
);

export type InsertProjectWorkerCompetenciesMutationVariables = {
  objects: Array<Project_Worker_Competency_Insert_Input>;
};


export type InsertProjectWorkerCompetenciesMutation = (
  { __typename?: 'mutation_root' }
  & { insert_project_worker_competency?: Maybe<(
    { __typename?: 'project_worker_competency_mutation_response' }
    & Pick<Project_Worker_Competency_Mutation_Response, 'affected_rows'>
  )> }
);

export type InsertReportsMutationVariables = {
  reports: Array<Report_Insert_Input>;
};


export type InsertReportsMutation = (
  { __typename?: 'mutation_root' }
  & { insert_report?: Maybe<(
    { __typename?: 'report_mutation_response' }
    & Pick<Report_Mutation_Response, 'affected_rows'>
  )> }
);

export type InsertSelectOptionMutationVariables = {
  objects: Array<Select_Option_Insert_Input>;
};


export type InsertSelectOptionMutation = (
  { __typename?: 'mutation_root' }
  & { insert_select_option?: Maybe<(
    { __typename?: 'select_option_mutation_response' }
    & Pick<Select_Option_Mutation_Response, 'affected_rows'>
  )> }
);

export type InsertTasksMutationVariables = {
  tasks: Array<Task_Insert_Input>;
};


export type InsertTasksMutation = (
  { __typename?: 'mutation_root' }
  & { insert_task?: Maybe<(
    { __typename?: 'task_mutation_response' }
    & Pick<Task_Mutation_Response, 'affected_rows'>
  )> }
);

export type InsertTextTranslationMutationVariables = {
  objects: Array<Text_Translation_Insert_Input>;
};


export type InsertTextTranslationMutation = (
  { __typename?: 'mutation_root' }
  & { insert_text_translation?: Maybe<(
    { __typename?: 'text_translation_mutation_response' }
    & Pick<Text_Translation_Mutation_Response, 'affected_rows'>
    & { returning: Array<(
      { __typename?: 'text_translation' }
      & TextTranslationFragFragment
    )> }
  )> }
);

export type InsertTodosMutationVariables = {
  objects: Array<Todo_Insert_Input>;
};


export type InsertTodosMutation = (
  { __typename?: 'mutation_root' }
  & { insert_todo?: Maybe<(
    { __typename?: 'todo_mutation_response' }
    & Pick<Todo_Mutation_Response, 'affected_rows'>
  )> }
);

export type InsertTodoAssigneesMutationVariables = {
  objects: Array<Todo_Assignee_Insert_Input>;
};


export type InsertTodoAssigneesMutation = (
  { __typename?: 'mutation_root' }
  & { insert_todo_assignee?: Maybe<(
    { __typename?: 'todo_assignee_mutation_response' }
    & Pick<Todo_Assignee_Mutation_Response, 'affected_rows'>
    & { returning: Array<(
      { __typename?: 'todo_assignee' }
      & TodoAssigneeFragFragment
    )> }
  )> }
);

export type InsertTodoNotifyeesMutationVariables = {
  objects: Array<Todo_Notifyee_Insert_Input>;
};


export type InsertTodoNotifyeesMutation = (
  { __typename?: 'mutation_root' }
  & { insert_todo_notifyee?: Maybe<(
    { __typename?: 'todo_notifyee_mutation_response' }
    & Pick<Todo_Notifyee_Mutation_Response, 'affected_rows'>
    & { returning: Array<(
      { __typename?: 'todo_notifyee' }
      & Pick<Todo_Notifyee, 'id'>
      & { notifyee: (
        { __typename?: 'project_user' }
        & ProjectUserFragFragment
      ) }
    )> }
  )> }
);

export type InsertToolboxTalksMutationVariables = {
  toolboxTalks: Array<Toolbox_Talk_Insert_Input>;
};


export type InsertToolboxTalksMutation = (
  { __typename?: 'mutation_root' }
  & { insert_toolbox_talk?: Maybe<(
    { __typename?: 'toolbox_talk_mutation_response' }
    & Pick<Toolbox_Talk_Mutation_Response, 'affected_rows'>
  )> }
);

export type InsertWorkersMutationVariables = {
  objects: Array<Worker_Insert_Input>;
};


export type InsertWorkersMutation = (
  { __typename?: 'mutation_root' }
  & { insert_worker?: Maybe<(
    { __typename?: 'worker_mutation_response' }
    & Pick<Worker_Mutation_Response, 'affected_rows'>
  )> }
);

export type InsertWorkerCertificationsMutationVariables = {
  objects: Array<Worker_Certification_Insert_Input>;
};


export type InsertWorkerCertificationsMutation = (
  { __typename?: 'mutation_root' }
  & { insert_worker_certification?: Maybe<(
    { __typename?: 'worker_certification_mutation_response' }
    & Pick<Worker_Certification_Mutation_Response, 'affected_rows'>
  )> }
);

export type MakeWorkerCrewLeadMutationVariables = {
  input: MakeWorkerCrewLeadInput;
};


export type MakeWorkerCrewLeadMutation = (
  { __typename?: 'mutation_root' }
  & Pick<Mutation_Root, 'makeWorkerCrewLead'>
);

export type SendReadingNotPermissibleNotificationsMutationVariables = {
  input: SendReadingNotPermissibleNotificationsInput;
};


export type SendReadingNotPermissibleNotificationsMutation = (
  { __typename?: 'mutation_root' }
  & Pick<Mutation_Root, 'sendReadingNotPermissibleNotifications'>
);

export type SendSiteNotificationMutationVariables = {
  input: SendSiteNotificationInput;
};


export type SendSiteNotificationMutation = (
  { __typename?: 'mutation_root' }
  & Pick<Mutation_Root, 'sendSiteNotification'>
);

export type SignInMutationVariables = {
  username: Scalars['String'];
  password: Scalars['String'];
};


export type SignInMutation = (
  { __typename?: 'mutation_root' }
  & Pick<Mutation_Root, 'signIn'>
);

export type SubscribeChatsDataSubscriptionVariables = {
  chatWhere: Chat_Bool_Exp;
  membersWhere?: Maybe<Chat_Member_Bool_Exp>;
};


export type SubscribeChatsDataSubscription = (
  { __typename?: 'subscription_root' }
  & { chat: Array<(
    { __typename?: 'chat' }
    & Pick<Chat, 'id' | 'name'>
    & { members: Array<(
      { __typename?: 'chat_member' }
      & Pick<Chat_Member, 'last_read' | 'id'>
    )> }
  )> }
);

export type SubscribeChatItemsSubscriptionVariables = {
  where?: Maybe<Chat_Item_Bool_Exp>;
  order_by?: Maybe<Array<Chat_Item_Order_By>>;
  limit?: Maybe<Scalars['Int']>;
};


export type SubscribeChatItemsSubscription = (
  { __typename?: 'subscription_root' }
  & { chat_item: Array<(
    { __typename?: 'chat_item' }
    & ChatItemFragmentFragment
  )> }
);

export type SubscribeChatMemberAggregateSubscriptionVariables = {
  where?: Maybe<Chat_Member_Bool_Exp>;
};


export type SubscribeChatMemberAggregateSubscription = (
  { __typename?: 'subscription_root' }
  & { chat_member_aggregate: (
    { __typename?: 'chat_member_aggregate' }
    & { aggregate?: Maybe<(
      { __typename?: 'chat_member_aggregate_fields' }
      & Pick<Chat_Member_Aggregate_Fields, 'count'>
    )> }
  ) }
);

export type SubscribeChatTodoUpdateSubscriptionVariables = {
  where: Todo_Bool_Exp;
};


export type SubscribeChatTodoUpdateSubscription = (
  { __typename?: 'subscription_root' }
  & { todo: Array<(
    { __typename?: 'todo' }
    & Pick<Todo, 'id' | 'completed_at' | 'source_chat_item_id'>
  )> }
);

export type SubscribeGcEmployeeChatMembersSubscriptionVariables = {
  userId: Scalars['uuid'];
  projectId: Scalars['uuid'];
};


export type SubscribeGcEmployeeChatMembersSubscription = (
  { __typename?: 'subscription_root' }
  & { chat_member: Array<(
    { __typename?: 'chat_member' }
    & Pick<Chat_Member, 'id' | 'last_read'>
    & { chat: (
      { __typename?: 'chat' }
      & Pick<Chat, 'id' | 'name' | 'type' | 'last_message_at'>
      & { user_notifications_aggregate: (
        { __typename?: 'user_notification_aggregate' }
        & { aggregate?: Maybe<(
          { __typename?: 'user_notification_aggregate_fields' }
          & Pick<User_Notification_Aggregate_Fields, 'count'>
        )> }
      ), members: Array<(
        { __typename?: 'chat_member' }
        & ChatMemberFragFragment
      )> }
    ) }
  )> }
);

export type SubscribePermitAggregateSubscriptionVariables = {
  where?: Maybe<Permit_Bool_Exp>;
};


export type SubscribePermitAggregateSubscription = (
  { __typename?: 'subscription_root' }
  & { permit_aggregate: (
    { __typename?: 'permit_aggregate' }
    & { aggregate?: Maybe<(
      { __typename?: 'permit_aggregate_fields' }
      & Pick<Permit_Aggregate_Fields, 'count'>
    )> }
  ) }
);

export type SubscribePermitUpdateSubscriptionVariables = {
  where?: Maybe<Permit_Bool_Exp>;
};


export type SubscribePermitUpdateSubscription = (
  { __typename?: 'subscription_root' }
  & { permit: Array<(
    { __typename?: 'permit' }
    & Pick<Permit, 'id' | 'current_status'>
    & { confined_space_permit?: Maybe<(
      { __typename?: 'confined_space_permit' }
      & Pick<Confined_Space_Permit, 'permit_id'>
      & { confined_space_permit_readings: Array<(
        { __typename?: 'confined_space_permit_reading' }
        & Pick<Confined_Space_Permit_Reading, 'id' | 'submitted_at'>
      )> }
    )> }
  )> }
);

export type SubscribeProjectSubcontractorsAggregateSubscriptionVariables = {
  where?: Maybe<Project_Subcontractor_Bool_Exp>;
};


export type SubscribeProjectSubcontractorsAggregateSubscription = (
  { __typename?: 'subscription_root' }
  & { project_subcontractor_aggregate: (
    { __typename?: 'project_subcontractor_aggregate' }
    & { aggregate?: Maybe<(
      { __typename?: 'project_subcontractor_aggregate_fields' }
      & Pick<Project_Subcontractor_Aggregate_Fields, 'count'>
    )> }
  ) }
);

export type SubscribeProjectWorkerChatMembersSubscriptionVariables = {
  projectWorkerId: Scalars['uuid'];
};


export type SubscribeProjectWorkerChatMembersSubscription = (
  { __typename?: 'subscription_root' }
  & { chat_member: Array<(
    { __typename?: 'chat_member' }
    & Pick<Chat_Member, 'id' | 'last_read'>
    & { chat: (
      { __typename?: 'chat' }
      & Pick<Chat, 'id' | 'name' | 'type' | 'last_message_at'>
      & { user_notifications_aggregate: (
        { __typename?: 'user_notification_aggregate' }
        & { aggregate?: Maybe<(
          { __typename?: 'user_notification_aggregate_fields' }
          & Pick<User_Notification_Aggregate_Fields, 'count'>
        )> }
      ), members: Array<(
        { __typename?: 'chat_member' }
        & ChatMemberFragFragment
      )> }
    ) }
  )> }
);

export type SubscribeTodoByPkSubscriptionVariables = {
  todoId: Scalars['uuid'];
};


export type SubscribeTodoByPkSubscription = (
  { __typename?: 'subscription_root' }
  & { todo_by_pk?: Maybe<(
    { __typename?: 'todo' }
    & TodoDetailsFragFragment
  )> }
);

export type SubscribeTodoInfoSubscriptionVariables = {
  where?: Maybe<Todo_Bool_Exp>;
  order_by?: Maybe<Array<Todo_Order_By>>;
};


export type SubscribeTodoInfoSubscription = (
  { __typename?: 'subscription_root' }
  & { todo: Array<(
    { __typename?: 'todo' }
    & TodoDetailsFragFragment
  )> }
);

export type SubscribeUserNotificationsAggregateSubscriptionVariables = {
  where?: Maybe<User_Notification_Bool_Exp>;
};


export type SubscribeUserNotificationsAggregateSubscription = (
  { __typename?: 'subscription_root' }
  & { user_notification_aggregate: (
    { __typename?: 'user_notification_aggregate' }
    & { aggregate?: Maybe<(
      { __typename?: 'user_notification_aggregate_fields' }
      & Pick<User_Notification_Aggregate_Fields, 'count'>
    )> }
  ) }
);

export type TranslateQueryVariables = {
  input?: Maybe<TranslateInput>;
};


export type TranslateQuery = (
  { __typename?: 'query_root' }
  & { translate?: Maybe<(
    { __typename?: 'TranslateOutput' }
    & { translations: Array<(
      { __typename?: 'TextTranslation' }
      & Pick<TextTranslation, 'lang' | 'original' | 'score' | 'en' | 'es' | 'pt'>
    )> }
  )> }
);

export type UpdateChatMutationVariables = {
  where: Chat_Bool_Exp;
  _set?: Maybe<Chat_Set_Input>;
};


export type UpdateChatMutation = (
  { __typename?: 'mutation_root' }
  & { update_chat?: Maybe<(
    { __typename?: 'chat_mutation_response' }
    & Pick<Chat_Mutation_Response, 'affected_rows'>
  )> }
);

export type UpdateChatMemberMutationVariables = {
  _set?: Maybe<Chat_Member_Set_Input>;
  where: Chat_Member_Bool_Exp;
};


export type UpdateChatMemberMutation = (
  { __typename?: 'mutation_root' }
  & { update_chat_member?: Maybe<(
    { __typename?: 'chat_member_mutation_response' }
    & Pick<Chat_Member_Mutation_Response, 'affected_rows'>
  )> }
);

export type UpdateConfinedSpacePermitMutationVariables = {
  _set?: Maybe<Confined_Space_Permit_Set_Input>;
  where: Confined_Space_Permit_Bool_Exp;
};


export type UpdateConfinedSpacePermitMutation = (
  { __typename?: 'mutation_root' }
  & { update_confined_space_permit?: Maybe<(
    { __typename?: 'confined_space_permit_mutation_response' }
    & Pick<Confined_Space_Permit_Mutation_Response, 'affected_rows'>
  )> }
);

export type UpdateConfinedSpacePermitMonitoringEquipmentMutationVariables = {
  _set?: Maybe<Confined_Space_Permit_Monitoring_Equipment_Set_Input>;
  where: Confined_Space_Permit_Monitoring_Equipment_Bool_Exp;
};


export type UpdateConfinedSpacePermitMonitoringEquipmentMutation = (
  { __typename?: 'mutation_root' }
  & { update_confined_space_permit_monitoring_equipment?: Maybe<(
    { __typename?: 'confined_space_permit_monitoring_equipment_mutation_response' }
    & Pick<Confined_Space_Permit_Monitoring_Equipment_Mutation_Response, 'affected_rows'>
  )> }
);

export type UpdateConfinedSpacePermitReadingMutationVariables = {
  _set?: Maybe<Confined_Space_Permit_Reading_Set_Input>;
  where: Confined_Space_Permit_Reading_Bool_Exp;
};


export type UpdateConfinedSpacePermitReadingMutation = (
  { __typename?: 'mutation_root' }
  & { update_confined_space_permit_reading?: Maybe<(
    { __typename?: 'confined_space_permit_reading_mutation_response' }
    & Pick<Confined_Space_Permit_Reading_Mutation_Response, 'affected_rows'>
  )> }
);

export type UpdateConfinedSpacePermitReadingCustomItemMutationVariables = {
  _set?: Maybe<Confined_Space_Permit_Reading_Custom_Item_Set_Input>;
  where: Confined_Space_Permit_Reading_Custom_Item_Bool_Exp;
};


export type UpdateConfinedSpacePermitReadingCustomItemMutation = (
  { __typename?: 'mutation_root' }
  & { update_confined_space_permit_reading_custom_item?: Maybe<(
    { __typename?: 'confined_space_permit_reading_custom_item_mutation_response' }
    & Pick<Confined_Space_Permit_Reading_Custom_Item_Mutation_Response, 'affected_rows'>
  )> }
);

export type UpdateDigPermitMutationVariables = {
  _set?: Maybe<Dig_Permit_Set_Input>;
  where: Dig_Permit_Bool_Exp;
};


export type UpdateDigPermitMutation = (
  { __typename?: 'mutation_root' }
  & { update_dig_permit?: Maybe<(
    { __typename?: 'dig_permit_mutation_response' }
    & Pick<Dig_Permit_Mutation_Response, 'affected_rows'>
  )> }
);

export type UpdateDigPermitTicketMutationVariables = {
  _set?: Maybe<Dig_Permit_Ticket_Set_Input>;
  where: Dig_Permit_Ticket_Bool_Exp;
};


export type UpdateDigPermitTicketMutation = (
  { __typename?: 'mutation_root' }
  & { update_dig_permit_ticket?: Maybe<(
    { __typename?: 'dig_permit_ticket_mutation_response' }
    & Pick<Dig_Permit_Ticket_Mutation_Response, 'affected_rows'>
  )> }
);

export type UpdateProjectHazardMutationVariables = {
  _set?: Maybe<Project_Hazard_Set_Input>;
  where: Project_Hazard_Bool_Exp;
};


export type UpdateProjectHazardMutation = (
  { __typename?: 'mutation_root' }
  & { update_project_hazard?: Maybe<(
    { __typename?: 'project_hazard_mutation_response' }
    & Pick<Project_Hazard_Mutation_Response, 'affected_rows'>
  )> }
);

export type UpdateHotWorkPermitMutationVariables = {
  _set?: Maybe<Hot_Work_Permit_Set_Input>;
  where: Hot_Work_Permit_Bool_Exp;
};


export type UpdateHotWorkPermitMutation = (
  { __typename?: 'mutation_root' }
  & { update_hot_work_permit?: Maybe<(
    { __typename?: 'hot_work_permit_mutation_response' }
    & Pick<Hot_Work_Permit_Mutation_Response, 'affected_rows'>
  )> }
);

export type UpdatePermitMutationVariables = {
  _set?: Maybe<Permit_Set_Input>;
  where: Permit_Bool_Exp;
};


export type UpdatePermitMutation = (
  { __typename?: 'mutation_root' }
  & { update_permit?: Maybe<(
    { __typename?: 'permit_mutation_response' }
    & Pick<Permit_Mutation_Response, 'affected_rows'>
  )> }
);

export type UpdatePermitChecklistItemMutationVariables = {
  _set?: Maybe<Permit_Checklist_Item_Set_Input>;
  where: Permit_Checklist_Item_Bool_Exp;
};


export type UpdatePermitChecklistItemMutation = (
  { __typename?: 'mutation_root' }
  & { update_permit_checklist_item?: Maybe<(
    { __typename?: 'permit_checklist_item_mutation_response' }
    & Pick<Permit_Checklist_Item_Mutation_Response, 'affected_rows'>
  )> }
);

export type UpdatePermitProjectWorkerMutationVariables = {
  _set?: Maybe<Permit_Project_Worker_Set_Input>;
  where: Permit_Project_Worker_Bool_Exp;
};


export type UpdatePermitProjectWorkerMutation = (
  { __typename?: 'mutation_root' }
  & { update_permit_project_worker?: Maybe<(
    { __typename?: 'permit_project_worker_mutation_response' }
    & Pick<Permit_Project_Worker_Mutation_Response, 'affected_rows'>
  )> }
);

export type UpdatePermitWorkersDataMutationVariables = {
  permitId: Scalars['uuid'];
  type: Scalars['String'];
  workerObjects: Array<Permit_Project_Worker_Insert_Input>;
};


export type UpdatePermitWorkersDataMutation = (
  { __typename?: 'mutation_root' }
  & { delete_permit_project_worker?: Maybe<(
    { __typename?: 'permit_project_worker_mutation_response' }
    & Pick<Permit_Project_Worker_Mutation_Response, 'affected_rows'>
  )>, insert_permit_project_worker?: Maybe<(
    { __typename?: 'permit_project_worker_mutation_response' }
    & Pick<Permit_Project_Worker_Mutation_Response, 'affected_rows'>
  )> }
);

export type UpdateProjectCovidConfigMutationVariables = {
  _set?: Maybe<Project_Covid_Config_Set_Input>;
  where: Project_Covid_Config_Bool_Exp;
};


export type UpdateProjectCovidConfigMutation = (
  { __typename?: 'mutation_root' }
  & { update_project_covid_config?: Maybe<(
    { __typename?: 'project_covid_config_mutation_response' }
    & Pick<Project_Covid_Config_Mutation_Response, 'affected_rows'>
  )> }
);

export type UpdateProjectCrewMutationVariables = {
  _set?: Maybe<Project_Crew_Set_Input>;
  where: Project_Crew_Bool_Exp;
};


export type UpdateProjectCrewMutation = (
  { __typename?: 'mutation_root' }
  & { update_project_crew?: Maybe<(
    { __typename?: 'project_crew_mutation_response' }
    & Pick<Project_Crew_Mutation_Response, 'affected_rows'>
  )> }
);

export type UpdateProjectWorkerMutationVariables = {
  _set?: Maybe<Project_Worker_Set_Input>;
  where: Project_Worker_Bool_Exp;
};


export type UpdateProjectWorkerMutation = (
  { __typename?: 'mutation_root' }
  & { update_project_worker?: Maybe<(
    { __typename?: 'project_worker_mutation_response' }
    & Pick<Project_Worker_Mutation_Response, 'affected_rows'>
  )> }
);

export type UpdateTaskMutationVariables = {
  taskId: Scalars['uuid'];
  _set: Task_Set_Input;
  taskStepInserts: Array<Task_Step_Insert_Input>;
  taskPpeTypeInserts: Array<Task_Ppe_Type_Insert_Input>;
  taskPermitTypeInserts: Array<Task_Permit_Type_Insert_Input>;
};


export type UpdateTaskMutation = (
  { __typename?: 'mutation_root' }
  & { update_task?: Maybe<(
    { __typename?: 'task_mutation_response' }
    & Pick<Task_Mutation_Response, 'affected_rows'>
  )>, delete_task_step?: Maybe<(
    { __typename?: 'task_step_mutation_response' }
    & Pick<Task_Step_Mutation_Response, 'affected_rows'>
  )>, delete_task_ppe_type?: Maybe<(
    { __typename?: 'task_ppe_type_mutation_response' }
    & Pick<Task_Ppe_Type_Mutation_Response, 'affected_rows'>
  )>, delete_task_permit_type?: Maybe<(
    { __typename?: 'task_permit_type_mutation_response' }
    & Pick<Task_Permit_Type_Mutation_Response, 'affected_rows'>
  )>, insert_task_step?: Maybe<(
    { __typename?: 'task_step_mutation_response' }
    & Pick<Task_Step_Mutation_Response, 'affected_rows'>
  )>, insert_task_ppe_type?: Maybe<(
    { __typename?: 'task_ppe_type_mutation_response' }
    & Pick<Task_Ppe_Type_Mutation_Response, 'affected_rows'>
  )>, insert_task_permit_type?: Maybe<(
    { __typename?: 'task_permit_type_mutation_response' }
    & Pick<Task_Permit_Type_Mutation_Response, 'affected_rows'>
  )> }
);

export type UpdateTextTranslationMutationVariables = {
  _set?: Maybe<Text_Translation_Set_Input>;
  where: Text_Translation_Bool_Exp;
};


export type UpdateTextTranslationMutation = (
  { __typename?: 'mutation_root' }
  & { update_text_translation?: Maybe<(
    { __typename?: 'text_translation_mutation_response' }
    & Pick<Text_Translation_Mutation_Response, 'affected_rows'>
  )> }
);

export type UpdateTextTranslationByPkMutationVariables = {
  _set?: Maybe<Text_Translation_Set_Input>;
  pk_columns: Text_Translation_Pk_Columns_Input;
};


export type UpdateTextTranslationByPkMutation = (
  { __typename?: 'mutation_root' }
  & { update_text_translation_by_pk?: Maybe<(
    { __typename?: 'text_translation' }
    & TextTranslationFragFragment
  )> }
);

export type UpdateTodoMutationVariables = {
  where: Todo_Bool_Exp;
  _set?: Maybe<Todo_Set_Input>;
};


export type UpdateTodoMutation = (
  { __typename?: 'mutation_root' }
  & { update_todo?: Maybe<(
    { __typename?: 'todo_mutation_response' }
    & Pick<Todo_Mutation_Response, 'affected_rows'>
  )> }
);

export type UpdateTodoAssigneeMutationVariables = {
  where: Todo_Assignee_Bool_Exp;
  _set?: Maybe<Todo_Assignee_Set_Input>;
};


export type UpdateTodoAssigneeMutation = (
  { __typename?: 'mutation_root' }
  & { update_todo_assignee?: Maybe<(
    { __typename?: 'todo_assignee_mutation_response' }
    & Pick<Todo_Assignee_Mutation_Response, 'affected_rows'>
  )> }
);

export type UpdateUserMutationVariables = {
  _set?: Maybe<User_Set_Input>;
  where: User_Bool_Exp;
};


export type UpdateUserMutation = (
  { __typename?: 'mutation_root' }
  & { update_user?: Maybe<(
    { __typename?: 'user_mutation_response' }
    & Pick<User_Mutation_Response, 'affected_rows'>
  )> }
);

export type UpdateUserByPkMutationVariables = {
  _set?: Maybe<User_Set_Input>;
  pk_columns: User_Pk_Columns_Input;
};


export type UpdateUserByPkMutation = (
  { __typename?: 'mutation_root' }
  & { update_user_by_pk?: Maybe<(
    { __typename?: 'user' }
    & Pick<User, 'id'>
  )> }
);

export type UpdateUserNotificationMutationVariables = {
  _set?: Maybe<User_Notification_Set_Input>;
  where: User_Notification_Bool_Exp;
};


export type UpdateUserNotificationMutation = (
  { __typename?: 'mutation_root' }
  & { update_user_notification?: Maybe<(
    { __typename?: 'user_notification_mutation_response' }
    & Pick<User_Notification_Mutation_Response, 'affected_rows'>
  )> }
);

export type UpdateWorkerMutationVariables = {
  _set?: Maybe<Worker_Set_Input>;
  where: Worker_Bool_Exp;
};


export type UpdateWorkerMutation = (
  { __typename?: 'mutation_root' }
  & { update_worker?: Maybe<(
    { __typename?: 'worker_mutation_response' }
    & Pick<Worker_Mutation_Response, 'affected_rows'>
  )> }
);

export type UpdateWorkerCrewMutationVariables = {
  input: UpdateWorkerCrewInput;
};


export type UpdateWorkerCrewMutation = (
  { __typename?: 'mutation_root' }
  & Pick<Mutation_Root, 'updateWorkerCrew'>
);

export type UpdateWorkAbovePermitMutationVariables = {
  _set?: Maybe<Work_Above_Permit_Set_Input>;
  where: Work_Above_Permit_Bool_Exp;
};


export type UpdateWorkAbovePermitMutation = (
  { __typename?: 'mutation_root' }
  & { update_work_above_permit?: Maybe<(
    { __typename?: 'work_above_permit_mutation_response' }
    & Pick<Work_Above_Permit_Mutation_Response, 'affected_rows'>
  )> }
);

export type UpsertGovernmentIdsMutationVariables = {
  objects: Array<Government_Identification_Insert_Input>;
};


export type UpsertGovernmentIdsMutation = (
  { __typename?: 'mutation_root' }
  & { insert_government_identification?: Maybe<(
    { __typename?: 'government_identification_mutation_response' }
    & Pick<Government_Identification_Mutation_Response, 'affected_rows'>
  )> }
);

export type UpsertProcoreDailyLogMutationVariables = {
  input: ProcoreDailyLogInput;
};


export type UpsertProcoreDailyLogMutation = (
  { __typename?: 'mutation_root' }
  & { procoreDailyLog?: Maybe<(
    { __typename?: 'ProcoreDailyLogOutput' }
    & Pick<ProcoreDailyLogOutput, 'statement'>
  )> }
);

export type UpsertProcoreDailyNoteMutationVariables = {
  input: ProcoreDailyNoteInput;
};


export type UpsertProcoreDailyNoteMutation = (
  { __typename?: 'mutation_root' }
  & { procoreDailyNote?: Maybe<(
    { __typename?: 'ProcoreDailyNoteOutput' }
    & Pick<ProcoreDailyNoteOutput, 'statement'>
  )> }
);

export type UpsertProcoreDailyWeatherMutationVariables = {
  input: ProcoreDailyWeatherInput;
};


export type UpsertProcoreDailyWeatherMutation = (
  { __typename?: 'mutation_root' }
  & { procoreDailyWeather?: Maybe<(
    { __typename?: 'ProcoreDailyWeatherOutput' }
    & Pick<ProcoreDailyWeatherOutput, 'statement'>
  )> }
);

export type WorkerResetPasswordMutationVariables = {
  input: WorkerCreatePasswordInput;
};


export type WorkerResetPasswordMutation = (
  { __typename?: 'mutation_root' }
  & { workerCreatePassword?: Maybe<(
    { __typename?: 'WorkerCreatePasswordResponse' }
    & Pick<WorkerCreatePasswordResponse, 'token'>
    & { subcontractors?: Maybe<Array<Maybe<(
      { __typename?: 'WorkerCreatePasswordSub' }
      & Pick<WorkerCreatePasswordSub, 'id' | 'name'>
    )>>> }
  )> }
);

export type AddressFragmentFragment = (
  { __typename?: 'address' }
  & Pick<Address, 'id' | 'line_1' | 'line_2' | 'city' | 'state_code' | 'zip_code' | 'latitude' | 'longitude'>
  & { state: (
    { __typename?: 'state' }
    & Pick<State, 'name'>
  ) }
);

export type ChatItemFragmentFragment = (
  { __typename?: 'chat_item' }
  & Pick<Chat_Item, 'id' | 'type' | 'created_at' | 'insertStatus' | 'isOwn'>
  & { message: (
    { __typename?: 'text_translation' }
    & TextTranslationFragFragment
  ), attachments: Array<(
    { __typename?: 'chat_item_attachment' }
    & Pick<Chat_Item_Attachment, 'id' | 'type'>
    & { image?: Maybe<(
      { __typename?: 'image' }
      & Pick<Image, 'id' | 'url' | 'sm_url' | 'md_url' | 'lg_url' | 'blurhash'>
    )> }
  )>, sender_chat_member?: Maybe<(
    { __typename?: 'chat_member' }
    & ChatMemberFragFragment
  )>, sender_todo_assignee?: Maybe<(
    { __typename?: 'todo_assignee' }
    & Pick<Todo_Assignee, 'id'>
    & { assignee: (
      { __typename?: 'project_user' }
      & Pick<Project_User, 'id'>
      & { project_worker?: Maybe<(
        { __typename?: 'project_worker' }
        & ReportProjectWorkerFragmentFragment
      )>, employee?: Maybe<(
        { __typename?: 'general_contractor_employee' }
        & GcEmployeeFragFragment
      )> }
    ) }
  )>, todos: Array<(
    { __typename?: 'todo' }
    & Pick<Todo, 'id' | 'completed_at'>
  )> }
);

export type ChatMemberFragFragment = (
  { __typename?: 'chat_member' }
  & Pick<Chat_Member, 'id'>
  & { project_worker?: Maybe<(
    { __typename?: 'project_worker' }
    & { user?: Maybe<(
      { __typename?: 'user' }
      & Pick<User, 'id' | 'created_password'>
      & { invites: Array<(
        { __typename?: 'invite' }
        & Pick<Invite, 'id' | 'to_email' | 'to_phone_number' | 'created_at' | 'claiming_account' | 'accepted_at'>
      )> }
    )> }
    & ReportProjectWorkerFragmentFragment
  )>, employee?: Maybe<(
    { __typename?: 'general_contractor_employee' }
    & { user: (
      { __typename?: 'user' }
      & Pick<User, 'id' | 'created_password'>
      & { invites: Array<(
        { __typename?: 'invite' }
        & Pick<Invite, 'id' | 'to_email' | 'to_phone_number' | 'created_at' | 'claiming_account' | 'accepted_at'>
      )> }
    ) }
    & GcEmployeeFragFragment
  )> }
);

export type DailyReportFragmentFragment = (
  { __typename?: 'daily_report' }
  & Pick<Daily_Report, 'id' | 'created_at'>
  & { description: (
    { __typename?: 'text_translation' }
    & TextTranslationFragFragment
  ), project: (
    { __typename?: 'project' }
    & Pick<Project, 'id' | 'name'>
  ), project_crew?: Maybe<(
    { __typename?: 'project_crew' }
    & Pick<Project_Crew, 'id' | 'name'>
  )>, subcontractor: (
    { __typename?: 'subcontractor' }
    & Pick<Subcontractor, 'id' | 'name'>
    & { trade?: Maybe<(
      { __typename?: 'subcontractor_trade' }
      & Pick<Subcontractor_Trade, 'id' | 'name'>
    )> }
  ), daily_report_project_workers: Array<(
    { __typename?: 'daily_report_project_worker' }
    & { project_worker: (
      { __typename?: 'project_worker' }
      & Pick<Project_Worker, 'id' | 'hard_hat_number' | 'worker_role'>
      & { orientation_signature_image?: Maybe<(
        { __typename?: 'image' }
        & Pick<Image, 'id'>
      )>, title?: Maybe<(
        { __typename?: 'worker_title' }
        & WorkerTitleFragFragment
      )>, user?: Maybe<(
        { __typename?: 'user' }
        & Pick<User, 'id' | 'name'>
      )> }
    ) }
  )>, submitter_project_worker: (
    { __typename?: 'project_worker' }
    & Pick<Project_Worker, 'id' | 'worker_role'>
    & { subcontractor: (
      { __typename?: 'subcontractor' }
      & Pick<Subcontractor, 'id' | 'name'>
    ), worker: (
      { __typename?: 'worker' }
      & { subcontractor?: Maybe<(
        { __typename?: 'subcontractor' }
        & Pick<Subcontractor, 'id' | 'name'>
      )> }
    ), project_crew?: Maybe<(
      { __typename?: 'project_crew' }
      & Pick<Project_Crew, 'id' | 'name'>
    )>, title?: Maybe<(
      { __typename?: 'worker_title' }
      & WorkerTitleFragFragment
    )>, user?: Maybe<(
      { __typename?: 'user' }
      & Pick<User, 'id' | 'name'>
    )> }
  ) }
);

export type GcEmployeeFragFragment = (
  { __typename?: 'general_contractor_employee' }
  & Pick<General_Contractor_Employee, 'uid'>
  & { employee_title?: Maybe<(
    { __typename?: 'employee_title' }
    & Pick<Employee_Title, 'id'>
    & { name: (
      { __typename?: 'text_translation' }
      & TextTranslationFragFragment
    ) }
  )>, user: (
    { __typename?: 'user' }
    & Pick<User, 'id' | 'name' | 'created_password'>
    & { profile_picture?: Maybe<(
      { __typename?: 'image' }
      & ImageFragmentFragment
    )> }
  ) }
);

export type GetAwarenessQuestionFragmentFragment = (
  { __typename?: 'awareness_question' }
  & Pick<Awareness_Question, 'id' | 'subcontractor_id'>
  & { question: (
    { __typename?: 'text_translation' }
    & TextTranslationFragFragment
  ) }
);

export type ImageFragmentFragment = (
  { __typename?: 'image' }
  & Pick<Image, 'id' | 'url' | 'sm_url' | 'md_url' | 'lg_url' | 'blurhash' | 'description'>
);

export type PermitChecklistItemFragmentFragment = (
  { __typename?: 'permit_checklist_item' }
  & Pick<Permit_Checklist_Item, 'created_at' | 'deleted_at' | 'general_contractor_id' | 'id' | 'na_enabled' | 'no_enabled' | 'permit_type' | 'option_response' | 'permit_id' | 'sort_index' | 'text_enabled' | 'updated_at' | 'yes_enabled' | 'text_required' | 'item_type'>
  & { text_response?: Maybe<(
    { __typename?: 'text_translation' }
    & TextTranslationFragFragment
  )>, description: (
    { __typename?: 'text_translation' }
    & TextTranslationFragFragment
  ) }
);

export type PermitSnippetFragmentFragment = (
  { __typename?: 'permit' }
  & Pick<Permit, 'id' | 'type' | 'owner_user_id' | 'created_at' | 'updated_at' | 'current_status'>
  & { project: (
    { __typename?: 'project' }
    & Pick<Project, 'id' | 'name'>
  ), permit_histories: Array<(
    { __typename?: 'permit_history' }
    & Pick<Permit_History, 'id' | 'status' | 'updated_location' | 'created_at'>
    & { comment?: Maybe<(
      { __typename?: 'text_translation' }
      & TextTranslationFragFragment
    )> }
  )>, subcontractor: (
    { __typename?: 'subcontractor' }
    & Pick<Subcontractor, 'id' | 'name'>
  ), hot_work_permit?: Maybe<(
    { __typename?: 'hot_work_permit' }
    & Pick<Hot_Work_Permit, 'permit_id'>
  )>, dig_permit?: Maybe<(
    { __typename?: 'dig_permit' }
    & Pick<Dig_Permit, 'permit_id'>
  )>, work_above_permit?: Maybe<(
    { __typename?: 'work_above_permit' }
    & Pick<Work_Above_Permit, 'permit_id'>
  )>, confined_space_permit?: Maybe<(
    { __typename?: 'confined_space_permit' }
    & Pick<Confined_Space_Permit, 'permit_id'>
    & { confined_space_permit_readings: Array<(
      { __typename?: 'confined_space_permit_reading' }
      & Pick<Confined_Space_Permit_Reading, 'id' | 'type' | 'created_at' | 'taken_at' | 'o2_percent' | 'submitted_at' | 'lower_explosive_limit' | 'co_ppm' | 'h2s_ppm'>
    )> }
  )> }
);

export type PermitTypeFragmentFragment = (
  { __typename?: 'permit_type' }
  & Pick<Permit_Type, 'id'>
  & { name: (
    { __typename?: 'text_translation' }
    & TextTranslationFragFragment
  ) }
);

export type PpeCategoryFragmentFragment = (
  { __typename?: 'ppe_category' }
  & Pick<Ppe_Category, 'id'>
  & { name: (
    { __typename?: 'text_translation' }
    & TextTranslationFragFragment
  ), ppe_types: Array<(
    { __typename?: 'ppe_type' }
    & Pick<Ppe_Type, 'id'>
    & { name: (
      { __typename?: 'text_translation' }
      & TextTranslationFragFragment
    ) }
  )> }
);

export type ProjectCovidCertifyWorkerFragmentFragment = (
  { __typename?: 'project_covid_certify_worker' }
  & Pick<Project_Covid_Certify_Worker, 'id' | 'created_at' | 'external_id'>
  & { cleared_project_covid_certify_worker?: Maybe<(
    { __typename?: 'cleared_project_covid_certify_worker' }
    & Pick<Cleared_Project_Covid_Certify_Worker, 'id' | 'created_at'>
  )>, project_worker?: Maybe<(
    { __typename?: 'project_worker' }
    & Pick<Project_Worker, 'id' | 'hard_hat_number'>
    & { user?: Maybe<(
      { __typename?: 'user' }
      & Pick<User, 'id' | 'name' | 'email' | 'username' | 'phone_number'>
    )>, title?: Maybe<(
      { __typename?: 'worker_title' }
      & WorkerTitleFragFragment
    )>, subcontractor: (
      { __typename?: 'subcontractor' }
      & Pick<Subcontractor, 'id' | 'name'>
    ) }
  )>, project_covid_crew_certify?: Maybe<(
    { __typename?: 'project_covid_crew_certify' }
    & { submitter_project_worker?: Maybe<(
      { __typename?: 'project_worker' }
      & Pick<Project_Worker, 'id' | 'hard_hat_number'>
      & { user?: Maybe<(
        { __typename?: 'user' }
        & Pick<User, 'id' | 'name'>
      )> }
    )>, project_crew?: Maybe<(
      { __typename?: 'project_crew' }
      & Pick<Project_Crew, 'id' | 'name'>
    )> }
  )> }
);

export type ProjectHazardFragmentFragment = (
  { __typename?: 'project_hazard' }
  & Pick<Project_Hazard, 'id' | 'created_at' | 'expiry_date'>
  & { description: (
    { __typename?: 'text_translation' }
    & TextTranslationFragFragment
  ), images: Array<(
    { __typename?: 'image' }
    & Pick<Image, 'id' | 'url'>
  )>, project?: Maybe<(
    { __typename?: 'project' }
    & Pick<Project, 'id' | 'name'>
  )> }
);

export type ProjectUserFragFragment = (
  { __typename?: 'project_user' }
  & Pick<Project_User, 'id'>
  & { project_worker?: Maybe<(
    { __typename?: 'project_worker' }
    & ReportProjectWorkerFragmentFragment
  )>, employee?: Maybe<(
    { __typename?: 'general_contractor_employee' }
    & GcEmployeeFragFragment
  )> }
);

export type ProjectWorkerByPkFragment = (
  { __typename?: 'project_worker' }
  & { user?: Maybe<(
    { __typename?: 'user' }
    & Pick<User, 'id' | 'name' | 'username' | 'email'>
    & { profile_picture?: Maybe<(
      { __typename?: 'image' }
      & Pick<Image, 'id' | 'url'>
    )>, government_identification?: Maybe<(
      { __typename?: 'government_identification' }
      & { front_image?: Maybe<(
        { __typename?: 'image' }
        & Pick<Image, 'id' | 'url'>
      )>, back_image?: Maybe<(
        { __typename?: 'image' }
        & Pick<Image, 'id' | 'url'>
      )> }
    )> }
  )>, worker: (
    { __typename?: 'worker' }
    & { worker_certifications: Array<(
      { __typename?: 'worker_certification' }
      & Pick<Worker_Certification, 'id' | 'expires_on'>
      & { certification: (
        { __typename?: 'certification' }
        & Pick<Certification, 'id' | 'name'>
      ), images: Array<(
        { __typename?: 'image' }
        & Pick<Image, 'id' | 'url'>
      )> }
    )>, worker_drug_tests: Array<(
      { __typename?: 'worker_drug_test' }
      & Pick<Worker_Drug_Test, 'name' | 'drug_test_date' | 'created_at' | 'id'>
      & { images: Array<(
        { __typename?: 'image' }
        & Pick<Image, 'id' | 'url'>
      )> }
    )>, worker_projects: Array<(
      { __typename?: 'project_worker' }
      & Pick<Project_Worker, 'id' | 'created_at' | 'worker_role' | 'hard_hat_number'>
      & { orientation_signature_image?: Maybe<(
        { __typename?: 'image' }
        & Pick<Image, 'id' | 'url' | 'created_at'>
      )>, project_worker_competencies: Array<(
        { __typename?: 'project_worker_competency' }
        & Pick<Project_Worker_Competency, 'description'>
      )>, title?: Maybe<(
        { __typename?: 'worker_title' }
        & WorkerTitleFragFragment
      )>, project_crew?: Maybe<(
        { __typename?: 'project_crew' }
        & Pick<Project_Crew, 'name'>
        & { subcontractor: (
          { __typename?: 'subcontractor' }
          & Pick<Subcontractor, 'id' | 'name'>
        ) }
      )>, project: (
        { __typename?: 'project' }
        & Pick<Project, 'name' | 'id'>
      ) }
    )> }
  ) }
);

export type ProjectWorkerFragmentFragment = (
  { __typename?: 'project_worker' }
  & Pick<Project_Worker, 'id' | 'hard_hat_number' | 'worker_role' | 'can_insert_report'>
  & { subcontractor: (
    { __typename?: 'subcontractor' }
    & Pick<Subcontractor, 'id' | 'name'>
  ), worker: (
    { __typename?: 'worker' }
    & Pick<Worker, 'uid'>
    & { subcontractor?: Maybe<(
      { __typename?: 'subcontractor' }
      & Pick<Subcontractor, 'id' | 'name'>
    )> }
  ), project_crew?: Maybe<(
    { __typename?: 'project_crew' }
    & Pick<Project_Crew, 'id' | 'name'>
    & { lead_foreman_project_worker?: Maybe<(
      { __typename?: 'project_worker' }
      & Pick<Project_Worker, 'id'>
      & { user?: Maybe<(
        { __typename?: 'user' }
        & Pick<User, 'id' | 'name' | 'email'>
      )> }
    )> }
  )>, title?: Maybe<(
    { __typename?: 'worker_title' }
    & WorkerTitleFragFragment
  )>, user?: Maybe<(
    { __typename?: 'user' }
    & Pick<User, 'id' | 'name' | 'email' | 'phone_number'>
    & { profile_picture?: Maybe<(
      { __typename?: 'image' }
      & Pick<Image, 'id' | 'url'>
    )> }
  )> }
);

export type ReportFragmentFragment = (
  { __typename?: 'report' }
  & Pick<Report, 'id' | 'created_at' | 'sign_in_type'>
  & { project_crew?: Maybe<(
    { __typename?: 'project_crew' }
    & Pick<Project_Crew, 'id' | 'name'>
  )>, subcontractor: (
    { __typename?: 'subcontractor' }
    & Pick<Subcontractor, 'id' | 'name'>
    & { trade?: Maybe<(
      { __typename?: 'subcontractor_trade' }
      & Pick<Subcontractor_Trade, 'id' | 'name'>
    )> }
  ), submitter_signature?: Maybe<(
    { __typename?: 'image' }
    & Pick<Image, 'id' | 'url'>
  )>, submission_images: Array<(
    { __typename?: 'submission_image' }
    & Pick<Submission_Image, 'id' | 'type'>
    & { image: (
      { __typename?: 'image' }
      & Pick<Image, 'id' | 'url'>
    ) }
  )>, report_fatal_four?: Maybe<(
    { __typename?: 'report_fatal_four' }
    & { fall_control?: Maybe<(
      { __typename?: 'text_translation' }
      & TextTranslationFragFragment
    )>, caught_control?: Maybe<(
      { __typename?: 'text_translation' }
      & TextTranslationFragFragment
    )>, electrocute_control?: Maybe<(
      { __typename?: 'text_translation' }
      & TextTranslationFragFragment
    )>, struck_control?: Maybe<(
      { __typename?: 'text_translation' }
      & TextTranslationFragFragment
    )> }
  )>, submitter_project_worker: (
    { __typename?: 'project_worker' }
    & Pick<Project_Worker, 'id' | 'worker_role'>
    & { subcontractor: (
      { __typename?: 'subcontractor' }
      & Pick<Subcontractor, 'id' | 'name'>
    ), user?: Maybe<(
      { __typename?: 'user' }
      & Pick<User, 'id' | 'name'>
    )>, title?: Maybe<(
      { __typename?: 'worker_title' }
      & WorkerTitleFragFragment
    )> }
  ), tasks: Array<(
    { __typename?: 'task' }
    & TaskFragmentFragment
  )>, images: Array<(
    { __typename?: 'image' }
    & ImageFragmentFragment
  )>, report_injuries: Array<(
    { __typename?: 'report_injury' }
    & Pick<Report_Injury, 'id'>
    & { project_worker: (
      { __typename?: 'project_worker' }
      & Pick<Project_Worker, 'id' | 'hard_hat_number' | 'worker_role'>
      & { title?: Maybe<(
        { __typename?: 'worker_title' }
        & WorkerTitleFragFragment
      )>, orientation_signature_image?: Maybe<(
        { __typename?: 'image' }
        & Pick<Image, 'id'>
      )>, user?: Maybe<(
        { __typename?: 'user' }
        & Pick<User, 'id' | 'name'>
      )> }
    ) }
  )>, report_awareness_questions: Array<(
    { __typename?: 'report_awareness_question' }
    & { answer: (
      { __typename?: 'text_translation' }
      & TextTranslationFragFragment
    ), awareness_question: (
      { __typename?: 'awareness_question' }
      & Pick<Awareness_Question, 'id'>
      & { question: (
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      ) }
    ) }
  )>, report_project_hazards: Array<(
    { __typename?: 'report_project_hazard' }
    & { answer: (
      { __typename?: 'text_translation' }
      & TextTranslationFragFragment
    ), project_hazard: (
      { __typename?: 'project_hazard' }
      & Pick<Project_Hazard, 'id'>
      & { description: (
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      ), images: Array<(
        { __typename?: 'image' }
        & ImageFragmentFragment
      )> }
    ) }
  )>, report_project_workers: Array<(
    { __typename?: 'report_project_worker' }
    & { signature_image?: Maybe<(
      { __typename?: 'image' }
      & Pick<Image, 'id' | 'url'>
    )>, project_worker: (
      { __typename?: 'project_worker' }
      & Pick<Project_Worker, 'id' | 'hard_hat_number' | 'worker_role'>
      & { orientation_signature_image?: Maybe<(
        { __typename?: 'image' }
        & Pick<Image, 'id'>
      )>, title?: Maybe<(
        { __typename?: 'worker_title' }
        & WorkerTitleFragFragment
      )>, user?: Maybe<(
        { __typename?: 'user' }
        & Pick<User, 'id' | 'name'>
      )> }
    ) }
  )>, project: (
    { __typename?: 'project' }
    & Pick<Project, 'id' | 'name'>
  ) }
);

export type ReportProjectWorkerFragmentFragment = (
  { __typename?: 'project_worker' }
  & Pick<Project_Worker, 'id' | 'hard_hat_number' | 'worker_role'>
  & { project_crew?: Maybe<(
    { __typename?: 'project_crew' }
    & Pick<Project_Crew, 'id' | 'name'>
    & { lead_foreman_project_worker?: Maybe<(
      { __typename?: 'project_worker' }
      & Pick<Project_Worker, 'id'>
      & { user?: Maybe<(
        { __typename?: 'user' }
        & Pick<User, 'id' | 'name' | 'email'>
      )> }
    )> }
  )>, subcontractor: (
    { __typename?: 'subcontractor' }
    & Pick<Subcontractor, 'id' | 'name'>
  ), title?: Maybe<(
    { __typename?: 'worker_title' }
    & WorkerTitleFragFragment
  )>, user?: Maybe<(
    { __typename?: 'user' }
    & Pick<User, 'id' | 'name' | 'email' | 'username' | 'phone_number' | 'created_password'>
    & { profile_picture?: Maybe<(
      { __typename?: 'image' }
      & ImageFragmentFragment
    )> }
  )> }
);

export type SafetyReportListFragmentFragment = (
  { __typename?: 'report' }
  & Pick<Report, 'id' | 'created_at'>
  & { subcontractor: (
    { __typename?: 'subcontractor' }
    & Pick<Subcontractor, 'id' | 'name'>
  ), submitter_project_worker: (
    { __typename?: 'project_worker' }
    & Pick<Project_Worker, 'id' | 'worker_role' | 'hard_hat_number'>
    & { user?: Maybe<(
      { __typename?: 'user' }
      & Pick<User, 'id' | 'name'>
    )>, title?: Maybe<(
      { __typename?: 'worker_title' }
      & WorkerTitleFragFragment
    )> }
  ) }
);

export type SelectOptionFragFragment = (
  { __typename?: 'select_option' }
  & Pick<Select_Option, 'id'>
  & { name: (
    { __typename?: 'text_translation' }
    & TextTranslationFragFragment
  ) }
);

export type SubcontractorFragmentFragment = (
  { __typename?: 'subcontractor' }
  & Pick<Subcontractor, 'id' | 'name'>
  & { trade?: Maybe<(
    { __typename?: 'subcontractor_trade' }
    & Pick<Subcontractor_Trade, 'id' | 'name'>
  )>, workers_aggregate: (
    { __typename?: 'worker_aggregate' }
    & { aggregate?: Maybe<(
      { __typename?: 'worker_aggregate_fields' }
      & Pick<Worker_Aggregate_Fields, 'count'>
    )> }
  ), subcontractor_projects_aggregate: (
    { __typename?: 'project_subcontractor_aggregate' }
    & { aggregate?: Maybe<(
      { __typename?: 'project_subcontractor_aggregate_fields' }
      & Pick<Project_Subcontractor_Aggregate_Fields, 'count'>
    )> }
  ) }
);

export type TaskFragmentFragment = (
  { __typename?: 'task' }
  & Pick<Task, 'id' | 'created_at'>
  & { description: (
    { __typename?: 'text_translation' }
    & TextTranslationFragFragment
  ), task_ppe_types: Array<(
    { __typename?: 'task_ppe_type' }
    & { ppe_type: (
      { __typename?: 'ppe_type' }
      & Pick<Ppe_Type, 'id'>
      & { name: (
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      ) }
    ) }
  )>, task_permit_types: Array<(
    { __typename?: 'task_permit_type' }
    & { permit_type: (
      { __typename?: 'permit_type' }
      & Pick<Permit_Type, 'id'>
      & { name: (
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      ) }
    ) }
  )>, task_steps: Array<(
    { __typename?: 'task_step' }
    & Pick<Task_Step, 'id' | 'sort_index'>
    & { description: (
      { __typename?: 'text_translation' }
      & TextTranslationFragFragment
    ), task_step_hazards: Array<(
      { __typename?: 'task_step_hazard' }
      & Pick<Task_Step_Hazard, 'id'>
      & { description: (
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      ), control: (
        { __typename?: 'text_translation' }
        & TextTranslationFragFragment
      ) }
    )> }
  )> }
);

export type TextTranslationFragFragment = (
  { __typename?: 'text_translation' }
  & Pick<Text_Translation, 'id' | 'original' | 'lang' | 'es' | 'en' | 'pt' | 'clientText'>
);

export type TodoAssigneeFragFragment = (
  { __typename?: 'todo_assignee' }
  & Pick<Todo_Assignee, 'id' | 'completed_at' | 'marked_complete' | 'assignee_completed_type'>
  & { assignee: (
    { __typename?: 'project_user' }
    & ProjectUserFragFragment
  ), assignor?: Maybe<(
    { __typename?: 'todo_assignee' }
    & Pick<Todo_Assignee, 'id' | 'assignee_completed_type' | 'marked_complete'>
    & { assignee: (
      { __typename?: 'project_user' }
      & ProjectUserFragFragment
    ) }
  )> }
);

export type TodoDetailsFragFragment = (
  { __typename?: 'todo' }
  & Pick<Todo, 'id' | 'created_at' | 'due_at' | 'source_chat_item_id' | 'type' | 'priority' | 'completed_at' | 'isCreator'>
  & { description: (
    { __typename?: 'text_translation' }
    & TextTranslationFragFragment
  ), project: (
    { __typename?: 'project' }
    & Pick<Project, 'id' | 'name'>
  ), images: Array<(
    { __typename?: 'image' }
    & ImageFragmentFragment
  )>, assigned_to: Array<(
    { __typename?: 'todo_assignee' }
    & TodoAssigneeFragFragment
  )>, notifyees: Array<(
    { __typename?: 'todo_notifyee' }
    & Pick<Todo_Notifyee, 'id'>
    & { notifyee: (
      { __typename?: 'project_user' }
      & ProjectUserFragFragment
    ) }
  )> }
);

export type ToolboxTalkFragmentFragment = (
  { __typename?: 'toolbox_talk' }
  & Pick<Toolbox_Talk, 'id' | 'created_at' | 'sign_in_type'>
  & { description: (
    { __typename?: 'text_translation' }
    & TextTranslationFragFragment
  ), project_crew?: Maybe<(
    { __typename?: 'project_crew' }
    & Pick<Project_Crew, 'id' | 'name'>
  )>, subcontractor: (
    { __typename?: 'subcontractor' }
    & Pick<Subcontractor, 'id' | 'name'>
  ), project: (
    { __typename?: 'project' }
    & Pick<Project, 'id' | 'name'>
  ), submitter_signature?: Maybe<(
    { __typename?: 'image' }
    & Pick<Image, 'id' | 'url'>
  )>, submission_images: Array<(
    { __typename?: 'submission_image' }
    & Pick<Submission_Image, 'id' | 'type'>
    & { image: (
      { __typename?: 'image' }
      & Pick<Image, 'id' | 'url'>
    ) }
  )>, led_by_project_worker: (
    { __typename?: 'project_worker' }
    & Pick<Project_Worker, 'id' | 'worker_role'>
    & { title?: Maybe<(
      { __typename?: 'worker_title' }
      & WorkerTitleFragFragment
    )>, user?: Maybe<(
      { __typename?: 'user' }
      & Pick<User, 'id' | 'name'>
    )> }
  ), submitter_project_worker: (
    { __typename?: 'project_worker' }
    & Pick<Project_Worker, 'id'>
    & { title?: Maybe<(
      { __typename?: 'worker_title' }
      & WorkerTitleFragFragment
    )>, user?: Maybe<(
      { __typename?: 'user' }
      & Pick<User, 'id' | 'name'>
    )> }
  ), toolbox_talk_project_workers: Array<(
    { __typename?: 'toolbox_talk_project_worker' }
    & { signature_image?: Maybe<(
      { __typename?: 'image' }
      & ImageFragmentFragment
    )>, project_worker: (
      { __typename?: 'project_worker' }
      & Pick<Project_Worker, 'id' | 'hard_hat_number' | 'worker_role'>
      & { orientation_signature_image?: Maybe<(
        { __typename?: 'image' }
        & Pick<Image, 'id'>
      )>, title?: Maybe<(
        { __typename?: 'worker_title' }
        & WorkerTitleFragFragment
      )>, user?: Maybe<(
        { __typename?: 'user' }
        & Pick<User, 'id' | 'name'>
      )> }
    ) }
  )>, images: Array<(
    { __typename?: 'image' }
    & Pick<Image, 'created_at'>
    & ImageFragmentFragment
  )> }
);

export type WorkerRoleFragFragment = (
  { __typename?: 'worker_role' }
  & Pick<Worker_Role, 'value'>
  & { translation: (
    { __typename?: 'text_translation' }
    & TextTranslationFragFragment
  ) }
);

export type WorkerTitleFragFragment = (
  { __typename?: 'worker_title' }
  & Pick<Worker_Title, 'id'>
  & { translation: (
    { __typename?: 'text_translation' }
    & TextTranslationFragFragment
  ) }
);

export const TextTranslationFragFragmentDoc = gql`
    fragment TextTranslationFrag on text_translation {
  id
  original
  lang
  es
  en
  pt
  clientText @client
}
    `;
export const WorkerTitleFragFragmentDoc = gql`
    fragment WorkerTitleFrag on worker_title {
  id
  translation {
    ...TextTranslationFrag
  }
}
    ${TextTranslationFragFragmentDoc}`;
export const ImageFragmentFragmentDoc = gql`
    fragment ImageFragment on image {
  id
  url
  sm_url
  md_url
  lg_url
  blurhash
  description
}
    `;
export const ReportProjectWorkerFragmentFragmentDoc = gql`
    fragment ReportProjectWorkerFragment on project_worker {
  id
  hard_hat_number
  worker_role
  project_crew {
    id
    name
    lead_foreman_project_worker {
      id
      user {
        id
        name
        email
      }
    }
  }
  subcontractor {
    id
    name
  }
  title {
    ...WorkerTitleFrag
  }
  user {
    id
    name
    email
    username
    phone_number
    created_password
    profile_picture {
      ...ImageFragment
    }
  }
}
    ${WorkerTitleFragFragmentDoc}
${ImageFragmentFragmentDoc}`;
export const ProjectSubcontractorProjectWorkersFragmentFragmentDoc = gql`
    fragment ProjectSubcontractorProjectWorkersFragment on query_root {
  project_worker(where: {deleted_at: {_is_null: true}, project_id: {_eq: $projectId}, subcontractor_id: {_eq: $subcontractorId}}, order_by: {worker: {user: {name: asc}}}) {
    ...ReportProjectWorkerFragment
  }
}
    ${ReportProjectWorkerFragmentFragmentDoc}`;
export const AddressFragmentFragmentDoc = gql`
    fragment AddressFragment on address {
  id
  line_1
  line_2
  city
  state {
    name
  }
  state_code
  zip_code
  latitude
  longitude
}
    `;
export const GcEmployeeFragFragmentDoc = gql`
    fragment GCEmployeeFrag on general_contractor_employee {
  uid
  employee_title {
    id
    name {
      ...TextTranslationFrag
    }
  }
  user {
    id
    name
    created_password
    profile_picture {
      ...ImageFragment
    }
  }
}
    ${TextTranslationFragFragmentDoc}
${ImageFragmentFragmentDoc}`;
export const ChatMemberFragFragmentDoc = gql`
    fragment ChatMemberFrag on chat_member {
  id
  project_worker {
    ...ReportProjectWorkerFragment
    user {
      id
      created_password
      invites(where: {claiming_account: {_eq: true}, accepted_at: {_is_null: true}}, order_by: {created_at: desc}) {
        id
        to_email
        to_phone_number
        created_at
        claiming_account
        accepted_at
      }
    }
  }
  employee {
    ...GCEmployeeFrag
    user {
      id
      created_password
      invites(where: {claiming_account: {_eq: true}, accepted_at: {_is_null: true}}, order_by: {created_at: desc}) {
        id
        to_email
        to_phone_number
        created_at
        claiming_account
        accepted_at
      }
    }
  }
}
    ${ReportProjectWorkerFragmentFragmentDoc}
${GcEmployeeFragFragmentDoc}`;
export const ChatItemFragmentFragmentDoc = gql`
    fragment ChatItemFragment on chat_item {
  id
  type
  message {
    ...TextTranslationFrag
  }
  created_at
  insertStatus @client
  isOwn @client
  attachments(order_by: {sort_index: asc}) {
    id
    type
    image {
      id
      url
      sm_url
      md_url
      lg_url
      blurhash
    }
  }
  sender_chat_member {
    ...ChatMemberFrag
  }
  sender_todo_assignee {
    id
    assignee {
      id
      project_worker {
        ...ReportProjectWorkerFragment
      }
      employee {
        ...GCEmployeeFrag
      }
    }
  }
  todos(order_by: {created_at: asc}) {
    id
    completed_at
  }
}
    ${TextTranslationFragFragmentDoc}
${ChatMemberFragFragmentDoc}
${ReportProjectWorkerFragmentFragmentDoc}
${GcEmployeeFragFragmentDoc}`;
export const DailyReportFragmentFragmentDoc = gql`
    fragment DailyReportFragment on daily_report {
  id
  created_at
  description {
    ...TextTranslationFrag
  }
  project {
    id
    name
  }
  project_crew {
    id
    name
  }
  subcontractor {
    id
    name
    trade {
      id
      name
    }
  }
  daily_report_project_workers(order_by: {project_worker: {user: {name: asc}}}) {
    project_worker {
      id
      hard_hat_number
      worker_role
      orientation_signature_image {
        id
      }
      title {
        ...WorkerTitleFrag
      }
      user {
        id
        name
      }
    }
  }
  submitter_project_worker {
    id
    worker_role
    subcontractor {
      id
      name
    }
    worker {
      subcontractor {
        id
        name
      }
    }
    project_crew {
      id
      name
    }
    title {
      ...WorkerTitleFrag
    }
    user {
      id
      name
    }
  }
}
    ${TextTranslationFragFragmentDoc}
${WorkerTitleFragFragmentDoc}`;
export const GetAwarenessQuestionFragmentFragmentDoc = gql`
    fragment GetAwarenessQuestionFragment on awareness_question {
  id
  question {
    ...TextTranslationFrag
  }
  subcontractor_id
}
    ${TextTranslationFragFragmentDoc}`;
export const PermitChecklistItemFragmentFragmentDoc = gql`
    fragment PermitChecklistItemFragment on permit_checklist_item {
  created_at
  deleted_at
  general_contractor_id
  id
  na_enabled
  no_enabled
  permit_type
  text_response {
    ...TextTranslationFrag
  }
  option_response
  permit_id
  description {
    ...TextTranslationFrag
  }
  sort_index
  text_enabled
  updated_at
  yes_enabled
  text_required
  item_type
}
    ${TextTranslationFragFragmentDoc}`;
export const PermitSnippetFragmentFragmentDoc = gql`
    fragment PermitSnippetFragment on permit {
  id
  type
  project {
    id
    name
  }
  permit_histories(order_by: {created_at: desc}) {
    id
    status
    comment {
      ...TextTranslationFrag
    }
    updated_location
    created_at
  }
  subcontractor {
    id
    name
  }
  owner_user_id
  hot_work_permit {
    permit_id
  }
  dig_permit {
    permit_id
  }
  work_above_permit {
    permit_id
  }
  confined_space_permit {
    permit_id
    confined_space_permit_readings(order_by: {created_at: desc}) {
      id
      type
      created_at
      taken_at
      o2_percent
      submitted_at
      lower_explosive_limit
      co_ppm
      h2s_ppm
    }
  }
  created_at
  updated_at
  current_status
}
    ${TextTranslationFragFragmentDoc}`;
export const PermitTypeFragmentFragmentDoc = gql`
    fragment PermitTypeFragment on permit_type {
  id
  name {
    ...TextTranslationFrag
  }
}
    ${TextTranslationFragFragmentDoc}`;
export const PpeCategoryFragmentFragmentDoc = gql`
    fragment PpeCategoryFragment on ppe_category {
  id
  name {
    ...TextTranslationFrag
  }
  ppe_types(order_by: {name: {en: asc}}) {
    id
    name {
      ...TextTranslationFrag
    }
  }
}
    ${TextTranslationFragFragmentDoc}`;
export const ProjectCovidCertifyWorkerFragmentFragmentDoc = gql`
    fragment ProjectCovidCertifyWorkerFragment on project_covid_certify_worker {
  id
  created_at
  external_id
  cleared_project_covid_certify_worker {
    id
    created_at
  }
  project_worker {
    id
    hard_hat_number
    user {
      id
      name
      email
      username
      phone_number
    }
    title {
      ...WorkerTitleFrag
    }
    subcontractor {
      id
      name
    }
  }
  project_covid_crew_certify {
    submitter_project_worker {
      id
      hard_hat_number
      user {
        id
        name
      }
    }
    project_crew {
      id
      name
    }
  }
}
    ${WorkerTitleFragFragmentDoc}`;
export const ProjectHazardFragmentFragmentDoc = gql`
    fragment ProjectHazardFragment on project_hazard {
  id
  description {
    ...TextTranslationFrag
  }
  created_at
  expiry_date
  images(order_by: {id: asc}) {
    id
    url
  }
  project {
    id
    name
  }
}
    ${TextTranslationFragFragmentDoc}`;
export const ProjectWorkerByPkFragmentDoc = gql`
    fragment ProjectWorkerByPk on project_worker {
  user {
    id
    name
    username
    email
    profile_picture {
      id
      url
    }
    government_identification {
      front_image {
        id
        url
      }
      back_image {
        id
        url
      }
    }
  }
  worker {
    worker_certifications {
      id
      expires_on
      certification {
        id
        name
      }
      images {
        id
        url
      }
    }
    worker_drug_tests {
      name
      drug_test_date
      created_at
      id
      images {
        id
        url
      }
    }
    worker_projects {
      id
      created_at
      worker_role
      hard_hat_number
      orientation_signature_image {
        id
        url
        created_at
      }
      project_worker_competencies {
        description
      }
      title {
        ...WorkerTitleFrag
      }
      project_crew {
        name
        subcontractor {
          id
          name
        }
      }
      project {
        name
        id
      }
    }
  }
}
    ${WorkerTitleFragFragmentDoc}`;
export const ProjectWorkerFragmentFragmentDoc = gql`
    fragment ProjectWorkerFragment on project_worker {
  id
  hard_hat_number
  worker_role
  can_insert_report
  subcontractor {
    id
    name
  }
  worker {
    uid
    subcontractor {
      id
      name
    }
  }
  project_crew {
    id
    name
    lead_foreman_project_worker {
      id
      user {
        id
        name
        email
      }
    }
  }
  title {
    ...WorkerTitleFrag
  }
  user {
    id
    name
    email
    phone_number
    profile_picture {
      id
      url
    }
  }
}
    ${WorkerTitleFragFragmentDoc}`;
export const TaskFragmentFragmentDoc = gql`
    fragment TaskFragment on task {
  id
  description {
    ...TextTranslationFrag
  }
  created_at
  task_ppe_types(order_by: {ppe_type: {name: {en: asc}}}) {
    ppe_type {
      id
      name {
        ...TextTranslationFrag
      }
    }
  }
  task_permit_types(order_by: {permit_type: {name: {en: asc}}}) {
    permit_type {
      id
      name {
        ...TextTranslationFrag
      }
    }
  }
  task_steps(order_by: {sort_index: asc}) {
    id
    description {
      ...TextTranslationFrag
    }
    sort_index
    task_step_hazards(order_by: {sort_index: asc}) {
      id
      description {
        ...TextTranslationFrag
      }
      control {
        ...TextTranslationFrag
      }
    }
  }
}
    ${TextTranslationFragFragmentDoc}`;
export const ReportFragmentFragmentDoc = gql`
    fragment ReportFragment on report {
  id
  created_at
  project_crew {
    id
    name
  }
  subcontractor {
    id
    name
    trade {
      id
      name
    }
  }
  sign_in_type
  submitter_signature {
    id
    url
  }
  submission_images(order_by: {sort_index: asc}) {
    id
    type
    image {
      id
      url
    }
  }
  report_fatal_four {
    fall_control {
      ...TextTranslationFrag
    }
    caught_control {
      ...TextTranslationFrag
    }
    electrocute_control {
      ...TextTranslationFrag
    }
    struck_control {
      ...TextTranslationFrag
    }
  }
  submitter_project_worker {
    id
    worker_role
    subcontractor {
      id
      name
    }
    user {
      id
      name
    }
    title {
      ...WorkerTitleFrag
    }
  }
  tasks {
    ...TaskFragment
  }
  images(order_by: {id: asc}) {
    ...ImageFragment
  }
  report_injuries(order_by: {project_worker: {user: {name: asc}}}) {
    id
    project_worker {
      id
      hard_hat_number
      title {
        ...WorkerTitleFrag
      }
      orientation_signature_image {
        id
      }
      worker_role
      user {
        id
        name
      }
    }
  }
  report_awareness_questions(order_by: {awareness_question: {question: {en: asc}}}) {
    answer {
      ...TextTranslationFrag
    }
    awareness_question {
      id
      question {
        ...TextTranslationFrag
      }
    }
  }
  report_project_hazards(order_by: {project_hazard: {description: {en: asc}}}) {
    answer {
      ...TextTranslationFrag
    }
    project_hazard {
      id
      description {
        ...TextTranslationFrag
      }
      images {
        ...ImageFragment
      }
    }
  }
  report_project_workers(order_by: {project_worker: {user: {name: asc}}}) {
    signature_image {
      id
      url
    }
    project_worker {
      id
      hard_hat_number
      worker_role
      orientation_signature_image {
        id
      }
      title {
        ...WorkerTitleFrag
      }
      user {
        id
        name
      }
    }
  }
  project {
    id
    name
  }
}
    ${TextTranslationFragFragmentDoc}
${WorkerTitleFragFragmentDoc}
${TaskFragmentFragmentDoc}
${ImageFragmentFragmentDoc}`;
export const SafetyReportListFragmentFragmentDoc = gql`
    fragment SafetyReportListFragment on report {
  id
  created_at
  subcontractor {
    id
    name
  }
  submitter_project_worker {
    id
    worker_role
    hard_hat_number
    user {
      id
      name
    }
    title {
      ...WorkerTitleFrag
    }
  }
}
    ${WorkerTitleFragFragmentDoc}`;
export const SelectOptionFragFragmentDoc = gql`
    fragment SelectOptionFrag on select_option {
  id
  name {
    ...TextTranslationFrag
  }
}
    ${TextTranslationFragFragmentDoc}`;
export const SubcontractorFragmentFragmentDoc = gql`
    fragment SubcontractorFragment on subcontractor {
  id
  name
  trade {
    id
    name
  }
  workers_aggregate {
    aggregate {
      count
    }
  }
  subcontractor_projects_aggregate {
    aggregate {
      count
    }
  }
}
    `;
export const ProjectUserFragFragmentDoc = gql`
    fragment ProjectUserFrag on project_user {
  id
  project_worker {
    ...ReportProjectWorkerFragment
  }
  employee {
    ...GCEmployeeFrag
  }
}
    ${ReportProjectWorkerFragmentFragmentDoc}
${GcEmployeeFragFragmentDoc}`;
export const TodoAssigneeFragFragmentDoc = gql`
    fragment TodoAssigneeFrag on todo_assignee {
  id
  completed_at
  marked_complete
  assignee_completed_type
  assignee {
    ...ProjectUserFrag
  }
  assignor {
    id
    assignee_completed_type
    marked_complete
    assignee {
      ...ProjectUserFrag
    }
  }
}
    ${ProjectUserFragFragmentDoc}`;
export const TodoDetailsFragFragmentDoc = gql`
    fragment TodoDetailsFrag on todo {
  id
  created_at
  description {
    ...TextTranslationFrag
  }
  due_at
  source_chat_item_id
  type
  priority
  completed_at
  project {
    id
    name
  }
  images(order_by: {sort_index: asc}) {
    ...ImageFragment
  }
  isCreator @client
  assigned_to {
    ...TodoAssigneeFrag
  }
  notifyees {
    id
    notifyee {
      ...ProjectUserFrag
    }
  }
}
    ${TextTranslationFragFragmentDoc}
${ImageFragmentFragmentDoc}
${TodoAssigneeFragFragmentDoc}
${ProjectUserFragFragmentDoc}`;
export const ToolboxTalkFragmentFragmentDoc = gql`
    fragment ToolboxTalkFragment on toolbox_talk {
  id
  description {
    ...TextTranslationFrag
  }
  created_at
  project_crew {
    id
    name
  }
  subcontractor {
    id
    name
  }
  project {
    id
    name
  }
  sign_in_type
  submitter_signature {
    id
    url
  }
  submission_images(order_by: {sort_index: asc}) {
    id
    type
    image {
      id
      url
    }
  }
  led_by_project_worker {
    id
    worker_role
    title {
      ...WorkerTitleFrag
    }
    user {
      id
      name
    }
  }
  submitter_project_worker {
    id
    title {
      ...WorkerTitleFrag
    }
    user {
      id
      name
    }
  }
  toolbox_talk_project_workers(order_by: {project_worker: {user: {name: asc}}}) {
    signature_image {
      ...ImageFragment
    }
    project_worker {
      id
      orientation_signature_image {
        id
      }
      hard_hat_number
      worker_role
      title {
        ...WorkerTitleFrag
      }
      user {
        id
        name
      }
    }
  }
  images(order_by: {id: asc}) {
    ...ImageFragment
    created_at
  }
}
    ${TextTranslationFragFragmentDoc}
${WorkerTitleFragFragmentDoc}
${ImageFragmentFragmentDoc}`;
export const WorkerRoleFragFragmentDoc = gql`
    fragment WorkerRoleFrag on worker_role {
  value
  translation {
    ...TextTranslationFrag
  }
}
    ${TextTranslationFragFragmentDoc}`;
export const CreateInviteDocument = gql`
    mutation CreateInvite($objects: [CreateInviteDataObject!]!) {
  createInvite(objects: $objects)
}
    `;
export type CreateInviteMutationFn = ApolloReactCommon.MutationFunction<CreateInviteMutation, CreateInviteMutationVariables>;

/**
 * __useCreateInviteMutation__
 *
 * To run a mutation, you first call `useCreateInviteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateInviteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createInviteMutation, { data, loading, error }] = useCreateInviteMutation({
 *   variables: {
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useCreateInviteMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateInviteMutation, CreateInviteMutationVariables>) {
        return ApolloReactHooks.useMutation<CreateInviteMutation, CreateInviteMutationVariables>(CreateInviteDocument, baseOptions);
      }
export type CreateInviteMutationHookResult = ReturnType<typeof useCreateInviteMutation>;
export type CreateInviteMutationResult = ApolloReactCommon.MutationResult<CreateInviteMutation>;
export type CreateInviteMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateInviteMutation, CreateInviteMutationVariables>;
export const DeleteAndInsertPermitChecklistItemDocument = gql`
    mutation DeleteAndInsertPermitChecklistItem($where: permit_checklist_item_bool_exp!, $objects: [permit_checklist_item_insert_input!]!) {
  delete_permit_checklist_item(where: $where) {
    affected_rows
  }
  insert_permit_checklist_item(objects: $objects) {
    affected_rows
  }
}
    `;
export type DeleteAndInsertPermitChecklistItemMutationFn = ApolloReactCommon.MutationFunction<DeleteAndInsertPermitChecklistItemMutation, DeleteAndInsertPermitChecklistItemMutationVariables>;

/**
 * __useDeleteAndInsertPermitChecklistItemMutation__
 *
 * To run a mutation, you first call `useDeleteAndInsertPermitChecklistItemMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteAndInsertPermitChecklistItemMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteAndInsertPermitChecklistItemMutation, { data, loading, error }] = useDeleteAndInsertPermitChecklistItemMutation({
 *   variables: {
 *      where: // value for 'where'
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useDeleteAndInsertPermitChecklistItemMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteAndInsertPermitChecklistItemMutation, DeleteAndInsertPermitChecklistItemMutationVariables>) {
        return ApolloReactHooks.useMutation<DeleteAndInsertPermitChecklistItemMutation, DeleteAndInsertPermitChecklistItemMutationVariables>(DeleteAndInsertPermitChecklistItemDocument, baseOptions);
      }
export type DeleteAndInsertPermitChecklistItemMutationHookResult = ReturnType<typeof useDeleteAndInsertPermitChecklistItemMutation>;
export type DeleteAndInsertPermitChecklistItemMutationResult = ApolloReactCommon.MutationResult<DeleteAndInsertPermitChecklistItemMutation>;
export type DeleteAndInsertPermitChecklistItemMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteAndInsertPermitChecklistItemMutation, DeleteAndInsertPermitChecklistItemMutationVariables>;
export const DeleteCertificationDocument = gql`
    mutation DeleteCertification($where: worker_certification_bool_exp!) {
  delete_worker_certification(where: $where) {
    affected_rows
  }
}
    `;
export type DeleteCertificationMutationFn = ApolloReactCommon.MutationFunction<DeleteCertificationMutation, DeleteCertificationMutationVariables>;

/**
 * __useDeleteCertificationMutation__
 *
 * To run a mutation, you first call `useDeleteCertificationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteCertificationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteCertificationMutation, { data, loading, error }] = useDeleteCertificationMutation({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useDeleteCertificationMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteCertificationMutation, DeleteCertificationMutationVariables>) {
        return ApolloReactHooks.useMutation<DeleteCertificationMutation, DeleteCertificationMutationVariables>(DeleteCertificationDocument, baseOptions);
      }
export type DeleteCertificationMutationHookResult = ReturnType<typeof useDeleteCertificationMutation>;
export type DeleteCertificationMutationResult = ApolloReactCommon.MutationResult<DeleteCertificationMutation>;
export type DeleteCertificationMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteCertificationMutation, DeleteCertificationMutationVariables>;
export const DeleteConfinedSpacePermitMonitoringEquipmentDocument = gql`
    mutation DeleteConfinedSpacePermitMonitoringEquipment($where: confined_space_permit_monitoring_equipment_bool_exp!) {
  delete_confined_space_permit_monitoring_equipment(where: $where) {
    affected_rows
  }
}
    `;
export type DeleteConfinedSpacePermitMonitoringEquipmentMutationFn = ApolloReactCommon.MutationFunction<DeleteConfinedSpacePermitMonitoringEquipmentMutation, DeleteConfinedSpacePermitMonitoringEquipmentMutationVariables>;

/**
 * __useDeleteConfinedSpacePermitMonitoringEquipmentMutation__
 *
 * To run a mutation, you first call `useDeleteConfinedSpacePermitMonitoringEquipmentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteConfinedSpacePermitMonitoringEquipmentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteConfinedSpacePermitMonitoringEquipmentMutation, { data, loading, error }] = useDeleteConfinedSpacePermitMonitoringEquipmentMutation({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useDeleteConfinedSpacePermitMonitoringEquipmentMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteConfinedSpacePermitMonitoringEquipmentMutation, DeleteConfinedSpacePermitMonitoringEquipmentMutationVariables>) {
        return ApolloReactHooks.useMutation<DeleteConfinedSpacePermitMonitoringEquipmentMutation, DeleteConfinedSpacePermitMonitoringEquipmentMutationVariables>(DeleteConfinedSpacePermitMonitoringEquipmentDocument, baseOptions);
      }
export type DeleteConfinedSpacePermitMonitoringEquipmentMutationHookResult = ReturnType<typeof useDeleteConfinedSpacePermitMonitoringEquipmentMutation>;
export type DeleteConfinedSpacePermitMonitoringEquipmentMutationResult = ApolloReactCommon.MutationResult<DeleteConfinedSpacePermitMonitoringEquipmentMutation>;
export type DeleteConfinedSpacePermitMonitoringEquipmentMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteConfinedSpacePermitMonitoringEquipmentMutation, DeleteConfinedSpacePermitMonitoringEquipmentMutationVariables>;
export const DeleteConfinedSpacePermitReadingCustomItemDocument = gql`
    mutation DeleteConfinedSpacePermitReadingCustomItem($where: confined_space_permit_reading_custom_item_bool_exp!) {
  delete_confined_space_permit_reading_custom_item(where: $where) {
    affected_rows
  }
}
    `;
export type DeleteConfinedSpacePermitReadingCustomItemMutationFn = ApolloReactCommon.MutationFunction<DeleteConfinedSpacePermitReadingCustomItemMutation, DeleteConfinedSpacePermitReadingCustomItemMutationVariables>;

/**
 * __useDeleteConfinedSpacePermitReadingCustomItemMutation__
 *
 * To run a mutation, you first call `useDeleteConfinedSpacePermitReadingCustomItemMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteConfinedSpacePermitReadingCustomItemMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteConfinedSpacePermitReadingCustomItemMutation, { data, loading, error }] = useDeleteConfinedSpacePermitReadingCustomItemMutation({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useDeleteConfinedSpacePermitReadingCustomItemMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteConfinedSpacePermitReadingCustomItemMutation, DeleteConfinedSpacePermitReadingCustomItemMutationVariables>) {
        return ApolloReactHooks.useMutation<DeleteConfinedSpacePermitReadingCustomItemMutation, DeleteConfinedSpacePermitReadingCustomItemMutationVariables>(DeleteConfinedSpacePermitReadingCustomItemDocument, baseOptions);
      }
export type DeleteConfinedSpacePermitReadingCustomItemMutationHookResult = ReturnType<typeof useDeleteConfinedSpacePermitReadingCustomItemMutation>;
export type DeleteConfinedSpacePermitReadingCustomItemMutationResult = ApolloReactCommon.MutationResult<DeleteConfinedSpacePermitReadingCustomItemMutation>;
export type DeleteConfinedSpacePermitReadingCustomItemMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteConfinedSpacePermitReadingCustomItemMutation, DeleteConfinedSpacePermitReadingCustomItemMutationVariables>;
export const DeleteDigPermitSelectOptionDocument = gql`
    mutation DeleteDigPermitSelectOption($where: dig_permit_select_option_bool_exp!) {
  delete_dig_permit_select_option(where: $where) {
    affected_rows
  }
}
    `;
export type DeleteDigPermitSelectOptionMutationFn = ApolloReactCommon.MutationFunction<DeleteDigPermitSelectOptionMutation, DeleteDigPermitSelectOptionMutationVariables>;

/**
 * __useDeleteDigPermitSelectOptionMutation__
 *
 * To run a mutation, you first call `useDeleteDigPermitSelectOptionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteDigPermitSelectOptionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteDigPermitSelectOptionMutation, { data, loading, error }] = useDeleteDigPermitSelectOptionMutation({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useDeleteDigPermitSelectOptionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteDigPermitSelectOptionMutation, DeleteDigPermitSelectOptionMutationVariables>) {
        return ApolloReactHooks.useMutation<DeleteDigPermitSelectOptionMutation, DeleteDigPermitSelectOptionMutationVariables>(DeleteDigPermitSelectOptionDocument, baseOptions);
      }
export type DeleteDigPermitSelectOptionMutationHookResult = ReturnType<typeof useDeleteDigPermitSelectOptionMutation>;
export type DeleteDigPermitSelectOptionMutationResult = ApolloReactCommon.MutationResult<DeleteDigPermitSelectOptionMutation>;
export type DeleteDigPermitSelectOptionMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteDigPermitSelectOptionMutation, DeleteDigPermitSelectOptionMutationVariables>;
export const DeleteDigPermitTicketDocument = gql`
    mutation DeleteDigPermitTicket($where: dig_permit_ticket_bool_exp!) {
  delete_dig_permit_ticket(where: $where) {
    affected_rows
  }
}
    `;
export type DeleteDigPermitTicketMutationFn = ApolloReactCommon.MutationFunction<DeleteDigPermitTicketMutation, DeleteDigPermitTicketMutationVariables>;

/**
 * __useDeleteDigPermitTicketMutation__
 *
 * To run a mutation, you first call `useDeleteDigPermitTicketMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteDigPermitTicketMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteDigPermitTicketMutation, { data, loading, error }] = useDeleteDigPermitTicketMutation({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useDeleteDigPermitTicketMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteDigPermitTicketMutation, DeleteDigPermitTicketMutationVariables>) {
        return ApolloReactHooks.useMutation<DeleteDigPermitTicketMutation, DeleteDigPermitTicketMutationVariables>(DeleteDigPermitTicketDocument, baseOptions);
      }
export type DeleteDigPermitTicketMutationHookResult = ReturnType<typeof useDeleteDigPermitTicketMutation>;
export type DeleteDigPermitTicketMutationResult = ApolloReactCommon.MutationResult<DeleteDigPermitTicketMutation>;
export type DeleteDigPermitTicketMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteDigPermitTicketMutation, DeleteDigPermitTicketMutationVariables>;
export const DeleteDrugTestDocument = gql`
    mutation DeleteDrugTest($where: worker_drug_test_bool_exp!) {
  delete_worker_drug_test(where: $where) {
    affected_rows
  }
}
    `;
export type DeleteDrugTestMutationFn = ApolloReactCommon.MutationFunction<DeleteDrugTestMutation, DeleteDrugTestMutationVariables>;

/**
 * __useDeleteDrugTestMutation__
 *
 * To run a mutation, you first call `useDeleteDrugTestMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteDrugTestMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteDrugTestMutation, { data, loading, error }] = useDeleteDrugTestMutation({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useDeleteDrugTestMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteDrugTestMutation, DeleteDrugTestMutationVariables>) {
        return ApolloReactHooks.useMutation<DeleteDrugTestMutation, DeleteDrugTestMutationVariables>(DeleteDrugTestDocument, baseOptions);
      }
export type DeleteDrugTestMutationHookResult = ReturnType<typeof useDeleteDrugTestMutation>;
export type DeleteDrugTestMutationResult = ApolloReactCommon.MutationResult<DeleteDrugTestMutation>;
export type DeleteDrugTestMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteDrugTestMutation, DeleteDrugTestMutationVariables>;
export const DeleteExpoPushTokensDocument = gql`
    mutation DeleteExpoPushTokens($where: expo_push_token_bool_exp!) {
  delete_expo_push_token(where: $where) {
    affected_rows
  }
}
    `;
export type DeleteExpoPushTokensMutationFn = ApolloReactCommon.MutationFunction<DeleteExpoPushTokensMutation, DeleteExpoPushTokensMutationVariables>;

/**
 * __useDeleteExpoPushTokensMutation__
 *
 * To run a mutation, you first call `useDeleteExpoPushTokensMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteExpoPushTokensMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteExpoPushTokensMutation, { data, loading, error }] = useDeleteExpoPushTokensMutation({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useDeleteExpoPushTokensMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteExpoPushTokensMutation, DeleteExpoPushTokensMutationVariables>) {
        return ApolloReactHooks.useMutation<DeleteExpoPushTokensMutation, DeleteExpoPushTokensMutationVariables>(DeleteExpoPushTokensDocument, baseOptions);
      }
export type DeleteExpoPushTokensMutationHookResult = ReturnType<typeof useDeleteExpoPushTokensMutation>;
export type DeleteExpoPushTokensMutationResult = ApolloReactCommon.MutationResult<DeleteExpoPushTokensMutation>;
export type DeleteExpoPushTokensMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteExpoPushTokensMutation, DeleteExpoPushTokensMutationVariables>;
export const DeleteExpoPushTokenByUidDocument = gql`
    mutation DeleteExpoPushTokenByUid($uid: uuid!) {
  delete_expo_push_token(where: {user_id: {_eq: $uid}}) {
    affected_rows
  }
}
    `;
export type DeleteExpoPushTokenByUidMutationFn = ApolloReactCommon.MutationFunction<DeleteExpoPushTokenByUidMutation, DeleteExpoPushTokenByUidMutationVariables>;

/**
 * __useDeleteExpoPushTokenByUidMutation__
 *
 * To run a mutation, you first call `useDeleteExpoPushTokenByUidMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteExpoPushTokenByUidMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteExpoPushTokenByUidMutation, { data, loading, error }] = useDeleteExpoPushTokenByUidMutation({
 *   variables: {
 *      uid: // value for 'uid'
 *   },
 * });
 */
export function useDeleteExpoPushTokenByUidMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteExpoPushTokenByUidMutation, DeleteExpoPushTokenByUidMutationVariables>) {
        return ApolloReactHooks.useMutation<DeleteExpoPushTokenByUidMutation, DeleteExpoPushTokenByUidMutationVariables>(DeleteExpoPushTokenByUidDocument, baseOptions);
      }
export type DeleteExpoPushTokenByUidMutationHookResult = ReturnType<typeof useDeleteExpoPushTokenByUidMutation>;
export type DeleteExpoPushTokenByUidMutationResult = ApolloReactCommon.MutationResult<DeleteExpoPushTokenByUidMutation>;
export type DeleteExpoPushTokenByUidMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteExpoPushTokenByUidMutation, DeleteExpoPushTokenByUidMutationVariables>;
export const DeleteImagesDocument = gql`
    mutation DeleteImages($where: image_bool_exp!) {
  delete_image(where: $where) {
    affected_rows
  }
}
    `;
export type DeleteImagesMutationFn = ApolloReactCommon.MutationFunction<DeleteImagesMutation, DeleteImagesMutationVariables>;

/**
 * __useDeleteImagesMutation__
 *
 * To run a mutation, you first call `useDeleteImagesMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteImagesMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteImagesMutation, { data, loading, error }] = useDeleteImagesMutation({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useDeleteImagesMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteImagesMutation, DeleteImagesMutationVariables>) {
        return ApolloReactHooks.useMutation<DeleteImagesMutation, DeleteImagesMutationVariables>(DeleteImagesDocument, baseOptions);
      }
export type DeleteImagesMutationHookResult = ReturnType<typeof useDeleteImagesMutation>;
export type DeleteImagesMutationResult = ApolloReactCommon.MutationResult<DeleteImagesMutation>;
export type DeleteImagesMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteImagesMutation, DeleteImagesMutationVariables>;
export const DeleteImageByPkDocument = gql`
    mutation DeleteImageByPk($id: uuid!) {
  delete_image_by_pk(id: $id) {
    id
  }
}
    `;
export type DeleteImageByPkMutationFn = ApolloReactCommon.MutationFunction<DeleteImageByPkMutation, DeleteImageByPkMutationVariables>;

/**
 * __useDeleteImageByPkMutation__
 *
 * To run a mutation, you first call `useDeleteImageByPkMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteImageByPkMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteImageByPkMutation, { data, loading, error }] = useDeleteImageByPkMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteImageByPkMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteImageByPkMutation, DeleteImageByPkMutationVariables>) {
        return ApolloReactHooks.useMutation<DeleteImageByPkMutation, DeleteImageByPkMutationVariables>(DeleteImageByPkDocument, baseOptions);
      }
export type DeleteImageByPkMutationHookResult = ReturnType<typeof useDeleteImageByPkMutation>;
export type DeleteImageByPkMutationResult = ApolloReactCommon.MutationResult<DeleteImageByPkMutation>;
export type DeleteImageByPkMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteImageByPkMutation, DeleteImageByPkMutationVariables>;
export const DeletePermitByPkDocument = gql`
    mutation DeletePermitByPk($id: uuid!) {
  delete_permit_by_pk(id: $id) {
    id
  }
}
    `;
export type DeletePermitByPkMutationFn = ApolloReactCommon.MutationFunction<DeletePermitByPkMutation, DeletePermitByPkMutationVariables>;

/**
 * __useDeletePermitByPkMutation__
 *
 * To run a mutation, you first call `useDeletePermitByPkMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeletePermitByPkMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deletePermitByPkMutation, { data, loading, error }] = useDeletePermitByPkMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeletePermitByPkMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeletePermitByPkMutation, DeletePermitByPkMutationVariables>) {
        return ApolloReactHooks.useMutation<DeletePermitByPkMutation, DeletePermitByPkMutationVariables>(DeletePermitByPkDocument, baseOptions);
      }
export type DeletePermitByPkMutationHookResult = ReturnType<typeof useDeletePermitByPkMutation>;
export type DeletePermitByPkMutationResult = ApolloReactCommon.MutationResult<DeletePermitByPkMutation>;
export type DeletePermitByPkMutationOptions = ApolloReactCommon.BaseMutationOptions<DeletePermitByPkMutation, DeletePermitByPkMutationVariables>;
export const DeletePermitChecklistItemDocument = gql`
    mutation DeletePermitChecklistItem($where: permit_checklist_item_bool_exp!) {
  delete_permit_checklist_item(where: $where) {
    affected_rows
  }
}
    `;
export type DeletePermitChecklistItemMutationFn = ApolloReactCommon.MutationFunction<DeletePermitChecklistItemMutation, DeletePermitChecklistItemMutationVariables>;

/**
 * __useDeletePermitChecklistItemMutation__
 *
 * To run a mutation, you first call `useDeletePermitChecklistItemMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeletePermitChecklistItemMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deletePermitChecklistItemMutation, { data, loading, error }] = useDeletePermitChecklistItemMutation({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useDeletePermitChecklistItemMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeletePermitChecklistItemMutation, DeletePermitChecklistItemMutationVariables>) {
        return ApolloReactHooks.useMutation<DeletePermitChecklistItemMutation, DeletePermitChecklistItemMutationVariables>(DeletePermitChecklistItemDocument, baseOptions);
      }
export type DeletePermitChecklistItemMutationHookResult = ReturnType<typeof useDeletePermitChecklistItemMutation>;
export type DeletePermitChecklistItemMutationResult = ApolloReactCommon.MutationResult<DeletePermitChecklistItemMutation>;
export type DeletePermitChecklistItemMutationOptions = ApolloReactCommon.BaseMutationOptions<DeletePermitChecklistItemMutation, DeletePermitChecklistItemMutationVariables>;
export const DeletePermitSignInImageDocument = gql`
    mutation DeletePermitSignInImage($where: permit_sign_in_image_bool_exp!) {
  delete_permit_sign_in_image(where: $where) {
    affected_rows
  }
}
    `;
export type DeletePermitSignInImageMutationFn = ApolloReactCommon.MutationFunction<DeletePermitSignInImageMutation, DeletePermitSignInImageMutationVariables>;

/**
 * __useDeletePermitSignInImageMutation__
 *
 * To run a mutation, you first call `useDeletePermitSignInImageMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeletePermitSignInImageMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deletePermitSignInImageMutation, { data, loading, error }] = useDeletePermitSignInImageMutation({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useDeletePermitSignInImageMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeletePermitSignInImageMutation, DeletePermitSignInImageMutationVariables>) {
        return ApolloReactHooks.useMutation<DeletePermitSignInImageMutation, DeletePermitSignInImageMutationVariables>(DeletePermitSignInImageDocument, baseOptions);
      }
export type DeletePermitSignInImageMutationHookResult = ReturnType<typeof useDeletePermitSignInImageMutation>;
export type DeletePermitSignInImageMutationResult = ApolloReactCommon.MutationResult<DeletePermitSignInImageMutation>;
export type DeletePermitSignInImageMutationOptions = ApolloReactCommon.BaseMutationOptions<DeletePermitSignInImageMutation, DeletePermitSignInImageMutationVariables>;
export const DeleteProjectWorkerByPkDocument = gql`
    mutation DeleteProjectWorkerByPk($id: uuid!) {
  delete_project_worker_by_pk(id: $id) {
    id
  }
}
    `;
export type DeleteProjectWorkerByPkMutationFn = ApolloReactCommon.MutationFunction<DeleteProjectWorkerByPkMutation, DeleteProjectWorkerByPkMutationVariables>;

/**
 * __useDeleteProjectWorkerByPkMutation__
 *
 * To run a mutation, you first call `useDeleteProjectWorkerByPkMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteProjectWorkerByPkMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteProjectWorkerByPkMutation, { data, loading, error }] = useDeleteProjectWorkerByPkMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteProjectWorkerByPkMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteProjectWorkerByPkMutation, DeleteProjectWorkerByPkMutationVariables>) {
        return ApolloReactHooks.useMutation<DeleteProjectWorkerByPkMutation, DeleteProjectWorkerByPkMutationVariables>(DeleteProjectWorkerByPkDocument, baseOptions);
      }
export type DeleteProjectWorkerByPkMutationHookResult = ReturnType<typeof useDeleteProjectWorkerByPkMutation>;
export type DeleteProjectWorkerByPkMutationResult = ApolloReactCommon.MutationResult<DeleteProjectWorkerByPkMutation>;
export type DeleteProjectWorkerByPkMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteProjectWorkerByPkMutation, DeleteProjectWorkerByPkMutationVariables>;
export const DeleteTaskDocument = gql`
    mutation DeleteTask($taskId: uuid!) {
  delete_task(where: {id: {_eq: $taskId}}) {
    returning {
      id
    }
  }
}
    `;
export type DeleteTaskMutationFn = ApolloReactCommon.MutationFunction<DeleteTaskMutation, DeleteTaskMutationVariables>;

/**
 * __useDeleteTaskMutation__
 *
 * To run a mutation, you first call `useDeleteTaskMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteTaskMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteTaskMutation, { data, loading, error }] = useDeleteTaskMutation({
 *   variables: {
 *      taskId: // value for 'taskId'
 *   },
 * });
 */
export function useDeleteTaskMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteTaskMutation, DeleteTaskMutationVariables>) {
        return ApolloReactHooks.useMutation<DeleteTaskMutation, DeleteTaskMutationVariables>(DeleteTaskDocument, baseOptions);
      }
export type DeleteTaskMutationHookResult = ReturnType<typeof useDeleteTaskMutation>;
export type DeleteTaskMutationResult = ApolloReactCommon.MutationResult<DeleteTaskMutation>;
export type DeleteTaskMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteTaskMutation, DeleteTaskMutationVariables>;
export const DeleteTodoAssigneeDocument = gql`
    mutation DeleteTodoAssignee($where: todo_assignee_bool_exp!) {
  delete_todo_assignee(where: $where) {
    affected_rows
  }
}
    `;
export type DeleteTodoAssigneeMutationFn = ApolloReactCommon.MutationFunction<DeleteTodoAssigneeMutation, DeleteTodoAssigneeMutationVariables>;

/**
 * __useDeleteTodoAssigneeMutation__
 *
 * To run a mutation, you first call `useDeleteTodoAssigneeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteTodoAssigneeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteTodoAssigneeMutation, { data, loading, error }] = useDeleteTodoAssigneeMutation({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useDeleteTodoAssigneeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteTodoAssigneeMutation, DeleteTodoAssigneeMutationVariables>) {
        return ApolloReactHooks.useMutation<DeleteTodoAssigneeMutation, DeleteTodoAssigneeMutationVariables>(DeleteTodoAssigneeDocument, baseOptions);
      }
export type DeleteTodoAssigneeMutationHookResult = ReturnType<typeof useDeleteTodoAssigneeMutation>;
export type DeleteTodoAssigneeMutationResult = ApolloReactCommon.MutationResult<DeleteTodoAssigneeMutation>;
export type DeleteTodoAssigneeMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteTodoAssigneeMutation, DeleteTodoAssigneeMutationVariables>;
export const DeleteTodoNotifyeesDocument = gql`
    mutation DeleteTodoNotifyees($where: todo_notifyee_bool_exp!) {
  delete_todo_notifyee(where: $where) {
    affected_rows
  }
}
    `;
export type DeleteTodoNotifyeesMutationFn = ApolloReactCommon.MutationFunction<DeleteTodoNotifyeesMutation, DeleteTodoNotifyeesMutationVariables>;

/**
 * __useDeleteTodoNotifyeesMutation__
 *
 * To run a mutation, you first call `useDeleteTodoNotifyeesMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteTodoNotifyeesMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteTodoNotifyeesMutation, { data, loading, error }] = useDeleteTodoNotifyeesMutation({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useDeleteTodoNotifyeesMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteTodoNotifyeesMutation, DeleteTodoNotifyeesMutationVariables>) {
        return ApolloReactHooks.useMutation<DeleteTodoNotifyeesMutation, DeleteTodoNotifyeesMutationVariables>(DeleteTodoNotifyeesDocument, baseOptions);
      }
export type DeleteTodoNotifyeesMutationHookResult = ReturnType<typeof useDeleteTodoNotifyeesMutation>;
export type DeleteTodoNotifyeesMutationResult = ApolloReactCommon.MutationResult<DeleteTodoNotifyeesMutation>;
export type DeleteTodoNotifyeesMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteTodoNotifyeesMutation, DeleteTodoNotifyeesMutationVariables>;
export const EmailChecklistNotifyeesDocument = gql`
    mutation EmailChecklistNotifyees($input: EmailChecklistNotifyeesInput!) {
  emailChecklistNotifyees(input: $input)
}
    `;
export type EmailChecklistNotifyeesMutationFn = ApolloReactCommon.MutationFunction<EmailChecklistNotifyeesMutation, EmailChecklistNotifyeesMutationVariables>;

/**
 * __useEmailChecklistNotifyeesMutation__
 *
 * To run a mutation, you first call `useEmailChecklistNotifyeesMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useEmailChecklistNotifyeesMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [emailChecklistNotifyeesMutation, { data, loading, error }] = useEmailChecklistNotifyeesMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useEmailChecklistNotifyeesMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<EmailChecklistNotifyeesMutation, EmailChecklistNotifyeesMutationVariables>) {
        return ApolloReactHooks.useMutation<EmailChecklistNotifyeesMutation, EmailChecklistNotifyeesMutationVariables>(EmailChecklistNotifyeesDocument, baseOptions);
      }
export type EmailChecklistNotifyeesMutationHookResult = ReturnType<typeof useEmailChecklistNotifyeesMutation>;
export type EmailChecklistNotifyeesMutationResult = ApolloReactCommon.MutationResult<EmailChecklistNotifyeesMutation>;
export type EmailChecklistNotifyeesMutationOptions = ApolloReactCommon.BaseMutationOptions<EmailChecklistNotifyeesMutation, EmailChecklistNotifyeesMutationVariables>;
export const EmailCovidTestedPositiveDocument = gql`
    mutation EmailCovidTestedPositive($input: EmailCovidTestedPositiveInput!) {
  emailCovidTestedPositive(input: $input)
}
    `;
export type EmailCovidTestedPositiveMutationFn = ApolloReactCommon.MutationFunction<EmailCovidTestedPositiveMutation, EmailCovidTestedPositiveMutationVariables>;

/**
 * __useEmailCovidTestedPositiveMutation__
 *
 * To run a mutation, you first call `useEmailCovidTestedPositiveMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useEmailCovidTestedPositiveMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [emailCovidTestedPositiveMutation, { data, loading, error }] = useEmailCovidTestedPositiveMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useEmailCovidTestedPositiveMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<EmailCovidTestedPositiveMutation, EmailCovidTestedPositiveMutationVariables>) {
        return ApolloReactHooks.useMutation<EmailCovidTestedPositiveMutation, EmailCovidTestedPositiveMutationVariables>(EmailCovidTestedPositiveDocument, baseOptions);
      }
export type EmailCovidTestedPositiveMutationHookResult = ReturnType<typeof useEmailCovidTestedPositiveMutation>;
export type EmailCovidTestedPositiveMutationResult = ApolloReactCommon.MutationResult<EmailCovidTestedPositiveMutation>;
export type EmailCovidTestedPositiveMutationOptions = ApolloReactCommon.BaseMutationOptions<EmailCovidTestedPositiveMutation, EmailCovidTestedPositiveMutationVariables>;
export const EmailDailyLogsPdfDocument = gql`
    mutation EmailDailyLogsPdf($input: EmailDailyLogsPdfInput!) {
  emailDailyLogsPdf(input: $input)
}
    `;
export type EmailDailyLogsPdfMutationFn = ApolloReactCommon.MutationFunction<EmailDailyLogsPdfMutation, EmailDailyLogsPdfMutationVariables>;

/**
 * __useEmailDailyLogsPdfMutation__
 *
 * To run a mutation, you first call `useEmailDailyLogsPdfMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useEmailDailyLogsPdfMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [emailDailyLogsPdfMutation, { data, loading, error }] = useEmailDailyLogsPdfMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useEmailDailyLogsPdfMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<EmailDailyLogsPdfMutation, EmailDailyLogsPdfMutationVariables>) {
        return ApolloReactHooks.useMutation<EmailDailyLogsPdfMutation, EmailDailyLogsPdfMutationVariables>(EmailDailyLogsPdfDocument, baseOptions);
      }
export type EmailDailyLogsPdfMutationHookResult = ReturnType<typeof useEmailDailyLogsPdfMutation>;
export type EmailDailyLogsPdfMutationResult = ApolloReactCommon.MutationResult<EmailDailyLogsPdfMutation>;
export type EmailDailyLogsPdfMutationOptions = ApolloReactCommon.BaseMutationOptions<EmailDailyLogsPdfMutation, EmailDailyLogsPdfMutationVariables>;
export const EmailDailyLogCommentDocument = gql`
    mutation EmailDailyLogComment($input: EmailDailyLogCommentInput!) {
  emailDailyLogComment(input: $input)
}
    `;
export type EmailDailyLogCommentMutationFn = ApolloReactCommon.MutationFunction<EmailDailyLogCommentMutation, EmailDailyLogCommentMutationVariables>;

/**
 * __useEmailDailyLogCommentMutation__
 *
 * To run a mutation, you first call `useEmailDailyLogCommentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useEmailDailyLogCommentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [emailDailyLogCommentMutation, { data, loading, error }] = useEmailDailyLogCommentMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useEmailDailyLogCommentMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<EmailDailyLogCommentMutation, EmailDailyLogCommentMutationVariables>) {
        return ApolloReactHooks.useMutation<EmailDailyLogCommentMutation, EmailDailyLogCommentMutationVariables>(EmailDailyLogCommentDocument, baseOptions);
      }
export type EmailDailyLogCommentMutationHookResult = ReturnType<typeof useEmailDailyLogCommentMutation>;
export type EmailDailyLogCommentMutationResult = ApolloReactCommon.MutationResult<EmailDailyLogCommentMutation>;
export type EmailDailyLogCommentMutationOptions = ApolloReactCommon.BaseMutationOptions<EmailDailyLogCommentMutation, EmailDailyLogCommentMutationVariables>;
export const EmailDailyReportPdfDocument = gql`
    mutation EmailDailyReportPdf($input: EmailDailyReportPdfInput!) {
  emailDailyReportPdf(input: $input)
}
    `;
export type EmailDailyReportPdfMutationFn = ApolloReactCommon.MutationFunction<EmailDailyReportPdfMutation, EmailDailyReportPdfMutationVariables>;

/**
 * __useEmailDailyReportPdfMutation__
 *
 * To run a mutation, you first call `useEmailDailyReportPdfMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useEmailDailyReportPdfMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [emailDailyReportPdfMutation, { data, loading, error }] = useEmailDailyReportPdfMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useEmailDailyReportPdfMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<EmailDailyReportPdfMutation, EmailDailyReportPdfMutationVariables>) {
        return ApolloReactHooks.useMutation<EmailDailyReportPdfMutation, EmailDailyReportPdfMutationVariables>(EmailDailyReportPdfDocument, baseOptions);
      }
export type EmailDailyReportPdfMutationHookResult = ReturnType<typeof useEmailDailyReportPdfMutation>;
export type EmailDailyReportPdfMutationResult = ApolloReactCommon.MutationResult<EmailDailyReportPdfMutation>;
export type EmailDailyReportPdfMutationOptions = ApolloReactCommon.BaseMutationOptions<EmailDailyReportPdfMutation, EmailDailyReportPdfMutationVariables>;
export const EmailFailedCovidCertificationDocument = gql`
    mutation EmailFailedCovidCertification($input: EmailFailedCovidCertificationInput!) {
  emailFailedCovidCertification(input: $input)
}
    `;
export type EmailFailedCovidCertificationMutationFn = ApolloReactCommon.MutationFunction<EmailFailedCovidCertificationMutation, EmailFailedCovidCertificationMutationVariables>;

/**
 * __useEmailFailedCovidCertificationMutation__
 *
 * To run a mutation, you first call `useEmailFailedCovidCertificationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useEmailFailedCovidCertificationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [emailFailedCovidCertificationMutation, { data, loading, error }] = useEmailFailedCovidCertificationMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useEmailFailedCovidCertificationMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<EmailFailedCovidCertificationMutation, EmailFailedCovidCertificationMutationVariables>) {
        return ApolloReactHooks.useMutation<EmailFailedCovidCertificationMutation, EmailFailedCovidCertificationMutationVariables>(EmailFailedCovidCertificationDocument, baseOptions);
      }
export type EmailFailedCovidCertificationMutationHookResult = ReturnType<typeof useEmailFailedCovidCertificationMutation>;
export type EmailFailedCovidCertificationMutationResult = ApolloReactCommon.MutationResult<EmailFailedCovidCertificationMutation>;
export type EmailFailedCovidCertificationMutationOptions = ApolloReactCommon.BaseMutationOptions<EmailFailedCovidCertificationMutation, EmailFailedCovidCertificationMutationVariables>;
export const EmailPermitPdfDocument = gql`
    mutation EmailPermitPdf($input: EmailPermitPdfInput!) {
  emailPermitPdf(input: $input)
}
    `;
export type EmailPermitPdfMutationFn = ApolloReactCommon.MutationFunction<EmailPermitPdfMutation, EmailPermitPdfMutationVariables>;

/**
 * __useEmailPermitPdfMutation__
 *
 * To run a mutation, you first call `useEmailPermitPdfMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useEmailPermitPdfMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [emailPermitPdfMutation, { data, loading, error }] = useEmailPermitPdfMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useEmailPermitPdfMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<EmailPermitPdfMutation, EmailPermitPdfMutationVariables>) {
        return ApolloReactHooks.useMutation<EmailPermitPdfMutation, EmailPermitPdfMutationVariables>(EmailPermitPdfDocument, baseOptions);
      }
export type EmailPermitPdfMutationHookResult = ReturnType<typeof useEmailPermitPdfMutation>;
export type EmailPermitPdfMutationResult = ApolloReactCommon.MutationResult<EmailPermitPdfMutation>;
export type EmailPermitPdfMutationOptions = ApolloReactCommon.BaseMutationOptions<EmailPermitPdfMutation, EmailPermitPdfMutationVariables>;
export const EmailSafetyReportPdfDocument = gql`
    mutation EmailSafetyReportPdf($input: EmailSafetyReportPdfInput!) {
  emailSafetyReportPdf(input: $input)
}
    `;
export type EmailSafetyReportPdfMutationFn = ApolloReactCommon.MutationFunction<EmailSafetyReportPdfMutation, EmailSafetyReportPdfMutationVariables>;

/**
 * __useEmailSafetyReportPdfMutation__
 *
 * To run a mutation, you first call `useEmailSafetyReportPdfMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useEmailSafetyReportPdfMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [emailSafetyReportPdfMutation, { data, loading, error }] = useEmailSafetyReportPdfMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useEmailSafetyReportPdfMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<EmailSafetyReportPdfMutation, EmailSafetyReportPdfMutationVariables>) {
        return ApolloReactHooks.useMutation<EmailSafetyReportPdfMutation, EmailSafetyReportPdfMutationVariables>(EmailSafetyReportPdfDocument, baseOptions);
      }
export type EmailSafetyReportPdfMutationHookResult = ReturnType<typeof useEmailSafetyReportPdfMutation>;
export type EmailSafetyReportPdfMutationResult = ApolloReactCommon.MutationResult<EmailSafetyReportPdfMutation>;
export type EmailSafetyReportPdfMutationOptions = ApolloReactCommon.BaseMutationOptions<EmailSafetyReportPdfMutation, EmailSafetyReportPdfMutationVariables>;
export const EmailToolboxTalkPdfDocument = gql`
    mutation EmailToolboxTalkPdf($input: EmailToolboxTalkPdfInput!) {
  emailToolboxTalkPdf(input: $input)
}
    `;
export type EmailToolboxTalkPdfMutationFn = ApolloReactCommon.MutationFunction<EmailToolboxTalkPdfMutation, EmailToolboxTalkPdfMutationVariables>;

/**
 * __useEmailToolboxTalkPdfMutation__
 *
 * To run a mutation, you first call `useEmailToolboxTalkPdfMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useEmailToolboxTalkPdfMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [emailToolboxTalkPdfMutation, { data, loading, error }] = useEmailToolboxTalkPdfMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useEmailToolboxTalkPdfMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<EmailToolboxTalkPdfMutation, EmailToolboxTalkPdfMutationVariables>) {
        return ApolloReactHooks.useMutation<EmailToolboxTalkPdfMutation, EmailToolboxTalkPdfMutationVariables>(EmailToolboxTalkPdfDocument, baseOptions);
      }
export type EmailToolboxTalkPdfMutationHookResult = ReturnType<typeof useEmailToolboxTalkPdfMutation>;
export type EmailToolboxTalkPdfMutationResult = ApolloReactCommon.MutationResult<EmailToolboxTalkPdfMutation>;
export type EmailToolboxTalkPdfMutationOptions = ApolloReactCommon.BaseMutationOptions<EmailToolboxTalkPdfMutation, EmailToolboxTalkPdfMutationVariables>;
export const ForgotPasswordDocument = gql`
    mutation ForgotPassword($input: ForgotPasswordInput!) {
  forgotPassword(input: $input)
}
    `;
export type ForgotPasswordMutationFn = ApolloReactCommon.MutationFunction<ForgotPasswordMutation, ForgotPasswordMutationVariables>;

/**
 * __useForgotPasswordMutation__
 *
 * To run a mutation, you first call `useForgotPasswordMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useForgotPasswordMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [forgotPasswordMutation, { data, loading, error }] = useForgotPasswordMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useForgotPasswordMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ForgotPasswordMutation, ForgotPasswordMutationVariables>) {
        return ApolloReactHooks.useMutation<ForgotPasswordMutation, ForgotPasswordMutationVariables>(ForgotPasswordDocument, baseOptions);
      }
export type ForgotPasswordMutationHookResult = ReturnType<typeof useForgotPasswordMutation>;
export type ForgotPasswordMutationResult = ApolloReactCommon.MutationResult<ForgotPasswordMutation>;
export type ForgotPasswordMutationOptions = ApolloReactCommon.BaseMutationOptions<ForgotPasswordMutation, ForgotPasswordMutationVariables>;
export const GetAddTodoNotifyeesDocument = gql`
    query GetAddTodoNotifyees($todoId: uuid!) {
  general_contractor_employee(where: {employee_projects: {project: {todos: {id: {_eq: $todoId}}}}, _not: {project_users: {todo_notifyees: {todo_id: {_eq: $todoId}}}}}, order_by: [{user: {name: asc}}]) {
    ...GCEmployeeFrag
  }
  foremen: project_worker(where: {deleted_at: {_is_null: true}, worker_role: {_eq: "foreman"}, project: {todos: {id: {_eq: $todoId}}}, _not: {project_users: {todo_notifyees: {todo_id: {_eq: $todoId}}}}}, order_by: [{user: {name: asc}}]) {
    ...ReportProjectWorkerFragment
  }
  project_subcontractor(where: {project: {todos: {id: {_eq: $todoId}}}}, order_by: [{subcontractor: {name: asc}}]) {
    subcontractor {
      id
      name
      trade {
        id
        name
      }
    }
    project_workers(where: {_not: {project_users: {todo_notifyees: {todo_id: {_eq: $todoId}}}}}, order_by: [{user: {name: asc}}]) {
      ...ReportProjectWorkerFragment
    }
  }
}
    ${GcEmployeeFragFragmentDoc}
${ReportProjectWorkerFragmentFragmentDoc}`;

/**
 * __useGetAddTodoNotifyeesQuery__
 *
 * To run a query within a React component, call `useGetAddTodoNotifyeesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAddTodoNotifyeesQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAddTodoNotifyeesQuery({
 *   variables: {
 *      todoId: // value for 'todoId'
 *   },
 * });
 */
export function useGetAddTodoNotifyeesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetAddTodoNotifyeesQuery, GetAddTodoNotifyeesQueryVariables>) {
        return ApolloReactHooks.useQuery<GetAddTodoNotifyeesQuery, GetAddTodoNotifyeesQueryVariables>(GetAddTodoNotifyeesDocument, baseOptions);
      }
export function useGetAddTodoNotifyeesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetAddTodoNotifyeesQuery, GetAddTodoNotifyeesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetAddTodoNotifyeesQuery, GetAddTodoNotifyeesQueryVariables>(GetAddTodoNotifyeesDocument, baseOptions);
        }
export type GetAddTodoNotifyeesQueryHookResult = ReturnType<typeof useGetAddTodoNotifyeesQuery>;
export type GetAddTodoNotifyeesLazyQueryHookResult = ReturnType<typeof useGetAddTodoNotifyeesLazyQuery>;
export type GetAddTodoNotifyeesQueryResult = ApolloReactCommon.QueryResult<GetAddTodoNotifyeesQuery, GetAddTodoNotifyeesQueryVariables>;
export const GetAppNotificationCountsDocument = gql`
    query GetAppNotificationCounts {
  notifCounts: appNotificationCounts @client {
    chats
    todos
    menu
    projects
  }
}
    `;

/**
 * __useGetAppNotificationCountsQuery__
 *
 * To run a query within a React component, call `useGetAppNotificationCountsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAppNotificationCountsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAppNotificationCountsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetAppNotificationCountsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetAppNotificationCountsQuery, GetAppNotificationCountsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetAppNotificationCountsQuery, GetAppNotificationCountsQueryVariables>(GetAppNotificationCountsDocument, baseOptions);
      }
export function useGetAppNotificationCountsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetAppNotificationCountsQuery, GetAppNotificationCountsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetAppNotificationCountsQuery, GetAppNotificationCountsQueryVariables>(GetAppNotificationCountsDocument, baseOptions);
        }
export type GetAppNotificationCountsQueryHookResult = ReturnType<typeof useGetAppNotificationCountsQuery>;
export type GetAppNotificationCountsLazyQueryHookResult = ReturnType<typeof useGetAppNotificationCountsLazyQuery>;
export type GetAppNotificationCountsQueryResult = ApolloReactCommon.QueryResult<GetAppNotificationCountsQuery, GetAppNotificationCountsQueryVariables>;
export const GetAwarenessQuestionsDocument = gql`
    query GetAwarenessQuestions($where: awareness_question_bool_exp, $order_by: [awareness_question_order_by!], $limit: Int, $offset: Int) {
  awareness_question(where: $where, order_by: $order_by, limit: $limit, offset: $offset) {
    id
    subcontractor_id
    question {
      ...TextTranslationFrag
    }
  }
  awareness_question_aggregate(where: $where) {
    aggregate {
      count
    }
  }
}
    ${TextTranslationFragFragmentDoc}`;

/**
 * __useGetAwarenessQuestionsQuery__
 *
 * To run a query within a React component, call `useGetAwarenessQuestionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAwarenessQuestionsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAwarenessQuestionsQuery({
 *   variables: {
 *      where: // value for 'where'
 *      order_by: // value for 'order_by'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetAwarenessQuestionsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetAwarenessQuestionsQuery, GetAwarenessQuestionsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetAwarenessQuestionsQuery, GetAwarenessQuestionsQueryVariables>(GetAwarenessQuestionsDocument, baseOptions);
      }
export function useGetAwarenessQuestionsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetAwarenessQuestionsQuery, GetAwarenessQuestionsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetAwarenessQuestionsQuery, GetAwarenessQuestionsQueryVariables>(GetAwarenessQuestionsDocument, baseOptions);
        }
export type GetAwarenessQuestionsQueryHookResult = ReturnType<typeof useGetAwarenessQuestionsQuery>;
export type GetAwarenessQuestionsLazyQueryHookResult = ReturnType<typeof useGetAwarenessQuestionsLazyQuery>;
export type GetAwarenessQuestionsQueryResult = ApolloReactCommon.QueryResult<GetAwarenessQuestionsQuery, GetAwarenessQuestionsQueryVariables>;
export const GetCacheUserDocument = gql`
    query GetCacheUser {
  user @client {
    id
  }
}
    `;

/**
 * __useGetCacheUserQuery__
 *
 * To run a query within a React component, call `useGetCacheUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCacheUserQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCacheUserQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetCacheUserQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetCacheUserQuery, GetCacheUserQueryVariables>) {
        return ApolloReactHooks.useQuery<GetCacheUserQuery, GetCacheUserQueryVariables>(GetCacheUserDocument, baseOptions);
      }
export function useGetCacheUserLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetCacheUserQuery, GetCacheUserQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetCacheUserQuery, GetCacheUserQueryVariables>(GetCacheUserDocument, baseOptions);
        }
export type GetCacheUserQueryHookResult = ReturnType<typeof useGetCacheUserQuery>;
export type GetCacheUserLazyQueryHookResult = ReturnType<typeof useGetCacheUserLazyQuery>;
export type GetCacheUserQueryResult = ApolloReactCommon.QueryResult<GetCacheUserQuery, GetCacheUserQueryVariables>;
export const GetCertificationsDocument = gql`
    query GetCertifications {
  certification(where: {is_custom: {_eq: false}}, order_by: {name: asc}) {
    id
    name
  }
}
    `;

/**
 * __useGetCertificationsQuery__
 *
 * To run a query within a React component, call `useGetCertificationsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCertificationsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCertificationsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetCertificationsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetCertificationsQuery, GetCertificationsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetCertificationsQuery, GetCertificationsQueryVariables>(GetCertificationsDocument, baseOptions);
      }
export function useGetCertificationsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetCertificationsQuery, GetCertificationsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetCertificationsQuery, GetCertificationsQueryVariables>(GetCertificationsDocument, baseOptions);
        }
export type GetCertificationsQueryHookResult = ReturnType<typeof useGetCertificationsQuery>;
export type GetCertificationsLazyQueryHookResult = ReturnType<typeof useGetCertificationsLazyQuery>;
export type GetCertificationsQueryResult = ApolloReactCommon.QueryResult<GetCertificationsQuery, GetCertificationsQueryVariables>;
export const GetChatAttachmentsDocument = gql`
    query GetChatAttachments($where: chat_item_attachment_bool_exp, $limit: Int, $order_by: [chat_item_attachment_order_by!], $aggregateWhere: chat_item_attachment_bool_exp) {
  chat_item_attachment(where: $where, limit: $limit, order_by: $order_by) {
    id
    type
    created_at
    image {
      id
      url
      sm_url
      md_url
      lg_url
      blurhash
    }
    chat_item {
      ...ChatItemFragment
    }
  }
  chat_item_attachment_aggregate(where: $aggregateWhere) {
    aggregate {
      count
    }
  }
}
    ${ChatItemFragmentFragmentDoc}`;

/**
 * __useGetChatAttachmentsQuery__
 *
 * To run a query within a React component, call `useGetChatAttachmentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetChatAttachmentsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetChatAttachmentsQuery({
 *   variables: {
 *      where: // value for 'where'
 *      limit: // value for 'limit'
 *      order_by: // value for 'order_by'
 *      aggregateWhere: // value for 'aggregateWhere'
 *   },
 * });
 */
export function useGetChatAttachmentsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetChatAttachmentsQuery, GetChatAttachmentsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetChatAttachmentsQuery, GetChatAttachmentsQueryVariables>(GetChatAttachmentsDocument, baseOptions);
      }
export function useGetChatAttachmentsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetChatAttachmentsQuery, GetChatAttachmentsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetChatAttachmentsQuery, GetChatAttachmentsQueryVariables>(GetChatAttachmentsDocument, baseOptions);
        }
export type GetChatAttachmentsQueryHookResult = ReturnType<typeof useGetChatAttachmentsQuery>;
export type GetChatAttachmentsLazyQueryHookResult = ReturnType<typeof useGetChatAttachmentsLazyQuery>;
export type GetChatAttachmentsQueryResult = ApolloReactCommon.QueryResult<GetChatAttachmentsQuery, GetChatAttachmentsQueryVariables>;
export const GetChatItemsDocument = gql`
    query GetChatItems($where: chat_item_bool_exp!, $order_by: [chat_item_order_by!]!, $limit: Int) {
  chat_item(where: $where, order_by: $order_by, limit: $limit) {
    ...ChatItemFragment
  }
}
    ${ChatItemFragmentFragmentDoc}`;

/**
 * __useGetChatItemsQuery__
 *
 * To run a query within a React component, call `useGetChatItemsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetChatItemsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetChatItemsQuery({
 *   variables: {
 *      where: // value for 'where'
 *      order_by: // value for 'order_by'
 *      limit: // value for 'limit'
 *   },
 * });
 */
export function useGetChatItemsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetChatItemsQuery, GetChatItemsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetChatItemsQuery, GetChatItemsQueryVariables>(GetChatItemsDocument, baseOptions);
      }
export function useGetChatItemsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetChatItemsQuery, GetChatItemsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetChatItemsQuery, GetChatItemsQueryVariables>(GetChatItemsDocument, baseOptions);
        }
export type GetChatItemsQueryHookResult = ReturnType<typeof useGetChatItemsQuery>;
export type GetChatItemsLazyQueryHookResult = ReturnType<typeof useGetChatItemsLazyQuery>;
export type GetChatItemsQueryResult = ApolloReactCommon.QueryResult<GetChatItemsQuery, GetChatItemsQueryVariables>;
export const GetChatMembersDocument = gql`
    query GetChatMembers($where: chat_member_bool_exp, $order_by: [chat_member_order_by!]) {
  chat_member(where: $where, order_by: $order_by) {
    ...ChatMemberFrag
  }
}
    ${ChatMemberFragFragmentDoc}`;

/**
 * __useGetChatMembersQuery__
 *
 * To run a query within a React component, call `useGetChatMembersQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetChatMembersQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetChatMembersQuery({
 *   variables: {
 *      where: // value for 'where'
 *      order_by: // value for 'order_by'
 *   },
 * });
 */
export function useGetChatMembersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetChatMembersQuery, GetChatMembersQueryVariables>) {
        return ApolloReactHooks.useQuery<GetChatMembersQuery, GetChatMembersQueryVariables>(GetChatMembersDocument, baseOptions);
      }
export function useGetChatMembersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetChatMembersQuery, GetChatMembersQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetChatMembersQuery, GetChatMembersQueryVariables>(GetChatMembersDocument, baseOptions);
        }
export type GetChatMembersQueryHookResult = ReturnType<typeof useGetChatMembersQuery>;
export type GetChatMembersLazyQueryHookResult = ReturnType<typeof useGetChatMembersLazyQuery>;
export type GetChatMembersQueryResult = ApolloReactCommon.QueryResult<GetChatMembersQuery, GetChatMembersQueryVariables>;
export const GetChatMembersScreenDocument = gql`
    query GetChatMembersScreen($chatId: uuid!) {
  chat_by_pk(id: $chatId) {
    id
    name
    created_by_employee_id
    created_by_project_worker_id
  }
  active: chat_member(where: {deleted_at: {_is_null: true}, chat_id: {_eq: $chatId}, _or: [{employee: {user: {created_password: {_eq: true}}}}, {project_worker: {user: {created_password: {_eq: true}}}}]}) {
    ...ChatMemberFrag
  }
  pendingAccount: chat_member(where: {deleted_at: {_is_null: true}, chat_id: {_eq: $chatId}, _or: [{employee: {user: {created_password: {_eq: false}}}}, {project_worker: {user: {created_password: {_eq: false}}}}]}) {
    ...ChatMemberFrag
  }
}
    ${ChatMemberFragFragmentDoc}`;

/**
 * __useGetChatMembersScreenQuery__
 *
 * To run a query within a React component, call `useGetChatMembersScreenQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetChatMembersScreenQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetChatMembersScreenQuery({
 *   variables: {
 *      chatId: // value for 'chatId'
 *   },
 * });
 */
export function useGetChatMembersScreenQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetChatMembersScreenQuery, GetChatMembersScreenQueryVariables>) {
        return ApolloReactHooks.useQuery<GetChatMembersScreenQuery, GetChatMembersScreenQueryVariables>(GetChatMembersScreenDocument, baseOptions);
      }
export function useGetChatMembersScreenLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetChatMembersScreenQuery, GetChatMembersScreenQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetChatMembersScreenQuery, GetChatMembersScreenQueryVariables>(GetChatMembersScreenDocument, baseOptions);
        }
export type GetChatMembersScreenQueryHookResult = ReturnType<typeof useGetChatMembersScreenQuery>;
export type GetChatMembersScreenLazyQueryHookResult = ReturnType<typeof useGetChatMembersScreenLazyQuery>;
export type GetChatMembersScreenQueryResult = ApolloReactCommon.QueryResult<GetChatMembersScreenQuery, GetChatMembersScreenQueryVariables>;
export const GetChatMembersToAddDocument = gql`
    query GetChatMembersToAdd($chatId: uuid!) {
  general_contractor_employee(where: {employee_projects: {project: {chats: {id: {_eq: $chatId}}}}, _or: [{_not: {chat_members: {}}}, {_not: {chat_members: {deleted_at: {_is_null: true}, chat_id: {_eq: $chatId}}}}]}, order_by: [{user: {name: asc}}]) {
    ...GCEmployeeFrag
  }
  foremen: project_worker(where: {deleted_at: {_is_null: true}, worker_role: {_eq: "foreman"}, project: {chats: {id: {_eq: $chatId}}}, _or: [{_not: {chat_members: {}}}, {_not: {chat_members: {deleted_at: {_is_null: true}, chat_id: {_eq: $chatId}}}}]}, order_by: [{user: {name: asc}}]) {
    ...ReportProjectWorkerFragment
  }
  project_subcontractor(where: {project: {chats: {id: {_eq: $chatId}}}}, order_by: [{subcontractor: {name: asc}}]) {
    subcontractor {
      id
      name
      trade {
        id
        name
      }
    }
    project_workers(where: {_or: [{_not: {chat_members: {}}}, {_not: {chat_members: {deleted_at: {_is_null: true}, chat_id: {_eq: $chatId}}}}]}, order_by: [{user: {name: asc}}]) {
      ...ReportProjectWorkerFragment
    }
  }
}
    ${GcEmployeeFragFragmentDoc}
${ReportProjectWorkerFragmentFragmentDoc}`;

/**
 * __useGetChatMembersToAddQuery__
 *
 * To run a query within a React component, call `useGetChatMembersToAddQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetChatMembersToAddQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetChatMembersToAddQuery({
 *   variables: {
 *      chatId: // value for 'chatId'
 *   },
 * });
 */
export function useGetChatMembersToAddQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetChatMembersToAddQuery, GetChatMembersToAddQueryVariables>) {
        return ApolloReactHooks.useQuery<GetChatMembersToAddQuery, GetChatMembersToAddQueryVariables>(GetChatMembersToAddDocument, baseOptions);
      }
export function useGetChatMembersToAddLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetChatMembersToAddQuery, GetChatMembersToAddQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetChatMembersToAddQuery, GetChatMembersToAddQueryVariables>(GetChatMembersToAddDocument, baseOptions);
        }
export type GetChatMembersToAddQueryHookResult = ReturnType<typeof useGetChatMembersToAddQuery>;
export type GetChatMembersToAddLazyQueryHookResult = ReturnType<typeof useGetChatMembersToAddLazyQuery>;
export type GetChatMembersToAddQueryResult = ApolloReactCommon.QueryResult<GetChatMembersToAddQuery, GetChatMembersToAddQueryVariables>;
export const GetChatWithItemsDocument = gql`
    query GetChatWithItems($chatId: uuid!) {
  chat_by_pk(id: $chatId) {
    id
    items {
      ...ChatItemFragment
    }
  }
}
    ${ChatItemFragmentFragmentDoc}`;

/**
 * __useGetChatWithItemsQuery__
 *
 * To run a query within a React component, call `useGetChatWithItemsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetChatWithItemsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetChatWithItemsQuery({
 *   variables: {
 *      chatId: // value for 'chatId'
 *   },
 * });
 */
export function useGetChatWithItemsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetChatWithItemsQuery, GetChatWithItemsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetChatWithItemsQuery, GetChatWithItemsQueryVariables>(GetChatWithItemsDocument, baseOptions);
      }
export function useGetChatWithItemsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetChatWithItemsQuery, GetChatWithItemsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetChatWithItemsQuery, GetChatWithItemsQueryVariables>(GetChatWithItemsDocument, baseOptions);
        }
export type GetChatWithItemsQueryHookResult = ReturnType<typeof useGetChatWithItemsQuery>;
export type GetChatWithItemsLazyQueryHookResult = ReturnType<typeof useGetChatWithItemsLazyQuery>;
export type GetChatWithItemsQueryResult = ApolloReactCommon.QueryResult<GetChatWithItemsQuery, GetChatWithItemsQueryVariables>;
export const GetClientCreateDailyReportInformationDocument = gql`
    query getClientCreateDailyReportInformation @client {
  dailyReportForm @client {
    description
  }
  project_worker {
    id
    title {
      ...WorkerTitleFrag
    }
    user {
      name
    }
  }
}
    ${WorkerTitleFragFragmentDoc}`;

/**
 * __useGetClientCreateDailyReportInformationQuery__
 *
 * To run a query within a React component, call `useGetClientCreateDailyReportInformationQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetClientCreateDailyReportInformationQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetClientCreateDailyReportInformationQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetClientCreateDailyReportInformationQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetClientCreateDailyReportInformationQuery, GetClientCreateDailyReportInformationQueryVariables>) {
        return ApolloReactHooks.useQuery<GetClientCreateDailyReportInformationQuery, GetClientCreateDailyReportInformationQueryVariables>(GetClientCreateDailyReportInformationDocument, baseOptions);
      }
export function useGetClientCreateDailyReportInformationLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetClientCreateDailyReportInformationQuery, GetClientCreateDailyReportInformationQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetClientCreateDailyReportInformationQuery, GetClientCreateDailyReportInformationQueryVariables>(GetClientCreateDailyReportInformationDocument, baseOptions);
        }
export type GetClientCreateDailyReportInformationQueryHookResult = ReturnType<typeof useGetClientCreateDailyReportInformationQuery>;
export type GetClientCreateDailyReportInformationLazyQueryHookResult = ReturnType<typeof useGetClientCreateDailyReportInformationLazyQuery>;
export type GetClientCreateDailyReportInformationQueryResult = ApolloReactCommon.QueryResult<GetClientCreateDailyReportInformationQuery, GetClientCreateDailyReportInformationQueryVariables>;
export const GetClientCurrentEmployeeProjectDocument = gql`
    query GetClientCurrentEmployeeProject {
  employeeData @client {
    user {
      id
      name
      email
      username
      phone_number
      role
    }
    currentEmployeeProject {
      id
      employee {
        uid
        general_contractor {
          id
          name
        }
      }
      project {
        id
        name
        external_id
        general_contractor {
          id
          name
        }
        project_covid_config {
          project_id
          requirements {
            ...TextTranslationFrag
          }
          worker_restriction_length
        }
      }
    }
  }
}
    ${TextTranslationFragFragmentDoc}`;

/**
 * __useGetClientCurrentEmployeeProjectQuery__
 *
 * To run a query within a React component, call `useGetClientCurrentEmployeeProjectQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetClientCurrentEmployeeProjectQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetClientCurrentEmployeeProjectQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetClientCurrentEmployeeProjectQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetClientCurrentEmployeeProjectQuery, GetClientCurrentEmployeeProjectQueryVariables>) {
        return ApolloReactHooks.useQuery<GetClientCurrentEmployeeProjectQuery, GetClientCurrentEmployeeProjectQueryVariables>(GetClientCurrentEmployeeProjectDocument, baseOptions);
      }
export function useGetClientCurrentEmployeeProjectLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetClientCurrentEmployeeProjectQuery, GetClientCurrentEmployeeProjectQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetClientCurrentEmployeeProjectQuery, GetClientCurrentEmployeeProjectQueryVariables>(GetClientCurrentEmployeeProjectDocument, baseOptions);
        }
export type GetClientCurrentEmployeeProjectQueryHookResult = ReturnType<typeof useGetClientCurrentEmployeeProjectQuery>;
export type GetClientCurrentEmployeeProjectLazyQueryHookResult = ReturnType<typeof useGetClientCurrentEmployeeProjectLazyQuery>;
export type GetClientCurrentEmployeeProjectQueryResult = ApolloReactCommon.QueryResult<GetClientCurrentEmployeeProjectQuery, GetClientCurrentEmployeeProjectQueryVariables>;
export const GetClientCurrentWorkerProjectDocument = gql`
    query GetClientCurrentWorkerProject {
  workerData @client {
    user {
      id
      name
      email
    }
    currentWorkerProject {
      id
      created_at
      worker_role
      can_insert_report
      subcontractor_id
      subcontractor {
        id
        name
      }
      project_crew {
        id
        name
      }
      title {
        ...WorkerTitleFrag
      }
      project {
        id
        name
        external_id
        general_contractor {
          id
          name
        }
        permit_contact_project_employee {
          id
          employee {
            uid
            user {
              id
              name
            }
          }
        }
        address {
          ...AddressFragment
        }
        project_covid_config {
          project_id
          requirements {
            ...TextTranslationFrag
          }
          worker_restriction_length
          project_covid_tested_positive_questions {
            id
            question {
              ...TextTranslationFrag
            }
          }
        }
      }
      ...ReportProjectWorkerFragment
    }
  }
}
    ${WorkerTitleFragFragmentDoc}
${AddressFragmentFragmentDoc}
${TextTranslationFragFragmentDoc}
${ReportProjectWorkerFragmentFragmentDoc}`;

/**
 * __useGetClientCurrentWorkerProjectQuery__
 *
 * To run a query within a React component, call `useGetClientCurrentWorkerProjectQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetClientCurrentWorkerProjectQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetClientCurrentWorkerProjectQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetClientCurrentWorkerProjectQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetClientCurrentWorkerProjectQuery, GetClientCurrentWorkerProjectQueryVariables>) {
        return ApolloReactHooks.useQuery<GetClientCurrentWorkerProjectQuery, GetClientCurrentWorkerProjectQueryVariables>(GetClientCurrentWorkerProjectDocument, baseOptions);
      }
export function useGetClientCurrentWorkerProjectLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetClientCurrentWorkerProjectQuery, GetClientCurrentWorkerProjectQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetClientCurrentWorkerProjectQuery, GetClientCurrentWorkerProjectQueryVariables>(GetClientCurrentWorkerProjectDocument, baseOptions);
        }
export type GetClientCurrentWorkerProjectQueryHookResult = ReturnType<typeof useGetClientCurrentWorkerProjectQuery>;
export type GetClientCurrentWorkerProjectLazyQueryHookResult = ReturnType<typeof useGetClientCurrentWorkerProjectLazyQuery>;
export type GetClientCurrentWorkerProjectQueryResult = ApolloReactCommon.QueryResult<GetClientCurrentWorkerProjectQuery, GetClientCurrentWorkerProjectQueryVariables>;
export const GetClientHelperDataDocument = gql`
    query GetClientHelperData {
  ppe_category @client {
    ...PpeCategoryFragment
  }
  permit_type @client {
    ...PermitTypeFragment
  }
}
    ${PpeCategoryFragmentFragmentDoc}
${PermitTypeFragmentFragmentDoc}`;

/**
 * __useGetClientHelperDataQuery__
 *
 * To run a query within a React component, call `useGetClientHelperDataQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetClientHelperDataQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetClientHelperDataQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetClientHelperDataQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetClientHelperDataQuery, GetClientHelperDataQueryVariables>) {
        return ApolloReactHooks.useQuery<GetClientHelperDataQuery, GetClientHelperDataQueryVariables>(GetClientHelperDataDocument, baseOptions);
      }
export function useGetClientHelperDataLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetClientHelperDataQuery, GetClientHelperDataQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetClientHelperDataQuery, GetClientHelperDataQueryVariables>(GetClientHelperDataDocument, baseOptions);
        }
export type GetClientHelperDataQueryHookResult = ReturnType<typeof useGetClientHelperDataQuery>;
export type GetClientHelperDataLazyQueryHookResult = ReturnType<typeof useGetClientHelperDataLazyQuery>;
export type GetClientHelperDataQueryResult = ApolloReactCommon.QueryResult<GetClientHelperDataQuery, GetClientHelperDataQueryVariables>;
export const GetClientStateDocument = gql`
    query GetClientState {
  clientState @client {
    uid
    role
    isAppLoading
  }
}
    `;

/**
 * __useGetClientStateQuery__
 *
 * To run a query within a React component, call `useGetClientStateQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetClientStateQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetClientStateQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetClientStateQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetClientStateQuery, GetClientStateQueryVariables>) {
        return ApolloReactHooks.useQuery<GetClientStateQuery, GetClientStateQueryVariables>(GetClientStateDocument, baseOptions);
      }
export function useGetClientStateLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetClientStateQuery, GetClientStateQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetClientStateQuery, GetClientStateQueryVariables>(GetClientStateDocument, baseOptions);
        }
export type GetClientStateQueryHookResult = ReturnType<typeof useGetClientStateQuery>;
export type GetClientStateLazyQueryHookResult = ReturnType<typeof useGetClientStateLazyQuery>;
export type GetClientStateQueryResult = ApolloReactCommon.QueryResult<GetClientStateQuery, GetClientStateQueryVariables>;
export const GetClientSubEmployeeDocument = gql`
    query GetClientSubEmployee {
  subEmployeeData @client {
    user {
      id
      name
      email
      role
      username
      phone_number
    }
    currentSubProject {
      subcontractor {
        id
        name
        trade {
          id
          name
        }
      }
      project {
        id
        name
        general_contractor {
          id
          name
        }
      }
    }
  }
}
    `;

/**
 * __useGetClientSubEmployeeQuery__
 *
 * To run a query within a React component, call `useGetClientSubEmployeeQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetClientSubEmployeeQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetClientSubEmployeeQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetClientSubEmployeeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetClientSubEmployeeQuery, GetClientSubEmployeeQueryVariables>) {
        return ApolloReactHooks.useQuery<GetClientSubEmployeeQuery, GetClientSubEmployeeQueryVariables>(GetClientSubEmployeeDocument, baseOptions);
      }
export function useGetClientSubEmployeeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetClientSubEmployeeQuery, GetClientSubEmployeeQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetClientSubEmployeeQuery, GetClientSubEmployeeQueryVariables>(GetClientSubEmployeeDocument, baseOptions);
        }
export type GetClientSubEmployeeQueryHookResult = ReturnType<typeof useGetClientSubEmployeeQuery>;
export type GetClientSubEmployeeLazyQueryHookResult = ReturnType<typeof useGetClientSubEmployeeLazyQuery>;
export type GetClientSubEmployeeQueryResult = ApolloReactCommon.QueryResult<GetClientSubEmployeeQuery, GetClientSubEmployeeQueryVariables>;
export const GetClientUserDataDocument = gql`
    query GetClientUserData {
  userData @client {
    id
    name
    email
  }
}
    `;

/**
 * __useGetClientUserDataQuery__
 *
 * To run a query within a React component, call `useGetClientUserDataQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetClientUserDataQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetClientUserDataQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetClientUserDataQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetClientUserDataQuery, GetClientUserDataQueryVariables>) {
        return ApolloReactHooks.useQuery<GetClientUserDataQuery, GetClientUserDataQueryVariables>(GetClientUserDataDocument, baseOptions);
      }
export function useGetClientUserDataLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetClientUserDataQuery, GetClientUserDataQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetClientUserDataQuery, GetClientUserDataQueryVariables>(GetClientUserDataDocument, baseOptions);
        }
export type GetClientUserDataQueryHookResult = ReturnType<typeof useGetClientUserDataQuery>;
export type GetClientUserDataLazyQueryHookResult = ReturnType<typeof useGetClientUserDataLazyQuery>;
export type GetClientUserDataQueryResult = ApolloReactCommon.QueryResult<GetClientUserDataQuery, GetClientUserDataQueryVariables>;
export const GetClientWorkerToolboxTalksDocument = gql`
    query getClientWorkerToolboxTalks {
  toolbox_talk(order_by: {created_at: desc}) {
    ...ToolboxTalkFragment
  }
}
    ${ToolboxTalkFragmentFragmentDoc}`;

/**
 * __useGetClientWorkerToolboxTalksQuery__
 *
 * To run a query within a React component, call `useGetClientWorkerToolboxTalksQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetClientWorkerToolboxTalksQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetClientWorkerToolboxTalksQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetClientWorkerToolboxTalksQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetClientWorkerToolboxTalksQuery, GetClientWorkerToolboxTalksQueryVariables>) {
        return ApolloReactHooks.useQuery<GetClientWorkerToolboxTalksQuery, GetClientWorkerToolboxTalksQueryVariables>(GetClientWorkerToolboxTalksDocument, baseOptions);
      }
export function useGetClientWorkerToolboxTalksLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetClientWorkerToolboxTalksQuery, GetClientWorkerToolboxTalksQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetClientWorkerToolboxTalksQuery, GetClientWorkerToolboxTalksQueryVariables>(GetClientWorkerToolboxTalksDocument, baseOptions);
        }
export type GetClientWorkerToolboxTalksQueryHookResult = ReturnType<typeof useGetClientWorkerToolboxTalksQuery>;
export type GetClientWorkerToolboxTalksLazyQueryHookResult = ReturnType<typeof useGetClientWorkerToolboxTalksLazyQuery>;
export type GetClientWorkerToolboxTalksQueryResult = ApolloReactCommon.QueryResult<GetClientWorkerToolboxTalksQuery, GetClientWorkerToolboxTalksQueryVariables>;
export const GetConfinedSpacePermitByPkDocument = gql`
    query GetConfinedSpacePermitByPk($permitId: uuid!) {
  permit_by_pk(id: $permitId) {
    id
    is_historical
    type
    project {
      id
      name
      address {
        ...AddressFragment
      }
      general_contractor {
        id
        name
        allow_permit_activation_location_change
      }
      permit_contact_project_employee {
        id
        employee {
          uid
          employee_title {
            id
            name {
              ...TextTranslationFrag
            }
          }
          user {
            id
            name
            phone_number
            email
          }
        }
      }
    }
    subcontractor {
      id
      name
    }
    images {
      id
      url
    }
    origin_permit_history {
      id
      permit_id
      comment {
        ...TextTranslationFrag
      }
      updated_location
      status
      created_at
      created_by_user {
        id
        name
      }
      images {
        id
        url
      }
    }
    permit_sign_in_images(order_by: {image: {sort_index: asc}}) {
      image {
        id
        url
      }
    }
    created_at
    updated_at
    current_status
    supervisorProjectWorkers: permit_project_workers(where: {type: {_eq: "supervisor"}}, order_by: {project_worker: {user: {name: asc}}}) {
      id
      type
      project_worker {
        ...ReportProjectWorkerFragment
      }
      signature_image {
        id
        url
      }
    }
    entrantProjectWorkers: permit_project_workers(where: {type: {_eq: "entrant"}}, order_by: {project_worker: {user: {name: asc}}}) {
      id
      type
      project_worker {
        ...ReportProjectWorkerFragment
      }
      signature_image {
        id
        url
      }
    }
    attendantProjectWorkers: permit_project_workers(where: {type: {_eq: "attendant"}}, order_by: {project_worker: {user: {name: asc}}}) {
      id
      type
      project_worker {
        ...ReportProjectWorkerFragment
      }
      signature_image {
        id
        url
      }
    }
    permit_checklist_items(order_by: {sort_index: asc}, where: {item_type: {_eq: "permit"}}) {
      ...PermitChecklistItemFragment
    }
    closing_checklist_items: permit_checklist_items(order_by: {sort_index: asc}, where: {item_type: {_eq: "closing"}}) {
      ...PermitChecklistItemFragment
    }
    permit_histories(order_by: {created_at: desc}) {
      id
      permit_id
      comment {
        ...TextTranslationFrag
      }
      updated_location
      status
      created_at
      created_by_user {
        id
        name
      }
      images {
        id
        url
      }
    }
    confined_space_permit {
      permit_id
      entry_date
      applicant_project_worker {
        ...ReportProjectWorkerFragment
      }
      work_duration
      work_location {
        ...TextTranslationFrag
      }
      work_description {
        ...TextTranslationFrag
      }
      confined_space_description {
        ...TextTranslationFrag
      }
      hazards_description {
        ...TextTranslationFrag
      }
      type
      expiry_date
      communication_procedure {
        ...TextTranslationFrag
      }
      equipment {
        ...TextTranslationFrag
      }
      rescue_plan {
        ...TextTranslationFrag
      }
      emergency_contact_employee {
        uid
        employee_title {
          id
          name {
            ...TextTranslationFrag
          }
        }
        user {
          id
          name
          phone_number
          email
        }
      }
      monitoring_equipment(order_by: {sort_index: asc}) {
        id
        make
        model
        serial_number
        factory_calibration_date
        calibrated_by
        sort_index
        field_calibration_date
        name
      }
      confined_space_permit_readings(order_by: {created_at: desc}) {
        id
        type
        created_at
        taken_at
        o2_percent
        submitted_at
        lower_explosive_limit
        co_ppm
        h2s_ppm
        taken_by_project_worker {
          ...ReportProjectWorkerFragment
        }
        signature_image {
          id
          url
        }
        images(order_by: {sort_index: asc}) {
          id
          url
          sort_index
        }
        custom_items(order_by: {sort_index: asc}) {
          id
          name
          type_id
          is_new
          unit_type
          value
          sort_index
        }
      }
    }
  }
}
    ${AddressFragmentFragmentDoc}
${TextTranslationFragFragmentDoc}
${ReportProjectWorkerFragmentFragmentDoc}
${PermitChecklistItemFragmentFragmentDoc}`;

/**
 * __useGetConfinedSpacePermitByPkQuery__
 *
 * To run a query within a React component, call `useGetConfinedSpacePermitByPkQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetConfinedSpacePermitByPkQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetConfinedSpacePermitByPkQuery({
 *   variables: {
 *      permitId: // value for 'permitId'
 *   },
 * });
 */
export function useGetConfinedSpacePermitByPkQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetConfinedSpacePermitByPkQuery, GetConfinedSpacePermitByPkQueryVariables>) {
        return ApolloReactHooks.useQuery<GetConfinedSpacePermitByPkQuery, GetConfinedSpacePermitByPkQueryVariables>(GetConfinedSpacePermitByPkDocument, baseOptions);
      }
export function useGetConfinedSpacePermitByPkLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetConfinedSpacePermitByPkQuery, GetConfinedSpacePermitByPkQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetConfinedSpacePermitByPkQuery, GetConfinedSpacePermitByPkQueryVariables>(GetConfinedSpacePermitByPkDocument, baseOptions);
        }
export type GetConfinedSpacePermitByPkQueryHookResult = ReturnType<typeof useGetConfinedSpacePermitByPkQuery>;
export type GetConfinedSpacePermitByPkLazyQueryHookResult = ReturnType<typeof useGetConfinedSpacePermitByPkLazyQuery>;
export type GetConfinedSpacePermitByPkQueryResult = ApolloReactCommon.QueryResult<GetConfinedSpacePermitByPkQuery, GetConfinedSpacePermitByPkQueryVariables>;
export const GetConfinedSpacePermitFormDocument = gql`
    query GetConfinedSpacePermitForm {
  confinedSpacePermitForm @client {
    selectedIsPermitted
  }
}
    `;

/**
 * __useGetConfinedSpacePermitFormQuery__
 *
 * To run a query within a React component, call `useGetConfinedSpacePermitFormQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetConfinedSpacePermitFormQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetConfinedSpacePermitFormQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetConfinedSpacePermitFormQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetConfinedSpacePermitFormQuery, GetConfinedSpacePermitFormQueryVariables>) {
        return ApolloReactHooks.useQuery<GetConfinedSpacePermitFormQuery, GetConfinedSpacePermitFormQueryVariables>(GetConfinedSpacePermitFormDocument, baseOptions);
      }
export function useGetConfinedSpacePermitFormLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetConfinedSpacePermitFormQuery, GetConfinedSpacePermitFormQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetConfinedSpacePermitFormQuery, GetConfinedSpacePermitFormQueryVariables>(GetConfinedSpacePermitFormDocument, baseOptions);
        }
export type GetConfinedSpacePermitFormQueryHookResult = ReturnType<typeof useGetConfinedSpacePermitFormQuery>;
export type GetConfinedSpacePermitFormLazyQueryHookResult = ReturnType<typeof useGetConfinedSpacePermitFormLazyQuery>;
export type GetConfinedSpacePermitFormQueryResult = ApolloReactCommon.QueryResult<GetConfinedSpacePermitFormQuery, GetConfinedSpacePermitFormQueryVariables>;
export const GetConfinedSpacePermitOptionsDocument = gql`
    query GetConfinedSpacePermitOptions($subcontractorId: uuid!) {
  respiratorTypes: select_option(where: {type: {_eq: respirator_type}, _or: [{subcontractor_id: {_is_null: true}}, {subcontractor_id: {_eq: $subcontractorId}}]}, order_by: {name: {en: asc}}) {
    id
    name {
      ...TextTranslationFrag
    }
  }
}
    ${TextTranslationFragFragmentDoc}`;

/**
 * __useGetConfinedSpacePermitOptionsQuery__
 *
 * To run a query within a React component, call `useGetConfinedSpacePermitOptionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetConfinedSpacePermitOptionsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetConfinedSpacePermitOptionsQuery({
 *   variables: {
 *      subcontractorId: // value for 'subcontractorId'
 *   },
 * });
 */
export function useGetConfinedSpacePermitOptionsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetConfinedSpacePermitOptionsQuery, GetConfinedSpacePermitOptionsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetConfinedSpacePermitOptionsQuery, GetConfinedSpacePermitOptionsQueryVariables>(GetConfinedSpacePermitOptionsDocument, baseOptions);
      }
export function useGetConfinedSpacePermitOptionsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetConfinedSpacePermitOptionsQuery, GetConfinedSpacePermitOptionsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetConfinedSpacePermitOptionsQuery, GetConfinedSpacePermitOptionsQueryVariables>(GetConfinedSpacePermitOptionsDocument, baseOptions);
        }
export type GetConfinedSpacePermitOptionsQueryHookResult = ReturnType<typeof useGetConfinedSpacePermitOptionsQuery>;
export type GetConfinedSpacePermitOptionsLazyQueryHookResult = ReturnType<typeof useGetConfinedSpacePermitOptionsLazyQuery>;
export type GetConfinedSpacePermitOptionsQueryResult = ApolloReactCommon.QueryResult<GetConfinedSpacePermitOptionsQuery, GetConfinedSpacePermitOptionsQueryVariables>;
export const GetCreateDailyReportFormDocument = gql`
    query GetCreateDailyReportForm {
  dailyReportForm @client {
    description
    projectWorkerIds
  }
}
    `;

/**
 * __useGetCreateDailyReportFormQuery__
 *
 * To run a query within a React component, call `useGetCreateDailyReportFormQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCreateDailyReportFormQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCreateDailyReportFormQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetCreateDailyReportFormQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetCreateDailyReportFormQuery, GetCreateDailyReportFormQueryVariables>) {
        return ApolloReactHooks.useQuery<GetCreateDailyReportFormQuery, GetCreateDailyReportFormQueryVariables>(GetCreateDailyReportFormDocument, baseOptions);
      }
export function useGetCreateDailyReportFormLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetCreateDailyReportFormQuery, GetCreateDailyReportFormQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetCreateDailyReportFormQuery, GetCreateDailyReportFormQueryVariables>(GetCreateDailyReportFormDocument, baseOptions);
        }
export type GetCreateDailyReportFormQueryHookResult = ReturnType<typeof useGetCreateDailyReportFormQuery>;
export type GetCreateDailyReportFormLazyQueryHookResult = ReturnType<typeof useGetCreateDailyReportFormLazyQuery>;
export type GetCreateDailyReportFormQueryResult = ApolloReactCommon.QueryResult<GetCreateDailyReportFormQuery, GetCreateDailyReportFormQueryVariables>;
export const GetCreateDailyReportInformationDocument = gql`
    query GetCreateDailyReportInformation($projectId: uuid!, $subcontractorId: uuid!) {
  dailyReportForm @client {
    description
  }
  dummy_query {
    code
  }
  project_worker(where: {deleted_at: {_is_null: true}, project_id: {_eq: $projectId}, subcontractor_id: {_eq: $subcontractorId}}, order_by: {worker: {user: {name: asc}}}) {
    ...ReportProjectWorkerFragment
  }
}
    ${ReportProjectWorkerFragmentFragmentDoc}`;

/**
 * __useGetCreateDailyReportInformationQuery__
 *
 * To run a query within a React component, call `useGetCreateDailyReportInformationQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCreateDailyReportInformationQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCreateDailyReportInformationQuery({
 *   variables: {
 *      projectId: // value for 'projectId'
 *      subcontractorId: // value for 'subcontractorId'
 *   },
 * });
 */
export function useGetCreateDailyReportInformationQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetCreateDailyReportInformationQuery, GetCreateDailyReportInformationQueryVariables>) {
        return ApolloReactHooks.useQuery<GetCreateDailyReportInformationQuery, GetCreateDailyReportInformationQueryVariables>(GetCreateDailyReportInformationDocument, baseOptions);
      }
export function useGetCreateDailyReportInformationLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetCreateDailyReportInformationQuery, GetCreateDailyReportInformationQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetCreateDailyReportInformationQuery, GetCreateDailyReportInformationQueryVariables>(GetCreateDailyReportInformationDocument, baseOptions);
        }
export type GetCreateDailyReportInformationQueryHookResult = ReturnType<typeof useGetCreateDailyReportInformationQuery>;
export type GetCreateDailyReportInformationLazyQueryHookResult = ReturnType<typeof useGetCreateDailyReportInformationLazyQuery>;
export type GetCreateDailyReportInformationQueryResult = ApolloReactCommon.QueryResult<GetCreateDailyReportInformationQuery, GetCreateDailyReportInformationQueryVariables>;
export const GetCreateReportInformationDocument = gql`
    query GetCreateReportInformation($projectId: uuid!, $awarenessCount: Int!, $subcontractorId: uuid!, $nowDate: timestamptz!) {
  reportForm @client {
    selectedTaskIds
    injuredProjectWorkerIds
    awarenessAnswers
    pictures {
      url
      description
    }
    fallText
    caughtText
    electrocutionText
    struckText
  }
  get_awareness_question(args: {num: $awarenessCount, sub_id: $subcontractorId}) {
    ...GetAwarenessQuestionFragment
  }
  project_hazard(where: {project_id: {_eq: $projectId}, expiry_date: {_gte: $nowDate}, project_hazard_subcontractors: {subcontractor: {id: {_eq: $subcontractorId}}}}, order_by: {created_at: desc}) {
    ...ProjectHazardFragment
  }
  task(where: {subcontractor_id: {_eq: $subcontractorId}, project_id: {_eq: $projectId}}, order_by: {description: {en: asc}}) {
    ...TaskFragment
  }
  project_worker(where: {deleted_at: {_is_null: true}, project_id: {_eq: $projectId}, subcontractor_id: {_eq: $subcontractorId}}, order_by: {worker: {user: {name: asc}}}) {
    ...ReportProjectWorkerFragment
  }
}
    ${GetAwarenessQuestionFragmentFragmentDoc}
${ProjectHazardFragmentFragmentDoc}
${TaskFragmentFragmentDoc}
${ReportProjectWorkerFragmentFragmentDoc}`;

/**
 * __useGetCreateReportInformationQuery__
 *
 * To run a query within a React component, call `useGetCreateReportInformationQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCreateReportInformationQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCreateReportInformationQuery({
 *   variables: {
 *      projectId: // value for 'projectId'
 *      awarenessCount: // value for 'awarenessCount'
 *      subcontractorId: // value for 'subcontractorId'
 *      nowDate: // value for 'nowDate'
 *   },
 * });
 */
export function useGetCreateReportInformationQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetCreateReportInformationQuery, GetCreateReportInformationQueryVariables>) {
        return ApolloReactHooks.useQuery<GetCreateReportInformationQuery, GetCreateReportInformationQueryVariables>(GetCreateReportInformationDocument, baseOptions);
      }
export function useGetCreateReportInformationLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetCreateReportInformationQuery, GetCreateReportInformationQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetCreateReportInformationQuery, GetCreateReportInformationQueryVariables>(GetCreateReportInformationDocument, baseOptions);
        }
export type GetCreateReportInformationQueryHookResult = ReturnType<typeof useGetCreateReportInformationQuery>;
export type GetCreateReportInformationLazyQueryHookResult = ReturnType<typeof useGetCreateReportInformationLazyQuery>;
export type GetCreateReportInformationQueryResult = ApolloReactCommon.QueryResult<GetCreateReportInformationQuery, GetCreateReportInformationQueryVariables>;
export const GetCreateToolboxTalksDataDocument = gql`
    query getCreateToolboxTalksData($projectId: uuid!, $subcontractorId: uuid!) {
  toolboxTalkForm @client {
    description
    imageUris
    ledByProjectWorkerId
  }
  dummy_query {
    code
  }
  project_worker(where: {deleted_at: {_is_null: true}, project_id: {_eq: $projectId}, subcontractor_id: {_eq: $subcontractorId}}, order_by: {worker: {user: {name: asc}}}) {
    ...ReportProjectWorkerFragment
  }
}
    ${ReportProjectWorkerFragmentFragmentDoc}`;

/**
 * __useGetCreateToolboxTalksDataQuery__
 *
 * To run a query within a React component, call `useGetCreateToolboxTalksDataQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCreateToolboxTalksDataQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCreateToolboxTalksDataQuery({
 *   variables: {
 *      projectId: // value for 'projectId'
 *      subcontractorId: // value for 'subcontractorId'
 *   },
 * });
 */
export function useGetCreateToolboxTalksDataQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetCreateToolboxTalksDataQuery, GetCreateToolboxTalksDataQueryVariables>) {
        return ApolloReactHooks.useQuery<GetCreateToolboxTalksDataQuery, GetCreateToolboxTalksDataQueryVariables>(GetCreateToolboxTalksDataDocument, baseOptions);
      }
export function useGetCreateToolboxTalksDataLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetCreateToolboxTalksDataQuery, GetCreateToolboxTalksDataQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetCreateToolboxTalksDataQuery, GetCreateToolboxTalksDataQueryVariables>(GetCreateToolboxTalksDataDocument, baseOptions);
        }
export type GetCreateToolboxTalksDataQueryHookResult = ReturnType<typeof useGetCreateToolboxTalksDataQuery>;
export type GetCreateToolboxTalksDataLazyQueryHookResult = ReturnType<typeof useGetCreateToolboxTalksDataLazyQuery>;
export type GetCreateToolboxTalksDataQueryResult = ApolloReactCommon.QueryResult<GetCreateToolboxTalksDataQuery, GetCreateToolboxTalksDataQueryVariables>;
export const GetCrewDocument = gql`
    query GetCrew($projectCrewId: uuid!, $selfProjectWorkerId: uuid!) {
  project_crew_by_pk(id: $projectCrewId) {
    id
    name
    subcontractor {
      id
      name
    }
    project_workers(where: {_not: {id: {_eq: $selfProjectWorkerId}}}) {
      id
      hard_hat_number
      title {
        ...WorkerTitleFrag
      }
      user {
        id
        name
        profile_picture {
          ...ImageFragment
        }
      }
    }
  }
}
    ${WorkerTitleFragFragmentDoc}
${ImageFragmentFragmentDoc}`;

/**
 * __useGetCrewQuery__
 *
 * To run a query within a React component, call `useGetCrewQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCrewQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCrewQuery({
 *   variables: {
 *      projectCrewId: // value for 'projectCrewId'
 *      selfProjectWorkerId: // value for 'selfProjectWorkerId'
 *   },
 * });
 */
export function useGetCrewQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetCrewQuery, GetCrewQueryVariables>) {
        return ApolloReactHooks.useQuery<GetCrewQuery, GetCrewQueryVariables>(GetCrewDocument, baseOptions);
      }
export function useGetCrewLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetCrewQuery, GetCrewQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetCrewQuery, GetCrewQueryVariables>(GetCrewDocument, baseOptions);
        }
export type GetCrewQueryHookResult = ReturnType<typeof useGetCrewQuery>;
export type GetCrewLazyQueryHookResult = ReturnType<typeof useGetCrewLazyQuery>;
export type GetCrewQueryResult = ApolloReactCommon.QueryResult<GetCrewQuery, GetCrewQueryVariables>;
export const GetCrewAddWorkerDocument = gql`
    query GetCrewAddWorker($projectId: uuid!, $subcontractorId: uuid!) {
  worker(where: {_not: {worker_projects: {project_id: {_eq: $projectId}, deleted_at: {_is_null: true}}}, subcontractor_id: {_eq: $subcontractorId}}, order_by: {user: {name: asc}}) {
    uid
    current_worker_role
    worker_title {
      ...WorkerTitleFrag
    }
    user {
      id
      name
      email
      profile_picture {
        id
        url
      }
    }
  }
}
    ${WorkerTitleFragFragmentDoc}`;

/**
 * __useGetCrewAddWorkerQuery__
 *
 * To run a query within a React component, call `useGetCrewAddWorkerQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCrewAddWorkerQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCrewAddWorkerQuery({
 *   variables: {
 *      projectId: // value for 'projectId'
 *      subcontractorId: // value for 'subcontractorId'
 *   },
 * });
 */
export function useGetCrewAddWorkerQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetCrewAddWorkerQuery, GetCrewAddWorkerQueryVariables>) {
        return ApolloReactHooks.useQuery<GetCrewAddWorkerQuery, GetCrewAddWorkerQueryVariables>(GetCrewAddWorkerDocument, baseOptions);
      }
export function useGetCrewAddWorkerLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetCrewAddWorkerQuery, GetCrewAddWorkerQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetCrewAddWorkerQuery, GetCrewAddWorkerQueryVariables>(GetCrewAddWorkerDocument, baseOptions);
        }
export type GetCrewAddWorkerQueryHookResult = ReturnType<typeof useGetCrewAddWorkerQuery>;
export type GetCrewAddWorkerLazyQueryHookResult = ReturnType<typeof useGetCrewAddWorkerLazyQuery>;
export type GetCrewAddWorkerQueryResult = ApolloReactCommon.QueryResult<GetCrewAddWorkerQuery, GetCrewAddWorkerQueryVariables>;
export const GetCrewSelfCertifyInformationDocument = gql`
    query GetCrewSelfCertifyInformation($subcontractorId: uuid, $projectId: uuid!, $restrictedSinceDate: timestamptz!) {
  crewSelfCertifyForm @client {
    passedWorkerIds
    failedWorkers {
      projectWorkerId
      failedQuestionId
    }
  }
  project_covid_config_by_pk(project_id: $projectId) {
    requirements {
      ...TextTranslationFrag
    }
    worker_restriction_length
    updated_at
    project {
      id
      name
      external_id
    }
    contact_project_employee {
      id
      employee {
        uid
        employee_title {
          id
          name {
            ...TextTranslationFrag
          }
        }
        user {
          id
          name
          email
          phone_number
        }
      }
    }
  }
  project_covid_yes_no_question(where: {project_id: {_eq: $projectId}, deleted_at: {_is_null: true}}, order_by: {question: {en: asc}}) {
    id
    answer_is_yes
    question {
      ...TextTranslationFrag
    }
  }
  project_worker(where: {deleted_at: {_is_null: true}, project_id: {_eq: $projectId}, subcontractor_id: {_eq: $subcontractorId}}, order_by: {worker: {user: {name: asc}}}) {
    ...ReportProjectWorkerFragment
    project_covid_tested_positives(where: {_not: {cleared_project_covid_tested_positive_worker: {}}, created_at: {_gte: $restrictedSinceDate}}) {
      id
    }
    project_covid_certifies(where: {_not: {cleared_project_covid_certify_worker: {}}, created_at: {_gte: $restrictedSinceDate}, project_covid_certified_worker_answers: {answered_yes: {_eq: true}}}) {
      id
    }
  }
}
    ${TextTranslationFragFragmentDoc}
${ReportProjectWorkerFragmentFragmentDoc}`;

/**
 * __useGetCrewSelfCertifyInformationQuery__
 *
 * To run a query within a React component, call `useGetCrewSelfCertifyInformationQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCrewSelfCertifyInformationQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCrewSelfCertifyInformationQuery({
 *   variables: {
 *      subcontractorId: // value for 'subcontractorId'
 *      projectId: // value for 'projectId'
 *      restrictedSinceDate: // value for 'restrictedSinceDate'
 *   },
 * });
 */
export function useGetCrewSelfCertifyInformationQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetCrewSelfCertifyInformationQuery, GetCrewSelfCertifyInformationQueryVariables>) {
        return ApolloReactHooks.useQuery<GetCrewSelfCertifyInformationQuery, GetCrewSelfCertifyInformationQueryVariables>(GetCrewSelfCertifyInformationDocument, baseOptions);
      }
export function useGetCrewSelfCertifyInformationLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetCrewSelfCertifyInformationQuery, GetCrewSelfCertifyInformationQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetCrewSelfCertifyInformationQuery, GetCrewSelfCertifyInformationQueryVariables>(GetCrewSelfCertifyInformationDocument, baseOptions);
        }
export type GetCrewSelfCertifyInformationQueryHookResult = ReturnType<typeof useGetCrewSelfCertifyInformationQuery>;
export type GetCrewSelfCertifyInformationLazyQueryHookResult = ReturnType<typeof useGetCrewSelfCertifyInformationLazyQuery>;
export type GetCrewSelfCertifyInformationQueryResult = ApolloReactCommon.QueryResult<GetCrewSelfCertifyInformationQuery, GetCrewSelfCertifyInformationQueryVariables>;
export const GetCurrentWorkerTasksDocument = gql`
    query getCurrentWorkerTasks {
  task(order_by: {description: {en: asc}}) {
    ...TaskFragment
  }
}
    ${TaskFragmentFragmentDoc}`;

/**
 * __useGetCurrentWorkerTasksQuery__
 *
 * To run a query within a React component, call `useGetCurrentWorkerTasksQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCurrentWorkerTasksQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCurrentWorkerTasksQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetCurrentWorkerTasksQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetCurrentWorkerTasksQuery, GetCurrentWorkerTasksQueryVariables>) {
        return ApolloReactHooks.useQuery<GetCurrentWorkerTasksQuery, GetCurrentWorkerTasksQueryVariables>(GetCurrentWorkerTasksDocument, baseOptions);
      }
export function useGetCurrentWorkerTasksLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetCurrentWorkerTasksQuery, GetCurrentWorkerTasksQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetCurrentWorkerTasksQuery, GetCurrentWorkerTasksQueryVariables>(GetCurrentWorkerTasksDocument, baseOptions);
        }
export type GetCurrentWorkerTasksQueryHookResult = ReturnType<typeof useGetCurrentWorkerTasksQuery>;
export type GetCurrentWorkerTasksLazyQueryHookResult = ReturnType<typeof useGetCurrentWorkerTasksLazyQuery>;
export type GetCurrentWorkerTasksQueryResult = ApolloReactCommon.QueryResult<GetCurrentWorkerTasksQuery, GetCurrentWorkerTasksQueryVariables>;
export const GetDailyReportsDocument = gql`
    query GetDailyReports($where: daily_report_bool_exp, $limit: Int, $offset: Int) {
  daily_report(where: $where, limit: $limit, offset: $offset, order_by: {created_at: desc}) {
    ...DailyReportFragment
  }
  daily_report_aggregate(where: $where) {
    aggregate {
      count
    }
  }
}
    ${DailyReportFragmentFragmentDoc}`;

/**
 * __useGetDailyReportsQuery__
 *
 * To run a query within a React component, call `useGetDailyReportsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetDailyReportsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetDailyReportsQuery({
 *   variables: {
 *      where: // value for 'where'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetDailyReportsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetDailyReportsQuery, GetDailyReportsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetDailyReportsQuery, GetDailyReportsQueryVariables>(GetDailyReportsDocument, baseOptions);
      }
export function useGetDailyReportsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetDailyReportsQuery, GetDailyReportsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetDailyReportsQuery, GetDailyReportsQueryVariables>(GetDailyReportsDocument, baseOptions);
        }
export type GetDailyReportsQueryHookResult = ReturnType<typeof useGetDailyReportsQuery>;
export type GetDailyReportsLazyQueryHookResult = ReturnType<typeof useGetDailyReportsLazyQuery>;
export type GetDailyReportsQueryResult = ApolloReactCommon.QueryResult<GetDailyReportsQuery, GetDailyReportsQueryVariables>;
export const GetDailyReportByPkDocument = gql`
    query GetDailyReportByPk($dailyReportId: uuid!) {
  daily_report_by_pk(id: $dailyReportId) {
    ...DailyReportFragment
  }
}
    ${DailyReportFragmentFragmentDoc}`;

/**
 * __useGetDailyReportByPkQuery__
 *
 * To run a query within a React component, call `useGetDailyReportByPkQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetDailyReportByPkQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetDailyReportByPkQuery({
 *   variables: {
 *      dailyReportId: // value for 'dailyReportId'
 *   },
 * });
 */
export function useGetDailyReportByPkQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetDailyReportByPkQuery, GetDailyReportByPkQueryVariables>) {
        return ApolloReactHooks.useQuery<GetDailyReportByPkQuery, GetDailyReportByPkQueryVariables>(GetDailyReportByPkDocument, baseOptions);
      }
export function useGetDailyReportByPkLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetDailyReportByPkQuery, GetDailyReportByPkQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetDailyReportByPkQuery, GetDailyReportByPkQueryVariables>(GetDailyReportByPkDocument, baseOptions);
        }
export type GetDailyReportByPkQueryHookResult = ReturnType<typeof useGetDailyReportByPkQuery>;
export type GetDailyReportByPkLazyQueryHookResult = ReturnType<typeof useGetDailyReportByPkLazyQuery>;
export type GetDailyReportByPkQueryResult = ApolloReactCommon.QueryResult<GetDailyReportByPkQuery, GetDailyReportByPkQueryVariables>;
export const GetDigPermitByPkDocument = gql`
    query GetDigPermitByPk($permitId: uuid!) {
  permit_by_pk(id: $permitId) {
    id
    is_historical
    type
    project {
      id
      name
      address {
        ...AddressFragment
      }
      general_contractor {
        id
        name
        allow_permit_activation_location_change
      }
      permit_contact_project_employee {
        id
        employee {
          uid
          employee_title {
            id
            name {
              ...TextTranslationFrag
            }
          }
          user {
            id
            name
            phone_number
            email
          }
        }
      }
    }
    subcontractor {
      id
      name
    }
    images(where: {type: {_is_null: true}}) {
      id
      url
    }
    origin_permit_history {
      id
      permit_id
      comment {
        ...TextTranslationFrag
      }
      updated_location
      status
      created_at
      created_by_user {
        id
        name
      }
      images {
        id
        url
      }
    }
    permit_sign_in_images(order_by: {image: {sort_index: asc}}) {
      image {
        id
        url
      }
    }
    created_at
    updated_at
    current_status
    supervisorProjectWorkers: permit_project_workers(where: {type: {_eq: "supervisor"}}, order_by: {project_worker: {user: {name: asc}}}) {
      id
      type
      project_worker {
        ...ReportProjectWorkerFragment
      }
      signature_image {
        id
        url
      }
    }
    workingProjectWorkers: permit_project_workers(where: {type: {_eq: "working"}}, order_by: {project_worker: {user: {name: asc}}}) {
      id
      type
      project_worker {
        ...ReportProjectWorkerFragment
      }
      signature_image {
        id
        url
      }
    }
    permit_checklist_items(order_by: {sort_index: asc}, where: {item_type: {_eq: "permit"}}) {
      ...PermitChecklistItemFragment
    }
    closing_checklist_items: permit_checklist_items(order_by: {sort_index: asc}, where: {item_type: {_eq: "closing"}}) {
      ...PermitChecklistItemFragment
    }
    permit_histories(order_by: {created_at: desc}) {
      id
      permit_id
      comment {
        ...TextTranslationFrag
      }
      updated_location
      status
      created_at
      created_by_user {
        id
        name
      }
      images {
        id
        url
      }
    }
    dig_permit {
      permit_id
      work_start_at
      work_duration
      work_location {
        ...TextTranslationFrag
      }
      work_description {
        ...TextTranslationFrag
      }
      excavation_deeper_20_feet
      soil_type {
        ...SelectOptionFrag
        ...SelectOptionFrag
      }
      did_utility_locates
      utilities_identified
      used_protection_system
      applicant_project_worker {
        ...ReportProjectWorkerFragment
      }
      soil_type {
        ...SelectOptionFrag
      }
      engineeredProtectionSystemImages: images(where: {type: {_eq: dig_engineered_protection_system}}) {
        id
        url
      }
      dig_permit_tickets(order_by: {sort_index: asc}) {
        id
        public_or_private
        ticket_number
        date_locate_performed
        company_name
      }
      excavationTypes: dig_permit_select_options(where: {select_option: {type: {_eq: excavation_type}}}, order_by: {select_option: {name: {en: asc}}}) {
        select_option {
          ...SelectOptionFrag
        }
      }
      protectionSystemTypes: dig_permit_select_options(where: {select_option: {type: {_eq: protection_system_type}}}, order_by: {select_option: {name: {en: asc}}}) {
        select_option {
          ...SelectOptionFrag
        }
      }
      utilityIdentifyingMethods: dig_permit_select_options(where: {select_option: {type: {_eq: utility_identifying_method}}}, order_by: {select_option: {name: {en: asc}}}) {
        select_option {
          ...SelectOptionFrag
        }
      }
      utilityTypes: dig_permit_select_options(where: {select_option: {type: {_eq: utility_type}}}, order_by: {select_option: {name: {en: asc}}}) {
        select_option {
          ...SelectOptionFrag
        }
      }
    }
  }
}
    ${AddressFragmentFragmentDoc}
${TextTranslationFragFragmentDoc}
${ReportProjectWorkerFragmentFragmentDoc}
${PermitChecklistItemFragmentFragmentDoc}
${SelectOptionFragFragmentDoc}`;

/**
 * __useGetDigPermitByPkQuery__
 *
 * To run a query within a React component, call `useGetDigPermitByPkQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetDigPermitByPkQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetDigPermitByPkQuery({
 *   variables: {
 *      permitId: // value for 'permitId'
 *   },
 * });
 */
export function useGetDigPermitByPkQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetDigPermitByPkQuery, GetDigPermitByPkQueryVariables>) {
        return ApolloReactHooks.useQuery<GetDigPermitByPkQuery, GetDigPermitByPkQueryVariables>(GetDigPermitByPkDocument, baseOptions);
      }
export function useGetDigPermitByPkLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetDigPermitByPkQuery, GetDigPermitByPkQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetDigPermitByPkQuery, GetDigPermitByPkQueryVariables>(GetDigPermitByPkDocument, baseOptions);
        }
export type GetDigPermitByPkQueryHookResult = ReturnType<typeof useGetDigPermitByPkQuery>;
export type GetDigPermitByPkLazyQueryHookResult = ReturnType<typeof useGetDigPermitByPkLazyQuery>;
export type GetDigPermitByPkQueryResult = ApolloReactCommon.QueryResult<GetDigPermitByPkQuery, GetDigPermitByPkQueryVariables>;
export const GetDigPermitOptionsDocument = gql`
    query GetDigPermitOptions($subcontractorId: uuid!) {
  excavationTypes: select_option(where: {type: {_eq: excavation_type}, _or: [{subcontractor_id: {_is_null: true}}, {subcontractor_id: {_eq: $subcontractorId}}]}, order_by: {name: {en: asc}}) {
    ...SelectOptionFrag
  }
  utilityIdentifyingMethods: select_option(where: {type: {_eq: utility_identifying_method}, _or: [{subcontractor_id: {_is_null: true}}, {subcontractor_id: {_eq: $subcontractorId}}]}, order_by: {name: {en: asc}}) {
    ...SelectOptionFrag
  }
  utilityTypes: select_option(where: {type: {_eq: utility_type}, _or: [{subcontractor_id: {_is_null: true}}, {subcontractor_id: {_eq: $subcontractorId}}]}, order_by: {name: {en: asc}}) {
    ...SelectOptionFrag
  }
  soilTypes: select_option(where: {type: {_eq: soil_type}}, order_by: {name: {en: asc}}) {
    ...SelectOptionFrag
  }
  protectionSystemTypes: select_option(where: {type: {_eq: protection_system_type}, _or: [{subcontractor_id: {_is_null: true}}, {subcontractor_id: {_eq: $subcontractorId}}]}, order_by: {name: {en: asc}}) {
    ...SelectOptionFrag
  }
}
    ${SelectOptionFragFragmentDoc}`;

/**
 * __useGetDigPermitOptionsQuery__
 *
 * To run a query within a React component, call `useGetDigPermitOptionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetDigPermitOptionsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetDigPermitOptionsQuery({
 *   variables: {
 *      subcontractorId: // value for 'subcontractorId'
 *   },
 * });
 */
export function useGetDigPermitOptionsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetDigPermitOptionsQuery, GetDigPermitOptionsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetDigPermitOptionsQuery, GetDigPermitOptionsQueryVariables>(GetDigPermitOptionsDocument, baseOptions);
      }
export function useGetDigPermitOptionsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetDigPermitOptionsQuery, GetDigPermitOptionsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetDigPermitOptionsQuery, GetDigPermitOptionsQueryVariables>(GetDigPermitOptionsDocument, baseOptions);
        }
export type GetDigPermitOptionsQueryHookResult = ReturnType<typeof useGetDigPermitOptionsQuery>;
export type GetDigPermitOptionsLazyQueryHookResult = ReturnType<typeof useGetDigPermitOptionsLazyQuery>;
export type GetDigPermitOptionsQueryResult = ApolloReactCommon.QueryResult<GetDigPermitOptionsQuery, GetDigPermitOptionsQueryVariables>;
export const GetEmployeeCovidWorkersDocument = gql`
    query GetEmployeeCovidWorkers($projectId: uuid!, $endDate: timestamptz, $startDate: timestamptz, $restrictedSinceDate: timestamptz) {
  testedPositive: project_covid_tested_positive_worker(where: {project_worker: {project_id: {_eq: $projectId}}, created_at: {_gte: $restrictedSinceDate}}, order_by: {created_at: desc}) {
    id
    external_id
    created_at
    cleared_at
    project_worker {
      hard_hat_number
      user {
        name
      }
      subcontractor {
        name
      }
    }
  }
  covidGuests: project_covid_guest_certification(where: {project_id: {_eq: $projectId}, created_at: {_gte: $restrictedSinceDate}, _or: [{passed: {_eq: false}}, {created_at: {_gte: $startDate}}]}, order_by: [{created_at: desc}]) {
    id
    name
    company_name
    created_at
    passed
    subcontractor {
      name
    }
  }
  covidWorkers: project_covid_certify_worker(where: {project_worker: {project_id: {_eq: $projectId}}, created_at: {_gte: $restrictedSinceDate}, _or: [{passed: {_eq: false}}, {created_at: {_gte: $startDate}}]}, order_by: [{project_worker: {user: {name: asc}}}, {created_at: desc}]) {
    id
    external_id
    created_at
    cleared_at
    passed
    project_worker {
      hard_hat_number
      user {
        name
      }
      subcontractor {
        name
      }
    }
  }
}
    `;

/**
 * __useGetEmployeeCovidWorkersQuery__
 *
 * To run a query within a React component, call `useGetEmployeeCovidWorkersQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEmployeeCovidWorkersQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEmployeeCovidWorkersQuery({
 *   variables: {
 *      projectId: // value for 'projectId'
 *      endDate: // value for 'endDate'
 *      startDate: // value for 'startDate'
 *      restrictedSinceDate: // value for 'restrictedSinceDate'
 *   },
 * });
 */
export function useGetEmployeeCovidWorkersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetEmployeeCovidWorkersQuery, GetEmployeeCovidWorkersQueryVariables>) {
        return ApolloReactHooks.useQuery<GetEmployeeCovidWorkersQuery, GetEmployeeCovidWorkersQueryVariables>(GetEmployeeCovidWorkersDocument, baseOptions);
      }
export function useGetEmployeeCovidWorkersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetEmployeeCovidWorkersQuery, GetEmployeeCovidWorkersQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetEmployeeCovidWorkersQuery, GetEmployeeCovidWorkersQueryVariables>(GetEmployeeCovidWorkersDocument, baseOptions);
        }
export type GetEmployeeCovidWorkersQueryHookResult = ReturnType<typeof useGetEmployeeCovidWorkersQuery>;
export type GetEmployeeCovidWorkersLazyQueryHookResult = ReturnType<typeof useGetEmployeeCovidWorkersLazyQuery>;
export type GetEmployeeCovidWorkersQueryResult = ApolloReactCommon.QueryResult<GetEmployeeCovidWorkersQuery, GetEmployeeCovidWorkersQueryVariables>;
export const GetEmployeeDailyReportsDocument = gql`
    query GetEmployeeDailyReports($projectId: uuid!) {
  daily_report(where: {project_id: {_eq: $projectId}}) {
    ...DailyReportFragment
  }
}
    ${DailyReportFragmentFragmentDoc}`;

/**
 * __useGetEmployeeDailyReportsQuery__
 *
 * To run a query within a React component, call `useGetEmployeeDailyReportsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEmployeeDailyReportsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEmployeeDailyReportsQuery({
 *   variables: {
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useGetEmployeeDailyReportsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetEmployeeDailyReportsQuery, GetEmployeeDailyReportsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetEmployeeDailyReportsQuery, GetEmployeeDailyReportsQueryVariables>(GetEmployeeDailyReportsDocument, baseOptions);
      }
export function useGetEmployeeDailyReportsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetEmployeeDailyReportsQuery, GetEmployeeDailyReportsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetEmployeeDailyReportsQuery, GetEmployeeDailyReportsQueryVariables>(GetEmployeeDailyReportsDocument, baseOptions);
        }
export type GetEmployeeDailyReportsQueryHookResult = ReturnType<typeof useGetEmployeeDailyReportsQuery>;
export type GetEmployeeDailyReportsLazyQueryHookResult = ReturnType<typeof useGetEmployeeDailyReportsLazyQuery>;
export type GetEmployeeDailyReportsQueryResult = ApolloReactCommon.QueryResult<GetEmployeeDailyReportsQuery, GetEmployeeDailyReportsQueryVariables>;
export const GetEmployeeHazardsDocument = gql`
    query GetEmployeeHazards($projectId: uuid!, $nowDate: timestamptz!) {
  activeHazards: project_hazard(where: {project_id: {_eq: $projectId}, expiry_date: {_gte: $nowDate}}, order_by: {created_at: desc}) {
    ...ProjectHazardFragment
  }
  expiredHazards: project_hazard(where: {project_id: {_eq: $projectId}, expiry_date: {_lt: $nowDate}}, order_by: {created_at: desc}) {
    ...ProjectHazardFragment
  }
}
    ${ProjectHazardFragmentFragmentDoc}`;

/**
 * __useGetEmployeeHazardsQuery__
 *
 * To run a query within a React component, call `useGetEmployeeHazardsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEmployeeHazardsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEmployeeHazardsQuery({
 *   variables: {
 *      projectId: // value for 'projectId'
 *      nowDate: // value for 'nowDate'
 *   },
 * });
 */
export function useGetEmployeeHazardsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetEmployeeHazardsQuery, GetEmployeeHazardsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetEmployeeHazardsQuery, GetEmployeeHazardsQueryVariables>(GetEmployeeHazardsDocument, baseOptions);
      }
export function useGetEmployeeHazardsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetEmployeeHazardsQuery, GetEmployeeHazardsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetEmployeeHazardsQuery, GetEmployeeHazardsQueryVariables>(GetEmployeeHazardsDocument, baseOptions);
        }
export type GetEmployeeHazardsQueryHookResult = ReturnType<typeof useGetEmployeeHazardsQuery>;
export type GetEmployeeHazardsLazyQueryHookResult = ReturnType<typeof useGetEmployeeHazardsLazyQuery>;
export type GetEmployeeHazardsQueryResult = ApolloReactCommon.QueryResult<GetEmployeeHazardsQuery, GetEmployeeHazardsQueryVariables>;
export const GetEmployeeInitialDataDocument = gql`
    query GetEmployeeInitialData($uid: uuid!) {
  user_by_pk(id: $uid) {
    id
    name
    role
    username
    email
    phone_number
    lang
    user_saved_emails(order_by: {email: asc}) {
      id
      email
    }
    employee {
      ...GCEmployeeFrag
      general_contractor {
        id
        name
      }
      employee_projects {
        id
        employee {
          uid
          general_contractor {
            id
            name
          }
        }
        project {
          id
          external_id
          name
          general_contractor {
            id
            name
          }
          address {
            ...AddressFragment
          }
          project_covid_config {
            project_id
            requirements {
              ...TextTranslationFrag
            }
            worker_restriction_length
          }
        }
      }
    }
  }
}
    ${GcEmployeeFragFragmentDoc}
${AddressFragmentFragmentDoc}
${TextTranslationFragFragmentDoc}`;

/**
 * __useGetEmployeeInitialDataQuery__
 *
 * To run a query within a React component, call `useGetEmployeeInitialDataQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEmployeeInitialDataQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEmployeeInitialDataQuery({
 *   variables: {
 *      uid: // value for 'uid'
 *   },
 * });
 */
export function useGetEmployeeInitialDataQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetEmployeeInitialDataQuery, GetEmployeeInitialDataQueryVariables>) {
        return ApolloReactHooks.useQuery<GetEmployeeInitialDataQuery, GetEmployeeInitialDataQueryVariables>(GetEmployeeInitialDataDocument, baseOptions);
      }
export function useGetEmployeeInitialDataLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetEmployeeInitialDataQuery, GetEmployeeInitialDataQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetEmployeeInitialDataQuery, GetEmployeeInitialDataQueryVariables>(GetEmployeeInitialDataDocument, baseOptions);
        }
export type GetEmployeeInitialDataQueryHookResult = ReturnType<typeof useGetEmployeeInitialDataQuery>;
export type GetEmployeeInitialDataLazyQueryHookResult = ReturnType<typeof useGetEmployeeInitialDataLazyQuery>;
export type GetEmployeeInitialDataQueryResult = ApolloReactCommon.QueryResult<GetEmployeeInitialDataQuery, GetEmployeeInitialDataQueryVariables>;
export const GetEmployeeProjectsDocument = gql`
    query GetEmployeeProjects($employeeId: uuid!) {
  project(where: {project_employees: {employee_id: {_eq: $employeeId}}}, order_by: {name: asc}) {
    id
    name
    external_id
    general_contractor {
      id
      name
    }
    project_covid_config {
      project_id
      requirements_text
      requirements {
        ...TextTranslationFrag
      }
      worker_restriction_length
    }
    user_notifications_aggregate(where: {user_id: {_eq: $employeeId}, include_in_badge: {_eq: true}, cleared_at: {_is_null: true}}) {
      aggregate {
        count
      }
    }
  }
}
    ${TextTranslationFragFragmentDoc}`;

/**
 * __useGetEmployeeProjectsQuery__
 *
 * To run a query within a React component, call `useGetEmployeeProjectsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEmployeeProjectsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEmployeeProjectsQuery({
 *   variables: {
 *      employeeId: // value for 'employeeId'
 *   },
 * });
 */
export function useGetEmployeeProjectsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetEmployeeProjectsQuery, GetEmployeeProjectsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetEmployeeProjectsQuery, GetEmployeeProjectsQueryVariables>(GetEmployeeProjectsDocument, baseOptions);
      }
export function useGetEmployeeProjectsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetEmployeeProjectsQuery, GetEmployeeProjectsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetEmployeeProjectsQuery, GetEmployeeProjectsQueryVariables>(GetEmployeeProjectsDocument, baseOptions);
        }
export type GetEmployeeProjectsQueryHookResult = ReturnType<typeof useGetEmployeeProjectsQuery>;
export type GetEmployeeProjectsLazyQueryHookResult = ReturnType<typeof useGetEmployeeProjectsLazyQuery>;
export type GetEmployeeProjectsQueryResult = ApolloReactCommon.QueryResult<GetEmployeeProjectsQuery, GetEmployeeProjectsQueryVariables>;
export const GetEmployeeReportsDocument = gql`
    query GetEmployeeReports($projectId: uuid!, $subcontractorId: uuid, $datelt: timestamptz, $dategte: timestamptz) {
  report(where: {project_id: {_eq: $projectId}, submitter_project_worker: {subcontractor_id: {_eq: $subcontractorId}}, created_at: {_lt: $datelt, _gte: $dategte}}) {
    ...ReportFragment
  }
}
    ${ReportFragmentFragmentDoc}`;

/**
 * __useGetEmployeeReportsQuery__
 *
 * To run a query within a React component, call `useGetEmployeeReportsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEmployeeReportsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEmployeeReportsQuery({
 *   variables: {
 *      projectId: // value for 'projectId'
 *      subcontractorId: // value for 'subcontractorId'
 *      datelt: // value for 'datelt'
 *      dategte: // value for 'dategte'
 *   },
 * });
 */
export function useGetEmployeeReportsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetEmployeeReportsQuery, GetEmployeeReportsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetEmployeeReportsQuery, GetEmployeeReportsQueryVariables>(GetEmployeeReportsDocument, baseOptions);
      }
export function useGetEmployeeReportsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetEmployeeReportsQuery, GetEmployeeReportsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetEmployeeReportsQuery, GetEmployeeReportsQueryVariables>(GetEmployeeReportsDocument, baseOptions);
        }
export type GetEmployeeReportsQueryHookResult = ReturnType<typeof useGetEmployeeReportsQuery>;
export type GetEmployeeReportsLazyQueryHookResult = ReturnType<typeof useGetEmployeeReportsLazyQuery>;
export type GetEmployeeReportsQueryResult = ApolloReactCommon.QueryResult<GetEmployeeReportsQuery, GetEmployeeReportsQueryVariables>;
export const GetEmployeeToolboxTalksDocument = gql`
    query GetEmployeeToolboxTalks($projectId: uuid!, $subcontractorId: uuid, $datelt: timestamptz, $dategte: timestamptz) {
  toolbox_talk(where: {project_id: {_eq: $projectId}, submitter_project_worker: {worker: {subcontractor_id: {_eq: $subcontractorId}}}, created_at: {_lt: $datelt, _gt: $dategte}}) {
    ...ToolboxTalkFragment
  }
}
    ${ToolboxTalkFragmentFragmentDoc}`;

/**
 * __useGetEmployeeToolboxTalksQuery__
 *
 * To run a query within a React component, call `useGetEmployeeToolboxTalksQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEmployeeToolboxTalksQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEmployeeToolboxTalksQuery({
 *   variables: {
 *      projectId: // value for 'projectId'
 *      subcontractorId: // value for 'subcontractorId'
 *      datelt: // value for 'datelt'
 *      dategte: // value for 'dategte'
 *   },
 * });
 */
export function useGetEmployeeToolboxTalksQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetEmployeeToolboxTalksQuery, GetEmployeeToolboxTalksQueryVariables>) {
        return ApolloReactHooks.useQuery<GetEmployeeToolboxTalksQuery, GetEmployeeToolboxTalksQueryVariables>(GetEmployeeToolboxTalksDocument, baseOptions);
      }
export function useGetEmployeeToolboxTalksLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetEmployeeToolboxTalksQuery, GetEmployeeToolboxTalksQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetEmployeeToolboxTalksQuery, GetEmployeeToolboxTalksQueryVariables>(GetEmployeeToolboxTalksDocument, baseOptions);
        }
export type GetEmployeeToolboxTalksQueryHookResult = ReturnType<typeof useGetEmployeeToolboxTalksQuery>;
export type GetEmployeeToolboxTalksLazyQueryHookResult = ReturnType<typeof useGetEmployeeToolboxTalksLazyQuery>;
export type GetEmployeeToolboxTalksQueryResult = ApolloReactCommon.QueryResult<GetEmployeeToolboxTalksQuery, GetEmployeeToolboxTalksQueryVariables>;
export const GetEmployeeWorkersScreenDocument = gql`
    query GetEmployeeWorkersScreen($projectId: uuid!) {
  pendingProjectWorkers: project_worker(where: {deleted_at: {_is_null: true}, project_id: {_eq: $projectId}, _not: {orientation_signature_image: {}}}, order_by: {user: {name: asc}}) {
    ...ProjectWorkerFragment
  }
  project_worker(where: {deleted_at: {_is_null: true}, project_id: {_eq: $projectId}}, order_by: {user: {name: asc}}) {
    ...ProjectWorkerFragment
  }
  project_subcontractor(where: {project_id: {_eq: $projectId}}, order_by: {subcontractor: {name: asc}}) {
    subcontractor {
      id
      name
      project_workers_aggregate(where: {project_id: {_eq: $projectId}}) {
        aggregate {
          count
        }
      }
    }
  }
}
    ${ProjectWorkerFragmentFragmentDoc}`;

/**
 * __useGetEmployeeWorkersScreenQuery__
 *
 * To run a query within a React component, call `useGetEmployeeWorkersScreenQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEmployeeWorkersScreenQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEmployeeWorkersScreenQuery({
 *   variables: {
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useGetEmployeeWorkersScreenQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetEmployeeWorkersScreenQuery, GetEmployeeWorkersScreenQueryVariables>) {
        return ApolloReactHooks.useQuery<GetEmployeeWorkersScreenQuery, GetEmployeeWorkersScreenQueryVariables>(GetEmployeeWorkersScreenDocument, baseOptions);
      }
export function useGetEmployeeWorkersScreenLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetEmployeeWorkersScreenQuery, GetEmployeeWorkersScreenQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetEmployeeWorkersScreenQuery, GetEmployeeWorkersScreenQueryVariables>(GetEmployeeWorkersScreenDocument, baseOptions);
        }
export type GetEmployeeWorkersScreenQueryHookResult = ReturnType<typeof useGetEmployeeWorkersScreenQuery>;
export type GetEmployeeWorkersScreenLazyQueryHookResult = ReturnType<typeof useGetEmployeeWorkersScreenLazyQuery>;
export type GetEmployeeWorkersScreenQueryResult = ApolloReactCommon.QueryResult<GetEmployeeWorkersScreenQuery, GetEmployeeWorkersScreenQueryVariables>;
export const GetGcAddTodoAssigneesDocument = gql`
    query GetGCAddTodoAssignees($todoId: uuid!) {
  general_contractor_employee(where: {employee_projects: {project: {todos: {id: {_eq: $todoId}}}}, _not: {project_users: {todo_assignees: {todo_id: {_eq: $todoId}}}}}, order_by: [{user: {name: asc}}]) {
    ...GCEmployeeFrag
  }
  foremen: project_worker(where: {deleted_at: {_is_null: true}, worker_role: {_eq: "foreman"}, project: {todos: {id: {_eq: $todoId}}}, _not: {project_users: {todo_assignees: {todo_id: {_eq: $todoId}}}}}, order_by: [{user: {name: asc}}]) {
    ...ReportProjectWorkerFragment
  }
  project_subcontractor(where: {project: {todos: {id: {_eq: $todoId}}}}, order_by: [{subcontractor: {name: asc}}]) {
    subcontractor {
      id
      name
      trade {
        id
        name
      }
    }
    project_workers(where: {_not: {project_users: {todo_assignees: {todo_id: {_eq: $todoId}}}}}, order_by: [{user: {name: asc}}]) {
      ...ReportProjectWorkerFragment
    }
  }
}
    ${GcEmployeeFragFragmentDoc}
${ReportProjectWorkerFragmentFragmentDoc}`;

/**
 * __useGetGcAddTodoAssigneesQuery__
 *
 * To run a query within a React component, call `useGetGcAddTodoAssigneesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetGcAddTodoAssigneesQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetGcAddTodoAssigneesQuery({
 *   variables: {
 *      todoId: // value for 'todoId'
 *   },
 * });
 */
export function useGetGcAddTodoAssigneesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetGcAddTodoAssigneesQuery, GetGcAddTodoAssigneesQueryVariables>) {
        return ApolloReactHooks.useQuery<GetGcAddTodoAssigneesQuery, GetGcAddTodoAssigneesQueryVariables>(GetGcAddTodoAssigneesDocument, baseOptions);
      }
export function useGetGcAddTodoAssigneesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetGcAddTodoAssigneesQuery, GetGcAddTodoAssigneesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetGcAddTodoAssigneesQuery, GetGcAddTodoAssigneesQueryVariables>(GetGcAddTodoAssigneesDocument, baseOptions);
        }
export type GetGcAddTodoAssigneesQueryHookResult = ReturnType<typeof useGetGcAddTodoAssigneesQuery>;
export type GetGcAddTodoAssigneesLazyQueryHookResult = ReturnType<typeof useGetGcAddTodoAssigneesLazyQuery>;
export type GetGcAddTodoAssigneesQueryResult = ApolloReactCommon.QueryResult<GetGcAddTodoAssigneesQuery, GetGcAddTodoAssigneesQueryVariables>;
export const GetGcCreateDirectMessageDocument = gql`
    query GetGCCreateDirectMessage($uid: uuid!, $projectId: uuid!) {
  general_contractor_employee(where: {employee_projects: {project_id: {_eq: $projectId}}}, order_by: [{user: {name: asc}}]) {
    ...GCEmployeeFrag
    chat_members(where: {chat: {project_id: {_eq: $projectId}, type: {_eq: "direct_message"}, members: {general_contractor_employee_id: {_eq: $uid}}}}) {
      id
      chat {
        id
        members(where: {general_contractor_employee_id: {_eq: $uid}}) {
          id
        }
      }
    }
  }
  foremen: project_worker(where: {deleted_at: {_is_null: true}, worker_role: {_eq: "foreman"}, project_id: {_eq: $projectId}}, order_by: [{user: {name: asc}}]) {
    ...ReportProjectWorkerFragment
    chat_members(where: {chat: {project_id: {_eq: $projectId}, type: {_eq: "direct_message"}, members: {general_contractor_employee_id: {_eq: $uid}}}}) {
      id
      chat {
        id
        members(where: {general_contractor_employee_id: {_eq: $uid}}) {
          id
        }
      }
    }
  }
  project_subcontractor(where: {project_id: {_eq: $projectId}}, order_by: [{subcontractor: {name: asc}}]) {
    subcontractor {
      id
      name
      trade {
        id
        name
      }
    }
    project_workers(order_by: [{user: {name: asc}}]) {
      ...ReportProjectWorkerFragment
      chat_members(where: {chat: {project_id: {_eq: $projectId}, type: {_eq: "direct_message"}, members: {general_contractor_employee_id: {_eq: $uid}}}}) {
        id
        chat {
          id
          members(where: {general_contractor_employee_id: {_eq: $uid}}) {
            id
          }
        }
      }
    }
  }
}
    ${GcEmployeeFragFragmentDoc}
${ReportProjectWorkerFragmentFragmentDoc}`;

/**
 * __useGetGcCreateDirectMessageQuery__
 *
 * To run a query within a React component, call `useGetGcCreateDirectMessageQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetGcCreateDirectMessageQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetGcCreateDirectMessageQuery({
 *   variables: {
 *      uid: // value for 'uid'
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useGetGcCreateDirectMessageQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetGcCreateDirectMessageQuery, GetGcCreateDirectMessageQueryVariables>) {
        return ApolloReactHooks.useQuery<GetGcCreateDirectMessageQuery, GetGcCreateDirectMessageQueryVariables>(GetGcCreateDirectMessageDocument, baseOptions);
      }
export function useGetGcCreateDirectMessageLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetGcCreateDirectMessageQuery, GetGcCreateDirectMessageQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetGcCreateDirectMessageQuery, GetGcCreateDirectMessageQueryVariables>(GetGcCreateDirectMessageDocument, baseOptions);
        }
export type GetGcCreateDirectMessageQueryHookResult = ReturnType<typeof useGetGcCreateDirectMessageQuery>;
export type GetGcCreateDirectMessageLazyQueryHookResult = ReturnType<typeof useGetGcCreateDirectMessageLazyQuery>;
export type GetGcCreateDirectMessageQueryResult = ApolloReactCommon.QueryResult<GetGcCreateDirectMessageQuery, GetGcCreateDirectMessageQueryVariables>;
export const GetGcPermitsScreenDocument = gql`
    query GetGCPermitsScreen($projectId: uuid!, $startAt: timestamptz, $endAt: timestamptz, $subcontractorId: uuid) {
  open: permit(where: {project_id: {_eq: $projectId}, is_historical: {_eq: false}, updated_at: {_lt: $endAt, _gte: $startAt}, subcontractor_id: {_eq: $subcontractorId}, _or: [{current_status: {_eq: "rejected"}}, {current_status: {_eq: "approved"}}]}, order_by: [{updated_at: desc}]) {
    ...PermitSnippetFragment
  }
  pendingApproval: permit(where: {project_id: {_eq: $projectId}, is_historical: {_eq: false}, updated_at: {_lt: $endAt, _gte: $startAt}, subcontractor_id: {_eq: $subcontractorId}, _or: [{current_status: {_eq: "submitted"}}, {current_status: {_eq: "resubmitted"}}]}, order_by: [{updated_at: desc}]) {
    ...PermitSnippetFragment
  }
  closed: permit(where: {project_id: {_eq: $projectId}, is_historical: {_eq: false}, updated_at: {_lt: $endAt, _gte: $startAt}, subcontractor_id: {_eq: $subcontractorId}, current_status: {_eq: "closed"}}, order_by: [{updated_at: desc}]) {
    ...PermitSnippetFragment
  }
}
    ${PermitSnippetFragmentFragmentDoc}`;

/**
 * __useGetGcPermitsScreenQuery__
 *
 * To run a query within a React component, call `useGetGcPermitsScreenQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetGcPermitsScreenQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetGcPermitsScreenQuery({
 *   variables: {
 *      projectId: // value for 'projectId'
 *      startAt: // value for 'startAt'
 *      endAt: // value for 'endAt'
 *      subcontractorId: // value for 'subcontractorId'
 *   },
 * });
 */
export function useGetGcPermitsScreenQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetGcPermitsScreenQuery, GetGcPermitsScreenQueryVariables>) {
        return ApolloReactHooks.useQuery<GetGcPermitsScreenQuery, GetGcPermitsScreenQueryVariables>(GetGcPermitsScreenDocument, baseOptions);
      }
export function useGetGcPermitsScreenLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetGcPermitsScreenQuery, GetGcPermitsScreenQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetGcPermitsScreenQuery, GetGcPermitsScreenQueryVariables>(GetGcPermitsScreenDocument, baseOptions);
        }
export type GetGcPermitsScreenQueryHookResult = ReturnType<typeof useGetGcPermitsScreenQuery>;
export type GetGcPermitsScreenLazyQueryHookResult = ReturnType<typeof useGetGcPermitsScreenLazyQuery>;
export type GetGcPermitsScreenQueryResult = ApolloReactCommon.QueryResult<GetGcPermitsScreenQuery, GetGcPermitsScreenQueryVariables>;
export const GetGeneralContractorEmployeesDocument = gql`
    query GetGeneralContractorEmployees($where: general_contractor_employee_bool_exp, $order_by: [general_contractor_employee_order_by!], $limit: Int, $offset: Int) {
  general_contractor_employee(where: $where, order_by: $order_by, limit: $limit, offset: $offset) {
    uid
    employee_title {
      id
      name {
        ...TextTranslationFrag
      }
    }
    user {
      id
      name
      username
      email
      phone_number
      profile_picture {
        id
        url
      }
    }
  }
  general_contractor_employee_aggregate(where: $where) {
    aggregate {
      count
    }
  }
}
    ${TextTranslationFragFragmentDoc}`;

/**
 * __useGetGeneralContractorEmployeesQuery__
 *
 * To run a query within a React component, call `useGetGeneralContractorEmployeesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetGeneralContractorEmployeesQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetGeneralContractorEmployeesQuery({
 *   variables: {
 *      where: // value for 'where'
 *      order_by: // value for 'order_by'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetGeneralContractorEmployeesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetGeneralContractorEmployeesQuery, GetGeneralContractorEmployeesQueryVariables>) {
        return ApolloReactHooks.useQuery<GetGeneralContractorEmployeesQuery, GetGeneralContractorEmployeesQueryVariables>(GetGeneralContractorEmployeesDocument, baseOptions);
      }
export function useGetGeneralContractorEmployeesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetGeneralContractorEmployeesQuery, GetGeneralContractorEmployeesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetGeneralContractorEmployeesQuery, GetGeneralContractorEmployeesQueryVariables>(GetGeneralContractorEmployeesDocument, baseOptions);
        }
export type GetGeneralContractorEmployeesQueryHookResult = ReturnType<typeof useGetGeneralContractorEmployeesQuery>;
export type GetGeneralContractorEmployeesLazyQueryHookResult = ReturnType<typeof useGetGeneralContractorEmployeesLazyQuery>;
export type GetGeneralContractorEmployeesQueryResult = ApolloReactCommon.QueryResult<GetGeneralContractorEmployeesQuery, GetGeneralContractorEmployeesQueryVariables>;
export const GetGeneralContractorEmployeeByPkDocument = gql`
    query GetGeneralContractorEmployeeByPk($uid: uuid!) {
  general_contractor_employee_by_pk(uid: $uid) {
    uid
    employee_title {
      id
      name {
        ...TextTranslationFrag
      }
    }
    user {
      id
      name
      username
      email
      phone_number
      profile_picture {
        id
        url
      }
    }
  }
}
    ${TextTranslationFragFragmentDoc}`;

/**
 * __useGetGeneralContractorEmployeeByPkQuery__
 *
 * To run a query within a React component, call `useGetGeneralContractorEmployeeByPkQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetGeneralContractorEmployeeByPkQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetGeneralContractorEmployeeByPkQuery({
 *   variables: {
 *      uid: // value for 'uid'
 *   },
 * });
 */
export function useGetGeneralContractorEmployeeByPkQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetGeneralContractorEmployeeByPkQuery, GetGeneralContractorEmployeeByPkQueryVariables>) {
        return ApolloReactHooks.useQuery<GetGeneralContractorEmployeeByPkQuery, GetGeneralContractorEmployeeByPkQueryVariables>(GetGeneralContractorEmployeeByPkDocument, baseOptions);
      }
export function useGetGeneralContractorEmployeeByPkLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetGeneralContractorEmployeeByPkQuery, GetGeneralContractorEmployeeByPkQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetGeneralContractorEmployeeByPkQuery, GetGeneralContractorEmployeeByPkQueryVariables>(GetGeneralContractorEmployeeByPkDocument, baseOptions);
        }
export type GetGeneralContractorEmployeeByPkQueryHookResult = ReturnType<typeof useGetGeneralContractorEmployeeByPkQuery>;
export type GetGeneralContractorEmployeeByPkLazyQueryHookResult = ReturnType<typeof useGetGeneralContractorEmployeeByPkLazyQuery>;
export type GetGeneralContractorEmployeeByPkQueryResult = ApolloReactCommon.QueryResult<GetGeneralContractorEmployeeByPkQuery, GetGeneralContractorEmployeeByPkQueryVariables>;
export const GetGroupedProjectMembersDocument = gql`
    query GetGroupedProjectMembers($projectId: uuid!) {
  general_contractor_employee(where: {employee_projects: {project_id: {_eq: $projectId}}}, order_by: [{user: {name: asc}}]) {
    ...GCEmployeeFrag
  }
  foremen: project_worker(where: {deleted_at: {_is_null: true}, worker_role: {_eq: "foreman"}, project_id: {_eq: $projectId}}, order_by: [{user: {name: asc}}]) {
    ...ReportProjectWorkerFragment
  }
  project_subcontractor(where: {project_id: {_eq: $projectId}}, order_by: [{subcontractor: {name: asc}}]) {
    subcontractor {
      id
      name
      trade {
        id
        name
      }
    }
    project_workers(order_by: [{user: {name: asc}}]) {
      ...ReportProjectWorkerFragment
    }
  }
}
    ${GcEmployeeFragFragmentDoc}
${ReportProjectWorkerFragmentFragmentDoc}`;

/**
 * __useGetGroupedProjectMembersQuery__
 *
 * To run a query within a React component, call `useGetGroupedProjectMembersQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetGroupedProjectMembersQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetGroupedProjectMembersQuery({
 *   variables: {
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useGetGroupedProjectMembersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetGroupedProjectMembersQuery, GetGroupedProjectMembersQueryVariables>) {
        return ApolloReactHooks.useQuery<GetGroupedProjectMembersQuery, GetGroupedProjectMembersQueryVariables>(GetGroupedProjectMembersDocument, baseOptions);
      }
export function useGetGroupedProjectMembersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetGroupedProjectMembersQuery, GetGroupedProjectMembersQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetGroupedProjectMembersQuery, GetGroupedProjectMembersQueryVariables>(GetGroupedProjectMembersDocument, baseOptions);
        }
export type GetGroupedProjectMembersQueryHookResult = ReturnType<typeof useGetGroupedProjectMembersQuery>;
export type GetGroupedProjectMembersLazyQueryHookResult = ReturnType<typeof useGetGroupedProjectMembersLazyQuery>;
export type GetGroupedProjectMembersQueryResult = ApolloReactCommon.QueryResult<GetGroupedProjectMembersQuery, GetGroupedProjectMembersQueryVariables>;
export const GetHardHatWorkersDocument = gql`
    query GetHardHatWorkers($externalProjectId: String!, $hardHatNumber: String!) {
  project_worker(where: {deleted_at: {_is_null: true}, project: {external_id: {_eq: $externalProjectId}}, hard_hat_number: {_eq: $hardHatNumber}}) {
    id
    hard_hat_number
    user {
      id
      name
      email
      username
    }
  }
}
    `;

/**
 * __useGetHardHatWorkersQuery__
 *
 * To run a query within a React component, call `useGetHardHatWorkersQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetHardHatWorkersQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetHardHatWorkersQuery({
 *   variables: {
 *      externalProjectId: // value for 'externalProjectId'
 *      hardHatNumber: // value for 'hardHatNumber'
 *   },
 * });
 */
export function useGetHardHatWorkersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetHardHatWorkersQuery, GetHardHatWorkersQueryVariables>) {
        return ApolloReactHooks.useQuery<GetHardHatWorkersQuery, GetHardHatWorkersQueryVariables>(GetHardHatWorkersDocument, baseOptions);
      }
export function useGetHardHatWorkersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetHardHatWorkersQuery, GetHardHatWorkersQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetHardHatWorkersQuery, GetHardHatWorkersQueryVariables>(GetHardHatWorkersDocument, baseOptions);
        }
export type GetHardHatWorkersQueryHookResult = ReturnType<typeof useGetHardHatWorkersQuery>;
export type GetHardHatWorkersLazyQueryHookResult = ReturnType<typeof useGetHardHatWorkersLazyQuery>;
export type GetHardHatWorkersQueryResult = ApolloReactCommon.QueryResult<GetHardHatWorkersQuery, GetHardHatWorkersQueryVariables>;
export const GetHotWorkPermitByPkDocument = gql`
    query GetHotWorkPermitByPk($permitId: uuid!) {
  permit_by_pk(id: $permitId) {
    id
    is_historical
    type
    project {
      id
      name
      address {
        ...AddressFragment
      }
      general_contractor {
        id
        name
        allow_permit_activation_location_change
      }
      permit_contact_project_employee {
        id
        employee {
          uid
          employee_title {
            id
            name {
              ...TextTranslationFrag
            }
          }
          user {
            id
            name
            phone_number
            email
          }
        }
      }
    }
    subcontractor {
      id
      name
    }
    images {
      id
      url
    }
    origin_permit_history {
      id
      permit_id
      comment {
        ...TextTranslationFrag
      }
      updated_location
      status
      created_at
      created_by_user {
        id
        name
      }
      images {
        id
        url
      }
    }
    permit_sign_in_images(order_by: {image: {sort_index: asc}}) {
      image {
        id
        url
      }
    }
    created_at
    updated_at
    current_status
    supervisorProjectWorkers: permit_project_workers(where: {type: {_eq: "supervisor"}}, order_by: {project_worker: {user: {name: asc}}}) {
      id
      type
      project_worker {
        ...ReportProjectWorkerFragment
      }
      signature_image {
        id
        url
      }
    }
    workingProjectWorkers: permit_project_workers(where: {type: {_eq: "working"}}, order_by: {project_worker: {user: {name: asc}}}) {
      id
      type
      project_worker {
        ...ReportProjectWorkerFragment
      }
      signature_image {
        id
        url
      }
    }
    firewatchProjectWorkers: permit_project_workers(where: {type: {_eq: "firewatch"}}, order_by: {project_worker: {user: {name: asc}}}) {
      id
      type
      project_worker {
        ...ReportProjectWorkerFragment
      }
      signature_image {
        id
        url
      }
    }
    owner_user {
      id
      name
    }
    permit_checklist_items(order_by: {sort_index: asc}, where: {item_type: {_eq: "permit"}}) {
      ...PermitChecklistItemFragment
    }
    closing_checklist_items: permit_checklist_items(order_by: {sort_index: asc}, where: {item_type: {_eq: "closing"}}) {
      ...PermitChecklistItemFragment
    }
    permit_histories(order_by: {created_at: desc}) {
      id
      permit_id
      comment {
        ...TextTranslationFrag
      }
      updated_location
      status
      created_at
      created_by_user {
        id
        name
      }
      images {
        id
        url
      }
    }
    hot_work_permit {
      permit_id
      work_start_at
      work_duration
      work_location {
        ...TextTranslationFrag
      }
      work_description {
        ...TextTranslationFrag
      }
      has_special_precautions
      special_precautions_description {
        ...TextTranslationFrag
      }
      applicant_project_worker {
        ...ReportProjectWorkerFragment
      }
    }
  }
}
    ${AddressFragmentFragmentDoc}
${TextTranslationFragFragmentDoc}
${ReportProjectWorkerFragmentFragmentDoc}
${PermitChecklistItemFragmentFragmentDoc}`;

/**
 * __useGetHotWorkPermitByPkQuery__
 *
 * To run a query within a React component, call `useGetHotWorkPermitByPkQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetHotWorkPermitByPkQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetHotWorkPermitByPkQuery({
 *   variables: {
 *      permitId: // value for 'permitId'
 *   },
 * });
 */
export function useGetHotWorkPermitByPkQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetHotWorkPermitByPkQuery, GetHotWorkPermitByPkQueryVariables>) {
        return ApolloReactHooks.useQuery<GetHotWorkPermitByPkQuery, GetHotWorkPermitByPkQueryVariables>(GetHotWorkPermitByPkDocument, baseOptions);
      }
export function useGetHotWorkPermitByPkLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetHotWorkPermitByPkQuery, GetHotWorkPermitByPkQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetHotWorkPermitByPkQuery, GetHotWorkPermitByPkQueryVariables>(GetHotWorkPermitByPkDocument, baseOptions);
        }
export type GetHotWorkPermitByPkQueryHookResult = ReturnType<typeof useGetHotWorkPermitByPkQuery>;
export type GetHotWorkPermitByPkLazyQueryHookResult = ReturnType<typeof useGetHotWorkPermitByPkLazyQuery>;
export type GetHotWorkPermitByPkQueryResult = ApolloReactCommon.QueryResult<GetHotWorkPermitByPkQuery, GetHotWorkPermitByPkQueryVariables>;
export const GetIndSelfCertifyInformationDocument = gql`
    query GetIndSelfCertifyInformation($projectId: uuid!) {
  project_covid_config_by_pk(project_id: $projectId) {
    requirements {
      ...TextTranslationFrag
    }
    worker_restriction_length
    updated_at
    project {
      id
      name
      external_id
    }
    contact_project_employee {
      id
      employee {
        uid
        employee_title {
          id
          name {
            ...TextTranslationFrag
          }
        }
        user {
          id
          name
          email
          phone_number
        }
      }
    }
  }
  project_covid_yes_no_question(where: {project_id: {_eq: $projectId}, deleted_at: {_is_null: true}}, order_by: {question: {en: asc}}) {
    id
    question {
      ...TextTranslationFrag
    }
  }
}
    ${TextTranslationFragFragmentDoc}`;

/**
 * __useGetIndSelfCertifyInformationQuery__
 *
 * To run a query within a React component, call `useGetIndSelfCertifyInformationQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetIndSelfCertifyInformationQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetIndSelfCertifyInformationQuery({
 *   variables: {
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useGetIndSelfCertifyInformationQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetIndSelfCertifyInformationQuery, GetIndSelfCertifyInformationQueryVariables>) {
        return ApolloReactHooks.useQuery<GetIndSelfCertifyInformationQuery, GetIndSelfCertifyInformationQueryVariables>(GetIndSelfCertifyInformationDocument, baseOptions);
      }
export function useGetIndSelfCertifyInformationLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetIndSelfCertifyInformationQuery, GetIndSelfCertifyInformationQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetIndSelfCertifyInformationQuery, GetIndSelfCertifyInformationQueryVariables>(GetIndSelfCertifyInformationDocument, baseOptions);
        }
export type GetIndSelfCertifyInformationQueryHookResult = ReturnType<typeof useGetIndSelfCertifyInformationQuery>;
export type GetIndSelfCertifyInformationLazyQueryHookResult = ReturnType<typeof useGetIndSelfCertifyInformationLazyQuery>;
export type GetIndSelfCertifyInformationQueryResult = ApolloReactCommon.QueryResult<GetIndSelfCertifyInformationQuery, GetIndSelfCertifyInformationQueryVariables>;
export const GetInsertHazardAddInfoDocument = gql`
    query GetInsertHazardAddInfo($projectId: uuid!) {
  project_subcontractor(where: {project_id: {_eq: $projectId}}, order_by: {subcontractor: {name: asc}}) {
    subcontractor {
      id
      name
    }
  }
}
    `;

/**
 * __useGetInsertHazardAddInfoQuery__
 *
 * To run a query within a React component, call `useGetInsertHazardAddInfoQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetInsertHazardAddInfoQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetInsertHazardAddInfoQuery({
 *   variables: {
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useGetInsertHazardAddInfoQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetInsertHazardAddInfoQuery, GetInsertHazardAddInfoQueryVariables>) {
        return ApolloReactHooks.useQuery<GetInsertHazardAddInfoQuery, GetInsertHazardAddInfoQueryVariables>(GetInsertHazardAddInfoDocument, baseOptions);
      }
export function useGetInsertHazardAddInfoLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetInsertHazardAddInfoQuery, GetInsertHazardAddInfoQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetInsertHazardAddInfoQuery, GetInsertHazardAddInfoQueryVariables>(GetInsertHazardAddInfoDocument, baseOptions);
        }
export type GetInsertHazardAddInfoQueryHookResult = ReturnType<typeof useGetInsertHazardAddInfoQuery>;
export type GetInsertHazardAddInfoLazyQueryHookResult = ReturnType<typeof useGetInsertHazardAddInfoLazyQuery>;
export type GetInsertHazardAddInfoQueryResult = ApolloReactCommon.QueryResult<GetInsertHazardAddInfoQuery, GetInsertHazardAddInfoQueryVariables>;
export const GetInvitesDocument = gql`
    query GetInvites($where: invite_bool_exp, $order_by: [invite_order_by!]) {
  invite(where: $where, order_by: $order_by) {
    id
    to_email
    to_phone_number
    created_at
    accepted_at
    project {
      id
      name
    }
    subcontractor {
      id
      name
    }
    general_contractor {
      id
      name
    }
  }
}
    `;

/**
 * __useGetInvitesQuery__
 *
 * To run a query within a React component, call `useGetInvitesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetInvitesQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetInvitesQuery({
 *   variables: {
 *      where: // value for 'where'
 *      order_by: // value for 'order_by'
 *   },
 * });
 */
export function useGetInvitesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetInvitesQuery, GetInvitesQueryVariables>) {
        return ApolloReactHooks.useQuery<GetInvitesQuery, GetInvitesQueryVariables>(GetInvitesDocument, baseOptions);
      }
export function useGetInvitesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetInvitesQuery, GetInvitesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetInvitesQuery, GetInvitesQueryVariables>(GetInvitesDocument, baseOptions);
        }
export type GetInvitesQueryHookResult = ReturnType<typeof useGetInvitesQuery>;
export type GetInvitesLazyQueryHookResult = ReturnType<typeof useGetInvitesLazyQuery>;
export type GetInvitesQueryResult = ApolloReactCommon.QueryResult<GetInvitesQuery, GetInvitesQueryVariables>;
export const GetLanguageCodeDocument = gql`
    query GetLanguageCode {
  languageCode @client
}
    `;

/**
 * __useGetLanguageCodeQuery__
 *
 * To run a query within a React component, call `useGetLanguageCodeQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetLanguageCodeQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetLanguageCodeQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetLanguageCodeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetLanguageCodeQuery, GetLanguageCodeQueryVariables>) {
        return ApolloReactHooks.useQuery<GetLanguageCodeQuery, GetLanguageCodeQueryVariables>(GetLanguageCodeDocument, baseOptions);
      }
export function useGetLanguageCodeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetLanguageCodeQuery, GetLanguageCodeQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetLanguageCodeQuery, GetLanguageCodeQueryVariables>(GetLanguageCodeDocument, baseOptions);
        }
export type GetLanguageCodeQueryHookResult = ReturnType<typeof useGetLanguageCodeQuery>;
export type GetLanguageCodeLazyQueryHookResult = ReturnType<typeof useGetLanguageCodeLazyQuery>;
export type GetLanguageCodeQueryResult = ApolloReactCommon.QueryResult<GetLanguageCodeQuery, GetLanguageCodeQueryVariables>;
export const GetNameUsernameDocument = gql`
    query GetNameUsername($name: String!) {
  getNewUsername(name: $name)
}
    `;

/**
 * __useGetNameUsernameQuery__
 *
 * To run a query within a React component, call `useGetNameUsernameQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetNameUsernameQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetNameUsernameQuery({
 *   variables: {
 *      name: // value for 'name'
 *   },
 * });
 */
export function useGetNameUsernameQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetNameUsernameQuery, GetNameUsernameQueryVariables>) {
        return ApolloReactHooks.useQuery<GetNameUsernameQuery, GetNameUsernameQueryVariables>(GetNameUsernameDocument, baseOptions);
      }
export function useGetNameUsernameLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetNameUsernameQuery, GetNameUsernameQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetNameUsernameQuery, GetNameUsernameQueryVariables>(GetNameUsernameDocument, baseOptions);
        }
export type GetNameUsernameQueryHookResult = ReturnType<typeof useGetNameUsernameQuery>;
export type GetNameUsernameLazyQueryHookResult = ReturnType<typeof useGetNameUsernameLazyQuery>;
export type GetNameUsernameQueryResult = ApolloReactCommon.QueryResult<GetNameUsernameQuery, GetNameUsernameQueryVariables>;
export const GetPasswordHashDocument = gql`
    query GetPasswordHash($string: String!) {
  getPasswordHash(string: $string)
}
    `;

/**
 * __useGetPasswordHashQuery__
 *
 * To run a query within a React component, call `useGetPasswordHashQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPasswordHashQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPasswordHashQuery({
 *   variables: {
 *      string: // value for 'string'
 *   },
 * });
 */
export function useGetPasswordHashQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetPasswordHashQuery, GetPasswordHashQueryVariables>) {
        return ApolloReactHooks.useQuery<GetPasswordHashQuery, GetPasswordHashQueryVariables>(GetPasswordHashDocument, baseOptions);
      }
export function useGetPasswordHashLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetPasswordHashQuery, GetPasswordHashQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetPasswordHashQuery, GetPasswordHashQueryVariables>(GetPasswordHashDocument, baseOptions);
        }
export type GetPasswordHashQueryHookResult = ReturnType<typeof useGetPasswordHashQuery>;
export type GetPasswordHashLazyQueryHookResult = ReturnType<typeof useGetPasswordHashLazyQuery>;
export type GetPasswordHashQueryResult = ApolloReactCommon.QueryResult<GetPasswordHashQuery, GetPasswordHashQueryVariables>;
export const GetPermitsDocument = gql`
    query GetPermits($where: permit_bool_exp, $order_by: [permit_order_by!]) {
  permit(where: $where, order_by: $order_by) {
    project {
      id
      name
    }
    permit_histories {
      id
      status
      comment {
        ...TextTranslationFrag
      }
    }
    subcontractor {
      id
      name
    }
    owner_user_id
    hot_work_permit {
      permit_id
    }
    created_at
    current_status
  }
}
    ${TextTranslationFragFragmentDoc}`;

/**
 * __useGetPermitsQuery__
 *
 * To run a query within a React component, call `useGetPermitsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPermitsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPermitsQuery({
 *   variables: {
 *      where: // value for 'where'
 *      order_by: // value for 'order_by'
 *   },
 * });
 */
export function useGetPermitsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetPermitsQuery, GetPermitsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetPermitsQuery, GetPermitsQueryVariables>(GetPermitsDocument, baseOptions);
      }
export function useGetPermitsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetPermitsQuery, GetPermitsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetPermitsQuery, GetPermitsQueryVariables>(GetPermitsDocument, baseOptions);
        }
export type GetPermitsQueryHookResult = ReturnType<typeof useGetPermitsQuery>;
export type GetPermitsLazyQueryHookResult = ReturnType<typeof useGetPermitsLazyQuery>;
export type GetPermitsQueryResult = ApolloReactCommon.QueryResult<GetPermitsQuery, GetPermitsQueryVariables>;
export const GetPermitChecklistItemsDocument = gql`
    query GetPermitChecklistItems($where: permit_checklist_item_bool_exp, $order_by: [permit_checklist_item_order_by!]) {
  permit_checklist_item(where: $where, order_by: $order_by) {
    ...PermitChecklistItemFragment
  }
}
    ${PermitChecklistItemFragmentFragmentDoc}`;

/**
 * __useGetPermitChecklistItemsQuery__
 *
 * To run a query within a React component, call `useGetPermitChecklistItemsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPermitChecklistItemsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPermitChecklistItemsQuery({
 *   variables: {
 *      where: // value for 'where'
 *      order_by: // value for 'order_by'
 *   },
 * });
 */
export function useGetPermitChecklistItemsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetPermitChecklistItemsQuery, GetPermitChecklistItemsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetPermitChecklistItemsQuery, GetPermitChecklistItemsQueryVariables>(GetPermitChecklistItemsDocument, baseOptions);
      }
export function useGetPermitChecklistItemsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetPermitChecklistItemsQuery, GetPermitChecklistItemsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetPermitChecklistItemsQuery, GetPermitChecklistItemsQueryVariables>(GetPermitChecklistItemsDocument, baseOptions);
        }
export type GetPermitChecklistItemsQueryHookResult = ReturnType<typeof useGetPermitChecklistItemsQuery>;
export type GetPermitChecklistItemsLazyQueryHookResult = ReturnType<typeof useGetPermitChecklistItemsLazyQuery>;
export type GetPermitChecklistItemsQueryResult = ApolloReactCommon.QueryResult<GetPermitChecklistItemsQuery, GetPermitChecklistItemsQueryVariables>;
export const GetPermitChecklistQuestionsDataDocument = gql`
    query GetPermitChecklistQuestionsData($gcId: uuid!, $permitType: String!) {
  permit_checklist_item(order_by: {sort_index: asc}, where: {item_type: {_eq: "permit"}, general_contractor_id: {_eq: $gcId}, permit_type: {_eq: $permitType}, permit_id: {_is_null: true}}) {
    ...PermitChecklistItemFragment
  }
  closing_checklist_items: permit_checklist_item(order_by: {sort_index: asc}, where: {item_type: {_eq: "closing"}, general_contractor_id: {_eq: $gcId}, permit_type: {_eq: $permitType}, permit_id: {_is_null: true}}) {
    ...PermitChecklistItemFragment
  }
}
    ${PermitChecklistItemFragmentFragmentDoc}`;

/**
 * __useGetPermitChecklistQuestionsDataQuery__
 *
 * To run a query within a React component, call `useGetPermitChecklistQuestionsDataQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPermitChecklistQuestionsDataQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPermitChecklistQuestionsDataQuery({
 *   variables: {
 *      gcId: // value for 'gcId'
 *      permitType: // value for 'permitType'
 *   },
 * });
 */
export function useGetPermitChecklistQuestionsDataQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetPermitChecklistQuestionsDataQuery, GetPermitChecklistQuestionsDataQueryVariables>) {
        return ApolloReactHooks.useQuery<GetPermitChecklistQuestionsDataQuery, GetPermitChecklistQuestionsDataQueryVariables>(GetPermitChecklistQuestionsDataDocument, baseOptions);
      }
export function useGetPermitChecklistQuestionsDataLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetPermitChecklistQuestionsDataQuery, GetPermitChecklistQuestionsDataQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetPermitChecklistQuestionsDataQuery, GetPermitChecklistQuestionsDataQueryVariables>(GetPermitChecklistQuestionsDataDocument, baseOptions);
        }
export type GetPermitChecklistQuestionsDataQueryHookResult = ReturnType<typeof useGetPermitChecklistQuestionsDataQuery>;
export type GetPermitChecklistQuestionsDataLazyQueryHookResult = ReturnType<typeof useGetPermitChecklistQuestionsDataLazyQuery>;
export type GetPermitChecklistQuestionsDataQueryResult = ApolloReactCommon.QueryResult<GetPermitChecklistQuestionsDataQuery, GetPermitChecklistQuestionsDataQueryVariables>;
export const GetPermitHistoriesDocument = gql`
    query GetPermitHistories($where: permit_history_bool_exp, $order_by: [permit_history_order_by!]) {
  permit_history(where: $where, order_by: $order_by) {
    id
    status
    comment {
      ...TextTranslationFrag
    }
    created_at
    updated_location
    outside_project_location
    created_by_user {
      id
      name
    }
    permit {
      id
      subcontractor {
        id
        name
      }
      hot_work_permit {
        permit_id
      }
      dig_permit {
        permit_id
      }
    }
    historical_permit {
      id
      hot_work_permit {
        permit_id
      }
      dig_permit {
        permit_id
      }
    }
  }
}
    ${TextTranslationFragFragmentDoc}`;

/**
 * __useGetPermitHistoriesQuery__
 *
 * To run a query within a React component, call `useGetPermitHistoriesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPermitHistoriesQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPermitHistoriesQuery({
 *   variables: {
 *      where: // value for 'where'
 *      order_by: // value for 'order_by'
 *   },
 * });
 */
export function useGetPermitHistoriesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetPermitHistoriesQuery, GetPermitHistoriesQueryVariables>) {
        return ApolloReactHooks.useQuery<GetPermitHistoriesQuery, GetPermitHistoriesQueryVariables>(GetPermitHistoriesDocument, baseOptions);
      }
export function useGetPermitHistoriesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetPermitHistoriesQuery, GetPermitHistoriesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetPermitHistoriesQuery, GetPermitHistoriesQueryVariables>(GetPermitHistoriesDocument, baseOptions);
        }
export type GetPermitHistoriesQueryHookResult = ReturnType<typeof useGetPermitHistoriesQuery>;
export type GetPermitHistoriesLazyQueryHookResult = ReturnType<typeof useGetPermitHistoriesLazyQuery>;
export type GetPermitHistoriesQueryResult = ApolloReactCommon.QueryResult<GetPermitHistoriesQuery, GetPermitHistoriesQueryVariables>;
export const GetPermitTypesDocument = gql`
    query GetPermitTypes {
  permit_type(order_by: {name: {en: asc}}) {
    id
    name {
      ...TextTranslationFrag
    }
  }
}
    ${TextTranslationFragFragmentDoc}`;

/**
 * __useGetPermitTypesQuery__
 *
 * To run a query within a React component, call `useGetPermitTypesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPermitTypesQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPermitTypesQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetPermitTypesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetPermitTypesQuery, GetPermitTypesQueryVariables>) {
        return ApolloReactHooks.useQuery<GetPermitTypesQuery, GetPermitTypesQueryVariables>(GetPermitTypesDocument, baseOptions);
      }
export function useGetPermitTypesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetPermitTypesQuery, GetPermitTypesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetPermitTypesQuery, GetPermitTypesQueryVariables>(GetPermitTypesDocument, baseOptions);
        }
export type GetPermitTypesQueryHookResult = ReturnType<typeof useGetPermitTypesQuery>;
export type GetPermitTypesLazyQueryHookResult = ReturnType<typeof useGetPermitTypesLazyQuery>;
export type GetPermitTypesQueryResult = ApolloReactCommon.QueryResult<GetPermitTypesQuery, GetPermitTypesQueryVariables>;
export const GetPpeCategoriesDocument = gql`
    query GetPpeCategories($ppeTypeWhere: ppe_type_bool_exp) {
  ppe_category(order_by: {name: {en: asc}}) {
    id
    name {
      ...TextTranslationFrag
    }
    ppe_types(order_by: {name: {en: asc}}, where: $ppeTypeWhere) {
      id
      name {
        ...TextTranslationFrag
      }
    }
  }
}
    ${TextTranslationFragFragmentDoc}`;

/**
 * __useGetPpeCategoriesQuery__
 *
 * To run a query within a React component, call `useGetPpeCategoriesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPpeCategoriesQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPpeCategoriesQuery({
 *   variables: {
 *      ppeTypeWhere: // value for 'ppeTypeWhere'
 *   },
 * });
 */
export function useGetPpeCategoriesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetPpeCategoriesQuery, GetPpeCategoriesQueryVariables>) {
        return ApolloReactHooks.useQuery<GetPpeCategoriesQuery, GetPpeCategoriesQueryVariables>(GetPpeCategoriesDocument, baseOptions);
      }
export function useGetPpeCategoriesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetPpeCategoriesQuery, GetPpeCategoriesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetPpeCategoriesQuery, GetPpeCategoriesQueryVariables>(GetPpeCategoriesDocument, baseOptions);
        }
export type GetPpeCategoriesQueryHookResult = ReturnType<typeof useGetPpeCategoriesQuery>;
export type GetPpeCategoriesLazyQueryHookResult = ReturnType<typeof useGetPpeCategoriesLazyQuery>;
export type GetPpeCategoriesQueryResult = ApolloReactCommon.QueryResult<GetPpeCategoriesQuery, GetPpeCategoriesQueryVariables>;
export const GetPpeTypesDocument = gql`
    query getPpeTypes {
  ppe_type {
    id
    name {
      ...TextTranslationFrag
    }
  }
}
    ${TextTranslationFragFragmentDoc}`;

/**
 * __useGetPpeTypesQuery__
 *
 * To run a query within a React component, call `useGetPpeTypesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPpeTypesQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPpeTypesQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetPpeTypesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetPpeTypesQuery, GetPpeTypesQueryVariables>) {
        return ApolloReactHooks.useQuery<GetPpeTypesQuery, GetPpeTypesQueryVariables>(GetPpeTypesDocument, baseOptions);
      }
export function useGetPpeTypesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetPpeTypesQuery, GetPpeTypesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetPpeTypesQuery, GetPpeTypesQueryVariables>(GetPpeTypesDocument, baseOptions);
        }
export type GetPpeTypesQueryHookResult = ReturnType<typeof useGetPpeTypesQuery>;
export type GetPpeTypesLazyQueryHookResult = ReturnType<typeof useGetPpeTypesLazyQuery>;
export type GetPpeTypesQueryResult = ApolloReactCommon.QueryResult<GetPpeTypesQuery, GetPpeTypesQueryVariables>;
export const GetProjectsDocument = gql`
    query GetProjects($where: project_bool_exp) {
  project(where: $where, order_by: {name: asc}) {
    id
    name
    external_id
    general_contractor {
      id
      name
    }
  }
}
    `;

/**
 * __useGetProjectsQuery__
 *
 * To run a query within a React component, call `useGetProjectsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectsQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetProjectsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectsQuery, GetProjectsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetProjectsQuery, GetProjectsQueryVariables>(GetProjectsDocument, baseOptions);
      }
export function useGetProjectsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectsQuery, GetProjectsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetProjectsQuery, GetProjectsQueryVariables>(GetProjectsDocument, baseOptions);
        }
export type GetProjectsQueryHookResult = ReturnType<typeof useGetProjectsQuery>;
export type GetProjectsLazyQueryHookResult = ReturnType<typeof useGetProjectsLazyQuery>;
export type GetProjectsQueryResult = ApolloReactCommon.QueryResult<GetProjectsQuery, GetProjectsQueryVariables>;
export const GetProjectCovidConfigByPkDocument = gql`
    query GetProjectCovidConfigByPk($projectId: uuid!) {
  project_covid_config_by_pk(project_id: $projectId) {
    requirements_text
    requirements {
      ...TextTranslationFrag
    }
    worker_restriction_length
    updated_at
    project {
      id
      name
      external_id
    }
    project_covid_tested_positive_questions(order_by: {sort_id: asc}) {
      id
      question {
        ...TextTranslationFrag
      }
    }
    contact_project_employee {
      id
      employee {
        uid
        employee_title {
          id
          name {
            ...TextTranslationFrag
          }
        }
        user {
          id
          name
          email
          phone_number
        }
      }
    }
  }
  project_covid_yes_no_question(where: {project_id: {_eq: $projectId}}, order_by: {question: {en: asc}}) {
    id
    question {
      ...TextTranslationFrag
    }
  }
}
    ${TextTranslationFragFragmentDoc}`;

/**
 * __useGetProjectCovidConfigByPkQuery__
 *
 * To run a query within a React component, call `useGetProjectCovidConfigByPkQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectCovidConfigByPkQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectCovidConfigByPkQuery({
 *   variables: {
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useGetProjectCovidConfigByPkQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectCovidConfigByPkQuery, GetProjectCovidConfigByPkQueryVariables>) {
        return ApolloReactHooks.useQuery<GetProjectCovidConfigByPkQuery, GetProjectCovidConfigByPkQueryVariables>(GetProjectCovidConfigByPkDocument, baseOptions);
      }
export function useGetProjectCovidConfigByPkLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectCovidConfigByPkQuery, GetProjectCovidConfigByPkQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetProjectCovidConfigByPkQuery, GetProjectCovidConfigByPkQueryVariables>(GetProjectCovidConfigByPkDocument, baseOptions);
        }
export type GetProjectCovidConfigByPkQueryHookResult = ReturnType<typeof useGetProjectCovidConfigByPkQuery>;
export type GetProjectCovidConfigByPkLazyQueryHookResult = ReturnType<typeof useGetProjectCovidConfigByPkLazyQuery>;
export type GetProjectCovidConfigByPkQueryResult = ApolloReactCommon.QueryResult<GetProjectCovidConfigByPkQuery, GetProjectCovidConfigByPkQueryVariables>;
export const GetProjectCrewsDocument = gql`
    query GetProjectCrews($where: project_crew_bool_exp!, $order_by: [project_crew_order_by!], $limit: Int, $offset: Int) {
  project_crew(where: $where, order_by: $order_by, limit: $limit, offset: $offset) {
    id
    name
    subcontractor_id
    subcontractor {
      id
      name
    }
    project_workers_aggregate {
      aggregate {
        count
      }
    }
    lead_foreman_project_worker {
      ...ProjectWorkerFragment
    }
  }
  project_crew_aggregate(where: $where) {
    aggregate {
      count
    }
  }
}
    ${ProjectWorkerFragmentFragmentDoc}`;

/**
 * __useGetProjectCrewsQuery__
 *
 * To run a query within a React component, call `useGetProjectCrewsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectCrewsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectCrewsQuery({
 *   variables: {
 *      where: // value for 'where'
 *      order_by: // value for 'order_by'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetProjectCrewsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectCrewsQuery, GetProjectCrewsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetProjectCrewsQuery, GetProjectCrewsQueryVariables>(GetProjectCrewsDocument, baseOptions);
      }
export function useGetProjectCrewsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectCrewsQuery, GetProjectCrewsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetProjectCrewsQuery, GetProjectCrewsQueryVariables>(GetProjectCrewsDocument, baseOptions);
        }
export type GetProjectCrewsQueryHookResult = ReturnType<typeof useGetProjectCrewsQuery>;
export type GetProjectCrewsLazyQueryHookResult = ReturnType<typeof useGetProjectCrewsLazyQuery>;
export type GetProjectCrewsQueryResult = ApolloReactCommon.QueryResult<GetProjectCrewsQuery, GetProjectCrewsQueryVariables>;
export const GetProjectCrewByPkDocument = gql`
    query GetProjectCrewByPk($projectCrewId: uuid!) {
  project_crew_by_pk(id: $projectCrewId) {
    id
    name
    subcontractor {
      id
      name
    }
    project {
      id
      name
    }
    project_workers(order_by: {user: {name: asc}}) {
      ...ProjectWorkerFragment
    }
    project_workers_aggregate {
      aggregate {
        count
      }
    }
    lead_foreman_project_worker {
      id
      user {
        id
        name
        id
        username
        role
      }
      title {
        ...WorkerTitleFrag
      }
    }
  }
}
    ${ProjectWorkerFragmentFragmentDoc}
${WorkerTitleFragFragmentDoc}`;

/**
 * __useGetProjectCrewByPkQuery__
 *
 * To run a query within a React component, call `useGetProjectCrewByPkQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectCrewByPkQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectCrewByPkQuery({
 *   variables: {
 *      projectCrewId: // value for 'projectCrewId'
 *   },
 * });
 */
export function useGetProjectCrewByPkQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectCrewByPkQuery, GetProjectCrewByPkQueryVariables>) {
        return ApolloReactHooks.useQuery<GetProjectCrewByPkQuery, GetProjectCrewByPkQueryVariables>(GetProjectCrewByPkDocument, baseOptions);
      }
export function useGetProjectCrewByPkLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectCrewByPkQuery, GetProjectCrewByPkQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetProjectCrewByPkQuery, GetProjectCrewByPkQueryVariables>(GetProjectCrewByPkDocument, baseOptions);
        }
export type GetProjectCrewByPkQueryHookResult = ReturnType<typeof useGetProjectCrewByPkQuery>;
export type GetProjectCrewByPkLazyQueryHookResult = ReturnType<typeof useGetProjectCrewByPkLazyQuery>;
export type GetProjectCrewByPkQueryResult = ApolloReactCommon.QueryResult<GetProjectCrewByPkQuery, GetProjectCrewByPkQueryVariables>;
export const GetProjectDailyReportsDocument = gql`
    query GetProjectDailyReports($projectId: uuid!, $subcontractorId: uuid!) {
  daily_report(order_by: {created_at: desc}, where: {project_id: {_eq: $projectId}, submitter_project_worker: {subcontractor_id: {_eq: $subcontractorId}}}) {
    ...DailyReportFragment
  }
}
    ${DailyReportFragmentFragmentDoc}`;

/**
 * __useGetProjectDailyReportsQuery__
 *
 * To run a query within a React component, call `useGetProjectDailyReportsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectDailyReportsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectDailyReportsQuery({
 *   variables: {
 *      projectId: // value for 'projectId'
 *      subcontractorId: // value for 'subcontractorId'
 *   },
 * });
 */
export function useGetProjectDailyReportsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectDailyReportsQuery, GetProjectDailyReportsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetProjectDailyReportsQuery, GetProjectDailyReportsQueryVariables>(GetProjectDailyReportsDocument, baseOptions);
      }
export function useGetProjectDailyReportsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectDailyReportsQuery, GetProjectDailyReportsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetProjectDailyReportsQuery, GetProjectDailyReportsQueryVariables>(GetProjectDailyReportsDocument, baseOptions);
        }
export type GetProjectDailyReportsQueryHookResult = ReturnType<typeof useGetProjectDailyReportsQuery>;
export type GetProjectDailyReportsLazyQueryHookResult = ReturnType<typeof useGetProjectDailyReportsLazyQuery>;
export type GetProjectDailyReportsQueryResult = ApolloReactCommon.QueryResult<GetProjectDailyReportsQuery, GetProjectDailyReportsQueryVariables>;
export const GetProjectEmployeesDocument = gql`
    query GetProjectEmployees($where: project_employee_bool_exp) {
  project_employee(where: $where, order_by: {employee: {user: {name: asc}}}) {
    id
    project {
      id
      name
    }
    employee {
      uid
      employee_title {
        id
        name {
          ...TextTranslationFrag
        }
      }
      user {
        id
        name
        email
        phone_number
        profile_picture {
          id
          url
        }
      }
    }
  }
}
    ${TextTranslationFragFragmentDoc}`;

/**
 * __useGetProjectEmployeesQuery__
 *
 * To run a query within a React component, call `useGetProjectEmployeesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectEmployeesQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectEmployeesQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetProjectEmployeesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectEmployeesQuery, GetProjectEmployeesQueryVariables>) {
        return ApolloReactHooks.useQuery<GetProjectEmployeesQuery, GetProjectEmployeesQueryVariables>(GetProjectEmployeesDocument, baseOptions);
      }
export function useGetProjectEmployeesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectEmployeesQuery, GetProjectEmployeesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetProjectEmployeesQuery, GetProjectEmployeesQueryVariables>(GetProjectEmployeesDocument, baseOptions);
        }
export type GetProjectEmployeesQueryHookResult = ReturnType<typeof useGetProjectEmployeesQuery>;
export type GetProjectEmployeesLazyQueryHookResult = ReturnType<typeof useGetProjectEmployeesLazyQuery>;
export type GetProjectEmployeesQueryResult = ApolloReactCommon.QueryResult<GetProjectEmployeesQuery, GetProjectEmployeesQueryVariables>;
export const GetProjectHazardByPkDocument = gql`
    query GetProjectHazardByPk($hazardId: uuid!) {
  project_hazard_by_pk(id: $hazardId) {
    ...ProjectHazardFragment
  }
}
    ${ProjectHazardFragmentFragmentDoc}`;

/**
 * __useGetProjectHazardByPkQuery__
 *
 * To run a query within a React component, call `useGetProjectHazardByPkQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectHazardByPkQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectHazardByPkQuery({
 *   variables: {
 *      hazardId: // value for 'hazardId'
 *   },
 * });
 */
export function useGetProjectHazardByPkQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectHazardByPkQuery, GetProjectHazardByPkQueryVariables>) {
        return ApolloReactHooks.useQuery<GetProjectHazardByPkQuery, GetProjectHazardByPkQueryVariables>(GetProjectHazardByPkDocument, baseOptions);
      }
export function useGetProjectHazardByPkLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectHazardByPkQuery, GetProjectHazardByPkQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetProjectHazardByPkQuery, GetProjectHazardByPkQueryVariables>(GetProjectHazardByPkDocument, baseOptions);
        }
export type GetProjectHazardByPkQueryHookResult = ReturnType<typeof useGetProjectHazardByPkQuery>;
export type GetProjectHazardByPkLazyQueryHookResult = ReturnType<typeof useGetProjectHazardByPkLazyQuery>;
export type GetProjectHazardByPkQueryResult = ApolloReactCommon.QueryResult<GetProjectHazardByPkQuery, GetProjectHazardByPkQueryVariables>;
export const GetProjectSiteNotificationsDocument = gql`
    query GetProjectSiteNotifications($where: project_site_notification_bool_exp, $order_by: [project_site_notification_order_by!]) {
  project_site_notification(where: $where, order_by: $order_by) {
    id
    project {
      id
      name
    }
    message {
      ...TextTranslationFrag
    }
    created_at
  }
}
    ${TextTranslationFragFragmentDoc}`;

/**
 * __useGetProjectSiteNotificationsQuery__
 *
 * To run a query within a React component, call `useGetProjectSiteNotificationsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectSiteNotificationsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectSiteNotificationsQuery({
 *   variables: {
 *      where: // value for 'where'
 *      order_by: // value for 'order_by'
 *   },
 * });
 */
export function useGetProjectSiteNotificationsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectSiteNotificationsQuery, GetProjectSiteNotificationsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetProjectSiteNotificationsQuery, GetProjectSiteNotificationsQueryVariables>(GetProjectSiteNotificationsDocument, baseOptions);
      }
export function useGetProjectSiteNotificationsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectSiteNotificationsQuery, GetProjectSiteNotificationsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetProjectSiteNotificationsQuery, GetProjectSiteNotificationsQueryVariables>(GetProjectSiteNotificationsDocument, baseOptions);
        }
export type GetProjectSiteNotificationsQueryHookResult = ReturnType<typeof useGetProjectSiteNotificationsQuery>;
export type GetProjectSiteNotificationsLazyQueryHookResult = ReturnType<typeof useGetProjectSiteNotificationsLazyQuery>;
export type GetProjectSiteNotificationsQueryResult = ApolloReactCommon.QueryResult<GetProjectSiteNotificationsQuery, GetProjectSiteNotificationsQueryVariables>;
export const GetProjectSubcontractorsDocument = gql`
    query GetProjectSubcontractors($where: project_subcontractor_bool_exp, $order_by: [project_subcontractor_order_by!]) {
  project_subcontractor(where: $where, order_by: $order_by) {
    project {
      id
      name
    }
    subcontractor {
      id
      name
      trade {
        id
        name
      }
    }
    project_crews_aggregate {
      aggregate {
        count
      }
    }
    project_workers_aggregate {
      aggregate {
        count
      }
    }
  }
}
    `;

/**
 * __useGetProjectSubcontractorsQuery__
 *
 * To run a query within a React component, call `useGetProjectSubcontractorsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectSubcontractorsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectSubcontractorsQuery({
 *   variables: {
 *      where: // value for 'where'
 *      order_by: // value for 'order_by'
 *   },
 * });
 */
export function useGetProjectSubcontractorsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectSubcontractorsQuery, GetProjectSubcontractorsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetProjectSubcontractorsQuery, GetProjectSubcontractorsQueryVariables>(GetProjectSubcontractorsDocument, baseOptions);
      }
export function useGetProjectSubcontractorsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectSubcontractorsQuery, GetProjectSubcontractorsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetProjectSubcontractorsQuery, GetProjectSubcontractorsQueryVariables>(GetProjectSubcontractorsDocument, baseOptions);
        }
export type GetProjectSubcontractorsQueryHookResult = ReturnType<typeof useGetProjectSubcontractorsQuery>;
export type GetProjectSubcontractorsLazyQueryHookResult = ReturnType<typeof useGetProjectSubcontractorsLazyQuery>;
export type GetProjectSubcontractorsQueryResult = ApolloReactCommon.QueryResult<GetProjectSubcontractorsQuery, GetProjectSubcontractorsQueryVariables>;
export const GetProjectSubcontractorByPkDocument = gql`
    query GetProjectSubcontractorByPk($project_id: uuid!, $subcontractor_id: uuid!) {
  project_subcontractor(where: {project_id: {_eq: $project_id}, subcontractor_id: {_eq: $subcontractor_id}}) {
    project {
      id
      name
    }
    subcontractor {
      id
      name
      trade {
        id
        name
      }
    }
    project_crews(order_by: [{lead_foreman_project_worker: {user: {name: asc}}}, {name: asc}]) {
      id
      name
      lead_foreman_project_worker {
        id
        worker_role
        title {
          ...WorkerTitleFrag
        }
        user {
          id
          name
          email
        }
      }
      project_workers_aggregate {
        aggregate {
          count
        }
      }
    }
    project_crews_aggregate {
      aggregate {
        count
      }
    }
    project_workers(order_by: {user: {name: asc}}) {
      ...ProjectWorkerFragment
    }
    project_workers_aggregate {
      aggregate {
        count
      }
    }
  }
}
    ${WorkerTitleFragFragmentDoc}
${ProjectWorkerFragmentFragmentDoc}`;

/**
 * __useGetProjectSubcontractorByPkQuery__
 *
 * To run a query within a React component, call `useGetProjectSubcontractorByPkQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectSubcontractorByPkQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectSubcontractorByPkQuery({
 *   variables: {
 *      project_id: // value for 'project_id'
 *      subcontractor_id: // value for 'subcontractor_id'
 *   },
 * });
 */
export function useGetProjectSubcontractorByPkQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectSubcontractorByPkQuery, GetProjectSubcontractorByPkQueryVariables>) {
        return ApolloReactHooks.useQuery<GetProjectSubcontractorByPkQuery, GetProjectSubcontractorByPkQueryVariables>(GetProjectSubcontractorByPkDocument, baseOptions);
      }
export function useGetProjectSubcontractorByPkLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectSubcontractorByPkQuery, GetProjectSubcontractorByPkQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetProjectSubcontractorByPkQuery, GetProjectSubcontractorByPkQueryVariables>(GetProjectSubcontractorByPkDocument, baseOptions);
        }
export type GetProjectSubcontractorByPkQueryHookResult = ReturnType<typeof useGetProjectSubcontractorByPkQuery>;
export type GetProjectSubcontractorByPkLazyQueryHookResult = ReturnType<typeof useGetProjectSubcontractorByPkLazyQuery>;
export type GetProjectSubcontractorByPkQueryResult = ApolloReactCommon.QueryResult<GetProjectSubcontractorByPkQuery, GetProjectSubcontractorByPkQueryVariables>;
export const GetProjectWithSubsDocument = gql`
    query GetProjectWithSubs($where: project_bool_exp) {
  project(where: $where) {
    id
    name
    external_id
    project_subcontractors(order_by: {subcontractor: {name: asc}}) {
      subcontractor {
        id
        name
      }
    }
  }
}
    `;

/**
 * __useGetProjectWithSubsQuery__
 *
 * To run a query within a React component, call `useGetProjectWithSubsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectWithSubsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectWithSubsQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetProjectWithSubsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectWithSubsQuery, GetProjectWithSubsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetProjectWithSubsQuery, GetProjectWithSubsQueryVariables>(GetProjectWithSubsDocument, baseOptions);
      }
export function useGetProjectWithSubsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectWithSubsQuery, GetProjectWithSubsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetProjectWithSubsQuery, GetProjectWithSubsQueryVariables>(GetProjectWithSubsDocument, baseOptions);
        }
export type GetProjectWithSubsQueryHookResult = ReturnType<typeof useGetProjectWithSubsQuery>;
export type GetProjectWithSubsLazyQueryHookResult = ReturnType<typeof useGetProjectWithSubsLazyQuery>;
export type GetProjectWithSubsQueryResult = ApolloReactCommon.QueryResult<GetProjectWithSubsQuery, GetProjectWithSubsQueryVariables>;
export const GetProjectWorkersDocument = gql`
    query GetProjectWorkers($where: project_worker_bool_exp, $order_by: [project_worker_order_by!]) {
  project_worker(where: $where, order_by: $order_by) {
    ...ReportProjectWorkerFragment
  }
  project_worker_aggregate(where: $where) {
    aggregate {
      count
    }
  }
}
    ${ReportProjectWorkerFragmentFragmentDoc}`;

/**
 * __useGetProjectWorkersQuery__
 *
 * To run a query within a React component, call `useGetProjectWorkersQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectWorkersQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectWorkersQuery({
 *   variables: {
 *      where: // value for 'where'
 *      order_by: // value for 'order_by'
 *   },
 * });
 */
export function useGetProjectWorkersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectWorkersQuery, GetProjectWorkersQueryVariables>) {
        return ApolloReactHooks.useQuery<GetProjectWorkersQuery, GetProjectWorkersQueryVariables>(GetProjectWorkersDocument, baseOptions);
      }
export function useGetProjectWorkersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectWorkersQuery, GetProjectWorkersQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetProjectWorkersQuery, GetProjectWorkersQueryVariables>(GetProjectWorkersDocument, baseOptions);
        }
export type GetProjectWorkersQueryHookResult = ReturnType<typeof useGetProjectWorkersQuery>;
export type GetProjectWorkersLazyQueryHookResult = ReturnType<typeof useGetProjectWorkersLazyQuery>;
export type GetProjectWorkersQueryResult = ApolloReactCommon.QueryResult<GetProjectWorkersQuery, GetProjectWorkersQueryVariables>;
export const GetProjectWorkersAndEmployeesDocument = gql`
    query GetProjectWorkersAndEmployees($projectId: uuid!) {
  project_worker(where: {project_id: {_eq: $projectId}, deleted_at: {_is_null: true}}, order_by: {user: {name: desc}}) {
    ...ReportProjectWorkerFragment
  }
  general_contractor_employee(where: {employee_projects: {project_id: {_eq: $projectId}}}, order_by: {user: {name: desc}}) {
    uid
    employee_title {
      id
      name {
        ...TextTranslationFrag
      }
    }
    user {
      id
      name
    }
  }
}
    ${ReportProjectWorkerFragmentFragmentDoc}
${TextTranslationFragFragmentDoc}`;

/**
 * __useGetProjectWorkersAndEmployeesQuery__
 *
 * To run a query within a React component, call `useGetProjectWorkersAndEmployeesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectWorkersAndEmployeesQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectWorkersAndEmployeesQuery({
 *   variables: {
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useGetProjectWorkersAndEmployeesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectWorkersAndEmployeesQuery, GetProjectWorkersAndEmployeesQueryVariables>) {
        return ApolloReactHooks.useQuery<GetProjectWorkersAndEmployeesQuery, GetProjectWorkersAndEmployeesQueryVariables>(GetProjectWorkersAndEmployeesDocument, baseOptions);
      }
export function useGetProjectWorkersAndEmployeesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectWorkersAndEmployeesQuery, GetProjectWorkersAndEmployeesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetProjectWorkersAndEmployeesQuery, GetProjectWorkersAndEmployeesQueryVariables>(GetProjectWorkersAndEmployeesDocument, baseOptions);
        }
export type GetProjectWorkersAndEmployeesQueryHookResult = ReturnType<typeof useGetProjectWorkersAndEmployeesQuery>;
export type GetProjectWorkersAndEmployeesLazyQueryHookResult = ReturnType<typeof useGetProjectWorkersAndEmployeesLazyQuery>;
export type GetProjectWorkersAndEmployeesQueryResult = ApolloReactCommon.QueryResult<GetProjectWorkersAndEmployeesQuery, GetProjectWorkersAndEmployeesQueryVariables>;
export const GetProjectWorkerByPkDocument = gql`
    query GetProjectWorkerByPk($projectWorkerId: uuid!) {
  project_worker_by_pk(id: $projectWorkerId) {
    id
    ...ProjectWorkerFragment
    created_at
    title {
      ...WorkerTitleFrag
    }
    project {
      id
      name
    }
    hard_hat_number
    can_insert_report
    subcontractor {
      id
      name
    }
    project_crew {
      id
      name
      lead_foreman_project_worker {
        id
        user {
          id
          name
        }
      }
    }
    orientation_signature_image {
      id
      url
    }
    worker_role
    worker_role_detail {
      ...WorkerRoleFrag
    }
    user {
      id
      name
      username
      email
      phone_number
      created_password
      invites(where: {claiming_account: {_eq: true}}, order_by: {created_at: desc}) {
        id
        to_email
        to_phone_number
        created_at
        claiming_account
        accepted_at
      }
      profile_picture {
        id
        url
      }
      government_identification {
        front_image {
          id
          url
        }
        back_image {
          id
          url
        }
      }
    }
    worker {
      subcontractor {
        id
        name
      }
      worker_certifications {
        id
        expires_on
        certification {
          id
          name
        }
        images {
          id
          url
        }
      }
      worker_drug_tests {
        name
        drug_test_date
        created_at
        id
        images {
          id
          url
        }
      }
    }
  }
}
    ${ProjectWorkerFragmentFragmentDoc}
${WorkerTitleFragFragmentDoc}
${WorkerRoleFragFragmentDoc}`;

/**
 * __useGetProjectWorkerByPkQuery__
 *
 * To run a query within a React component, call `useGetProjectWorkerByPkQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectWorkerByPkQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectWorkerByPkQuery({
 *   variables: {
 *      projectWorkerId: // value for 'projectWorkerId'
 *   },
 * });
 */
export function useGetProjectWorkerByPkQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectWorkerByPkQuery, GetProjectWorkerByPkQueryVariables>) {
        return ApolloReactHooks.useQuery<GetProjectWorkerByPkQuery, GetProjectWorkerByPkQueryVariables>(GetProjectWorkerByPkDocument, baseOptions);
      }
export function useGetProjectWorkerByPkLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectWorkerByPkQuery, GetProjectWorkerByPkQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetProjectWorkerByPkQuery, GetProjectWorkerByPkQueryVariables>(GetProjectWorkerByPkDocument, baseOptions);
        }
export type GetProjectWorkerByPkQueryHookResult = ReturnType<typeof useGetProjectWorkerByPkQuery>;
export type GetProjectWorkerByPkLazyQueryHookResult = ReturnType<typeof useGetProjectWorkerByPkLazyQuery>;
export type GetProjectWorkerByPkQueryResult = ApolloReactCommon.QueryResult<GetProjectWorkerByPkQuery, GetProjectWorkerByPkQueryVariables>;
export const GetProjectWorkerCreateDirectMessageDocument = gql`
    query GetProjectWorkerCreateDirectMessage($projectWorkerId: uuid!) {
  general_contractor_employee(where: {employee_projects: {project: {project_workers: {id: {_eq: $projectWorkerId}}}}}, order_by: [{user: {name: asc}}]) {
    ...GCEmployeeFrag
    chat_members(where: {chat: {type: {_eq: "direct_message"}, members: {project_worker_id: {_eq: $projectWorkerId}}}}) {
      id
      chat {
        id
        members(where: {project_worker_id: {_eq: $projectWorkerId}}) {
          id
        }
      }
    }
  }
  foremen: project_worker(where: {deleted_at: {_is_null: true}, worker_role: {_eq: "foreman"}, project: {project_workers: {id: {_eq: $projectWorkerId}}}}, order_by: [{user: {name: asc}}]) {
    ...ReportProjectWorkerFragment
    chat_members(where: {chat: {type: {_eq: "direct_message"}, members: {project_worker_id: {_eq: $projectWorkerId}}}}) {
      id
      chat {
        id
        members(where: {project_worker_id: {_eq: $projectWorkerId}}) {
          id
        }
      }
    }
  }
  project_subcontractor(where: {project: {project_workers: {id: {_eq: $projectWorkerId}}}}, order_by: [{subcontractor: {name: asc}}]) {
    subcontractor {
      id
      name
      trade {
        id
        name
      }
    }
    project_workers(where: {project: {project_workers: {id: {_eq: $projectWorkerId}}}}, order_by: [{user: {name: asc}}]) {
      ...ReportProjectWorkerFragment
      chat_members(where: {chat: {type: {_eq: "direct_message"}, members: {project_worker_id: {_eq: $projectWorkerId}}}}) {
        id
        chat {
          id
          members(where: {project_worker_id: {_eq: $projectWorkerId}}) {
            id
          }
        }
      }
    }
  }
}
    ${GcEmployeeFragFragmentDoc}
${ReportProjectWorkerFragmentFragmentDoc}`;

/**
 * __useGetProjectWorkerCreateDirectMessageQuery__
 *
 * To run a query within a React component, call `useGetProjectWorkerCreateDirectMessageQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectWorkerCreateDirectMessageQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectWorkerCreateDirectMessageQuery({
 *   variables: {
 *      projectWorkerId: // value for 'projectWorkerId'
 *   },
 * });
 */
export function useGetProjectWorkerCreateDirectMessageQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectWorkerCreateDirectMessageQuery, GetProjectWorkerCreateDirectMessageQueryVariables>) {
        return ApolloReactHooks.useQuery<GetProjectWorkerCreateDirectMessageQuery, GetProjectWorkerCreateDirectMessageQueryVariables>(GetProjectWorkerCreateDirectMessageDocument, baseOptions);
      }
export function useGetProjectWorkerCreateDirectMessageLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectWorkerCreateDirectMessageQuery, GetProjectWorkerCreateDirectMessageQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetProjectWorkerCreateDirectMessageQuery, GetProjectWorkerCreateDirectMessageQueryVariables>(GetProjectWorkerCreateDirectMessageDocument, baseOptions);
        }
export type GetProjectWorkerCreateDirectMessageQueryHookResult = ReturnType<typeof useGetProjectWorkerCreateDirectMessageQuery>;
export type GetProjectWorkerCreateDirectMessageLazyQueryHookResult = ReturnType<typeof useGetProjectWorkerCreateDirectMessageLazyQuery>;
export type GetProjectWorkerCreateDirectMessageQueryResult = ApolloReactCommon.QueryResult<GetProjectWorkerCreateDirectMessageQuery, GetProjectWorkerCreateDirectMessageQueryVariables>;
export const GetProjectWorkerOrientationDocument = gql`
    query GetProjectWorkerOrientation($projectWorkerId: uuid!, $projectId: uuid!) {
  project_worker_by_pk(id: $projectWorkerId) {
    id
    hard_hat_number
    user {
      id
      name
      username
      email
      profile_picture {
        ...ImageFragment
      }
      government_identification {
        front_image {
          id
          url
        }
        back_image {
          id
          url
        }
      }
    }
    worker {
      uid
      current_worker_role
      worker_title {
        ...WorkerTitleFrag
      }
      worker_certifications(order_by: {certification: {name: asc}}) {
        id
        expires_on
        certification {
          id
          name
        }
        images {
          id
          url
        }
      }
      worker_drug_tests(order_by: {name: asc}) {
        name
        drug_test_date
        created_at
        id
        images {
          id
          url
        }
      }
      subcontractor {
        id
        name
        project_crews(where: {project_id: {_eq: $projectId}}, order_by: {name: asc}) {
          id
          name
          lead_foreman_project_worker {
            id
            user {
              id
              name
            }
          }
        }
        trade {
          id
          name
        }
      }
    }
  }
  worker_role(order_by: {value: asc}) {
    value
  }
  certification(where: {is_custom: {_eq: false}}, order_by: {name: asc}) {
    id
    name
  }
}
    ${ImageFragmentFragmentDoc}
${WorkerTitleFragFragmentDoc}`;

/**
 * __useGetProjectWorkerOrientationQuery__
 *
 * To run a query within a React component, call `useGetProjectWorkerOrientationQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectWorkerOrientationQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectWorkerOrientationQuery({
 *   variables: {
 *      projectWorkerId: // value for 'projectWorkerId'
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useGetProjectWorkerOrientationQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectWorkerOrientationQuery, GetProjectWorkerOrientationQueryVariables>) {
        return ApolloReactHooks.useQuery<GetProjectWorkerOrientationQuery, GetProjectWorkerOrientationQueryVariables>(GetProjectWorkerOrientationDocument, baseOptions);
      }
export function useGetProjectWorkerOrientationLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectWorkerOrientationQuery, GetProjectWorkerOrientationQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetProjectWorkerOrientationQuery, GetProjectWorkerOrientationQueryVariables>(GetProjectWorkerOrientationDocument, baseOptions);
        }
export type GetProjectWorkerOrientationQueryHookResult = ReturnType<typeof useGetProjectWorkerOrientationQuery>;
export type GetProjectWorkerOrientationLazyQueryHookResult = ReturnType<typeof useGetProjectWorkerOrientationLazyQuery>;
export type GetProjectWorkerOrientationQueryResult = ApolloReactCommon.QueryResult<GetProjectWorkerOrientationQuery, GetProjectWorkerOrientationQueryVariables>;
export const GetProjectWorkerRolesDocument = gql`
    query GetProjectWorkerRoles {
  worker_role(order_by: {value: asc}) {
    value
  }
}
    `;

/**
 * __useGetProjectWorkerRolesQuery__
 *
 * To run a query within a React component, call `useGetProjectWorkerRolesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectWorkerRolesQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectWorkerRolesQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetProjectWorkerRolesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectWorkerRolesQuery, GetProjectWorkerRolesQueryVariables>) {
        return ApolloReactHooks.useQuery<GetProjectWorkerRolesQuery, GetProjectWorkerRolesQueryVariables>(GetProjectWorkerRolesDocument, baseOptions);
      }
export function useGetProjectWorkerRolesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectWorkerRolesQuery, GetProjectWorkerRolesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetProjectWorkerRolesQuery, GetProjectWorkerRolesQueryVariables>(GetProjectWorkerRolesDocument, baseOptions);
        }
export type GetProjectWorkerRolesQueryHookResult = ReturnType<typeof useGetProjectWorkerRolesQuery>;
export type GetProjectWorkerRolesLazyQueryHookResult = ReturnType<typeof useGetProjectWorkerRolesLazyQuery>;
export type GetProjectWorkerRolesQueryResult = ApolloReactCommon.QueryResult<GetProjectWorkerRolesQuery, GetProjectWorkerRolesQueryVariables>;
export const GetReportsDocument = gql`
    query GetReports($where: report_bool_exp, $limit: Int, $offset: Int) {
  report(where: $where, limit: $limit, offset: $offset, order_by: {created_at: desc}) {
    ...ReportFragment
  }
  report_aggregate(where: $where) {
    aggregate {
      count
    }
  }
}
    ${ReportFragmentFragmentDoc}`;

/**
 * __useGetReportsQuery__
 *
 * To run a query within a React component, call `useGetReportsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetReportsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetReportsQuery({
 *   variables: {
 *      where: // value for 'where'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetReportsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetReportsQuery, GetReportsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetReportsQuery, GetReportsQueryVariables>(GetReportsDocument, baseOptions);
      }
export function useGetReportsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetReportsQuery, GetReportsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetReportsQuery, GetReportsQueryVariables>(GetReportsDocument, baseOptions);
        }
export type GetReportsQueryHookResult = ReturnType<typeof useGetReportsQuery>;
export type GetReportsLazyQueryHookResult = ReturnType<typeof useGetReportsLazyQuery>;
export type GetReportsQueryResult = ApolloReactCommon.QueryResult<GetReportsQuery, GetReportsQueryVariables>;
export const GetReportByPkDocument = gql`
    query getReportByPk($reportId: uuid!) {
  report_by_pk(id: $reportId) {
    ...ReportFragment
  }
}
    ${ReportFragmentFragmentDoc}`;

/**
 * __useGetReportByPkQuery__
 *
 * To run a query within a React component, call `useGetReportByPkQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetReportByPkQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetReportByPkQuery({
 *   variables: {
 *      reportId: // value for 'reportId'
 *   },
 * });
 */
export function useGetReportByPkQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetReportByPkQuery, GetReportByPkQueryVariables>) {
        return ApolloReactHooks.useQuery<GetReportByPkQuery, GetReportByPkQueryVariables>(GetReportByPkDocument, baseOptions);
      }
export function useGetReportByPkLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetReportByPkQuery, GetReportByPkQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetReportByPkQuery, GetReportByPkQueryVariables>(GetReportByPkDocument, baseOptions);
        }
export type GetReportByPkQueryHookResult = ReturnType<typeof useGetReportByPkQuery>;
export type GetReportByPkLazyQueryHookResult = ReturnType<typeof useGetReportByPkLazyQuery>;
export type GetReportByPkQueryResult = ApolloReactCommon.QueryResult<GetReportByPkQuery, GetReportByPkQueryVariables>;
export const GetSafetyReportsListDocument = gql`
    query GetSafetyReportsList($where: report_bool_exp, $limit: Int, $offset: Int) {
  report(where: $where, limit: $limit, offset: $offset, order_by: {created_at: desc}) {
    ...SafetyReportListFragment
  }
  report_aggregate(where: $where) {
    aggregate {
      count
    }
  }
}
    ${SafetyReportListFragmentFragmentDoc}`;

/**
 * __useGetSafetyReportsListQuery__
 *
 * To run a query within a React component, call `useGetSafetyReportsListQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSafetyReportsListQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSafetyReportsListQuery({
 *   variables: {
 *      where: // value for 'where'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetSafetyReportsListQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSafetyReportsListQuery, GetSafetyReportsListQueryVariables>) {
        return ApolloReactHooks.useQuery<GetSafetyReportsListQuery, GetSafetyReportsListQueryVariables>(GetSafetyReportsListDocument, baseOptions);
      }
export function useGetSafetyReportsListLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSafetyReportsListQuery, GetSafetyReportsListQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetSafetyReportsListQuery, GetSafetyReportsListQueryVariables>(GetSafetyReportsListDocument, baseOptions);
        }
export type GetSafetyReportsListQueryHookResult = ReturnType<typeof useGetSafetyReportsListQuery>;
export type GetSafetyReportsListLazyQueryHookResult = ReturnType<typeof useGetSafetyReportsListLazyQuery>;
export type GetSafetyReportsListQueryResult = ApolloReactCommon.QueryResult<GetSafetyReportsListQuery, GetSafetyReportsListQueryVariables>;
export const GetSubcontractorsDocument = gql`
    query GetSubcontractors($where: subcontractor_bool_exp) {
  subcontractor(where: $where, order_by: {name: asc}) {
    ...SubcontractorFragment
  }
  subcontractor_aggregate(where: $where) {
    aggregate {
      count
    }
  }
}
    ${SubcontractorFragmentFragmentDoc}`;

/**
 * __useGetSubcontractorsQuery__
 *
 * To run a query within a React component, call `useGetSubcontractorsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSubcontractorsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSubcontractorsQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetSubcontractorsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSubcontractorsQuery, GetSubcontractorsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetSubcontractorsQuery, GetSubcontractorsQueryVariables>(GetSubcontractorsDocument, baseOptions);
      }
export function useGetSubcontractorsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSubcontractorsQuery, GetSubcontractorsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetSubcontractorsQuery, GetSubcontractorsQueryVariables>(GetSubcontractorsDocument, baseOptions);
        }
export type GetSubcontractorsQueryHookResult = ReturnType<typeof useGetSubcontractorsQuery>;
export type GetSubcontractorsLazyQueryHookResult = ReturnType<typeof useGetSubcontractorsLazyQuery>;
export type GetSubcontractorsQueryResult = ApolloReactCommon.QueryResult<GetSubcontractorsQuery, GetSubcontractorsQueryVariables>;
export const GetSubcontractorByPkDocument = gql`
    query GetSubcontractorByPk($subcontractorId: uuid!, $projectId: uuid!) {
  subcontractor_by_pk(id: $subcontractorId) {
    id
    name
    trade {
      id
      name
    }
    project_workers(where: {project_id: {_eq: $projectId}}, order_by: {user: {name: asc}}) {
      ...ProjectWorkerFragment
    }
  }
}
    ${ProjectWorkerFragmentFragmentDoc}`;

/**
 * __useGetSubcontractorByPkQuery__
 *
 * To run a query within a React component, call `useGetSubcontractorByPkQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSubcontractorByPkQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSubcontractorByPkQuery({
 *   variables: {
 *      subcontractorId: // value for 'subcontractorId'
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useGetSubcontractorByPkQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSubcontractorByPkQuery, GetSubcontractorByPkQueryVariables>) {
        return ApolloReactHooks.useQuery<GetSubcontractorByPkQuery, GetSubcontractorByPkQueryVariables>(GetSubcontractorByPkDocument, baseOptions);
      }
export function useGetSubcontractorByPkLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSubcontractorByPkQuery, GetSubcontractorByPkQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetSubcontractorByPkQuery, GetSubcontractorByPkQueryVariables>(GetSubcontractorByPkDocument, baseOptions);
        }
export type GetSubcontractorByPkQueryHookResult = ReturnType<typeof useGetSubcontractorByPkQuery>;
export type GetSubcontractorByPkLazyQueryHookResult = ReturnType<typeof useGetSubcontractorByPkLazyQuery>;
export type GetSubcontractorByPkQueryResult = ApolloReactCommon.QueryResult<GetSubcontractorByPkQuery, GetSubcontractorByPkQueryVariables>;
export const GetSubcontractorEmployeesDocument = gql`
    query GetSubcontractorEmployees($where: subcontractor_employee_bool_exp, $order_by: [subcontractor_employee_order_by!]) {
  subcontractor_employee(where: $where, order_by: $order_by) {
    user_id
    employee_title {
      id
      name {
        ...TextTranslationFrag
      }
    }
    user {
      id
      name
      email
      phone_number
    }
  }
}
    ${TextTranslationFragFragmentDoc}`;

/**
 * __useGetSubcontractorEmployeesQuery__
 *
 * To run a query within a React component, call `useGetSubcontractorEmployeesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSubcontractorEmployeesQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSubcontractorEmployeesQuery({
 *   variables: {
 *      where: // value for 'where'
 *      order_by: // value for 'order_by'
 *   },
 * });
 */
export function useGetSubcontractorEmployeesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSubcontractorEmployeesQuery, GetSubcontractorEmployeesQueryVariables>) {
        return ApolloReactHooks.useQuery<GetSubcontractorEmployeesQuery, GetSubcontractorEmployeesQueryVariables>(GetSubcontractorEmployeesDocument, baseOptions);
      }
export function useGetSubcontractorEmployeesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSubcontractorEmployeesQuery, GetSubcontractorEmployeesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetSubcontractorEmployeesQuery, GetSubcontractorEmployeesQueryVariables>(GetSubcontractorEmployeesDocument, baseOptions);
        }
export type GetSubcontractorEmployeesQueryHookResult = ReturnType<typeof useGetSubcontractorEmployeesQuery>;
export type GetSubcontractorEmployeesLazyQueryHookResult = ReturnType<typeof useGetSubcontractorEmployeesLazyQuery>;
export type GetSubcontractorEmployeesQueryResult = ApolloReactCommon.QueryResult<GetSubcontractorEmployeesQuery, GetSubcontractorEmployeesQueryVariables>;
export const GetSubcontractorEmployeeByPkDocument = gql`
    query GetSubcontractorEmployeeByPk($uid: uuid!) {
  subcontractor_employee_by_pk(user_id: $uid) {
    user_id
    employee_title {
      id
      name {
        ...TextTranslationFrag
      }
    }
    user {
      id
      name
      email
      phone_number
    }
  }
}
    ${TextTranslationFragFragmentDoc}`;

/**
 * __useGetSubcontractorEmployeeByPkQuery__
 *
 * To run a query within a React component, call `useGetSubcontractorEmployeeByPkQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSubcontractorEmployeeByPkQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSubcontractorEmployeeByPkQuery({
 *   variables: {
 *      uid: // value for 'uid'
 *   },
 * });
 */
export function useGetSubcontractorEmployeeByPkQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSubcontractorEmployeeByPkQuery, GetSubcontractorEmployeeByPkQueryVariables>) {
        return ApolloReactHooks.useQuery<GetSubcontractorEmployeeByPkQuery, GetSubcontractorEmployeeByPkQueryVariables>(GetSubcontractorEmployeeByPkDocument, baseOptions);
      }
export function useGetSubcontractorEmployeeByPkLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSubcontractorEmployeeByPkQuery, GetSubcontractorEmployeeByPkQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetSubcontractorEmployeeByPkQuery, GetSubcontractorEmployeeByPkQueryVariables>(GetSubcontractorEmployeeByPkDocument, baseOptions);
        }
export type GetSubcontractorEmployeeByPkQueryHookResult = ReturnType<typeof useGetSubcontractorEmployeeByPkQuery>;
export type GetSubcontractorEmployeeByPkLazyQueryHookResult = ReturnType<typeof useGetSubcontractorEmployeeByPkLazyQuery>;
export type GetSubcontractorEmployeeByPkQueryResult = ApolloReactCommon.QueryResult<GetSubcontractorEmployeeByPkQuery, GetSubcontractorEmployeeByPkQueryVariables>;
export const GetSubProjectHazardsDocument = gql`
    query GetSubProjectHazards($projectId: uuid!, $subcontractorId: uuid!, $nowDate: timestamptz!) {
  activeHazards: project_hazard(where: {project_id: {_eq: $projectId}, project_hazard_subcontractors: {subcontractor_id: {_eq: $subcontractorId}}, expiry_date: {_gte: $nowDate}}) {
    ...ProjectHazardFragment
  }
  expiredHazards: project_hazard(where: {project_id: {_eq: $projectId}, project_hazard_subcontractors: {subcontractor_id: {_eq: $subcontractorId}}, expiry_date: {_lt: $nowDate}}) {
    ...ProjectHazardFragment
  }
}
    ${ProjectHazardFragmentFragmentDoc}`;

/**
 * __useGetSubProjectHazardsQuery__
 *
 * To run a query within a React component, call `useGetSubProjectHazardsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSubProjectHazardsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSubProjectHazardsQuery({
 *   variables: {
 *      projectId: // value for 'projectId'
 *      subcontractorId: // value for 'subcontractorId'
 *      nowDate: // value for 'nowDate'
 *   },
 * });
 */
export function useGetSubProjectHazardsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSubProjectHazardsQuery, GetSubProjectHazardsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetSubProjectHazardsQuery, GetSubProjectHazardsQueryVariables>(GetSubProjectHazardsDocument, baseOptions);
      }
export function useGetSubProjectHazardsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSubProjectHazardsQuery, GetSubProjectHazardsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetSubProjectHazardsQuery, GetSubProjectHazardsQueryVariables>(GetSubProjectHazardsDocument, baseOptions);
        }
export type GetSubProjectHazardsQueryHookResult = ReturnType<typeof useGetSubProjectHazardsQuery>;
export type GetSubProjectHazardsLazyQueryHookResult = ReturnType<typeof useGetSubProjectHazardsLazyQuery>;
export type GetSubProjectHazardsQueryResult = ApolloReactCommon.QueryResult<GetSubProjectHazardsQuery, GetSubProjectHazardsQueryVariables>;
export const GetSubUserInitialDataDocument = gql`
    query GetSubUserInitialData($uid: uuid!) {
  user_by_pk(id: $uid) {
    id
    name
    role
    username
    email
    phone_number
    lang
    subcontractor_employee {
      user_id
      employee_title {
        id
        name {
          ...TextTranslationFrag
        }
      }
      subcontractor {
        id
        name
        trade {
          id
          name
        }
        subcontractor_projects {
          subcontractor {
            id
            name
            trade {
              id
              name
            }
          }
          project {
            id
            name
            general_contractor {
              id
              name
            }
          }
        }
      }
    }
  }
}
    ${TextTranslationFragFragmentDoc}`;

/**
 * __useGetSubUserInitialDataQuery__
 *
 * To run a query within a React component, call `useGetSubUserInitialDataQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSubUserInitialDataQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSubUserInitialDataQuery({
 *   variables: {
 *      uid: // value for 'uid'
 *   },
 * });
 */
export function useGetSubUserInitialDataQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSubUserInitialDataQuery, GetSubUserInitialDataQueryVariables>) {
        return ApolloReactHooks.useQuery<GetSubUserInitialDataQuery, GetSubUserInitialDataQueryVariables>(GetSubUserInitialDataDocument, baseOptions);
      }
export function useGetSubUserInitialDataLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSubUserInitialDataQuery, GetSubUserInitialDataQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetSubUserInitialDataQuery, GetSubUserInitialDataQueryVariables>(GetSubUserInitialDataDocument, baseOptions);
        }
export type GetSubUserInitialDataQueryHookResult = ReturnType<typeof useGetSubUserInitialDataQuery>;
export type GetSubUserInitialDataLazyQueryHookResult = ReturnType<typeof useGetSubUserInitialDataLazyQuery>;
export type GetSubUserInitialDataQueryResult = ApolloReactCommon.QueryResult<GetSubUserInitialDataQuery, GetSubUserInitialDataQueryVariables>;
export const GetSubWorkersScreenDocument = gql`
    query GetSubWorkersScreen($projectId: uuid!, $subcontractorId: uuid!) {
  project_worker(where: {deleted_at: {_is_null: true}, project_id: {_eq: $projectId}, subcontractor_id: {_eq: $subcontractorId}}, order_by: {user: {name: asc}}) {
    ...ProjectWorkerFragment
  }
  project_crew(where: {project_id: {_eq: $projectId}, subcontractor_id: {_eq: $subcontractorId}}, order_by: {name: asc}) {
    id
    name
    subcontractor {
      id
      name
    }
    project {
      id
      name
    }
    lead_foreman_project_worker {
      ...ProjectWorkerFragment
    }
    project_workers_aggregate {
      aggregate {
        count
      }
    }
  }
  worker(where: {subcontractor_id: {_eq: $subcontractorId}}, order_by: {user: {name: asc}}) {
    current_worker_role
    worker_title {
      ...WorkerTitleFrag
    }
    user {
      id
      name
      email
      phone_number
      profile_picture {
        id
        url
      }
    }
  }
}
    ${ProjectWorkerFragmentFragmentDoc}
${WorkerTitleFragFragmentDoc}`;

/**
 * __useGetSubWorkersScreenQuery__
 *
 * To run a query within a React component, call `useGetSubWorkersScreenQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSubWorkersScreenQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSubWorkersScreenQuery({
 *   variables: {
 *      projectId: // value for 'projectId'
 *      subcontractorId: // value for 'subcontractorId'
 *   },
 * });
 */
export function useGetSubWorkersScreenQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSubWorkersScreenQuery, GetSubWorkersScreenQueryVariables>) {
        return ApolloReactHooks.useQuery<GetSubWorkersScreenQuery, GetSubWorkersScreenQueryVariables>(GetSubWorkersScreenDocument, baseOptions);
      }
export function useGetSubWorkersScreenLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSubWorkersScreenQuery, GetSubWorkersScreenQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetSubWorkersScreenQuery, GetSubWorkersScreenQueryVariables>(GetSubWorkersScreenDocument, baseOptions);
        }
export type GetSubWorkersScreenQueryHookResult = ReturnType<typeof useGetSubWorkersScreenQuery>;
export type GetSubWorkersScreenLazyQueryHookResult = ReturnType<typeof useGetSubWorkersScreenLazyQuery>;
export type GetSubWorkersScreenQueryResult = ApolloReactCommon.QueryResult<GetSubWorkersScreenQuery, GetSubWorkersScreenQueryVariables>;
export const GetTasksDocument = gql`
    query GetTasks($where: task_bool_exp) {
  task(where: $where, order_by: {description: {en: asc}}) {
    ...TaskFragment
  }
}
    ${TaskFragmentFragmentDoc}`;

/**
 * __useGetTasksQuery__
 *
 * To run a query within a React component, call `useGetTasksQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTasksQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTasksQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetTasksQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTasksQuery, GetTasksQueryVariables>) {
        return ApolloReactHooks.useQuery<GetTasksQuery, GetTasksQueryVariables>(GetTasksDocument, baseOptions);
      }
export function useGetTasksLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTasksQuery, GetTasksQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetTasksQuery, GetTasksQueryVariables>(GetTasksDocument, baseOptions);
        }
export type GetTasksQueryHookResult = ReturnType<typeof useGetTasksQuery>;
export type GetTasksLazyQueryHookResult = ReturnType<typeof useGetTasksLazyQuery>;
export type GetTasksQueryResult = ApolloReactCommon.QueryResult<GetTasksQuery, GetTasksQueryVariables>;
export const GetTaskByPkDocument = gql`
    query GetTaskByPk($id: uuid!) {
  task_by_pk(id: $id) {
    ...TaskFragment
  }
}
    ${TaskFragmentFragmentDoc}`;

/**
 * __useGetTaskByPkQuery__
 *
 * To run a query within a React component, call `useGetTaskByPkQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTaskByPkQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTaskByPkQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetTaskByPkQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTaskByPkQuery, GetTaskByPkQueryVariables>) {
        return ApolloReactHooks.useQuery<GetTaskByPkQuery, GetTaskByPkQueryVariables>(GetTaskByPkDocument, baseOptions);
      }
export function useGetTaskByPkLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTaskByPkQuery, GetTaskByPkQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetTaskByPkQuery, GetTaskByPkQueryVariables>(GetTaskByPkDocument, baseOptions);
        }
export type GetTaskByPkQueryHookResult = ReturnType<typeof useGetTaskByPkQuery>;
export type GetTaskByPkLazyQueryHookResult = ReturnType<typeof useGetTaskByPkLazyQuery>;
export type GetTaskByPkQueryResult = ApolloReactCommon.QueryResult<GetTaskByPkQuery, GetTaskByPkQueryVariables>;
export const GetTodosDocument = gql`
    query GetTodos($where: todo_bool_exp, $order_by: [todo_order_by!], $limit: Int) {
  todo(where: $where, order_by: $order_by, limit: $limit) {
    ...TodoDetailsFrag
  }
}
    ${TodoDetailsFragFragmentDoc}`;

/**
 * __useGetTodosQuery__
 *
 * To run a query within a React component, call `useGetTodosQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTodosQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTodosQuery({
 *   variables: {
 *      where: // value for 'where'
 *      order_by: // value for 'order_by'
 *      limit: // value for 'limit'
 *   },
 * });
 */
export function useGetTodosQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTodosQuery, GetTodosQueryVariables>) {
        return ApolloReactHooks.useQuery<GetTodosQuery, GetTodosQueryVariables>(GetTodosDocument, baseOptions);
      }
export function useGetTodosLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTodosQuery, GetTodosQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetTodosQuery, GetTodosQueryVariables>(GetTodosDocument, baseOptions);
        }
export type GetTodosQueryHookResult = ReturnType<typeof useGetTodosQuery>;
export type GetTodosLazyQueryHookResult = ReturnType<typeof useGetTodosLazyQuery>;
export type GetTodosQueryResult = ApolloReactCommon.QueryResult<GetTodosQuery, GetTodosQueryVariables>;
export const GetTodoByPkDocument = gql`
    query GetTodoByPk($todoId: uuid!) {
  todo_by_pk(id: $todoId) {
    ...TodoDetailsFrag
  }
}
    ${TodoDetailsFragFragmentDoc}`;

/**
 * __useGetTodoByPkQuery__
 *
 * To run a query within a React component, call `useGetTodoByPkQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTodoByPkQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTodoByPkQuery({
 *   variables: {
 *      todoId: // value for 'todoId'
 *   },
 * });
 */
export function useGetTodoByPkQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTodoByPkQuery, GetTodoByPkQueryVariables>) {
        return ApolloReactHooks.useQuery<GetTodoByPkQuery, GetTodoByPkQueryVariables>(GetTodoByPkDocument, baseOptions);
      }
export function useGetTodoByPkLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTodoByPkQuery, GetTodoByPkQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetTodoByPkQuery, GetTodoByPkQueryVariables>(GetTodoByPkDocument, baseOptions);
        }
export type GetTodoByPkQueryHookResult = ReturnType<typeof useGetTodoByPkQuery>;
export type GetTodoByPkLazyQueryHookResult = ReturnType<typeof useGetTodoByPkLazyQuery>;
export type GetTodoByPkQueryResult = ApolloReactCommon.QueryResult<GetTodoByPkQuery, GetTodoByPkQueryVariables>;
export const GetToolboxTalksDocument = gql`
    query GetToolboxTalks($where: toolbox_talk_bool_exp, $limit: Int, $offset: Int) {
  toolbox_talk(where: $where, limit: $limit, offset: $offset, order_by: {created_at: desc}) {
    ...ToolboxTalkFragment
  }
}
    ${ToolboxTalkFragmentFragmentDoc}`;

/**
 * __useGetToolboxTalksQuery__
 *
 * To run a query within a React component, call `useGetToolboxTalksQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetToolboxTalksQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetToolboxTalksQuery({
 *   variables: {
 *      where: // value for 'where'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetToolboxTalksQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetToolboxTalksQuery, GetToolboxTalksQueryVariables>) {
        return ApolloReactHooks.useQuery<GetToolboxTalksQuery, GetToolboxTalksQueryVariables>(GetToolboxTalksDocument, baseOptions);
      }
export function useGetToolboxTalksLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetToolboxTalksQuery, GetToolboxTalksQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetToolboxTalksQuery, GetToolboxTalksQueryVariables>(GetToolboxTalksDocument, baseOptions);
        }
export type GetToolboxTalksQueryHookResult = ReturnType<typeof useGetToolboxTalksQuery>;
export type GetToolboxTalksLazyQueryHookResult = ReturnType<typeof useGetToolboxTalksLazyQuery>;
export type GetToolboxTalksQueryResult = ApolloReactCommon.QueryResult<GetToolboxTalksQuery, GetToolboxTalksQueryVariables>;
export const GetToolboxTalkByPkDocument = gql`
    query GetToolboxTalkByPk($toolboxTalkId: uuid!) {
  toolbox_talk_by_pk(id: $toolboxTalkId) {
    ...ToolboxTalkFragment
  }
}
    ${ToolboxTalkFragmentFragmentDoc}`;

/**
 * __useGetToolboxTalkByPkQuery__
 *
 * To run a query within a React component, call `useGetToolboxTalkByPkQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetToolboxTalkByPkQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetToolboxTalkByPkQuery({
 *   variables: {
 *      toolboxTalkId: // value for 'toolboxTalkId'
 *   },
 * });
 */
export function useGetToolboxTalkByPkQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetToolboxTalkByPkQuery, GetToolboxTalkByPkQueryVariables>) {
        return ApolloReactHooks.useQuery<GetToolboxTalkByPkQuery, GetToolboxTalkByPkQueryVariables>(GetToolboxTalkByPkDocument, baseOptions);
      }
export function useGetToolboxTalkByPkLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetToolboxTalkByPkQuery, GetToolboxTalkByPkQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetToolboxTalkByPkQuery, GetToolboxTalkByPkQueryVariables>(GetToolboxTalkByPkDocument, baseOptions);
        }
export type GetToolboxTalkByPkQueryHookResult = ReturnType<typeof useGetToolboxTalkByPkQuery>;
export type GetToolboxTalkByPkLazyQueryHookResult = ReturnType<typeof useGetToolboxTalkByPkLazyQuery>;
export type GetToolboxTalkByPkQueryResult = ApolloReactCommon.QueryResult<GetToolboxTalkByPkQuery, GetToolboxTalkByPkQueryVariables>;
export const GetUserByPkDocument = gql`
    query GetUserByPk($user_id: uuid!) {
  user_by_pk(id: $user_id) {
    id
    name
    worker {
      worker_projects {
        id
        created_at
        worker_role
        can_insert_report
        subcontractor_id
        project_crew {
          id
          name
        }
        title {
          ...WorkerTitleFrag
        }
        project {
          id
          name
        }
      }
    }
  }
}
    ${WorkerTitleFragFragmentDoc}`;

/**
 * __useGetUserByPkQuery__
 *
 * To run a query within a React component, call `useGetUserByPkQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserByPkQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserByPkQuery({
 *   variables: {
 *      user_id: // value for 'user_id'
 *   },
 * });
 */
export function useGetUserByPkQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUserByPkQuery, GetUserByPkQueryVariables>) {
        return ApolloReactHooks.useQuery<GetUserByPkQuery, GetUserByPkQueryVariables>(GetUserByPkDocument, baseOptions);
      }
export function useGetUserByPkLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUserByPkQuery, GetUserByPkQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetUserByPkQuery, GetUserByPkQueryVariables>(GetUserByPkDocument, baseOptions);
        }
export type GetUserByPkQueryHookResult = ReturnType<typeof useGetUserByPkQuery>;
export type GetUserByPkLazyQueryHookResult = ReturnType<typeof useGetUserByPkLazyQuery>;
export type GetUserByPkQueryResult = ApolloReactCommon.QueryResult<GetUserByPkQuery, GetUserByPkQueryVariables>;
export const GetUserUidDocument = gql`
    query GetUserUid @client {
  uid
}
    `;

/**
 * __useGetUserUidQuery__
 *
 * To run a query within a React component, call `useGetUserUidQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserUidQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserUidQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetUserUidQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUserUidQuery, GetUserUidQueryVariables>) {
        return ApolloReactHooks.useQuery<GetUserUidQuery, GetUserUidQueryVariables>(GetUserUidDocument, baseOptions);
      }
export function useGetUserUidLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUserUidQuery, GetUserUidQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetUserUidQuery, GetUserUidQueryVariables>(GetUserUidDocument, baseOptions);
        }
export type GetUserUidQueryHookResult = ReturnType<typeof useGetUserUidQuery>;
export type GetUserUidLazyQueryHookResult = ReturnType<typeof useGetUserUidLazyQuery>;
export type GetUserUidQueryResult = ApolloReactCommon.QueryResult<GetUserUidQuery, GetUserUidQueryVariables>;
export const GetViewingTaskDocument = gql`
    query GetViewingTask {
  viewingTask @client {
    taskId
    editing
  }
}
    `;

/**
 * __useGetViewingTaskQuery__
 *
 * To run a query within a React component, call `useGetViewingTaskQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetViewingTaskQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetViewingTaskQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetViewingTaskQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetViewingTaskQuery, GetViewingTaskQueryVariables>) {
        return ApolloReactHooks.useQuery<GetViewingTaskQuery, GetViewingTaskQueryVariables>(GetViewingTaskDocument, baseOptions);
      }
export function useGetViewingTaskLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetViewingTaskQuery, GetViewingTaskQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetViewingTaskQuery, GetViewingTaskQueryVariables>(GetViewingTaskDocument, baseOptions);
        }
export type GetViewingTaskQueryHookResult = ReturnType<typeof useGetViewingTaskQuery>;
export type GetViewingTaskLazyQueryHookResult = ReturnType<typeof useGetViewingTaskLazyQuery>;
export type GetViewingTaskQueryResult = ApolloReactCommon.QueryResult<GetViewingTaskQuery, GetViewingTaskQueryVariables>;
export const GetWorkersDocument = gql`
    query GetWorkers($where: worker_bool_exp) {
  worker(where: $where, order_by: {user: {name: asc}}) {
    uid
    current_worker_role
    worker_title {
      ...WorkerTitleFrag
    }
    user {
      id
      username
      phone_number
      email
      name
      profile_picture {
        ...ImageFragment
      }
    }
    subcontractor {
      id
      name
    }
    worker_projects_aggregate {
      aggregate {
        count
      }
    }
  }
}
    ${WorkerTitleFragFragmentDoc}
${ImageFragmentFragmentDoc}`;

/**
 * __useGetWorkersQuery__
 *
 * To run a query within a React component, call `useGetWorkersQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetWorkersQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetWorkersQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetWorkersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetWorkersQuery, GetWorkersQueryVariables>) {
        return ApolloReactHooks.useQuery<GetWorkersQuery, GetWorkersQueryVariables>(GetWorkersDocument, baseOptions);
      }
export function useGetWorkersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetWorkersQuery, GetWorkersQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetWorkersQuery, GetWorkersQueryVariables>(GetWorkersDocument, baseOptions);
        }
export type GetWorkersQueryHookResult = ReturnType<typeof useGetWorkersQuery>;
export type GetWorkersLazyQueryHookResult = ReturnType<typeof useGetWorkersLazyQuery>;
export type GetWorkersQueryResult = ApolloReactCommon.QueryResult<GetWorkersQuery, GetWorkersQueryVariables>;
export const GetWorkersByNameDocument = gql`
    query GetWorkersByName($nameSearch: String) {
  user(where: {name: {_ilike: $nameSearch}, worker: {}}) {
    id
    name
    profile_picture {
      id
      url
    }
  }
}
    `;

/**
 * __useGetWorkersByNameQuery__
 *
 * To run a query within a React component, call `useGetWorkersByNameQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetWorkersByNameQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetWorkersByNameQuery({
 *   variables: {
 *      nameSearch: // value for 'nameSearch'
 *   },
 * });
 */
export function useGetWorkersByNameQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetWorkersByNameQuery, GetWorkersByNameQueryVariables>) {
        return ApolloReactHooks.useQuery<GetWorkersByNameQuery, GetWorkersByNameQueryVariables>(GetWorkersByNameDocument, baseOptions);
      }
export function useGetWorkersByNameLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetWorkersByNameQuery, GetWorkersByNameQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetWorkersByNameQuery, GetWorkersByNameQueryVariables>(GetWorkersByNameDocument, baseOptions);
        }
export type GetWorkersByNameQueryHookResult = ReturnType<typeof useGetWorkersByNameQuery>;
export type GetWorkersByNameLazyQueryHookResult = ReturnType<typeof useGetWorkersByNameLazyQuery>;
export type GetWorkersByNameQueryResult = ApolloReactCommon.QueryResult<GetWorkersByNameQuery, GetWorkersByNameQueryVariables>;
export const GetWorkerAddTodoAssigneesDocument = gql`
    query GetWorkerAddTodoAssignees($todoId: uuid!, $subId: uuid!) {
  project_worker(where: {deleted_at: {_is_null: true}, project: {todos: {id: {_eq: $todoId}}}, subcontractor_id: {_eq: $subId}, _not: {project_users: {todo_assignees: {todo_id: {_eq: $todoId}}}}}, order_by: [{user: {name: asc}}]) {
    ...ReportProjectWorkerFragment
  }
}
    ${ReportProjectWorkerFragmentFragmentDoc}`;

/**
 * __useGetWorkerAddTodoAssigneesQuery__
 *
 * To run a query within a React component, call `useGetWorkerAddTodoAssigneesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetWorkerAddTodoAssigneesQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetWorkerAddTodoAssigneesQuery({
 *   variables: {
 *      todoId: // value for 'todoId'
 *      subId: // value for 'subId'
 *   },
 * });
 */
export function useGetWorkerAddTodoAssigneesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetWorkerAddTodoAssigneesQuery, GetWorkerAddTodoAssigneesQueryVariables>) {
        return ApolloReactHooks.useQuery<GetWorkerAddTodoAssigneesQuery, GetWorkerAddTodoAssigneesQueryVariables>(GetWorkerAddTodoAssigneesDocument, baseOptions);
      }
export function useGetWorkerAddTodoAssigneesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetWorkerAddTodoAssigneesQuery, GetWorkerAddTodoAssigneesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetWorkerAddTodoAssigneesQuery, GetWorkerAddTodoAssigneesQueryVariables>(GetWorkerAddTodoAssigneesDocument, baseOptions);
        }
export type GetWorkerAddTodoAssigneesQueryHookResult = ReturnType<typeof useGetWorkerAddTodoAssigneesQuery>;
export type GetWorkerAddTodoAssigneesLazyQueryHookResult = ReturnType<typeof useGetWorkerAddTodoAssigneesLazyQuery>;
export type GetWorkerAddTodoAssigneesQueryResult = ApolloReactCommon.QueryResult<GetWorkerAddTodoAssigneesQuery, GetWorkerAddTodoAssigneesQueryVariables>;
export const GetWorkerByPkDocument = gql`
    query GetWorkerByPk($userId: uuid!) {
  worker_by_pk(uid: $userId) {
    user {
      id
      name
      username
      email
      profile_picture {
        id
        url
      }
      government_identification {
        front_image {
          id
          url
        }
        back_image {
          id
          url
        }
      }
    }
    subcontractor {
      id
      name
    }
    worker_certifications {
      id
      expires_on
      certification {
        id
        name
      }
      images {
        id
        url
      }
    }
    worker_drug_tests {
      name
      drug_test_date
      created_at
      id
      images {
        id
        url
      }
    }
    worker_title {
      ...WorkerTitleFrag
    }
    worker_projects {
      id
      created_at
      worker_role
      hard_hat_number
      orientation_signature_image {
        id
        url
        created_at
      }
      project_worker_competencies {
        description
      }
      title {
        ...WorkerTitleFrag
      }
      project_crew {
        name
        subcontractor {
          id
          name
        }
      }
      project {
        name
        id
      }
    }
  }
}
    ${WorkerTitleFragFragmentDoc}`;

/**
 * __useGetWorkerByPkQuery__
 *
 * To run a query within a React component, call `useGetWorkerByPkQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetWorkerByPkQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetWorkerByPkQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *   },
 * });
 */
export function useGetWorkerByPkQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetWorkerByPkQuery, GetWorkerByPkQueryVariables>) {
        return ApolloReactHooks.useQuery<GetWorkerByPkQuery, GetWorkerByPkQueryVariables>(GetWorkerByPkDocument, baseOptions);
      }
export function useGetWorkerByPkLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetWorkerByPkQuery, GetWorkerByPkQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetWorkerByPkQuery, GetWorkerByPkQueryVariables>(GetWorkerByPkDocument, baseOptions);
        }
export type GetWorkerByPkQueryHookResult = ReturnType<typeof useGetWorkerByPkQuery>;
export type GetWorkerByPkLazyQueryHookResult = ReturnType<typeof useGetWorkerByPkLazyQuery>;
export type GetWorkerByPkQueryResult = ApolloReactCommon.QueryResult<GetWorkerByPkQuery, GetWorkerByPkQueryVariables>;
export const GetWorkerByPkWithProjectDocument = gql`
    query getWorkerByPkWithProject($workerId: uuid!, $projectWorkerId: uuid!) {
  worker_by_pk(uid: $workerId) {
    uid
  }
}
    `;

/**
 * __useGetWorkerByPkWithProjectQuery__
 *
 * To run a query within a React component, call `useGetWorkerByPkWithProjectQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetWorkerByPkWithProjectQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetWorkerByPkWithProjectQuery({
 *   variables: {
 *      workerId: // value for 'workerId'
 *      projectWorkerId: // value for 'projectWorkerId'
 *   },
 * });
 */
export function useGetWorkerByPkWithProjectQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetWorkerByPkWithProjectQuery, GetWorkerByPkWithProjectQueryVariables>) {
        return ApolloReactHooks.useQuery<GetWorkerByPkWithProjectQuery, GetWorkerByPkWithProjectQueryVariables>(GetWorkerByPkWithProjectDocument, baseOptions);
      }
export function useGetWorkerByPkWithProjectLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetWorkerByPkWithProjectQuery, GetWorkerByPkWithProjectQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetWorkerByPkWithProjectQuery, GetWorkerByPkWithProjectQueryVariables>(GetWorkerByPkWithProjectDocument, baseOptions);
        }
export type GetWorkerByPkWithProjectQueryHookResult = ReturnType<typeof useGetWorkerByPkWithProjectQuery>;
export type GetWorkerByPkWithProjectLazyQueryHookResult = ReturnType<typeof useGetWorkerByPkWithProjectLazyQuery>;
export type GetWorkerByPkWithProjectQueryResult = ApolloReactCommon.QueryResult<GetWorkerByPkWithProjectQuery, GetWorkerByPkWithProjectQueryVariables>;
export const GetWorkerChatMembersToAddDocument = gql`
    query GetWorkerChatMembersToAdd($chatId: uuid!, $subId: uuid!) {
  project_worker(where: {deleted_at: {_is_null: true}, subcontractor_id: {_eq: $subId}, project: {chats: {id: {_eq: $chatId}}}, _or: [{_not: {chat_members: {}}}, {_not: {chat_members: {deleted_at: {_is_null: true}, chat_id: {_eq: $chatId}}}}]}, order_by: [{user: {name: asc}}]) {
    ...ReportProjectWorkerFragment
  }
}
    ${ReportProjectWorkerFragmentFragmentDoc}`;

/**
 * __useGetWorkerChatMembersToAddQuery__
 *
 * To run a query within a React component, call `useGetWorkerChatMembersToAddQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetWorkerChatMembersToAddQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetWorkerChatMembersToAddQuery({
 *   variables: {
 *      chatId: // value for 'chatId'
 *      subId: // value for 'subId'
 *   },
 * });
 */
export function useGetWorkerChatMembersToAddQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetWorkerChatMembersToAddQuery, GetWorkerChatMembersToAddQueryVariables>) {
        return ApolloReactHooks.useQuery<GetWorkerChatMembersToAddQuery, GetWorkerChatMembersToAddQueryVariables>(GetWorkerChatMembersToAddDocument, baseOptions);
      }
export function useGetWorkerChatMembersToAddLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetWorkerChatMembersToAddQuery, GetWorkerChatMembersToAddQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetWorkerChatMembersToAddQuery, GetWorkerChatMembersToAddQueryVariables>(GetWorkerChatMembersToAddDocument, baseOptions);
        }
export type GetWorkerChatMembersToAddQueryHookResult = ReturnType<typeof useGetWorkerChatMembersToAddQuery>;
export type GetWorkerChatMembersToAddLazyQueryHookResult = ReturnType<typeof useGetWorkerChatMembersToAddLazyQuery>;
export type GetWorkerChatMembersToAddQueryResult = ApolloReactCommon.QueryResult<GetWorkerChatMembersToAddQuery, GetWorkerChatMembersToAddQueryVariables>;
export const GetWorkerInitialDataDocument = gql`
    query GetWorkerInitialData($uid: uuid!) {
  user_by_pk(id: $uid) {
    id
    name
    role
    username
    email
    phone_number
    lang
    user_saved_emails(order_by: {email: asc}) {
      id
      email
    }
    worker {
      email_daily_report_on_submit
      email_safety_report_on_submit
      subcontractor {
        id
        name
        trade {
          id
          name
        }
      }
      worker_projects(order_by: {project: {name: asc}}) {
        ...ReportProjectWorkerFragment
        id
        created_at
        worker_role
        can_insert_report
        subcontractor_id
        subcontractor {
          id
          name
        }
        auto_emails {
          email
          event
        }
        project_covid_tested_positives(where: {_not: {cleared_project_covid_tested_positive_worker: {}}}) {
          id
          created_at
          external_id
        }
        project_covid_certifies(where: {_not: {cleared_project_covid_certify_worker: {}}}) {
          id
          created_at
          external_id
          project_covid_certified_worker_answers {
            project_covid_yes_no_question {
              id
              question {
                ...TextTranslationFrag
              }
            }
            answered_yes
          }
        }
        project_crew {
          id
          name
        }
        title {
          ...WorkerTitleFrag
        }
        project {
          id
          name
          external_id
          general_contractor {
            id
            name
          }
          project_covid_config {
            project_id
            requirements {
              ...TextTranslationFrag
            }
            worker_restriction_length
            project_covid_tested_positive_questions(order_by: {sort_id: asc}) {
              id
              question {
                ...TextTranslationFrag
              }
            }
          }
          permit_contact_project_employee {
            id
            employee {
              uid
              user {
                id
                name
              }
            }
          }
          address {
            ...AddressFragment
          }
        }
      }
    }
  }
}
    ${ReportProjectWorkerFragmentFragmentDoc}
${TextTranslationFragFragmentDoc}
${WorkerTitleFragFragmentDoc}
${AddressFragmentFragmentDoc}`;

/**
 * __useGetWorkerInitialDataQuery__
 *
 * To run a query within a React component, call `useGetWorkerInitialDataQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetWorkerInitialDataQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetWorkerInitialDataQuery({
 *   variables: {
 *      uid: // value for 'uid'
 *   },
 * });
 */
export function useGetWorkerInitialDataQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetWorkerInitialDataQuery, GetWorkerInitialDataQueryVariables>) {
        return ApolloReactHooks.useQuery<GetWorkerInitialDataQuery, GetWorkerInitialDataQueryVariables>(GetWorkerInitialDataDocument, baseOptions);
      }
export function useGetWorkerInitialDataLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetWorkerInitialDataQuery, GetWorkerInitialDataQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetWorkerInitialDataQuery, GetWorkerInitialDataQueryVariables>(GetWorkerInitialDataDocument, baseOptions);
        }
export type GetWorkerInitialDataQueryHookResult = ReturnType<typeof useGetWorkerInitialDataQuery>;
export type GetWorkerInitialDataLazyQueryHookResult = ReturnType<typeof useGetWorkerInitialDataLazyQuery>;
export type GetWorkerInitialDataQueryResult = ApolloReactCommon.QueryResult<GetWorkerInitialDataQuery, GetWorkerInitialDataQueryVariables>;
export const GetWorkerPermitsScreenDocument = gql`
    query GetWorkerPermitsScreen($projectId: uuid!, $subcontractorId: uuid!) {
  pending: permit(where: {project_id: {_eq: $projectId}, subcontractor_id: {_eq: $subcontractorId}, current_status: {_eq: "pending"}, is_historical: {_eq: false}}, order_by: [{updated_at: desc}]) {
    ...PermitSnippetFragment
  }
  open: permit(where: {project_id: {_eq: $projectId}, subcontractor_id: {_eq: $subcontractorId}, is_historical: {_eq: false}, _or: [{current_status: {_eq: "submitted"}}, {current_status: {_eq: "resubmitted"}}, {current_status: {_eq: "rejected"}}, {current_status: {_eq: "approved"}}]}, order_by: [{updated_at: desc}]) {
    ...PermitSnippetFragment
  }
  closed: permit(where: {project_id: {_eq: $projectId}, subcontractor_id: {_eq: $subcontractorId}, is_historical: {_eq: false}, _or: [{current_status: {_eq: "closed"}}]}, order_by: [{updated_at: desc}]) {
    ...PermitSnippetFragment
  }
}
    ${PermitSnippetFragmentFragmentDoc}`;

/**
 * __useGetWorkerPermitsScreenQuery__
 *
 * To run a query within a React component, call `useGetWorkerPermitsScreenQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetWorkerPermitsScreenQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetWorkerPermitsScreenQuery({
 *   variables: {
 *      projectId: // value for 'projectId'
 *      subcontractorId: // value for 'subcontractorId'
 *   },
 * });
 */
export function useGetWorkerPermitsScreenQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetWorkerPermitsScreenQuery, GetWorkerPermitsScreenQueryVariables>) {
        return ApolloReactHooks.useQuery<GetWorkerPermitsScreenQuery, GetWorkerPermitsScreenQueryVariables>(GetWorkerPermitsScreenDocument, baseOptions);
      }
export function useGetWorkerPermitsScreenLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetWorkerPermitsScreenQuery, GetWorkerPermitsScreenQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetWorkerPermitsScreenQuery, GetWorkerPermitsScreenQueryVariables>(GetWorkerPermitsScreenDocument, baseOptions);
        }
export type GetWorkerPermitsScreenQueryHookResult = ReturnType<typeof useGetWorkerPermitsScreenQuery>;
export type GetWorkerPermitsScreenLazyQueryHookResult = ReturnType<typeof useGetWorkerPermitsScreenLazyQuery>;
export type GetWorkerPermitsScreenQueryResult = ApolloReactCommon.QueryResult<GetWorkerPermitsScreenQuery, GetWorkerPermitsScreenQueryVariables>;
export const GetWorkerProjectsDocument = gql`
    query GetWorkerProjects($userId: uuid!) {
  project(where: {project_workers: {user: {id: {_eq: $userId}}}}, order_by: {name: asc}) {
    id
    id
    name
    external_id
    general_contractor {
      id
      name
    }
    project_covid_config {
      project_id
      requirements {
        ...TextTranslationFrag
      }
      worker_restriction_length
    }
    user_notifications_aggregate(where: {user_id: {_eq: $userId}, include_in_badge: {_eq: true}, cleared_at: {_is_null: true}}) {
      aggregate {
        count
      }
    }
    project_workers(where: {user: {id: {_eq: $userId}}}) {
      ...ReportProjectWorkerFragment
      id
      created_at
      worker_role
      can_insert_report
      subcontractor_id
      subcontractor {
        id
        name
      }
      auto_emails {
        email
        event
      }
      project_covid_tested_positives(where: {_not: {cleared_project_covid_tested_positive_worker: {}}}) {
        id
        created_at
        external_id
      }
      project_covid_certifies(where: {_not: {cleared_project_covid_certify_worker: {}}}) {
        id
        created_at
        external_id
        project_covid_certified_worker_answers {
          project_covid_yes_no_question {
            id
            question {
              ...TextTranslationFrag
            }
          }
          answered_yes
        }
      }
      project_crew {
        id
        name
      }
      title {
        ...WorkerTitleFrag
      }
      project {
        id
        name
        external_id
        general_contractor {
          id
          name
        }
        permit_contact_project_employee {
          id
          employee {
            uid
            user {
              id
              name
            }
          }
        }
        address {
          ...AddressFragment
        }
        project_covid_config {
          project_id
          requirements_text
          requirements {
            ...TextTranslationFrag
          }
          worker_restriction_length
          project_covid_tested_positive_questions(order_by: {sort_id: asc}) {
            id
            question {
              ...TextTranslationFrag
            }
          }
        }
      }
    }
  }
}
    ${TextTranslationFragFragmentDoc}
${ReportProjectWorkerFragmentFragmentDoc}
${WorkerTitleFragFragmentDoc}
${AddressFragmentFragmentDoc}`;

/**
 * __useGetWorkerProjectsQuery__
 *
 * To run a query within a React component, call `useGetWorkerProjectsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetWorkerProjectsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetWorkerProjectsQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *   },
 * });
 */
export function useGetWorkerProjectsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetWorkerProjectsQuery, GetWorkerProjectsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetWorkerProjectsQuery, GetWorkerProjectsQueryVariables>(GetWorkerProjectsDocument, baseOptions);
      }
export function useGetWorkerProjectsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetWorkerProjectsQuery, GetWorkerProjectsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetWorkerProjectsQuery, GetWorkerProjectsQueryVariables>(GetWorkerProjectsDocument, baseOptions);
        }
export type GetWorkerProjectsQueryHookResult = ReturnType<typeof useGetWorkerProjectsQuery>;
export type GetWorkerProjectsLazyQueryHookResult = ReturnType<typeof useGetWorkerProjectsLazyQuery>;
export type GetWorkerProjectsQueryResult = ApolloReactCommon.QueryResult<GetWorkerProjectsQuery, GetWorkerProjectsQueryVariables>;
export const GetWorkerReportsDocument = gql`
    query GetWorkerReports($projectId: uuid!, $subcontractorId: uuid!) {
  report(where: {project_id: {_eq: $projectId}, submitter_project_worker: {subcontractor_id: {_eq: $subcontractorId}}}, order_by: {created_at: desc}) {
    ...ReportFragment
  }
}
    ${ReportFragmentFragmentDoc}`;

/**
 * __useGetWorkerReportsQuery__
 *
 * To run a query within a React component, call `useGetWorkerReportsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetWorkerReportsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetWorkerReportsQuery({
 *   variables: {
 *      projectId: // value for 'projectId'
 *      subcontractorId: // value for 'subcontractorId'
 *   },
 * });
 */
export function useGetWorkerReportsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetWorkerReportsQuery, GetWorkerReportsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetWorkerReportsQuery, GetWorkerReportsQueryVariables>(GetWorkerReportsDocument, baseOptions);
      }
export function useGetWorkerReportsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetWorkerReportsQuery, GetWorkerReportsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetWorkerReportsQuery, GetWorkerReportsQueryVariables>(GetWorkerReportsDocument, baseOptions);
        }
export type GetWorkerReportsQueryHookResult = ReturnType<typeof useGetWorkerReportsQuery>;
export type GetWorkerReportsLazyQueryHookResult = ReturnType<typeof useGetWorkerReportsLazyQuery>;
export type GetWorkerReportsQueryResult = ApolloReactCommon.QueryResult<GetWorkerReportsQuery, GetWorkerReportsQueryVariables>;
export const GetWorkerTitlesDocument = gql`
    query GetWorkerTitles {
  worker_title(order_by: {translation: {en: asc}}) {
    ...WorkerTitleFrag
  }
}
    ${WorkerTitleFragFragmentDoc}`;

/**
 * __useGetWorkerTitlesQuery__
 *
 * To run a query within a React component, call `useGetWorkerTitlesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetWorkerTitlesQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetWorkerTitlesQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetWorkerTitlesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetWorkerTitlesQuery, GetWorkerTitlesQueryVariables>) {
        return ApolloReactHooks.useQuery<GetWorkerTitlesQuery, GetWorkerTitlesQueryVariables>(GetWorkerTitlesDocument, baseOptions);
      }
export function useGetWorkerTitlesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetWorkerTitlesQuery, GetWorkerTitlesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetWorkerTitlesQuery, GetWorkerTitlesQueryVariables>(GetWorkerTitlesDocument, baseOptions);
        }
export type GetWorkerTitlesQueryHookResult = ReturnType<typeof useGetWorkerTitlesQuery>;
export type GetWorkerTitlesLazyQueryHookResult = ReturnType<typeof useGetWorkerTitlesLazyQuery>;
export type GetWorkerTitlesQueryResult = ApolloReactCommon.QueryResult<GetWorkerTitlesQuery, GetWorkerTitlesQueryVariables>;
export const GetWorkerTitlesAndRolesDocument = gql`
    query GetWorkerTitlesAndRoles {
  worker_title(order_by: {translation: {en: asc}}) {
    ...WorkerTitleFrag
  }
  worker_role(order_by: {value: asc}) {
    ...WorkerRoleFrag
  }
}
    ${WorkerTitleFragFragmentDoc}
${WorkerRoleFragFragmentDoc}`;

/**
 * __useGetWorkerTitlesAndRolesQuery__
 *
 * To run a query within a React component, call `useGetWorkerTitlesAndRolesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetWorkerTitlesAndRolesQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetWorkerTitlesAndRolesQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetWorkerTitlesAndRolesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetWorkerTitlesAndRolesQuery, GetWorkerTitlesAndRolesQueryVariables>) {
        return ApolloReactHooks.useQuery<GetWorkerTitlesAndRolesQuery, GetWorkerTitlesAndRolesQueryVariables>(GetWorkerTitlesAndRolesDocument, baseOptions);
      }
export function useGetWorkerTitlesAndRolesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetWorkerTitlesAndRolesQuery, GetWorkerTitlesAndRolesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetWorkerTitlesAndRolesQuery, GetWorkerTitlesAndRolesQueryVariables>(GetWorkerTitlesAndRolesDocument, baseOptions);
        }
export type GetWorkerTitlesAndRolesQueryHookResult = ReturnType<typeof useGetWorkerTitlesAndRolesQuery>;
export type GetWorkerTitlesAndRolesLazyQueryHookResult = ReturnType<typeof useGetWorkerTitlesAndRolesLazyQuery>;
export type GetWorkerTitlesAndRolesQueryResult = ApolloReactCommon.QueryResult<GetWorkerTitlesAndRolesQuery, GetWorkerTitlesAndRolesQueryVariables>;
export const GetWorkerToolboxTalksDocument = gql`
    query GetWorkerToolboxTalks($projectId: uuid!, $subcontractorId: uuid!) {
  toolbox_talk(order_by: {created_at: desc}, where: {project_id: {_eq: $projectId}, led_by_project_worker: {subcontractor_id: {_eq: $subcontractorId}}}) {
    ...ToolboxTalkFragment
  }
}
    ${ToolboxTalkFragmentFragmentDoc}`;

/**
 * __useGetWorkerToolboxTalksQuery__
 *
 * To run a query within a React component, call `useGetWorkerToolboxTalksQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetWorkerToolboxTalksQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetWorkerToolboxTalksQuery({
 *   variables: {
 *      projectId: // value for 'projectId'
 *      subcontractorId: // value for 'subcontractorId'
 *   },
 * });
 */
export function useGetWorkerToolboxTalksQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetWorkerToolboxTalksQuery, GetWorkerToolboxTalksQueryVariables>) {
        return ApolloReactHooks.useQuery<GetWorkerToolboxTalksQuery, GetWorkerToolboxTalksQueryVariables>(GetWorkerToolboxTalksDocument, baseOptions);
      }
export function useGetWorkerToolboxTalksLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetWorkerToolboxTalksQuery, GetWorkerToolboxTalksQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetWorkerToolboxTalksQuery, GetWorkerToolboxTalksQueryVariables>(GetWorkerToolboxTalksDocument, baseOptions);
        }
export type GetWorkerToolboxTalksQueryHookResult = ReturnType<typeof useGetWorkerToolboxTalksQuery>;
export type GetWorkerToolboxTalksLazyQueryHookResult = ReturnType<typeof useGetWorkerToolboxTalksLazyQuery>;
export type GetWorkerToolboxTalksQueryResult = ApolloReactCommon.QueryResult<GetWorkerToolboxTalksQuery, GetWorkerToolboxTalksQueryVariables>;
export const GetWorkAbovePermitByPkDocument = gql`
    query GetWorkAbovePermitByPk($permitId: uuid!) {
  permit_by_pk(id: $permitId) {
    id
    is_historical
    type
    project {
      id
      name
      address {
        ...AddressFragment
      }
      general_contractor {
        id
        name
        allow_permit_activation_location_change
      }
      permit_contact_project_employee {
        id
        employee {
          uid
          employee_title {
            id
            name {
              ...TextTranslationFrag
            }
          }
          user {
            id
            name
            phone_number
            email
          }
        }
      }
    }
    subcontractor {
      id
      name
    }
    images {
      id
      url
    }
    origin_permit_history {
      id
      permit_id
      comment {
        ...TextTranslationFrag
      }
      updated_location
      status
      created_at
      created_by_user {
        id
        name
      }
      images {
        id
        url
      }
    }
    permit_sign_in_images(order_by: {image: {sort_index: asc}}) {
      image {
        id
        url
      }
    }
    created_at
    updated_at
    current_status
    supervisorProjectWorkers: permit_project_workers(where: {type: {_eq: "supervisor"}}, order_by: {project_worker: {user: {name: asc}}}) {
      id
      type
      project_worker {
        ...ReportProjectWorkerFragment
      }
      signature_image {
        id
        url
      }
    }
    workingProjectWorkers: permit_project_workers(where: {type: {_eq: "working"}}, order_by: {project_worker: {user: {name: asc}}}) {
      id
      type
      project_worker {
        ...ReportProjectWorkerFragment
      }
      signature_image {
        id
        url
      }
    }
    permit_checklist_items(order_by: {sort_index: asc}, where: {item_type: {_eq: "permit"}}) {
      ...PermitChecklistItemFragment
    }
    closing_checklist_items: permit_checklist_items(order_by: {sort_index: asc}, where: {item_type: {_eq: "closing"}}) {
      ...PermitChecklistItemFragment
    }
    permit_histories(order_by: {created_at: desc}) {
      id
      permit_id
      comment {
        ...TextTranslationFrag
      }
      updated_location
      status
      created_at
      created_by_user {
        id
        name
      }
      images {
        id
        url
      }
    }
    work_above_permit {
      permit_id
      work_start_at
      work_duration
      work_location {
        ...TextTranslationFrag
      }
      work_description {
        ...TextTranslationFrag
      }
      applicant_project_worker {
        ...ReportProjectWorkerFragment
      }
    }
  }
}
    ${AddressFragmentFragmentDoc}
${TextTranslationFragFragmentDoc}
${ReportProjectWorkerFragmentFragmentDoc}
${PermitChecklistItemFragmentFragmentDoc}`;

/**
 * __useGetWorkAbovePermitByPkQuery__
 *
 * To run a query within a React component, call `useGetWorkAbovePermitByPkQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetWorkAbovePermitByPkQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetWorkAbovePermitByPkQuery({
 *   variables: {
 *      permitId: // value for 'permitId'
 *   },
 * });
 */
export function useGetWorkAbovePermitByPkQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetWorkAbovePermitByPkQuery, GetWorkAbovePermitByPkQueryVariables>) {
        return ApolloReactHooks.useQuery<GetWorkAbovePermitByPkQuery, GetWorkAbovePermitByPkQueryVariables>(GetWorkAbovePermitByPkDocument, baseOptions);
      }
export function useGetWorkAbovePermitByPkLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetWorkAbovePermitByPkQuery, GetWorkAbovePermitByPkQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetWorkAbovePermitByPkQuery, GetWorkAbovePermitByPkQueryVariables>(GetWorkAbovePermitByPkDocument, baseOptions);
        }
export type GetWorkAbovePermitByPkQueryHookResult = ReturnType<typeof useGetWorkAbovePermitByPkQuery>;
export type GetWorkAbovePermitByPkLazyQueryHookResult = ReturnType<typeof useGetWorkAbovePermitByPkLazyQuery>;
export type GetWorkAbovePermitByPkQueryResult = ApolloReactCommon.QueryResult<GetWorkAbovePermitByPkQuery, GetWorkAbovePermitByPkQueryVariables>;
export const InsertCertificationsDocument = gql`
    mutation InsertCertifications($objects: [certification_insert_input!]!) {
  insert_certification(objects: $objects) {
    affected_rows
    returning {
      id
    }
  }
}
    `;
export type InsertCertificationsMutationFn = ApolloReactCommon.MutationFunction<InsertCertificationsMutation, InsertCertificationsMutationVariables>;

/**
 * __useInsertCertificationsMutation__
 *
 * To run a mutation, you first call `useInsertCertificationsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertCertificationsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertCertificationsMutation, { data, loading, error }] = useInsertCertificationsMutation({
 *   variables: {
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useInsertCertificationsMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertCertificationsMutation, InsertCertificationsMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertCertificationsMutation, InsertCertificationsMutationVariables>(InsertCertificationsDocument, baseOptions);
      }
export type InsertCertificationsMutationHookResult = ReturnType<typeof useInsertCertificationsMutation>;
export type InsertCertificationsMutationResult = ApolloReactCommon.MutationResult<InsertCertificationsMutation>;
export type InsertCertificationsMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertCertificationsMutation, InsertCertificationsMutationVariables>;
export const InsertChatsDocument = gql`
    mutation InsertChats($objects: [chat_insert_input!]!) {
  insert_chat(objects: $objects) {
    affected_rows
  }
}
    `;
export type InsertChatsMutationFn = ApolloReactCommon.MutationFunction<InsertChatsMutation, InsertChatsMutationVariables>;

/**
 * __useInsertChatsMutation__
 *
 * To run a mutation, you first call `useInsertChatsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertChatsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertChatsMutation, { data, loading, error }] = useInsertChatsMutation({
 *   variables: {
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useInsertChatsMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertChatsMutation, InsertChatsMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertChatsMutation, InsertChatsMutationVariables>(InsertChatsDocument, baseOptions);
      }
export type InsertChatsMutationHookResult = ReturnType<typeof useInsertChatsMutation>;
export type InsertChatsMutationResult = ApolloReactCommon.MutationResult<InsertChatsMutation>;
export type InsertChatsMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertChatsMutation, InsertChatsMutationVariables>;
export const InsertChatMembersDocument = gql`
    mutation InsertChatMembers($objects: [chat_member_insert_input!]!) {
  insert_chat_member(objects: $objects) {
    affected_rows
    returning {
      ...ChatMemberFrag
    }
  }
}
    ${ChatMemberFragFragmentDoc}`;
export type InsertChatMembersMutationFn = ApolloReactCommon.MutationFunction<InsertChatMembersMutation, InsertChatMembersMutationVariables>;

/**
 * __useInsertChatMembersMutation__
 *
 * To run a mutation, you first call `useInsertChatMembersMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertChatMembersMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertChatMembersMutation, { data, loading, error }] = useInsertChatMembersMutation({
 *   variables: {
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useInsertChatMembersMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertChatMembersMutation, InsertChatMembersMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertChatMembersMutation, InsertChatMembersMutationVariables>(InsertChatMembersDocument, baseOptions);
      }
export type InsertChatMembersMutationHookResult = ReturnType<typeof useInsertChatMembersMutation>;
export type InsertChatMembersMutationResult = ApolloReactCommon.MutationResult<InsertChatMembersMutation>;
export type InsertChatMembersMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertChatMembersMutation, InsertChatMembersMutationVariables>;
export const InsertChatItemsDocument = gql`
    mutation InsertChatItems($objects: [chat_item_insert_input!]!) {
  insert_chat_item(objects: $objects) {
    affected_rows
  }
}
    `;
export type InsertChatItemsMutationFn = ApolloReactCommon.MutationFunction<InsertChatItemsMutation, InsertChatItemsMutationVariables>;

/**
 * __useInsertChatItemsMutation__
 *
 * To run a mutation, you first call `useInsertChatItemsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertChatItemsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertChatItemsMutation, { data, loading, error }] = useInsertChatItemsMutation({
 *   variables: {
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useInsertChatItemsMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertChatItemsMutation, InsertChatItemsMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertChatItemsMutation, InsertChatItemsMutationVariables>(InsertChatItemsDocument, baseOptions);
      }
export type InsertChatItemsMutationHookResult = ReturnType<typeof useInsertChatItemsMutation>;
export type InsertChatItemsMutationResult = ApolloReactCommon.MutationResult<InsertChatItemsMutation>;
export type InsertChatItemsMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertChatItemsMutation, InsertChatItemsMutationVariables>;
export const InsertClearedCovidCertifyWorkersDocument = gql`
    mutation InsertClearedCovidCertifyWorkers($objects: [cleared_project_covid_certify_worker_insert_input!]!) {
  insert_cleared_project_covid_certify_worker(objects: $objects) {
    affected_rows
  }
}
    `;
export type InsertClearedCovidCertifyWorkersMutationFn = ApolloReactCommon.MutationFunction<InsertClearedCovidCertifyWorkersMutation, InsertClearedCovidCertifyWorkersMutationVariables>;

/**
 * __useInsertClearedCovidCertifyWorkersMutation__
 *
 * To run a mutation, you first call `useInsertClearedCovidCertifyWorkersMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertClearedCovidCertifyWorkersMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertClearedCovidCertifyWorkersMutation, { data, loading, error }] = useInsertClearedCovidCertifyWorkersMutation({
 *   variables: {
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useInsertClearedCovidCertifyWorkersMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertClearedCovidCertifyWorkersMutation, InsertClearedCovidCertifyWorkersMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertClearedCovidCertifyWorkersMutation, InsertClearedCovidCertifyWorkersMutationVariables>(InsertClearedCovidCertifyWorkersDocument, baseOptions);
      }
export type InsertClearedCovidCertifyWorkersMutationHookResult = ReturnType<typeof useInsertClearedCovidCertifyWorkersMutation>;
export type InsertClearedCovidCertifyWorkersMutationResult = ApolloReactCommon.MutationResult<InsertClearedCovidCertifyWorkersMutation>;
export type InsertClearedCovidCertifyWorkersMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertClearedCovidCertifyWorkersMutation, InsertClearedCovidCertifyWorkersMutationVariables>;
export const InsertClearedProjectCovidTestedPositiveWorkersDocument = gql`
    mutation InsertClearedProjectCovidTestedPositiveWorkers($objects: [cleared_project_covid_tested_positive_worker_insert_input!]!) {
  insert_cleared_project_covid_tested_positive_worker(objects: $objects) {
    affected_rows
  }
}
    `;
export type InsertClearedProjectCovidTestedPositiveWorkersMutationFn = ApolloReactCommon.MutationFunction<InsertClearedProjectCovidTestedPositiveWorkersMutation, InsertClearedProjectCovidTestedPositiveWorkersMutationVariables>;

/**
 * __useInsertClearedProjectCovidTestedPositiveWorkersMutation__
 *
 * To run a mutation, you first call `useInsertClearedProjectCovidTestedPositiveWorkersMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertClearedProjectCovidTestedPositiveWorkersMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertClearedProjectCovidTestedPositiveWorkersMutation, { data, loading, error }] = useInsertClearedProjectCovidTestedPositiveWorkersMutation({
 *   variables: {
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useInsertClearedProjectCovidTestedPositiveWorkersMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertClearedProjectCovidTestedPositiveWorkersMutation, InsertClearedProjectCovidTestedPositiveWorkersMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertClearedProjectCovidTestedPositiveWorkersMutation, InsertClearedProjectCovidTestedPositiveWorkersMutationVariables>(InsertClearedProjectCovidTestedPositiveWorkersDocument, baseOptions);
      }
export type InsertClearedProjectCovidTestedPositiveWorkersMutationHookResult = ReturnType<typeof useInsertClearedProjectCovidTestedPositiveWorkersMutation>;
export type InsertClearedProjectCovidTestedPositiveWorkersMutationResult = ApolloReactCommon.MutationResult<InsertClearedProjectCovidTestedPositiveWorkersMutation>;
export type InsertClearedProjectCovidTestedPositiveWorkersMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertClearedProjectCovidTestedPositiveWorkersMutation, InsertClearedProjectCovidTestedPositiveWorkersMutationVariables>;
export const InsertConfinedSpacePermitMonitoringEquipmentDocument = gql`
    mutation InsertConfinedSpacePermitMonitoringEquipment($objects: [confined_space_permit_monitoring_equipment_insert_input!]!) {
  insert_confined_space_permit_monitoring_equipment(objects: $objects) {
    affected_rows
  }
}
    `;
export type InsertConfinedSpacePermitMonitoringEquipmentMutationFn = ApolloReactCommon.MutationFunction<InsertConfinedSpacePermitMonitoringEquipmentMutation, InsertConfinedSpacePermitMonitoringEquipmentMutationVariables>;

/**
 * __useInsertConfinedSpacePermitMonitoringEquipmentMutation__
 *
 * To run a mutation, you first call `useInsertConfinedSpacePermitMonitoringEquipmentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertConfinedSpacePermitMonitoringEquipmentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertConfinedSpacePermitMonitoringEquipmentMutation, { data, loading, error }] = useInsertConfinedSpacePermitMonitoringEquipmentMutation({
 *   variables: {
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useInsertConfinedSpacePermitMonitoringEquipmentMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertConfinedSpacePermitMonitoringEquipmentMutation, InsertConfinedSpacePermitMonitoringEquipmentMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertConfinedSpacePermitMonitoringEquipmentMutation, InsertConfinedSpacePermitMonitoringEquipmentMutationVariables>(InsertConfinedSpacePermitMonitoringEquipmentDocument, baseOptions);
      }
export type InsertConfinedSpacePermitMonitoringEquipmentMutationHookResult = ReturnType<typeof useInsertConfinedSpacePermitMonitoringEquipmentMutation>;
export type InsertConfinedSpacePermitMonitoringEquipmentMutationResult = ApolloReactCommon.MutationResult<InsertConfinedSpacePermitMonitoringEquipmentMutation>;
export type InsertConfinedSpacePermitMonitoringEquipmentMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertConfinedSpacePermitMonitoringEquipmentMutation, InsertConfinedSpacePermitMonitoringEquipmentMutationVariables>;
export const InsertConfinedSpacePermitReadingDocument = gql`
    mutation InsertConfinedSpacePermitReading($objects: [confined_space_permit_reading_insert_input!]!) {
  insert_confined_space_permit_reading(objects: $objects) {
    affected_rows
  }
}
    `;
export type InsertConfinedSpacePermitReadingMutationFn = ApolloReactCommon.MutationFunction<InsertConfinedSpacePermitReadingMutation, InsertConfinedSpacePermitReadingMutationVariables>;

/**
 * __useInsertConfinedSpacePermitReadingMutation__
 *
 * To run a mutation, you first call `useInsertConfinedSpacePermitReadingMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertConfinedSpacePermitReadingMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertConfinedSpacePermitReadingMutation, { data, loading, error }] = useInsertConfinedSpacePermitReadingMutation({
 *   variables: {
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useInsertConfinedSpacePermitReadingMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertConfinedSpacePermitReadingMutation, InsertConfinedSpacePermitReadingMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertConfinedSpacePermitReadingMutation, InsertConfinedSpacePermitReadingMutationVariables>(InsertConfinedSpacePermitReadingDocument, baseOptions);
      }
export type InsertConfinedSpacePermitReadingMutationHookResult = ReturnType<typeof useInsertConfinedSpacePermitReadingMutation>;
export type InsertConfinedSpacePermitReadingMutationResult = ApolloReactCommon.MutationResult<InsertConfinedSpacePermitReadingMutation>;
export type InsertConfinedSpacePermitReadingMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertConfinedSpacePermitReadingMutation, InsertConfinedSpacePermitReadingMutationVariables>;
export const InsertConfinedSpacePermitReadingCustomItemDocument = gql`
    mutation InsertConfinedSpacePermitReadingCustomItem($objects: [confined_space_permit_reading_custom_item_insert_input!]!) {
  insert_confined_space_permit_reading_custom_item(objects: $objects) {
    affected_rows
  }
}
    `;
export type InsertConfinedSpacePermitReadingCustomItemMutationFn = ApolloReactCommon.MutationFunction<InsertConfinedSpacePermitReadingCustomItemMutation, InsertConfinedSpacePermitReadingCustomItemMutationVariables>;

/**
 * __useInsertConfinedSpacePermitReadingCustomItemMutation__
 *
 * To run a mutation, you first call `useInsertConfinedSpacePermitReadingCustomItemMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertConfinedSpacePermitReadingCustomItemMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertConfinedSpacePermitReadingCustomItemMutation, { data, loading, error }] = useInsertConfinedSpacePermitReadingCustomItemMutation({
 *   variables: {
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useInsertConfinedSpacePermitReadingCustomItemMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertConfinedSpacePermitReadingCustomItemMutation, InsertConfinedSpacePermitReadingCustomItemMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertConfinedSpacePermitReadingCustomItemMutation, InsertConfinedSpacePermitReadingCustomItemMutationVariables>(InsertConfinedSpacePermitReadingCustomItemDocument, baseOptions);
      }
export type InsertConfinedSpacePermitReadingCustomItemMutationHookResult = ReturnType<typeof useInsertConfinedSpacePermitReadingCustomItemMutation>;
export type InsertConfinedSpacePermitReadingCustomItemMutationResult = ApolloReactCommon.MutationResult<InsertConfinedSpacePermitReadingCustomItemMutation>;
export type InsertConfinedSpacePermitReadingCustomItemMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertConfinedSpacePermitReadingCustomItemMutation, InsertConfinedSpacePermitReadingCustomItemMutationVariables>;
export const InsertDailyReportDocument = gql`
    mutation InsertDailyReport($objects: [daily_report_insert_input!]!) {
  insert_daily_report(objects: $objects) {
    affected_rows
  }
}
    `;
export type InsertDailyReportMutationFn = ApolloReactCommon.MutationFunction<InsertDailyReportMutation, InsertDailyReportMutationVariables>;

/**
 * __useInsertDailyReportMutation__
 *
 * To run a mutation, you first call `useInsertDailyReportMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertDailyReportMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertDailyReportMutation, { data, loading, error }] = useInsertDailyReportMutation({
 *   variables: {
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useInsertDailyReportMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertDailyReportMutation, InsertDailyReportMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertDailyReportMutation, InsertDailyReportMutationVariables>(InsertDailyReportDocument, baseOptions);
      }
export type InsertDailyReportMutationHookResult = ReturnType<typeof useInsertDailyReportMutation>;
export type InsertDailyReportMutationResult = ApolloReactCommon.MutationResult<InsertDailyReportMutation>;
export type InsertDailyReportMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertDailyReportMutation, InsertDailyReportMutationVariables>;
export const InsertDigPermitSelectOptionDocument = gql`
    mutation InsertDigPermitSelectOption($objects: [dig_permit_select_option_insert_input!]!) {
  insert_dig_permit_select_option(objects: $objects) {
    affected_rows
  }
}
    `;
export type InsertDigPermitSelectOptionMutationFn = ApolloReactCommon.MutationFunction<InsertDigPermitSelectOptionMutation, InsertDigPermitSelectOptionMutationVariables>;

/**
 * __useInsertDigPermitSelectOptionMutation__
 *
 * To run a mutation, you first call `useInsertDigPermitSelectOptionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertDigPermitSelectOptionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertDigPermitSelectOptionMutation, { data, loading, error }] = useInsertDigPermitSelectOptionMutation({
 *   variables: {
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useInsertDigPermitSelectOptionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertDigPermitSelectOptionMutation, InsertDigPermitSelectOptionMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertDigPermitSelectOptionMutation, InsertDigPermitSelectOptionMutationVariables>(InsertDigPermitSelectOptionDocument, baseOptions);
      }
export type InsertDigPermitSelectOptionMutationHookResult = ReturnType<typeof useInsertDigPermitSelectOptionMutation>;
export type InsertDigPermitSelectOptionMutationResult = ApolloReactCommon.MutationResult<InsertDigPermitSelectOptionMutation>;
export type InsertDigPermitSelectOptionMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertDigPermitSelectOptionMutation, InsertDigPermitSelectOptionMutationVariables>;
export const InsertDigPermitTicketDocument = gql`
    mutation InsertDigPermitTicket($objects: [dig_permit_ticket_insert_input!]!) {
  insert_dig_permit_ticket(objects: $objects) {
    affected_rows
  }
}
    `;
export type InsertDigPermitTicketMutationFn = ApolloReactCommon.MutationFunction<InsertDigPermitTicketMutation, InsertDigPermitTicketMutationVariables>;

/**
 * __useInsertDigPermitTicketMutation__
 *
 * To run a mutation, you first call `useInsertDigPermitTicketMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertDigPermitTicketMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertDigPermitTicketMutation, { data, loading, error }] = useInsertDigPermitTicketMutation({
 *   variables: {
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useInsertDigPermitTicketMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertDigPermitTicketMutation, InsertDigPermitTicketMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertDigPermitTicketMutation, InsertDigPermitTicketMutationVariables>(InsertDigPermitTicketDocument, baseOptions);
      }
export type InsertDigPermitTicketMutationHookResult = ReturnType<typeof useInsertDigPermitTicketMutation>;
export type InsertDigPermitTicketMutationResult = ApolloReactCommon.MutationResult<InsertDigPermitTicketMutation>;
export type InsertDigPermitTicketMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertDigPermitTicketMutation, InsertDigPermitTicketMutationVariables>;
export const InsertDrugTestsDocument = gql`
    mutation InsertDrugTests($objects: [worker_drug_test_insert_input!]!) {
  insert_worker_drug_test(objects: $objects) {
    affected_rows
  }
}
    `;
export type InsertDrugTestsMutationFn = ApolloReactCommon.MutationFunction<InsertDrugTestsMutation, InsertDrugTestsMutationVariables>;

/**
 * __useInsertDrugTestsMutation__
 *
 * To run a mutation, you first call `useInsertDrugTestsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertDrugTestsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertDrugTestsMutation, { data, loading, error }] = useInsertDrugTestsMutation({
 *   variables: {
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useInsertDrugTestsMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertDrugTestsMutation, InsertDrugTestsMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertDrugTestsMutation, InsertDrugTestsMutationVariables>(InsertDrugTestsDocument, baseOptions);
      }
export type InsertDrugTestsMutationHookResult = ReturnType<typeof useInsertDrugTestsMutation>;
export type InsertDrugTestsMutationResult = ApolloReactCommon.MutationResult<InsertDrugTestsMutation>;
export type InsertDrugTestsMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertDrugTestsMutation, InsertDrugTestsMutationVariables>;
export const InsertExpoPushTokenDocument = gql`
    mutation InsertExpoPushToken($uid: uuid!, $token: String!) {
  insert_expo_push_token(objects: {user_id: $uid, token: $token}, on_conflict: {constraint: expo_push_token_token_user_id_key, update_columns: [token, user_id]}) {
    affected_rows
  }
}
    `;
export type InsertExpoPushTokenMutationFn = ApolloReactCommon.MutationFunction<InsertExpoPushTokenMutation, InsertExpoPushTokenMutationVariables>;

/**
 * __useInsertExpoPushTokenMutation__
 *
 * To run a mutation, you first call `useInsertExpoPushTokenMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertExpoPushTokenMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertExpoPushTokenMutation, { data, loading, error }] = useInsertExpoPushTokenMutation({
 *   variables: {
 *      uid: // value for 'uid'
 *      token: // value for 'token'
 *   },
 * });
 */
export function useInsertExpoPushTokenMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertExpoPushTokenMutation, InsertExpoPushTokenMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertExpoPushTokenMutation, InsertExpoPushTokenMutationVariables>(InsertExpoPushTokenDocument, baseOptions);
      }
export type InsertExpoPushTokenMutationHookResult = ReturnType<typeof useInsertExpoPushTokenMutation>;
export type InsertExpoPushTokenMutationResult = ApolloReactCommon.MutationResult<InsertExpoPushTokenMutation>;
export type InsertExpoPushTokenMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertExpoPushTokenMutation, InsertExpoPushTokenMutationVariables>;
export const InsertFeedbackDocument = gql`
    mutation InsertFeedback($objects: [feedback_insert_input!]!) {
  insert_feedback(objects: $objects) {
    affected_rows
  }
}
    `;
export type InsertFeedbackMutationFn = ApolloReactCommon.MutationFunction<InsertFeedbackMutation, InsertFeedbackMutationVariables>;

/**
 * __useInsertFeedbackMutation__
 *
 * To run a mutation, you first call `useInsertFeedbackMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertFeedbackMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertFeedbackMutation, { data, loading, error }] = useInsertFeedbackMutation({
 *   variables: {
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useInsertFeedbackMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertFeedbackMutation, InsertFeedbackMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertFeedbackMutation, InsertFeedbackMutationVariables>(InsertFeedbackDocument, baseOptions);
      }
export type InsertFeedbackMutationHookResult = ReturnType<typeof useInsertFeedbackMutation>;
export type InsertFeedbackMutationResult = ApolloReactCommon.MutationResult<InsertFeedbackMutation>;
export type InsertFeedbackMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertFeedbackMutation, InsertFeedbackMutationVariables>;
export const InsertHotWorkPermitDocument = gql`
    mutation InsertHotWorkPermit($objects: [hot_work_permit_insert_input!]!) {
  insert_hot_work_permit(objects: $objects) {
    affected_rows
  }
}
    `;
export type InsertHotWorkPermitMutationFn = ApolloReactCommon.MutationFunction<InsertHotWorkPermitMutation, InsertHotWorkPermitMutationVariables>;

/**
 * __useInsertHotWorkPermitMutation__
 *
 * To run a mutation, you first call `useInsertHotWorkPermitMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertHotWorkPermitMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertHotWorkPermitMutation, { data, loading, error }] = useInsertHotWorkPermitMutation({
 *   variables: {
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useInsertHotWorkPermitMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertHotWorkPermitMutation, InsertHotWorkPermitMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertHotWorkPermitMutation, InsertHotWorkPermitMutationVariables>(InsertHotWorkPermitDocument, baseOptions);
      }
export type InsertHotWorkPermitMutationHookResult = ReturnType<typeof useInsertHotWorkPermitMutation>;
export type InsertHotWorkPermitMutationResult = ApolloReactCommon.MutationResult<InsertHotWorkPermitMutation>;
export type InsertHotWorkPermitMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertHotWorkPermitMutation, InsertHotWorkPermitMutationVariables>;
export const InsertImagesDocument = gql`
    mutation InsertImages($objects: [image_insert_input!]!) {
  insert_image(objects: $objects) {
    affected_rows
  }
}
    `;
export type InsertImagesMutationFn = ApolloReactCommon.MutationFunction<InsertImagesMutation, InsertImagesMutationVariables>;

/**
 * __useInsertImagesMutation__
 *
 * To run a mutation, you first call `useInsertImagesMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertImagesMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertImagesMutation, { data, loading, error }] = useInsertImagesMutation({
 *   variables: {
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useInsertImagesMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertImagesMutation, InsertImagesMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertImagesMutation, InsertImagesMutationVariables>(InsertImagesDocument, baseOptions);
      }
export type InsertImagesMutationHookResult = ReturnType<typeof useInsertImagesMutation>;
export type InsertImagesMutationResult = ApolloReactCommon.MutationResult<InsertImagesMutation>;
export type InsertImagesMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertImagesMutation, InsertImagesMutationVariables>;
export const InsertPermitsDocument = gql`
    mutation InsertPermits($objects: [permit_insert_input!]!) {
  insert_permit(objects: $objects) {
    affected_rows
  }
}
    `;
export type InsertPermitsMutationFn = ApolloReactCommon.MutationFunction<InsertPermitsMutation, InsertPermitsMutationVariables>;

/**
 * __useInsertPermitsMutation__
 *
 * To run a mutation, you first call `useInsertPermitsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertPermitsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertPermitsMutation, { data, loading, error }] = useInsertPermitsMutation({
 *   variables: {
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useInsertPermitsMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertPermitsMutation, InsertPermitsMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertPermitsMutation, InsertPermitsMutationVariables>(InsertPermitsDocument, baseOptions);
      }
export type InsertPermitsMutationHookResult = ReturnType<typeof useInsertPermitsMutation>;
export type InsertPermitsMutationResult = ApolloReactCommon.MutationResult<InsertPermitsMutation>;
export type InsertPermitsMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertPermitsMutation, InsertPermitsMutationVariables>;
export const InsertPermitChecklistItemDocument = gql`
    mutation InsertPermitChecklistItem($objects: [permit_checklist_item_insert_input!]!) {
  insert_permit_checklist_item(objects: $objects) {
    affected_rows
  }
}
    `;
export type InsertPermitChecklistItemMutationFn = ApolloReactCommon.MutationFunction<InsertPermitChecklistItemMutation, InsertPermitChecklistItemMutationVariables>;

/**
 * __useInsertPermitChecklistItemMutation__
 *
 * To run a mutation, you first call `useInsertPermitChecklistItemMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertPermitChecklistItemMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertPermitChecklistItemMutation, { data, loading, error }] = useInsertPermitChecklistItemMutation({
 *   variables: {
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useInsertPermitChecklistItemMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertPermitChecklistItemMutation, InsertPermitChecklistItemMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertPermitChecklistItemMutation, InsertPermitChecklistItemMutationVariables>(InsertPermitChecklistItemDocument, baseOptions);
      }
export type InsertPermitChecklistItemMutationHookResult = ReturnType<typeof useInsertPermitChecklistItemMutation>;
export type InsertPermitChecklistItemMutationResult = ApolloReactCommon.MutationResult<InsertPermitChecklistItemMutation>;
export type InsertPermitChecklistItemMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertPermitChecklistItemMutation, InsertPermitChecklistItemMutationVariables>;
export const InsertPermitHistoryDataDocument = gql`
    mutation InsertPermitHistoryData($newStatus: String!, $permitId: uuid!, $historyObjects: [permit_history_insert_input!]!) {
  update_permit(_set: {current_status: $newStatus}, where: {id: {_eq: $permitId}}) {
    affected_rows
  }
  insert_permit_history(objects: $historyObjects) {
    affected_rows
  }
}
    `;
export type InsertPermitHistoryDataMutationFn = ApolloReactCommon.MutationFunction<InsertPermitHistoryDataMutation, InsertPermitHistoryDataMutationVariables>;

/**
 * __useInsertPermitHistoryDataMutation__
 *
 * To run a mutation, you first call `useInsertPermitHistoryDataMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertPermitHistoryDataMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertPermitHistoryDataMutation, { data, loading, error }] = useInsertPermitHistoryDataMutation({
 *   variables: {
 *      newStatus: // value for 'newStatus'
 *      permitId: // value for 'permitId'
 *      historyObjects: // value for 'historyObjects'
 *   },
 * });
 */
export function useInsertPermitHistoryDataMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertPermitHistoryDataMutation, InsertPermitHistoryDataMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertPermitHistoryDataMutation, InsertPermitHistoryDataMutationVariables>(InsertPermitHistoryDataDocument, baseOptions);
      }
export type InsertPermitHistoryDataMutationHookResult = ReturnType<typeof useInsertPermitHistoryDataMutation>;
export type InsertPermitHistoryDataMutationResult = ApolloReactCommon.MutationResult<InsertPermitHistoryDataMutation>;
export type InsertPermitHistoryDataMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertPermitHistoryDataMutation, InsertPermitHistoryDataMutationVariables>;
export const InsertPermitSignInImagesDocument = gql`
    mutation InsertPermitSignInImages($objects: [permit_sign_in_image_insert_input!]!) {
  insert_permit_sign_in_image(objects: $objects) {
    affected_rows
  }
}
    `;
export type InsertPermitSignInImagesMutationFn = ApolloReactCommon.MutationFunction<InsertPermitSignInImagesMutation, InsertPermitSignInImagesMutationVariables>;

/**
 * __useInsertPermitSignInImagesMutation__
 *
 * To run a mutation, you first call `useInsertPermitSignInImagesMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertPermitSignInImagesMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertPermitSignInImagesMutation, { data, loading, error }] = useInsertPermitSignInImagesMutation({
 *   variables: {
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useInsertPermitSignInImagesMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertPermitSignInImagesMutation, InsertPermitSignInImagesMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertPermitSignInImagesMutation, InsertPermitSignInImagesMutationVariables>(InsertPermitSignInImagesDocument, baseOptions);
      }
export type InsertPermitSignInImagesMutationHookResult = ReturnType<typeof useInsertPermitSignInImagesMutation>;
export type InsertPermitSignInImagesMutationResult = ApolloReactCommon.MutationResult<InsertPermitSignInImagesMutation>;
export type InsertPermitSignInImagesMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertPermitSignInImagesMutation, InsertPermitSignInImagesMutationVariables>;
export const InsertProjectCovidCertifiedWorkersDocument = gql`
    mutation InsertProjectCovidCertifiedWorkers($objects: [project_covid_certify_worker_insert_input!]!) {
  insert_project_covid_certify_worker(objects: $objects) {
    affected_rows
  }
}
    `;
export type InsertProjectCovidCertifiedWorkersMutationFn = ApolloReactCommon.MutationFunction<InsertProjectCovidCertifiedWorkersMutation, InsertProjectCovidCertifiedWorkersMutationVariables>;

/**
 * __useInsertProjectCovidCertifiedWorkersMutation__
 *
 * To run a mutation, you first call `useInsertProjectCovidCertifiedWorkersMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertProjectCovidCertifiedWorkersMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertProjectCovidCertifiedWorkersMutation, { data, loading, error }] = useInsertProjectCovidCertifiedWorkersMutation({
 *   variables: {
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useInsertProjectCovidCertifiedWorkersMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertProjectCovidCertifiedWorkersMutation, InsertProjectCovidCertifiedWorkersMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertProjectCovidCertifiedWorkersMutation, InsertProjectCovidCertifiedWorkersMutationVariables>(InsertProjectCovidCertifiedWorkersDocument, baseOptions);
      }
export type InsertProjectCovidCertifiedWorkersMutationHookResult = ReturnType<typeof useInsertProjectCovidCertifiedWorkersMutation>;
export type InsertProjectCovidCertifiedWorkersMutationResult = ApolloReactCommon.MutationResult<InsertProjectCovidCertifiedWorkersMutation>;
export type InsertProjectCovidCertifiedWorkersMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertProjectCovidCertifiedWorkersMutation, InsertProjectCovidCertifiedWorkersMutationVariables>;
export const InsertProjectCovidCertifyWorkersDocument = gql`
    mutation InsertProjectCovidCertifyWorkers($objects: [project_covid_certify_worker_insert_input!]!) {
  insert_project_covid_certify_worker(objects: $objects) {
    affected_rows
  }
}
    `;
export type InsertProjectCovidCertifyWorkersMutationFn = ApolloReactCommon.MutationFunction<InsertProjectCovidCertifyWorkersMutation, InsertProjectCovidCertifyWorkersMutationVariables>;

/**
 * __useInsertProjectCovidCertifyWorkersMutation__
 *
 * To run a mutation, you first call `useInsertProjectCovidCertifyWorkersMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertProjectCovidCertifyWorkersMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertProjectCovidCertifyWorkersMutation, { data, loading, error }] = useInsertProjectCovidCertifyWorkersMutation({
 *   variables: {
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useInsertProjectCovidCertifyWorkersMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertProjectCovidCertifyWorkersMutation, InsertProjectCovidCertifyWorkersMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertProjectCovidCertifyWorkersMutation, InsertProjectCovidCertifyWorkersMutationVariables>(InsertProjectCovidCertifyWorkersDocument, baseOptions);
      }
export type InsertProjectCovidCertifyWorkersMutationHookResult = ReturnType<typeof useInsertProjectCovidCertifyWorkersMutation>;
export type InsertProjectCovidCertifyWorkersMutationResult = ApolloReactCommon.MutationResult<InsertProjectCovidCertifyWorkersMutation>;
export type InsertProjectCovidCertifyWorkersMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertProjectCovidCertifyWorkersMutation, InsertProjectCovidCertifyWorkersMutationVariables>;
export const InsertProjectCovidCrewCertifyDocument = gql`
    mutation InsertProjectCovidCrewCertify($objects: [project_covid_crew_certify_insert_input!]!) {
  insert_project_covid_crew_certify(objects: $objects) {
    affected_rows
  }
}
    `;
export type InsertProjectCovidCrewCertifyMutationFn = ApolloReactCommon.MutationFunction<InsertProjectCovidCrewCertifyMutation, InsertProjectCovidCrewCertifyMutationVariables>;

/**
 * __useInsertProjectCovidCrewCertifyMutation__
 *
 * To run a mutation, you first call `useInsertProjectCovidCrewCertifyMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertProjectCovidCrewCertifyMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertProjectCovidCrewCertifyMutation, { data, loading, error }] = useInsertProjectCovidCrewCertifyMutation({
 *   variables: {
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useInsertProjectCovidCrewCertifyMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertProjectCovidCrewCertifyMutation, InsertProjectCovidCrewCertifyMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertProjectCovidCrewCertifyMutation, InsertProjectCovidCrewCertifyMutationVariables>(InsertProjectCovidCrewCertifyDocument, baseOptions);
      }
export type InsertProjectCovidCrewCertifyMutationHookResult = ReturnType<typeof useInsertProjectCovidCrewCertifyMutation>;
export type InsertProjectCovidCrewCertifyMutationResult = ApolloReactCommon.MutationResult<InsertProjectCovidCrewCertifyMutation>;
export type InsertProjectCovidCrewCertifyMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertProjectCovidCrewCertifyMutation, InsertProjectCovidCrewCertifyMutationVariables>;
export const InsertProjectCovidTestedPositiveWorkersDocument = gql`
    mutation InsertProjectCovidTestedPositiveWorkers($objects: [project_covid_tested_positive_worker_insert_input!]!) {
  insert_project_covid_tested_positive_worker(objects: $objects) {
    affected_rows
  }
}
    `;
export type InsertProjectCovidTestedPositiveWorkersMutationFn = ApolloReactCommon.MutationFunction<InsertProjectCovidTestedPositiveWorkersMutation, InsertProjectCovidTestedPositiveWorkersMutationVariables>;

/**
 * __useInsertProjectCovidTestedPositiveWorkersMutation__
 *
 * To run a mutation, you first call `useInsertProjectCovidTestedPositiveWorkersMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertProjectCovidTestedPositiveWorkersMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertProjectCovidTestedPositiveWorkersMutation, { data, loading, error }] = useInsertProjectCovidTestedPositiveWorkersMutation({
 *   variables: {
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useInsertProjectCovidTestedPositiveWorkersMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertProjectCovidTestedPositiveWorkersMutation, InsertProjectCovidTestedPositiveWorkersMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertProjectCovidTestedPositiveWorkersMutation, InsertProjectCovidTestedPositiveWorkersMutationVariables>(InsertProjectCovidTestedPositiveWorkersDocument, baseOptions);
      }
export type InsertProjectCovidTestedPositiveWorkersMutationHookResult = ReturnType<typeof useInsertProjectCovidTestedPositiveWorkersMutation>;
export type InsertProjectCovidTestedPositiveWorkersMutationResult = ApolloReactCommon.MutationResult<InsertProjectCovidTestedPositiveWorkersMutation>;
export type InsertProjectCovidTestedPositiveWorkersMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertProjectCovidTestedPositiveWorkersMutation, InsertProjectCovidTestedPositiveWorkersMutationVariables>;
export const InsertProjectCrewsDocument = gql`
    mutation InsertProjectCrews($objects: [project_crew_insert_input!]!) {
  insert_project_crew(objects: $objects) {
    affected_rows
  }
}
    `;
export type InsertProjectCrewsMutationFn = ApolloReactCommon.MutationFunction<InsertProjectCrewsMutation, InsertProjectCrewsMutationVariables>;

/**
 * __useInsertProjectCrewsMutation__
 *
 * To run a mutation, you first call `useInsertProjectCrewsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertProjectCrewsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertProjectCrewsMutation, { data, loading, error }] = useInsertProjectCrewsMutation({
 *   variables: {
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useInsertProjectCrewsMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertProjectCrewsMutation, InsertProjectCrewsMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertProjectCrewsMutation, InsertProjectCrewsMutationVariables>(InsertProjectCrewsDocument, baseOptions);
      }
export type InsertProjectCrewsMutationHookResult = ReturnType<typeof useInsertProjectCrewsMutation>;
export type InsertProjectCrewsMutationResult = ApolloReactCommon.MutationResult<InsertProjectCrewsMutation>;
export type InsertProjectCrewsMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertProjectCrewsMutation, InsertProjectCrewsMutationVariables>;
export const InsertProjectEmployeesDocument = gql`
    mutation InsertProjectEmployees($objects: [project_employee_insert_input!]!) {
  insert_project_employee(objects: $objects) {
    affected_rows
  }
}
    `;
export type InsertProjectEmployeesMutationFn = ApolloReactCommon.MutationFunction<InsertProjectEmployeesMutation, InsertProjectEmployeesMutationVariables>;

/**
 * __useInsertProjectEmployeesMutation__
 *
 * To run a mutation, you first call `useInsertProjectEmployeesMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertProjectEmployeesMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertProjectEmployeesMutation, { data, loading, error }] = useInsertProjectEmployeesMutation({
 *   variables: {
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useInsertProjectEmployeesMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertProjectEmployeesMutation, InsertProjectEmployeesMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertProjectEmployeesMutation, InsertProjectEmployeesMutationVariables>(InsertProjectEmployeesDocument, baseOptions);
      }
export type InsertProjectEmployeesMutationHookResult = ReturnType<typeof useInsertProjectEmployeesMutation>;
export type InsertProjectEmployeesMutationResult = ApolloReactCommon.MutationResult<InsertProjectEmployeesMutation>;
export type InsertProjectEmployeesMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertProjectEmployeesMutation, InsertProjectEmployeesMutationVariables>;
export const InsertProjectHazardsDocument = gql`
    mutation InsertProjectHazards($objects: [project_hazard_insert_input!]!) {
  insert_project_hazard(objects: $objects) {
    affected_rows
  }
}
    `;
export type InsertProjectHazardsMutationFn = ApolloReactCommon.MutationFunction<InsertProjectHazardsMutation, InsertProjectHazardsMutationVariables>;

/**
 * __useInsertProjectHazardsMutation__
 *
 * To run a mutation, you first call `useInsertProjectHazardsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertProjectHazardsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertProjectHazardsMutation, { data, loading, error }] = useInsertProjectHazardsMutation({
 *   variables: {
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useInsertProjectHazardsMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertProjectHazardsMutation, InsertProjectHazardsMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertProjectHazardsMutation, InsertProjectHazardsMutationVariables>(InsertProjectHazardsDocument, baseOptions);
      }
export type InsertProjectHazardsMutationHookResult = ReturnType<typeof useInsertProjectHazardsMutation>;
export type InsertProjectHazardsMutationResult = ApolloReactCommon.MutationResult<InsertProjectHazardsMutation>;
export type InsertProjectHazardsMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertProjectHazardsMutation, InsertProjectHazardsMutationVariables>;
export const InsertProjectWorkersDocument = gql`
    mutation InsertProjectWorkers($objects: [project_worker_insert_input!]!) {
  insert_project_worker(objects: $objects) {
    affected_rows
    returning {
      user {
        id
      }
    }
  }
}
    `;
export type InsertProjectWorkersMutationFn = ApolloReactCommon.MutationFunction<InsertProjectWorkersMutation, InsertProjectWorkersMutationVariables>;

/**
 * __useInsertProjectWorkersMutation__
 *
 * To run a mutation, you first call `useInsertProjectWorkersMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertProjectWorkersMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertProjectWorkersMutation, { data, loading, error }] = useInsertProjectWorkersMutation({
 *   variables: {
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useInsertProjectWorkersMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertProjectWorkersMutation, InsertProjectWorkersMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertProjectWorkersMutation, InsertProjectWorkersMutationVariables>(InsertProjectWorkersDocument, baseOptions);
      }
export type InsertProjectWorkersMutationHookResult = ReturnType<typeof useInsertProjectWorkersMutation>;
export type InsertProjectWorkersMutationResult = ApolloReactCommon.MutationResult<InsertProjectWorkersMutation>;
export type InsertProjectWorkersMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertProjectWorkersMutation, InsertProjectWorkersMutationVariables>;
export const InsertProjectWorkerCompetenciesDocument = gql`
    mutation InsertProjectWorkerCompetencies($objects: [project_worker_competency_insert_input!]!) {
  insert_project_worker_competency(objects: $objects) {
    affected_rows
  }
}
    `;
export type InsertProjectWorkerCompetenciesMutationFn = ApolloReactCommon.MutationFunction<InsertProjectWorkerCompetenciesMutation, InsertProjectWorkerCompetenciesMutationVariables>;

/**
 * __useInsertProjectWorkerCompetenciesMutation__
 *
 * To run a mutation, you first call `useInsertProjectWorkerCompetenciesMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertProjectWorkerCompetenciesMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertProjectWorkerCompetenciesMutation, { data, loading, error }] = useInsertProjectWorkerCompetenciesMutation({
 *   variables: {
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useInsertProjectWorkerCompetenciesMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertProjectWorkerCompetenciesMutation, InsertProjectWorkerCompetenciesMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertProjectWorkerCompetenciesMutation, InsertProjectWorkerCompetenciesMutationVariables>(InsertProjectWorkerCompetenciesDocument, baseOptions);
      }
export type InsertProjectWorkerCompetenciesMutationHookResult = ReturnType<typeof useInsertProjectWorkerCompetenciesMutation>;
export type InsertProjectWorkerCompetenciesMutationResult = ApolloReactCommon.MutationResult<InsertProjectWorkerCompetenciesMutation>;
export type InsertProjectWorkerCompetenciesMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertProjectWorkerCompetenciesMutation, InsertProjectWorkerCompetenciesMutationVariables>;
export const InsertReportsDocument = gql`
    mutation InsertReports($reports: [report_insert_input!]!) {
  insert_report(objects: $reports) {
    affected_rows
  }
}
    `;
export type InsertReportsMutationFn = ApolloReactCommon.MutationFunction<InsertReportsMutation, InsertReportsMutationVariables>;

/**
 * __useInsertReportsMutation__
 *
 * To run a mutation, you first call `useInsertReportsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertReportsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertReportsMutation, { data, loading, error }] = useInsertReportsMutation({
 *   variables: {
 *      reports: // value for 'reports'
 *   },
 * });
 */
export function useInsertReportsMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertReportsMutation, InsertReportsMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertReportsMutation, InsertReportsMutationVariables>(InsertReportsDocument, baseOptions);
      }
export type InsertReportsMutationHookResult = ReturnType<typeof useInsertReportsMutation>;
export type InsertReportsMutationResult = ApolloReactCommon.MutationResult<InsertReportsMutation>;
export type InsertReportsMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertReportsMutation, InsertReportsMutationVariables>;
export const InsertSelectOptionDocument = gql`
    mutation InsertSelectOption($objects: [select_option_insert_input!]!) {
  insert_select_option(objects: $objects) {
    affected_rows
  }
}
    `;
export type InsertSelectOptionMutationFn = ApolloReactCommon.MutationFunction<InsertSelectOptionMutation, InsertSelectOptionMutationVariables>;

/**
 * __useInsertSelectOptionMutation__
 *
 * To run a mutation, you first call `useInsertSelectOptionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertSelectOptionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertSelectOptionMutation, { data, loading, error }] = useInsertSelectOptionMutation({
 *   variables: {
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useInsertSelectOptionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertSelectOptionMutation, InsertSelectOptionMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertSelectOptionMutation, InsertSelectOptionMutationVariables>(InsertSelectOptionDocument, baseOptions);
      }
export type InsertSelectOptionMutationHookResult = ReturnType<typeof useInsertSelectOptionMutation>;
export type InsertSelectOptionMutationResult = ApolloReactCommon.MutationResult<InsertSelectOptionMutation>;
export type InsertSelectOptionMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertSelectOptionMutation, InsertSelectOptionMutationVariables>;
export const InsertTasksDocument = gql`
    mutation InsertTasks($tasks: [task_insert_input!]!) {
  insert_task(objects: $tasks) {
    affected_rows
  }
}
    `;
export type InsertTasksMutationFn = ApolloReactCommon.MutationFunction<InsertTasksMutation, InsertTasksMutationVariables>;

/**
 * __useInsertTasksMutation__
 *
 * To run a mutation, you first call `useInsertTasksMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertTasksMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertTasksMutation, { data, loading, error }] = useInsertTasksMutation({
 *   variables: {
 *      tasks: // value for 'tasks'
 *   },
 * });
 */
export function useInsertTasksMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertTasksMutation, InsertTasksMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertTasksMutation, InsertTasksMutationVariables>(InsertTasksDocument, baseOptions);
      }
export type InsertTasksMutationHookResult = ReturnType<typeof useInsertTasksMutation>;
export type InsertTasksMutationResult = ApolloReactCommon.MutationResult<InsertTasksMutation>;
export type InsertTasksMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertTasksMutation, InsertTasksMutationVariables>;
export const InsertTextTranslationDocument = gql`
    mutation InsertTextTranslation($objects: [text_translation_insert_input!]!) {
  insert_text_translation(objects: $objects) {
    affected_rows
    returning {
      ...TextTranslationFrag
    }
  }
}
    ${TextTranslationFragFragmentDoc}`;
export type InsertTextTranslationMutationFn = ApolloReactCommon.MutationFunction<InsertTextTranslationMutation, InsertTextTranslationMutationVariables>;

/**
 * __useInsertTextTranslationMutation__
 *
 * To run a mutation, you first call `useInsertTextTranslationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertTextTranslationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertTextTranslationMutation, { data, loading, error }] = useInsertTextTranslationMutation({
 *   variables: {
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useInsertTextTranslationMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertTextTranslationMutation, InsertTextTranslationMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertTextTranslationMutation, InsertTextTranslationMutationVariables>(InsertTextTranslationDocument, baseOptions);
      }
export type InsertTextTranslationMutationHookResult = ReturnType<typeof useInsertTextTranslationMutation>;
export type InsertTextTranslationMutationResult = ApolloReactCommon.MutationResult<InsertTextTranslationMutation>;
export type InsertTextTranslationMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertTextTranslationMutation, InsertTextTranslationMutationVariables>;
export const InsertTodosDocument = gql`
    mutation InsertTodos($objects: [todo_insert_input!]!) {
  insert_todo(objects: $objects) {
    affected_rows
  }
}
    `;
export type InsertTodosMutationFn = ApolloReactCommon.MutationFunction<InsertTodosMutation, InsertTodosMutationVariables>;

/**
 * __useInsertTodosMutation__
 *
 * To run a mutation, you first call `useInsertTodosMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertTodosMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertTodosMutation, { data, loading, error }] = useInsertTodosMutation({
 *   variables: {
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useInsertTodosMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertTodosMutation, InsertTodosMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertTodosMutation, InsertTodosMutationVariables>(InsertTodosDocument, baseOptions);
      }
export type InsertTodosMutationHookResult = ReturnType<typeof useInsertTodosMutation>;
export type InsertTodosMutationResult = ApolloReactCommon.MutationResult<InsertTodosMutation>;
export type InsertTodosMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertTodosMutation, InsertTodosMutationVariables>;
export const InsertTodoAssigneesDocument = gql`
    mutation InsertTodoAssignees($objects: [todo_assignee_insert_input!]!) {
  insert_todo_assignee(objects: $objects) {
    affected_rows
    returning {
      ...TodoAssigneeFrag
    }
  }
}
    ${TodoAssigneeFragFragmentDoc}`;
export type InsertTodoAssigneesMutationFn = ApolloReactCommon.MutationFunction<InsertTodoAssigneesMutation, InsertTodoAssigneesMutationVariables>;

/**
 * __useInsertTodoAssigneesMutation__
 *
 * To run a mutation, you first call `useInsertTodoAssigneesMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertTodoAssigneesMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertTodoAssigneesMutation, { data, loading, error }] = useInsertTodoAssigneesMutation({
 *   variables: {
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useInsertTodoAssigneesMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertTodoAssigneesMutation, InsertTodoAssigneesMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertTodoAssigneesMutation, InsertTodoAssigneesMutationVariables>(InsertTodoAssigneesDocument, baseOptions);
      }
export type InsertTodoAssigneesMutationHookResult = ReturnType<typeof useInsertTodoAssigneesMutation>;
export type InsertTodoAssigneesMutationResult = ApolloReactCommon.MutationResult<InsertTodoAssigneesMutation>;
export type InsertTodoAssigneesMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertTodoAssigneesMutation, InsertTodoAssigneesMutationVariables>;
export const InsertTodoNotifyeesDocument = gql`
    mutation InsertTodoNotifyees($objects: [todo_notifyee_insert_input!]!) {
  insert_todo_notifyee(objects: $objects) {
    affected_rows
    returning {
      id
      notifyee {
        ...ProjectUserFrag
      }
    }
  }
}
    ${ProjectUserFragFragmentDoc}`;
export type InsertTodoNotifyeesMutationFn = ApolloReactCommon.MutationFunction<InsertTodoNotifyeesMutation, InsertTodoNotifyeesMutationVariables>;

/**
 * __useInsertTodoNotifyeesMutation__
 *
 * To run a mutation, you first call `useInsertTodoNotifyeesMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertTodoNotifyeesMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertTodoNotifyeesMutation, { data, loading, error }] = useInsertTodoNotifyeesMutation({
 *   variables: {
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useInsertTodoNotifyeesMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertTodoNotifyeesMutation, InsertTodoNotifyeesMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertTodoNotifyeesMutation, InsertTodoNotifyeesMutationVariables>(InsertTodoNotifyeesDocument, baseOptions);
      }
export type InsertTodoNotifyeesMutationHookResult = ReturnType<typeof useInsertTodoNotifyeesMutation>;
export type InsertTodoNotifyeesMutationResult = ApolloReactCommon.MutationResult<InsertTodoNotifyeesMutation>;
export type InsertTodoNotifyeesMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertTodoNotifyeesMutation, InsertTodoNotifyeesMutationVariables>;
export const InsertToolboxTalksDocument = gql`
    mutation InsertToolboxTalks($toolboxTalks: [toolbox_talk_insert_input!]!) {
  insert_toolbox_talk(objects: $toolboxTalks) {
    affected_rows
  }
}
    `;
export type InsertToolboxTalksMutationFn = ApolloReactCommon.MutationFunction<InsertToolboxTalksMutation, InsertToolboxTalksMutationVariables>;

/**
 * __useInsertToolboxTalksMutation__
 *
 * To run a mutation, you first call `useInsertToolboxTalksMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertToolboxTalksMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertToolboxTalksMutation, { data, loading, error }] = useInsertToolboxTalksMutation({
 *   variables: {
 *      toolboxTalks: // value for 'toolboxTalks'
 *   },
 * });
 */
export function useInsertToolboxTalksMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertToolboxTalksMutation, InsertToolboxTalksMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertToolboxTalksMutation, InsertToolboxTalksMutationVariables>(InsertToolboxTalksDocument, baseOptions);
      }
export type InsertToolboxTalksMutationHookResult = ReturnType<typeof useInsertToolboxTalksMutation>;
export type InsertToolboxTalksMutationResult = ApolloReactCommon.MutationResult<InsertToolboxTalksMutation>;
export type InsertToolboxTalksMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertToolboxTalksMutation, InsertToolboxTalksMutationVariables>;
export const InsertWorkersDocument = gql`
    mutation InsertWorkers($objects: [worker_insert_input!]!) {
  insert_worker(objects: $objects) {
    affected_rows
  }
}
    `;
export type InsertWorkersMutationFn = ApolloReactCommon.MutationFunction<InsertWorkersMutation, InsertWorkersMutationVariables>;

/**
 * __useInsertWorkersMutation__
 *
 * To run a mutation, you first call `useInsertWorkersMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertWorkersMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertWorkersMutation, { data, loading, error }] = useInsertWorkersMutation({
 *   variables: {
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useInsertWorkersMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertWorkersMutation, InsertWorkersMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertWorkersMutation, InsertWorkersMutationVariables>(InsertWorkersDocument, baseOptions);
      }
export type InsertWorkersMutationHookResult = ReturnType<typeof useInsertWorkersMutation>;
export type InsertWorkersMutationResult = ApolloReactCommon.MutationResult<InsertWorkersMutation>;
export type InsertWorkersMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertWorkersMutation, InsertWorkersMutationVariables>;
export const InsertWorkerCertificationsDocument = gql`
    mutation InsertWorkerCertifications($objects: [worker_certification_insert_input!]!) {
  insert_worker_certification(objects: $objects) {
    affected_rows
  }
}
    `;
export type InsertWorkerCertificationsMutationFn = ApolloReactCommon.MutationFunction<InsertWorkerCertificationsMutation, InsertWorkerCertificationsMutationVariables>;

/**
 * __useInsertWorkerCertificationsMutation__
 *
 * To run a mutation, you first call `useInsertWorkerCertificationsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertWorkerCertificationsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertWorkerCertificationsMutation, { data, loading, error }] = useInsertWorkerCertificationsMutation({
 *   variables: {
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useInsertWorkerCertificationsMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InsertWorkerCertificationsMutation, InsertWorkerCertificationsMutationVariables>) {
        return ApolloReactHooks.useMutation<InsertWorkerCertificationsMutation, InsertWorkerCertificationsMutationVariables>(InsertWorkerCertificationsDocument, baseOptions);
      }
export type InsertWorkerCertificationsMutationHookResult = ReturnType<typeof useInsertWorkerCertificationsMutation>;
export type InsertWorkerCertificationsMutationResult = ApolloReactCommon.MutationResult<InsertWorkerCertificationsMutation>;
export type InsertWorkerCertificationsMutationOptions = ApolloReactCommon.BaseMutationOptions<InsertWorkerCertificationsMutation, InsertWorkerCertificationsMutationVariables>;
export const MakeWorkerCrewLeadDocument = gql`
    mutation MakeWorkerCrewLead($input: MakeWorkerCrewLeadInput!) {
  makeWorkerCrewLead(input: $input)
}
    `;
export type MakeWorkerCrewLeadMutationFn = ApolloReactCommon.MutationFunction<MakeWorkerCrewLeadMutation, MakeWorkerCrewLeadMutationVariables>;

/**
 * __useMakeWorkerCrewLeadMutation__
 *
 * To run a mutation, you first call `useMakeWorkerCrewLeadMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useMakeWorkerCrewLeadMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [makeWorkerCrewLeadMutation, { data, loading, error }] = useMakeWorkerCrewLeadMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useMakeWorkerCrewLeadMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<MakeWorkerCrewLeadMutation, MakeWorkerCrewLeadMutationVariables>) {
        return ApolloReactHooks.useMutation<MakeWorkerCrewLeadMutation, MakeWorkerCrewLeadMutationVariables>(MakeWorkerCrewLeadDocument, baseOptions);
      }
export type MakeWorkerCrewLeadMutationHookResult = ReturnType<typeof useMakeWorkerCrewLeadMutation>;
export type MakeWorkerCrewLeadMutationResult = ApolloReactCommon.MutationResult<MakeWorkerCrewLeadMutation>;
export type MakeWorkerCrewLeadMutationOptions = ApolloReactCommon.BaseMutationOptions<MakeWorkerCrewLeadMutation, MakeWorkerCrewLeadMutationVariables>;
export const SendReadingNotPermissibleNotificationsDocument = gql`
    mutation SendReadingNotPermissibleNotifications($input: SendReadingNotPermissibleNotificationsInput!) {
  sendReadingNotPermissibleNotifications(input: $input)
}
    `;
export type SendReadingNotPermissibleNotificationsMutationFn = ApolloReactCommon.MutationFunction<SendReadingNotPermissibleNotificationsMutation, SendReadingNotPermissibleNotificationsMutationVariables>;

/**
 * __useSendReadingNotPermissibleNotificationsMutation__
 *
 * To run a mutation, you first call `useSendReadingNotPermissibleNotificationsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSendReadingNotPermissibleNotificationsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [sendReadingNotPermissibleNotificationsMutation, { data, loading, error }] = useSendReadingNotPermissibleNotificationsMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSendReadingNotPermissibleNotificationsMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SendReadingNotPermissibleNotificationsMutation, SendReadingNotPermissibleNotificationsMutationVariables>) {
        return ApolloReactHooks.useMutation<SendReadingNotPermissibleNotificationsMutation, SendReadingNotPermissibleNotificationsMutationVariables>(SendReadingNotPermissibleNotificationsDocument, baseOptions);
      }
export type SendReadingNotPermissibleNotificationsMutationHookResult = ReturnType<typeof useSendReadingNotPermissibleNotificationsMutation>;
export type SendReadingNotPermissibleNotificationsMutationResult = ApolloReactCommon.MutationResult<SendReadingNotPermissibleNotificationsMutation>;
export type SendReadingNotPermissibleNotificationsMutationOptions = ApolloReactCommon.BaseMutationOptions<SendReadingNotPermissibleNotificationsMutation, SendReadingNotPermissibleNotificationsMutationVariables>;
export const SendSiteNotificationDocument = gql`
    mutation SendSiteNotification($input: SendSiteNotificationInput!) {
  sendSiteNotification(input: $input)
}
    `;
export type SendSiteNotificationMutationFn = ApolloReactCommon.MutationFunction<SendSiteNotificationMutation, SendSiteNotificationMutationVariables>;

/**
 * __useSendSiteNotificationMutation__
 *
 * To run a mutation, you first call `useSendSiteNotificationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSendSiteNotificationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [sendSiteNotificationMutation, { data, loading, error }] = useSendSiteNotificationMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSendSiteNotificationMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SendSiteNotificationMutation, SendSiteNotificationMutationVariables>) {
        return ApolloReactHooks.useMutation<SendSiteNotificationMutation, SendSiteNotificationMutationVariables>(SendSiteNotificationDocument, baseOptions);
      }
export type SendSiteNotificationMutationHookResult = ReturnType<typeof useSendSiteNotificationMutation>;
export type SendSiteNotificationMutationResult = ApolloReactCommon.MutationResult<SendSiteNotificationMutation>;
export type SendSiteNotificationMutationOptions = ApolloReactCommon.BaseMutationOptions<SendSiteNotificationMutation, SendSiteNotificationMutationVariables>;
export const SignInDocument = gql`
    mutation SignIn($username: String!, $password: String!) {
  signIn(loginCredential: $username, password: $password)
}
    `;
export type SignInMutationFn = ApolloReactCommon.MutationFunction<SignInMutation, SignInMutationVariables>;

/**
 * __useSignInMutation__
 *
 * To run a mutation, you first call `useSignInMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSignInMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [signInMutation, { data, loading, error }] = useSignInMutation({
 *   variables: {
 *      username: // value for 'username'
 *      password: // value for 'password'
 *   },
 * });
 */
export function useSignInMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SignInMutation, SignInMutationVariables>) {
        return ApolloReactHooks.useMutation<SignInMutation, SignInMutationVariables>(SignInDocument, baseOptions);
      }
export type SignInMutationHookResult = ReturnType<typeof useSignInMutation>;
export type SignInMutationResult = ApolloReactCommon.MutationResult<SignInMutation>;
export type SignInMutationOptions = ApolloReactCommon.BaseMutationOptions<SignInMutation, SignInMutationVariables>;
export const SubscribeChatsDataDocument = gql`
    subscription SubscribeChatsData($chatWhere: chat_bool_exp!, $membersWhere: chat_member_bool_exp) {
  chat(where: $chatWhere) {
    id
    name
    members(where: $membersWhere) {
      last_read
      id
    }
  }
}
    `;

/**
 * __useSubscribeChatsDataSubscription__
 *
 * To run a query within a React component, call `useSubscribeChatsDataSubscription` and pass it any options that fit your needs.
 * When your component renders, `useSubscribeChatsDataSubscription` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSubscribeChatsDataSubscription({
 *   variables: {
 *      chatWhere: // value for 'chatWhere'
 *      membersWhere: // value for 'membersWhere'
 *   },
 * });
 */
export function useSubscribeChatsDataSubscription(baseOptions?: ApolloReactHooks.SubscriptionHookOptions<SubscribeChatsDataSubscription, SubscribeChatsDataSubscriptionVariables>) {
        return ApolloReactHooks.useSubscription<SubscribeChatsDataSubscription, SubscribeChatsDataSubscriptionVariables>(SubscribeChatsDataDocument, baseOptions);
      }
export type SubscribeChatsDataSubscriptionHookResult = ReturnType<typeof useSubscribeChatsDataSubscription>;
export type SubscribeChatsDataSubscriptionResult = ApolloReactCommon.SubscriptionResult<SubscribeChatsDataSubscription>;
export const SubscribeChatItemsDocument = gql`
    subscription SubscribeChatItems($where: chat_item_bool_exp, $order_by: [chat_item_order_by!], $limit: Int) {
  chat_item(where: $where, order_by: $order_by, limit: $limit) {
    ...ChatItemFragment
  }
}
    ${ChatItemFragmentFragmentDoc}`;

/**
 * __useSubscribeChatItemsSubscription__
 *
 * To run a query within a React component, call `useSubscribeChatItemsSubscription` and pass it any options that fit your needs.
 * When your component renders, `useSubscribeChatItemsSubscription` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSubscribeChatItemsSubscription({
 *   variables: {
 *      where: // value for 'where'
 *      order_by: // value for 'order_by'
 *      limit: // value for 'limit'
 *   },
 * });
 */
export function useSubscribeChatItemsSubscription(baseOptions?: ApolloReactHooks.SubscriptionHookOptions<SubscribeChatItemsSubscription, SubscribeChatItemsSubscriptionVariables>) {
        return ApolloReactHooks.useSubscription<SubscribeChatItemsSubscription, SubscribeChatItemsSubscriptionVariables>(SubscribeChatItemsDocument, baseOptions);
      }
export type SubscribeChatItemsSubscriptionHookResult = ReturnType<typeof useSubscribeChatItemsSubscription>;
export type SubscribeChatItemsSubscriptionResult = ApolloReactCommon.SubscriptionResult<SubscribeChatItemsSubscription>;
export const SubscribeChatMemberAggregateDocument = gql`
    subscription SubscribeChatMemberAggregate($where: chat_member_bool_exp) {
  chat_member_aggregate(where: $where) {
    aggregate {
      count
    }
  }
}
    `;

/**
 * __useSubscribeChatMemberAggregateSubscription__
 *
 * To run a query within a React component, call `useSubscribeChatMemberAggregateSubscription` and pass it any options that fit your needs.
 * When your component renders, `useSubscribeChatMemberAggregateSubscription` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSubscribeChatMemberAggregateSubscription({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useSubscribeChatMemberAggregateSubscription(baseOptions?: ApolloReactHooks.SubscriptionHookOptions<SubscribeChatMemberAggregateSubscription, SubscribeChatMemberAggregateSubscriptionVariables>) {
        return ApolloReactHooks.useSubscription<SubscribeChatMemberAggregateSubscription, SubscribeChatMemberAggregateSubscriptionVariables>(SubscribeChatMemberAggregateDocument, baseOptions);
      }
export type SubscribeChatMemberAggregateSubscriptionHookResult = ReturnType<typeof useSubscribeChatMemberAggregateSubscription>;
export type SubscribeChatMemberAggregateSubscriptionResult = ApolloReactCommon.SubscriptionResult<SubscribeChatMemberAggregateSubscription>;
export const SubscribeChatTodoUpdateDocument = gql`
    subscription SubscribeChatTodoUpdate($where: todo_bool_exp!) {
  todo(where: $where, limit: 1, order_by: {created_at: desc}) {
    id
    completed_at
    source_chat_item_id
  }
}
    `;

/**
 * __useSubscribeChatTodoUpdateSubscription__
 *
 * To run a query within a React component, call `useSubscribeChatTodoUpdateSubscription` and pass it any options that fit your needs.
 * When your component renders, `useSubscribeChatTodoUpdateSubscription` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSubscribeChatTodoUpdateSubscription({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useSubscribeChatTodoUpdateSubscription(baseOptions?: ApolloReactHooks.SubscriptionHookOptions<SubscribeChatTodoUpdateSubscription, SubscribeChatTodoUpdateSubscriptionVariables>) {
        return ApolloReactHooks.useSubscription<SubscribeChatTodoUpdateSubscription, SubscribeChatTodoUpdateSubscriptionVariables>(SubscribeChatTodoUpdateDocument, baseOptions);
      }
export type SubscribeChatTodoUpdateSubscriptionHookResult = ReturnType<typeof useSubscribeChatTodoUpdateSubscription>;
export type SubscribeChatTodoUpdateSubscriptionResult = ApolloReactCommon.SubscriptionResult<SubscribeChatTodoUpdateSubscription>;
export const SubscribeGcEmployeeChatMembersDocument = gql`
    subscription SubscribeGcEmployeeChatMembers($userId: uuid!, $projectId: uuid!) {
  chat_member(where: {deleted_at: {_is_null: true}, general_contractor_employee_id: {_eq: $userId}, chat: {project_id: {_eq: $projectId}}}) {
    id
    last_read
    chat {
      id
      name
      type
      last_message_at
      user_notifications_aggregate(where: {user_id: {_eq: $userId}, cleared_at: {_is_null: true}}) {
        aggregate {
          count
        }
      }
      members(where: {deleted_at: {_is_null: true}, _or: [{general_contractor_employee_id: {_neq: $userId}}, {project_worker_id: {_neq: $userId}}]}, limit: 1) {
        ...ChatMemberFrag
      }
    }
  }
}
    ${ChatMemberFragFragmentDoc}`;

/**
 * __useSubscribeGcEmployeeChatMembersSubscription__
 *
 * To run a query within a React component, call `useSubscribeGcEmployeeChatMembersSubscription` and pass it any options that fit your needs.
 * When your component renders, `useSubscribeGcEmployeeChatMembersSubscription` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSubscribeGcEmployeeChatMembersSubscription({
 *   variables: {
 *      userId: // value for 'userId'
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useSubscribeGcEmployeeChatMembersSubscription(baseOptions?: ApolloReactHooks.SubscriptionHookOptions<SubscribeGcEmployeeChatMembersSubscription, SubscribeGcEmployeeChatMembersSubscriptionVariables>) {
        return ApolloReactHooks.useSubscription<SubscribeGcEmployeeChatMembersSubscription, SubscribeGcEmployeeChatMembersSubscriptionVariables>(SubscribeGcEmployeeChatMembersDocument, baseOptions);
      }
export type SubscribeGcEmployeeChatMembersSubscriptionHookResult = ReturnType<typeof useSubscribeGcEmployeeChatMembersSubscription>;
export type SubscribeGcEmployeeChatMembersSubscriptionResult = ApolloReactCommon.SubscriptionResult<SubscribeGcEmployeeChatMembersSubscription>;
export const SubscribePermitAggregateDocument = gql`
    subscription SubscribePermitAggregate($where: permit_bool_exp) {
  permit_aggregate(where: $where) {
    aggregate {
      count
    }
  }
}
    `;

/**
 * __useSubscribePermitAggregateSubscription__
 *
 * To run a query within a React component, call `useSubscribePermitAggregateSubscription` and pass it any options that fit your needs.
 * When your component renders, `useSubscribePermitAggregateSubscription` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSubscribePermitAggregateSubscription({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useSubscribePermitAggregateSubscription(baseOptions?: ApolloReactHooks.SubscriptionHookOptions<SubscribePermitAggregateSubscription, SubscribePermitAggregateSubscriptionVariables>) {
        return ApolloReactHooks.useSubscription<SubscribePermitAggregateSubscription, SubscribePermitAggregateSubscriptionVariables>(SubscribePermitAggregateDocument, baseOptions);
      }
export type SubscribePermitAggregateSubscriptionHookResult = ReturnType<typeof useSubscribePermitAggregateSubscription>;
export type SubscribePermitAggregateSubscriptionResult = ApolloReactCommon.SubscriptionResult<SubscribePermitAggregateSubscription>;
export const SubscribePermitUpdateDocument = gql`
    subscription SubscribePermitUpdate($where: permit_bool_exp) {
  permit(where: $where) {
    id
    current_status
    confined_space_permit {
      permit_id
      confined_space_permit_readings {
        id
        submitted_at
      }
    }
  }
}
    `;

/**
 * __useSubscribePermitUpdateSubscription__
 *
 * To run a query within a React component, call `useSubscribePermitUpdateSubscription` and pass it any options that fit your needs.
 * When your component renders, `useSubscribePermitUpdateSubscription` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSubscribePermitUpdateSubscription({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useSubscribePermitUpdateSubscription(baseOptions?: ApolloReactHooks.SubscriptionHookOptions<SubscribePermitUpdateSubscription, SubscribePermitUpdateSubscriptionVariables>) {
        return ApolloReactHooks.useSubscription<SubscribePermitUpdateSubscription, SubscribePermitUpdateSubscriptionVariables>(SubscribePermitUpdateDocument, baseOptions);
      }
export type SubscribePermitUpdateSubscriptionHookResult = ReturnType<typeof useSubscribePermitUpdateSubscription>;
export type SubscribePermitUpdateSubscriptionResult = ApolloReactCommon.SubscriptionResult<SubscribePermitUpdateSubscription>;
export const SubscribeProjectSubcontractorsAggregateDocument = gql`
    subscription SubscribeProjectSubcontractorsAggregate($where: project_subcontractor_bool_exp) {
  project_subcontractor_aggregate(where: $where) {
    aggregate {
      count
    }
  }
}
    `;

/**
 * __useSubscribeProjectSubcontractorsAggregateSubscription__
 *
 * To run a query within a React component, call `useSubscribeProjectSubcontractorsAggregateSubscription` and pass it any options that fit your needs.
 * When your component renders, `useSubscribeProjectSubcontractorsAggregateSubscription` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSubscribeProjectSubcontractorsAggregateSubscription({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useSubscribeProjectSubcontractorsAggregateSubscription(baseOptions?: ApolloReactHooks.SubscriptionHookOptions<SubscribeProjectSubcontractorsAggregateSubscription, SubscribeProjectSubcontractorsAggregateSubscriptionVariables>) {
        return ApolloReactHooks.useSubscription<SubscribeProjectSubcontractorsAggregateSubscription, SubscribeProjectSubcontractorsAggregateSubscriptionVariables>(SubscribeProjectSubcontractorsAggregateDocument, baseOptions);
      }
export type SubscribeProjectSubcontractorsAggregateSubscriptionHookResult = ReturnType<typeof useSubscribeProjectSubcontractorsAggregateSubscription>;
export type SubscribeProjectSubcontractorsAggregateSubscriptionResult = ApolloReactCommon.SubscriptionResult<SubscribeProjectSubcontractorsAggregateSubscription>;
export const SubscribeProjectWorkerChatMembersDocument = gql`
    subscription SubscribeProjectWorkerChatMembers($projectWorkerId: uuid!) {
  chat_member(where: {deleted_at: {_is_null: true}, project_worker_id: {_eq: $projectWorkerId}}) {
    id
    last_read
    chat {
      id
      name
      type
      last_message_at
      user_notifications_aggregate(where: {user: {worker: {worker_projects: {id: {_eq: $projectWorkerId}}}}, cleared_at: {_is_null: true}, include_in_badge: {_eq: true}}) {
        aggregate {
          count
        }
      }
      members(where: {deleted_at: {_is_null: true}, _or: [{general_contractor_employee_id: {_neq: $projectWorkerId}}, {project_worker_id: {_neq: $projectWorkerId}}]}, limit: 1) {
        ...ChatMemberFrag
      }
    }
  }
}
    ${ChatMemberFragFragmentDoc}`;

/**
 * __useSubscribeProjectWorkerChatMembersSubscription__
 *
 * To run a query within a React component, call `useSubscribeProjectWorkerChatMembersSubscription` and pass it any options that fit your needs.
 * When your component renders, `useSubscribeProjectWorkerChatMembersSubscription` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSubscribeProjectWorkerChatMembersSubscription({
 *   variables: {
 *      projectWorkerId: // value for 'projectWorkerId'
 *   },
 * });
 */
export function useSubscribeProjectWorkerChatMembersSubscription(baseOptions?: ApolloReactHooks.SubscriptionHookOptions<SubscribeProjectWorkerChatMembersSubscription, SubscribeProjectWorkerChatMembersSubscriptionVariables>) {
        return ApolloReactHooks.useSubscription<SubscribeProjectWorkerChatMembersSubscription, SubscribeProjectWorkerChatMembersSubscriptionVariables>(SubscribeProjectWorkerChatMembersDocument, baseOptions);
      }
export type SubscribeProjectWorkerChatMembersSubscriptionHookResult = ReturnType<typeof useSubscribeProjectWorkerChatMembersSubscription>;
export type SubscribeProjectWorkerChatMembersSubscriptionResult = ApolloReactCommon.SubscriptionResult<SubscribeProjectWorkerChatMembersSubscription>;
export const SubscribeTodoByPkDocument = gql`
    subscription SubscribeTodoByPk($todoId: uuid!) {
  todo_by_pk(id: $todoId) {
    ...TodoDetailsFrag
  }
}
    ${TodoDetailsFragFragmentDoc}`;

/**
 * __useSubscribeTodoByPkSubscription__
 *
 * To run a query within a React component, call `useSubscribeTodoByPkSubscription` and pass it any options that fit your needs.
 * When your component renders, `useSubscribeTodoByPkSubscription` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSubscribeTodoByPkSubscription({
 *   variables: {
 *      todoId: // value for 'todoId'
 *   },
 * });
 */
export function useSubscribeTodoByPkSubscription(baseOptions?: ApolloReactHooks.SubscriptionHookOptions<SubscribeTodoByPkSubscription, SubscribeTodoByPkSubscriptionVariables>) {
        return ApolloReactHooks.useSubscription<SubscribeTodoByPkSubscription, SubscribeTodoByPkSubscriptionVariables>(SubscribeTodoByPkDocument, baseOptions);
      }
export type SubscribeTodoByPkSubscriptionHookResult = ReturnType<typeof useSubscribeTodoByPkSubscription>;
export type SubscribeTodoByPkSubscriptionResult = ApolloReactCommon.SubscriptionResult<SubscribeTodoByPkSubscription>;
export const SubscribeTodoInfoDocument = gql`
    subscription SubscribeTodoInfo($where: todo_bool_exp, $order_by: [todo_order_by!]) {
  todo(where: $where, order_by: $order_by) {
    ...TodoDetailsFrag
  }
}
    ${TodoDetailsFragFragmentDoc}`;

/**
 * __useSubscribeTodoInfoSubscription__
 *
 * To run a query within a React component, call `useSubscribeTodoInfoSubscription` and pass it any options that fit your needs.
 * When your component renders, `useSubscribeTodoInfoSubscription` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSubscribeTodoInfoSubscription({
 *   variables: {
 *      where: // value for 'where'
 *      order_by: // value for 'order_by'
 *   },
 * });
 */
export function useSubscribeTodoInfoSubscription(baseOptions?: ApolloReactHooks.SubscriptionHookOptions<SubscribeTodoInfoSubscription, SubscribeTodoInfoSubscriptionVariables>) {
        return ApolloReactHooks.useSubscription<SubscribeTodoInfoSubscription, SubscribeTodoInfoSubscriptionVariables>(SubscribeTodoInfoDocument, baseOptions);
      }
export type SubscribeTodoInfoSubscriptionHookResult = ReturnType<typeof useSubscribeTodoInfoSubscription>;
export type SubscribeTodoInfoSubscriptionResult = ApolloReactCommon.SubscriptionResult<SubscribeTodoInfoSubscription>;
export const SubscribeUserNotificationsAggregateDocument = gql`
    subscription SubscribeUserNotificationsAggregate($where: user_notification_bool_exp) {
  user_notification_aggregate(where: $where) {
    aggregate {
      count
    }
  }
}
    `;

/**
 * __useSubscribeUserNotificationsAggregateSubscription__
 *
 * To run a query within a React component, call `useSubscribeUserNotificationsAggregateSubscription` and pass it any options that fit your needs.
 * When your component renders, `useSubscribeUserNotificationsAggregateSubscription` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSubscribeUserNotificationsAggregateSubscription({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useSubscribeUserNotificationsAggregateSubscription(baseOptions?: ApolloReactHooks.SubscriptionHookOptions<SubscribeUserNotificationsAggregateSubscription, SubscribeUserNotificationsAggregateSubscriptionVariables>) {
        return ApolloReactHooks.useSubscription<SubscribeUserNotificationsAggregateSubscription, SubscribeUserNotificationsAggregateSubscriptionVariables>(SubscribeUserNotificationsAggregateDocument, baseOptions);
      }
export type SubscribeUserNotificationsAggregateSubscriptionHookResult = ReturnType<typeof useSubscribeUserNotificationsAggregateSubscription>;
export type SubscribeUserNotificationsAggregateSubscriptionResult = ApolloReactCommon.SubscriptionResult<SubscribeUserNotificationsAggregateSubscription>;
export const TranslateDocument = gql`
    query Translate($input: TranslateInput) {
  translate(input: $input) {
    translations {
      lang
      original
      score
      en
      es
      pt
    }
  }
}
    `;

/**
 * __useTranslateQuery__
 *
 * To run a query within a React component, call `useTranslateQuery` and pass it any options that fit your needs.
 * When your component renders, `useTranslateQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTranslateQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useTranslateQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<TranslateQuery, TranslateQueryVariables>) {
        return ApolloReactHooks.useQuery<TranslateQuery, TranslateQueryVariables>(TranslateDocument, baseOptions);
      }
export function useTranslateLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<TranslateQuery, TranslateQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<TranslateQuery, TranslateQueryVariables>(TranslateDocument, baseOptions);
        }
export type TranslateQueryHookResult = ReturnType<typeof useTranslateQuery>;
export type TranslateLazyQueryHookResult = ReturnType<typeof useTranslateLazyQuery>;
export type TranslateQueryResult = ApolloReactCommon.QueryResult<TranslateQuery, TranslateQueryVariables>;
export const UpdateChatDocument = gql`
    mutation UpdateChat($where: chat_bool_exp!, $_set: chat_set_input) {
  update_chat(where: $where, _set: $_set) {
    affected_rows
  }
}
    `;
export type UpdateChatMutationFn = ApolloReactCommon.MutationFunction<UpdateChatMutation, UpdateChatMutationVariables>;

/**
 * __useUpdateChatMutation__
 *
 * To run a mutation, you first call `useUpdateChatMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateChatMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateChatMutation, { data, loading, error }] = useUpdateChatMutation({
 *   variables: {
 *      where: // value for 'where'
 *      _set: // value for '_set'
 *   },
 * });
 */
export function useUpdateChatMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateChatMutation, UpdateChatMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateChatMutation, UpdateChatMutationVariables>(UpdateChatDocument, baseOptions);
      }
export type UpdateChatMutationHookResult = ReturnType<typeof useUpdateChatMutation>;
export type UpdateChatMutationResult = ApolloReactCommon.MutationResult<UpdateChatMutation>;
export type UpdateChatMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateChatMutation, UpdateChatMutationVariables>;
export const UpdateChatMemberDocument = gql`
    mutation UpdateChatMember($_set: chat_member_set_input, $where: chat_member_bool_exp!) {
  update_chat_member(_set: $_set, where: $where) {
    affected_rows
  }
}
    `;
export type UpdateChatMemberMutationFn = ApolloReactCommon.MutationFunction<UpdateChatMemberMutation, UpdateChatMemberMutationVariables>;

/**
 * __useUpdateChatMemberMutation__
 *
 * To run a mutation, you first call `useUpdateChatMemberMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateChatMemberMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateChatMemberMutation, { data, loading, error }] = useUpdateChatMemberMutation({
 *   variables: {
 *      _set: // value for '_set'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useUpdateChatMemberMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateChatMemberMutation, UpdateChatMemberMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateChatMemberMutation, UpdateChatMemberMutationVariables>(UpdateChatMemberDocument, baseOptions);
      }
export type UpdateChatMemberMutationHookResult = ReturnType<typeof useUpdateChatMemberMutation>;
export type UpdateChatMemberMutationResult = ApolloReactCommon.MutationResult<UpdateChatMemberMutation>;
export type UpdateChatMemberMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateChatMemberMutation, UpdateChatMemberMutationVariables>;
export const UpdateConfinedSpacePermitDocument = gql`
    mutation UpdateConfinedSpacePermit($_set: confined_space_permit_set_input, $where: confined_space_permit_bool_exp!) {
  update_confined_space_permit(_set: $_set, where: $where) {
    affected_rows
  }
}
    `;
export type UpdateConfinedSpacePermitMutationFn = ApolloReactCommon.MutationFunction<UpdateConfinedSpacePermitMutation, UpdateConfinedSpacePermitMutationVariables>;

/**
 * __useUpdateConfinedSpacePermitMutation__
 *
 * To run a mutation, you first call `useUpdateConfinedSpacePermitMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateConfinedSpacePermitMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateConfinedSpacePermitMutation, { data, loading, error }] = useUpdateConfinedSpacePermitMutation({
 *   variables: {
 *      _set: // value for '_set'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useUpdateConfinedSpacePermitMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateConfinedSpacePermitMutation, UpdateConfinedSpacePermitMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateConfinedSpacePermitMutation, UpdateConfinedSpacePermitMutationVariables>(UpdateConfinedSpacePermitDocument, baseOptions);
      }
export type UpdateConfinedSpacePermitMutationHookResult = ReturnType<typeof useUpdateConfinedSpacePermitMutation>;
export type UpdateConfinedSpacePermitMutationResult = ApolloReactCommon.MutationResult<UpdateConfinedSpacePermitMutation>;
export type UpdateConfinedSpacePermitMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateConfinedSpacePermitMutation, UpdateConfinedSpacePermitMutationVariables>;
export const UpdateConfinedSpacePermitMonitoringEquipmentDocument = gql`
    mutation UpdateConfinedSpacePermitMonitoringEquipment($_set: confined_space_permit_monitoring_equipment_set_input, $where: confined_space_permit_monitoring_equipment_bool_exp!) {
  update_confined_space_permit_monitoring_equipment(_set: $_set, where: $where) {
    affected_rows
  }
}
    `;
export type UpdateConfinedSpacePermitMonitoringEquipmentMutationFn = ApolloReactCommon.MutationFunction<UpdateConfinedSpacePermitMonitoringEquipmentMutation, UpdateConfinedSpacePermitMonitoringEquipmentMutationVariables>;

/**
 * __useUpdateConfinedSpacePermitMonitoringEquipmentMutation__
 *
 * To run a mutation, you first call `useUpdateConfinedSpacePermitMonitoringEquipmentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateConfinedSpacePermitMonitoringEquipmentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateConfinedSpacePermitMonitoringEquipmentMutation, { data, loading, error }] = useUpdateConfinedSpacePermitMonitoringEquipmentMutation({
 *   variables: {
 *      _set: // value for '_set'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useUpdateConfinedSpacePermitMonitoringEquipmentMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateConfinedSpacePermitMonitoringEquipmentMutation, UpdateConfinedSpacePermitMonitoringEquipmentMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateConfinedSpacePermitMonitoringEquipmentMutation, UpdateConfinedSpacePermitMonitoringEquipmentMutationVariables>(UpdateConfinedSpacePermitMonitoringEquipmentDocument, baseOptions);
      }
export type UpdateConfinedSpacePermitMonitoringEquipmentMutationHookResult = ReturnType<typeof useUpdateConfinedSpacePermitMonitoringEquipmentMutation>;
export type UpdateConfinedSpacePermitMonitoringEquipmentMutationResult = ApolloReactCommon.MutationResult<UpdateConfinedSpacePermitMonitoringEquipmentMutation>;
export type UpdateConfinedSpacePermitMonitoringEquipmentMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateConfinedSpacePermitMonitoringEquipmentMutation, UpdateConfinedSpacePermitMonitoringEquipmentMutationVariables>;
export const UpdateConfinedSpacePermitReadingDocument = gql`
    mutation UpdateConfinedSpacePermitReading($_set: confined_space_permit_reading_set_input, $where: confined_space_permit_reading_bool_exp!) {
  update_confined_space_permit_reading(_set: $_set, where: $where) {
    affected_rows
  }
}
    `;
export type UpdateConfinedSpacePermitReadingMutationFn = ApolloReactCommon.MutationFunction<UpdateConfinedSpacePermitReadingMutation, UpdateConfinedSpacePermitReadingMutationVariables>;

/**
 * __useUpdateConfinedSpacePermitReadingMutation__
 *
 * To run a mutation, you first call `useUpdateConfinedSpacePermitReadingMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateConfinedSpacePermitReadingMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateConfinedSpacePermitReadingMutation, { data, loading, error }] = useUpdateConfinedSpacePermitReadingMutation({
 *   variables: {
 *      _set: // value for '_set'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useUpdateConfinedSpacePermitReadingMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateConfinedSpacePermitReadingMutation, UpdateConfinedSpacePermitReadingMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateConfinedSpacePermitReadingMutation, UpdateConfinedSpacePermitReadingMutationVariables>(UpdateConfinedSpacePermitReadingDocument, baseOptions);
      }
export type UpdateConfinedSpacePermitReadingMutationHookResult = ReturnType<typeof useUpdateConfinedSpacePermitReadingMutation>;
export type UpdateConfinedSpacePermitReadingMutationResult = ApolloReactCommon.MutationResult<UpdateConfinedSpacePermitReadingMutation>;
export type UpdateConfinedSpacePermitReadingMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateConfinedSpacePermitReadingMutation, UpdateConfinedSpacePermitReadingMutationVariables>;
export const UpdateConfinedSpacePermitReadingCustomItemDocument = gql`
    mutation UpdateConfinedSpacePermitReadingCustomItem($_set: confined_space_permit_reading_custom_item_set_input, $where: confined_space_permit_reading_custom_item_bool_exp!) {
  update_confined_space_permit_reading_custom_item(_set: $_set, where: $where) {
    affected_rows
  }
}
    `;
export type UpdateConfinedSpacePermitReadingCustomItemMutationFn = ApolloReactCommon.MutationFunction<UpdateConfinedSpacePermitReadingCustomItemMutation, UpdateConfinedSpacePermitReadingCustomItemMutationVariables>;

/**
 * __useUpdateConfinedSpacePermitReadingCustomItemMutation__
 *
 * To run a mutation, you first call `useUpdateConfinedSpacePermitReadingCustomItemMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateConfinedSpacePermitReadingCustomItemMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateConfinedSpacePermitReadingCustomItemMutation, { data, loading, error }] = useUpdateConfinedSpacePermitReadingCustomItemMutation({
 *   variables: {
 *      _set: // value for '_set'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useUpdateConfinedSpacePermitReadingCustomItemMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateConfinedSpacePermitReadingCustomItemMutation, UpdateConfinedSpacePermitReadingCustomItemMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateConfinedSpacePermitReadingCustomItemMutation, UpdateConfinedSpacePermitReadingCustomItemMutationVariables>(UpdateConfinedSpacePermitReadingCustomItemDocument, baseOptions);
      }
export type UpdateConfinedSpacePermitReadingCustomItemMutationHookResult = ReturnType<typeof useUpdateConfinedSpacePermitReadingCustomItemMutation>;
export type UpdateConfinedSpacePermitReadingCustomItemMutationResult = ApolloReactCommon.MutationResult<UpdateConfinedSpacePermitReadingCustomItemMutation>;
export type UpdateConfinedSpacePermitReadingCustomItemMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateConfinedSpacePermitReadingCustomItemMutation, UpdateConfinedSpacePermitReadingCustomItemMutationVariables>;
export const UpdateDigPermitDocument = gql`
    mutation UpdateDigPermit($_set: dig_permit_set_input, $where: dig_permit_bool_exp!) {
  update_dig_permit(_set: $_set, where: $where) {
    affected_rows
  }
}
    `;
export type UpdateDigPermitMutationFn = ApolloReactCommon.MutationFunction<UpdateDigPermitMutation, UpdateDigPermitMutationVariables>;

/**
 * __useUpdateDigPermitMutation__
 *
 * To run a mutation, you first call `useUpdateDigPermitMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateDigPermitMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateDigPermitMutation, { data, loading, error }] = useUpdateDigPermitMutation({
 *   variables: {
 *      _set: // value for '_set'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useUpdateDigPermitMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateDigPermitMutation, UpdateDigPermitMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateDigPermitMutation, UpdateDigPermitMutationVariables>(UpdateDigPermitDocument, baseOptions);
      }
export type UpdateDigPermitMutationHookResult = ReturnType<typeof useUpdateDigPermitMutation>;
export type UpdateDigPermitMutationResult = ApolloReactCommon.MutationResult<UpdateDigPermitMutation>;
export type UpdateDigPermitMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateDigPermitMutation, UpdateDigPermitMutationVariables>;
export const UpdateDigPermitTicketDocument = gql`
    mutation UpdateDigPermitTicket($_set: dig_permit_ticket_set_input, $where: dig_permit_ticket_bool_exp!) {
  update_dig_permit_ticket(_set: $_set, where: $where) {
    affected_rows
  }
}
    `;
export type UpdateDigPermitTicketMutationFn = ApolloReactCommon.MutationFunction<UpdateDigPermitTicketMutation, UpdateDigPermitTicketMutationVariables>;

/**
 * __useUpdateDigPermitTicketMutation__
 *
 * To run a mutation, you first call `useUpdateDigPermitTicketMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateDigPermitTicketMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateDigPermitTicketMutation, { data, loading, error }] = useUpdateDigPermitTicketMutation({
 *   variables: {
 *      _set: // value for '_set'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useUpdateDigPermitTicketMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateDigPermitTicketMutation, UpdateDigPermitTicketMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateDigPermitTicketMutation, UpdateDigPermitTicketMutationVariables>(UpdateDigPermitTicketDocument, baseOptions);
      }
export type UpdateDigPermitTicketMutationHookResult = ReturnType<typeof useUpdateDigPermitTicketMutation>;
export type UpdateDigPermitTicketMutationResult = ApolloReactCommon.MutationResult<UpdateDigPermitTicketMutation>;
export type UpdateDigPermitTicketMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateDigPermitTicketMutation, UpdateDigPermitTicketMutationVariables>;
export const UpdateProjectHazardDocument = gql`
    mutation UpdateProjectHazard($_set: project_hazard_set_input, $where: project_hazard_bool_exp!) {
  update_project_hazard(_set: $_set, where: $where) {
    affected_rows
  }
}
    `;
export type UpdateProjectHazardMutationFn = ApolloReactCommon.MutationFunction<UpdateProjectHazardMutation, UpdateProjectHazardMutationVariables>;

/**
 * __useUpdateProjectHazardMutation__
 *
 * To run a mutation, you first call `useUpdateProjectHazardMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateProjectHazardMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateProjectHazardMutation, { data, loading, error }] = useUpdateProjectHazardMutation({
 *   variables: {
 *      _set: // value for '_set'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useUpdateProjectHazardMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateProjectHazardMutation, UpdateProjectHazardMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateProjectHazardMutation, UpdateProjectHazardMutationVariables>(UpdateProjectHazardDocument, baseOptions);
      }
export type UpdateProjectHazardMutationHookResult = ReturnType<typeof useUpdateProjectHazardMutation>;
export type UpdateProjectHazardMutationResult = ApolloReactCommon.MutationResult<UpdateProjectHazardMutation>;
export type UpdateProjectHazardMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateProjectHazardMutation, UpdateProjectHazardMutationVariables>;
export const UpdateHotWorkPermitDocument = gql`
    mutation UpdateHotWorkPermit($_set: hot_work_permit_set_input, $where: hot_work_permit_bool_exp!) {
  update_hot_work_permit(_set: $_set, where: $where) {
    affected_rows
  }
}
    `;
export type UpdateHotWorkPermitMutationFn = ApolloReactCommon.MutationFunction<UpdateHotWorkPermitMutation, UpdateHotWorkPermitMutationVariables>;

/**
 * __useUpdateHotWorkPermitMutation__
 *
 * To run a mutation, you first call `useUpdateHotWorkPermitMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateHotWorkPermitMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateHotWorkPermitMutation, { data, loading, error }] = useUpdateHotWorkPermitMutation({
 *   variables: {
 *      _set: // value for '_set'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useUpdateHotWorkPermitMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateHotWorkPermitMutation, UpdateHotWorkPermitMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateHotWorkPermitMutation, UpdateHotWorkPermitMutationVariables>(UpdateHotWorkPermitDocument, baseOptions);
      }
export type UpdateHotWorkPermitMutationHookResult = ReturnType<typeof useUpdateHotWorkPermitMutation>;
export type UpdateHotWorkPermitMutationResult = ApolloReactCommon.MutationResult<UpdateHotWorkPermitMutation>;
export type UpdateHotWorkPermitMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateHotWorkPermitMutation, UpdateHotWorkPermitMutationVariables>;
export const UpdatePermitDocument = gql`
    mutation UpdatePermit($_set: permit_set_input, $where: permit_bool_exp!) {
  update_permit(_set: $_set, where: $where) {
    affected_rows
  }
}
    `;
export type UpdatePermitMutationFn = ApolloReactCommon.MutationFunction<UpdatePermitMutation, UpdatePermitMutationVariables>;

/**
 * __useUpdatePermitMutation__
 *
 * To run a mutation, you first call `useUpdatePermitMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdatePermitMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updatePermitMutation, { data, loading, error }] = useUpdatePermitMutation({
 *   variables: {
 *      _set: // value for '_set'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useUpdatePermitMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdatePermitMutation, UpdatePermitMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdatePermitMutation, UpdatePermitMutationVariables>(UpdatePermitDocument, baseOptions);
      }
export type UpdatePermitMutationHookResult = ReturnType<typeof useUpdatePermitMutation>;
export type UpdatePermitMutationResult = ApolloReactCommon.MutationResult<UpdatePermitMutation>;
export type UpdatePermitMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdatePermitMutation, UpdatePermitMutationVariables>;
export const UpdatePermitChecklistItemDocument = gql`
    mutation UpdatePermitChecklistItem($_set: permit_checklist_item_set_input, $where: permit_checklist_item_bool_exp!) {
  update_permit_checklist_item(_set: $_set, where: $where) {
    affected_rows
  }
}
    `;
export type UpdatePermitChecklistItemMutationFn = ApolloReactCommon.MutationFunction<UpdatePermitChecklistItemMutation, UpdatePermitChecklistItemMutationVariables>;

/**
 * __useUpdatePermitChecklistItemMutation__
 *
 * To run a mutation, you first call `useUpdatePermitChecklistItemMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdatePermitChecklistItemMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updatePermitChecklistItemMutation, { data, loading, error }] = useUpdatePermitChecklistItemMutation({
 *   variables: {
 *      _set: // value for '_set'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useUpdatePermitChecklistItemMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdatePermitChecklistItemMutation, UpdatePermitChecklistItemMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdatePermitChecklistItemMutation, UpdatePermitChecklistItemMutationVariables>(UpdatePermitChecklistItemDocument, baseOptions);
      }
export type UpdatePermitChecklistItemMutationHookResult = ReturnType<typeof useUpdatePermitChecklistItemMutation>;
export type UpdatePermitChecklistItemMutationResult = ApolloReactCommon.MutationResult<UpdatePermitChecklistItemMutation>;
export type UpdatePermitChecklistItemMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdatePermitChecklistItemMutation, UpdatePermitChecklistItemMutationVariables>;
export const UpdatePermitProjectWorkerDocument = gql`
    mutation UpdatePermitProjectWorker($_set: permit_project_worker_set_input, $where: permit_project_worker_bool_exp!) {
  update_permit_project_worker(_set: $_set, where: $where) {
    affected_rows
  }
}
    `;
export type UpdatePermitProjectWorkerMutationFn = ApolloReactCommon.MutationFunction<UpdatePermitProjectWorkerMutation, UpdatePermitProjectWorkerMutationVariables>;

/**
 * __useUpdatePermitProjectWorkerMutation__
 *
 * To run a mutation, you first call `useUpdatePermitProjectWorkerMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdatePermitProjectWorkerMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updatePermitProjectWorkerMutation, { data, loading, error }] = useUpdatePermitProjectWorkerMutation({
 *   variables: {
 *      _set: // value for '_set'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useUpdatePermitProjectWorkerMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdatePermitProjectWorkerMutation, UpdatePermitProjectWorkerMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdatePermitProjectWorkerMutation, UpdatePermitProjectWorkerMutationVariables>(UpdatePermitProjectWorkerDocument, baseOptions);
      }
export type UpdatePermitProjectWorkerMutationHookResult = ReturnType<typeof useUpdatePermitProjectWorkerMutation>;
export type UpdatePermitProjectWorkerMutationResult = ApolloReactCommon.MutationResult<UpdatePermitProjectWorkerMutation>;
export type UpdatePermitProjectWorkerMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdatePermitProjectWorkerMutation, UpdatePermitProjectWorkerMutationVariables>;
export const UpdatePermitWorkersDataDocument = gql`
    mutation UpdatePermitWorkersData($permitId: uuid!, $type: String!, $workerObjects: [permit_project_worker_insert_input!]!) {
  delete_permit_project_worker(where: {permit_id: {_eq: $permitId}, type: {_eq: $type}}) {
    affected_rows
  }
  insert_permit_project_worker(objects: $workerObjects) {
    affected_rows
  }
}
    `;
export type UpdatePermitWorkersDataMutationFn = ApolloReactCommon.MutationFunction<UpdatePermitWorkersDataMutation, UpdatePermitWorkersDataMutationVariables>;

/**
 * __useUpdatePermitWorkersDataMutation__
 *
 * To run a mutation, you first call `useUpdatePermitWorkersDataMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdatePermitWorkersDataMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updatePermitWorkersDataMutation, { data, loading, error }] = useUpdatePermitWorkersDataMutation({
 *   variables: {
 *      permitId: // value for 'permitId'
 *      type: // value for 'type'
 *      workerObjects: // value for 'workerObjects'
 *   },
 * });
 */
export function useUpdatePermitWorkersDataMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdatePermitWorkersDataMutation, UpdatePermitWorkersDataMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdatePermitWorkersDataMutation, UpdatePermitWorkersDataMutationVariables>(UpdatePermitWorkersDataDocument, baseOptions);
      }
export type UpdatePermitWorkersDataMutationHookResult = ReturnType<typeof useUpdatePermitWorkersDataMutation>;
export type UpdatePermitWorkersDataMutationResult = ApolloReactCommon.MutationResult<UpdatePermitWorkersDataMutation>;
export type UpdatePermitWorkersDataMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdatePermitWorkersDataMutation, UpdatePermitWorkersDataMutationVariables>;
export const UpdateProjectCovidConfigDocument = gql`
    mutation UpdateProjectCovidConfig($_set: project_covid_config_set_input, $where: project_covid_config_bool_exp!) {
  update_project_covid_config(_set: $_set, where: $where) {
    affected_rows
  }
}
    `;
export type UpdateProjectCovidConfigMutationFn = ApolloReactCommon.MutationFunction<UpdateProjectCovidConfigMutation, UpdateProjectCovidConfigMutationVariables>;

/**
 * __useUpdateProjectCovidConfigMutation__
 *
 * To run a mutation, you first call `useUpdateProjectCovidConfigMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateProjectCovidConfigMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateProjectCovidConfigMutation, { data, loading, error }] = useUpdateProjectCovidConfigMutation({
 *   variables: {
 *      _set: // value for '_set'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useUpdateProjectCovidConfigMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateProjectCovidConfigMutation, UpdateProjectCovidConfigMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateProjectCovidConfigMutation, UpdateProjectCovidConfigMutationVariables>(UpdateProjectCovidConfigDocument, baseOptions);
      }
export type UpdateProjectCovidConfigMutationHookResult = ReturnType<typeof useUpdateProjectCovidConfigMutation>;
export type UpdateProjectCovidConfigMutationResult = ApolloReactCommon.MutationResult<UpdateProjectCovidConfigMutation>;
export type UpdateProjectCovidConfigMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateProjectCovidConfigMutation, UpdateProjectCovidConfigMutationVariables>;
export const UpdateProjectCrewDocument = gql`
    mutation UpdateProjectCrew($_set: project_crew_set_input, $where: project_crew_bool_exp!) {
  update_project_crew(_set: $_set, where: $where) {
    affected_rows
  }
}
    `;
export type UpdateProjectCrewMutationFn = ApolloReactCommon.MutationFunction<UpdateProjectCrewMutation, UpdateProjectCrewMutationVariables>;

/**
 * __useUpdateProjectCrewMutation__
 *
 * To run a mutation, you first call `useUpdateProjectCrewMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateProjectCrewMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateProjectCrewMutation, { data, loading, error }] = useUpdateProjectCrewMutation({
 *   variables: {
 *      _set: // value for '_set'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useUpdateProjectCrewMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateProjectCrewMutation, UpdateProjectCrewMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateProjectCrewMutation, UpdateProjectCrewMutationVariables>(UpdateProjectCrewDocument, baseOptions);
      }
export type UpdateProjectCrewMutationHookResult = ReturnType<typeof useUpdateProjectCrewMutation>;
export type UpdateProjectCrewMutationResult = ApolloReactCommon.MutationResult<UpdateProjectCrewMutation>;
export type UpdateProjectCrewMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateProjectCrewMutation, UpdateProjectCrewMutationVariables>;
export const UpdateProjectWorkerDocument = gql`
    mutation UpdateProjectWorker($_set: project_worker_set_input, $where: project_worker_bool_exp!) {
  update_project_worker(_set: $_set, where: $where) {
    affected_rows
  }
}
    `;
export type UpdateProjectWorkerMutationFn = ApolloReactCommon.MutationFunction<UpdateProjectWorkerMutation, UpdateProjectWorkerMutationVariables>;

/**
 * __useUpdateProjectWorkerMutation__
 *
 * To run a mutation, you first call `useUpdateProjectWorkerMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateProjectWorkerMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateProjectWorkerMutation, { data, loading, error }] = useUpdateProjectWorkerMutation({
 *   variables: {
 *      _set: // value for '_set'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useUpdateProjectWorkerMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateProjectWorkerMutation, UpdateProjectWorkerMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateProjectWorkerMutation, UpdateProjectWorkerMutationVariables>(UpdateProjectWorkerDocument, baseOptions);
      }
export type UpdateProjectWorkerMutationHookResult = ReturnType<typeof useUpdateProjectWorkerMutation>;
export type UpdateProjectWorkerMutationResult = ApolloReactCommon.MutationResult<UpdateProjectWorkerMutation>;
export type UpdateProjectWorkerMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateProjectWorkerMutation, UpdateProjectWorkerMutationVariables>;
export const UpdateTaskDocument = gql`
    mutation updateTask($taskId: uuid!, $_set: task_set_input!, $taskStepInserts: [task_step_insert_input!]!, $taskPpeTypeInserts: [task_ppe_type_insert_input!]!, $taskPermitTypeInserts: [task_permit_type_insert_input!]!) {
  update_task(where: {id: {_eq: $taskId}}, _set: $_set) {
    affected_rows
  }
  delete_task_step(where: {task_id: {_eq: $taskId}}) {
    affected_rows
  }
  delete_task_ppe_type(where: {task_id: {_eq: $taskId}}) {
    affected_rows
  }
  delete_task_permit_type(where: {task_id: {_eq: $taskId}}) {
    affected_rows
  }
  insert_task_step(objects: $taskStepInserts) {
    affected_rows
  }
  insert_task_ppe_type(objects: $taskPpeTypeInserts) {
    affected_rows
  }
  insert_task_permit_type(objects: $taskPermitTypeInserts) {
    affected_rows
  }
}
    `;
export type UpdateTaskMutationFn = ApolloReactCommon.MutationFunction<UpdateTaskMutation, UpdateTaskMutationVariables>;

/**
 * __useUpdateTaskMutation__
 *
 * To run a mutation, you first call `useUpdateTaskMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateTaskMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateTaskMutation, { data, loading, error }] = useUpdateTaskMutation({
 *   variables: {
 *      taskId: // value for 'taskId'
 *      _set: // value for '_set'
 *      taskStepInserts: // value for 'taskStepInserts'
 *      taskPpeTypeInserts: // value for 'taskPpeTypeInserts'
 *      taskPermitTypeInserts: // value for 'taskPermitTypeInserts'
 *   },
 * });
 */
export function useUpdateTaskMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateTaskMutation, UpdateTaskMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateTaskMutation, UpdateTaskMutationVariables>(UpdateTaskDocument, baseOptions);
      }
export type UpdateTaskMutationHookResult = ReturnType<typeof useUpdateTaskMutation>;
export type UpdateTaskMutationResult = ApolloReactCommon.MutationResult<UpdateTaskMutation>;
export type UpdateTaskMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateTaskMutation, UpdateTaskMutationVariables>;
export const UpdateTextTranslationDocument = gql`
    mutation UpdateTextTranslation($_set: text_translation_set_input, $where: text_translation_bool_exp!) {
  update_text_translation(_set: $_set, where: $where) {
    affected_rows
  }
}
    `;
export type UpdateTextTranslationMutationFn = ApolloReactCommon.MutationFunction<UpdateTextTranslationMutation, UpdateTextTranslationMutationVariables>;

/**
 * __useUpdateTextTranslationMutation__
 *
 * To run a mutation, you first call `useUpdateTextTranslationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateTextTranslationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateTextTranslationMutation, { data, loading, error }] = useUpdateTextTranslationMutation({
 *   variables: {
 *      _set: // value for '_set'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useUpdateTextTranslationMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateTextTranslationMutation, UpdateTextTranslationMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateTextTranslationMutation, UpdateTextTranslationMutationVariables>(UpdateTextTranslationDocument, baseOptions);
      }
export type UpdateTextTranslationMutationHookResult = ReturnType<typeof useUpdateTextTranslationMutation>;
export type UpdateTextTranslationMutationResult = ApolloReactCommon.MutationResult<UpdateTextTranslationMutation>;
export type UpdateTextTranslationMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateTextTranslationMutation, UpdateTextTranslationMutationVariables>;
export const UpdateTextTranslationByPkDocument = gql`
    mutation UpdateTextTranslationByPk($_set: text_translation_set_input, $pk_columns: text_translation_pk_columns_input!) {
  update_text_translation_by_pk(_set: $_set, pk_columns: $pk_columns) {
    ...TextTranslationFrag
  }
}
    ${TextTranslationFragFragmentDoc}`;
export type UpdateTextTranslationByPkMutationFn = ApolloReactCommon.MutationFunction<UpdateTextTranslationByPkMutation, UpdateTextTranslationByPkMutationVariables>;

/**
 * __useUpdateTextTranslationByPkMutation__
 *
 * To run a mutation, you first call `useUpdateTextTranslationByPkMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateTextTranslationByPkMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateTextTranslationByPkMutation, { data, loading, error }] = useUpdateTextTranslationByPkMutation({
 *   variables: {
 *      _set: // value for '_set'
 *      pk_columns: // value for 'pk_columns'
 *   },
 * });
 */
export function useUpdateTextTranslationByPkMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateTextTranslationByPkMutation, UpdateTextTranslationByPkMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateTextTranslationByPkMutation, UpdateTextTranslationByPkMutationVariables>(UpdateTextTranslationByPkDocument, baseOptions);
      }
export type UpdateTextTranslationByPkMutationHookResult = ReturnType<typeof useUpdateTextTranslationByPkMutation>;
export type UpdateTextTranslationByPkMutationResult = ApolloReactCommon.MutationResult<UpdateTextTranslationByPkMutation>;
export type UpdateTextTranslationByPkMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateTextTranslationByPkMutation, UpdateTextTranslationByPkMutationVariables>;
export const UpdateTodoDocument = gql`
    mutation UpdateTodo($where: todo_bool_exp!, $_set: todo_set_input) {
  update_todo(where: $where, _set: $_set) {
    affected_rows
  }
}
    `;
export type UpdateTodoMutationFn = ApolloReactCommon.MutationFunction<UpdateTodoMutation, UpdateTodoMutationVariables>;

/**
 * __useUpdateTodoMutation__
 *
 * To run a mutation, you first call `useUpdateTodoMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateTodoMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateTodoMutation, { data, loading, error }] = useUpdateTodoMutation({
 *   variables: {
 *      where: // value for 'where'
 *      _set: // value for '_set'
 *   },
 * });
 */
export function useUpdateTodoMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateTodoMutation, UpdateTodoMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateTodoMutation, UpdateTodoMutationVariables>(UpdateTodoDocument, baseOptions);
      }
export type UpdateTodoMutationHookResult = ReturnType<typeof useUpdateTodoMutation>;
export type UpdateTodoMutationResult = ApolloReactCommon.MutationResult<UpdateTodoMutation>;
export type UpdateTodoMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateTodoMutation, UpdateTodoMutationVariables>;
export const UpdateTodoAssigneeDocument = gql`
    mutation UpdateTodoAssignee($where: todo_assignee_bool_exp!, $_set: todo_assignee_set_input) {
  update_todo_assignee(where: $where, _set: $_set) {
    affected_rows
  }
}
    `;
export type UpdateTodoAssigneeMutationFn = ApolloReactCommon.MutationFunction<UpdateTodoAssigneeMutation, UpdateTodoAssigneeMutationVariables>;

/**
 * __useUpdateTodoAssigneeMutation__
 *
 * To run a mutation, you first call `useUpdateTodoAssigneeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateTodoAssigneeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateTodoAssigneeMutation, { data, loading, error }] = useUpdateTodoAssigneeMutation({
 *   variables: {
 *      where: // value for 'where'
 *      _set: // value for '_set'
 *   },
 * });
 */
export function useUpdateTodoAssigneeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateTodoAssigneeMutation, UpdateTodoAssigneeMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateTodoAssigneeMutation, UpdateTodoAssigneeMutationVariables>(UpdateTodoAssigneeDocument, baseOptions);
      }
export type UpdateTodoAssigneeMutationHookResult = ReturnType<typeof useUpdateTodoAssigneeMutation>;
export type UpdateTodoAssigneeMutationResult = ApolloReactCommon.MutationResult<UpdateTodoAssigneeMutation>;
export type UpdateTodoAssigneeMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateTodoAssigneeMutation, UpdateTodoAssigneeMutationVariables>;
export const UpdateUserDocument = gql`
    mutation UpdateUser($_set: user_set_input, $where: user_bool_exp!) {
  update_user(_set: $_set, where: $where) {
    affected_rows
  }
}
    `;
export type UpdateUserMutationFn = ApolloReactCommon.MutationFunction<UpdateUserMutation, UpdateUserMutationVariables>;

/**
 * __useUpdateUserMutation__
 *
 * To run a mutation, you first call `useUpdateUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateUserMutation, { data, loading, error }] = useUpdateUserMutation({
 *   variables: {
 *      _set: // value for '_set'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useUpdateUserMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateUserMutation, UpdateUserMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateUserMutation, UpdateUserMutationVariables>(UpdateUserDocument, baseOptions);
      }
export type UpdateUserMutationHookResult = ReturnType<typeof useUpdateUserMutation>;
export type UpdateUserMutationResult = ApolloReactCommon.MutationResult<UpdateUserMutation>;
export type UpdateUserMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateUserMutation, UpdateUserMutationVariables>;
export const UpdateUserByPkDocument = gql`
    mutation UpdateUserByPk($_set: user_set_input, $pk_columns: user_pk_columns_input!) {
  update_user_by_pk(_set: $_set, pk_columns: $pk_columns) {
    id
  }
}
    `;
export type UpdateUserByPkMutationFn = ApolloReactCommon.MutationFunction<UpdateUserByPkMutation, UpdateUserByPkMutationVariables>;

/**
 * __useUpdateUserByPkMutation__
 *
 * To run a mutation, you first call `useUpdateUserByPkMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateUserByPkMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateUserByPkMutation, { data, loading, error }] = useUpdateUserByPkMutation({
 *   variables: {
 *      _set: // value for '_set'
 *      pk_columns: // value for 'pk_columns'
 *   },
 * });
 */
export function useUpdateUserByPkMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateUserByPkMutation, UpdateUserByPkMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateUserByPkMutation, UpdateUserByPkMutationVariables>(UpdateUserByPkDocument, baseOptions);
      }
export type UpdateUserByPkMutationHookResult = ReturnType<typeof useUpdateUserByPkMutation>;
export type UpdateUserByPkMutationResult = ApolloReactCommon.MutationResult<UpdateUserByPkMutation>;
export type UpdateUserByPkMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateUserByPkMutation, UpdateUserByPkMutationVariables>;
export const UpdateUserNotificationDocument = gql`
    mutation UpdateUserNotification($_set: user_notification_set_input, $where: user_notification_bool_exp!) {
  update_user_notification(_set: $_set, where: $where) {
    affected_rows
  }
}
    `;
export type UpdateUserNotificationMutationFn = ApolloReactCommon.MutationFunction<UpdateUserNotificationMutation, UpdateUserNotificationMutationVariables>;

/**
 * __useUpdateUserNotificationMutation__
 *
 * To run a mutation, you first call `useUpdateUserNotificationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateUserNotificationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateUserNotificationMutation, { data, loading, error }] = useUpdateUserNotificationMutation({
 *   variables: {
 *      _set: // value for '_set'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useUpdateUserNotificationMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateUserNotificationMutation, UpdateUserNotificationMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateUserNotificationMutation, UpdateUserNotificationMutationVariables>(UpdateUserNotificationDocument, baseOptions);
      }
export type UpdateUserNotificationMutationHookResult = ReturnType<typeof useUpdateUserNotificationMutation>;
export type UpdateUserNotificationMutationResult = ApolloReactCommon.MutationResult<UpdateUserNotificationMutation>;
export type UpdateUserNotificationMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateUserNotificationMutation, UpdateUserNotificationMutationVariables>;
export const UpdateWorkerDocument = gql`
    mutation UpdateWorker($_set: worker_set_input, $where: worker_bool_exp!) {
  update_worker(_set: $_set, where: $where) {
    affected_rows
  }
}
    `;
export type UpdateWorkerMutationFn = ApolloReactCommon.MutationFunction<UpdateWorkerMutation, UpdateWorkerMutationVariables>;

/**
 * __useUpdateWorkerMutation__
 *
 * To run a mutation, you first call `useUpdateWorkerMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateWorkerMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateWorkerMutation, { data, loading, error }] = useUpdateWorkerMutation({
 *   variables: {
 *      _set: // value for '_set'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useUpdateWorkerMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateWorkerMutation, UpdateWorkerMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateWorkerMutation, UpdateWorkerMutationVariables>(UpdateWorkerDocument, baseOptions);
      }
export type UpdateWorkerMutationHookResult = ReturnType<typeof useUpdateWorkerMutation>;
export type UpdateWorkerMutationResult = ApolloReactCommon.MutationResult<UpdateWorkerMutation>;
export type UpdateWorkerMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateWorkerMutation, UpdateWorkerMutationVariables>;
export const UpdateWorkerCrewDocument = gql`
    mutation UpdateWorkerCrew($input: UpdateWorkerCrewInput!) {
  updateWorkerCrew(input: $input)
}
    `;
export type UpdateWorkerCrewMutationFn = ApolloReactCommon.MutationFunction<UpdateWorkerCrewMutation, UpdateWorkerCrewMutationVariables>;

/**
 * __useUpdateWorkerCrewMutation__
 *
 * To run a mutation, you first call `useUpdateWorkerCrewMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateWorkerCrewMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateWorkerCrewMutation, { data, loading, error }] = useUpdateWorkerCrewMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateWorkerCrewMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateWorkerCrewMutation, UpdateWorkerCrewMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateWorkerCrewMutation, UpdateWorkerCrewMutationVariables>(UpdateWorkerCrewDocument, baseOptions);
      }
export type UpdateWorkerCrewMutationHookResult = ReturnType<typeof useUpdateWorkerCrewMutation>;
export type UpdateWorkerCrewMutationResult = ApolloReactCommon.MutationResult<UpdateWorkerCrewMutation>;
export type UpdateWorkerCrewMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateWorkerCrewMutation, UpdateWorkerCrewMutationVariables>;
export const UpdateWorkAbovePermitDocument = gql`
    mutation UpdateWorkAbovePermit($_set: work_above_permit_set_input, $where: work_above_permit_bool_exp!) {
  update_work_above_permit(_set: $_set, where: $where) {
    affected_rows
  }
}
    `;
export type UpdateWorkAbovePermitMutationFn = ApolloReactCommon.MutationFunction<UpdateWorkAbovePermitMutation, UpdateWorkAbovePermitMutationVariables>;

/**
 * __useUpdateWorkAbovePermitMutation__
 *
 * To run a mutation, you first call `useUpdateWorkAbovePermitMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateWorkAbovePermitMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateWorkAbovePermitMutation, { data, loading, error }] = useUpdateWorkAbovePermitMutation({
 *   variables: {
 *      _set: // value for '_set'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useUpdateWorkAbovePermitMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateWorkAbovePermitMutation, UpdateWorkAbovePermitMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateWorkAbovePermitMutation, UpdateWorkAbovePermitMutationVariables>(UpdateWorkAbovePermitDocument, baseOptions);
      }
export type UpdateWorkAbovePermitMutationHookResult = ReturnType<typeof useUpdateWorkAbovePermitMutation>;
export type UpdateWorkAbovePermitMutationResult = ApolloReactCommon.MutationResult<UpdateWorkAbovePermitMutation>;
export type UpdateWorkAbovePermitMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateWorkAbovePermitMutation, UpdateWorkAbovePermitMutationVariables>;
export const UpsertGovernmentIdsDocument = gql`
    mutation UpsertGovernmentIds($objects: [government_identification_insert_input!]!) {
  insert_government_identification(objects: $objects, on_conflict: {constraint: government_identification_pkey, update_columns: [front_image_id, back_image_id]}) {
    affected_rows
  }
}
    `;
export type UpsertGovernmentIdsMutationFn = ApolloReactCommon.MutationFunction<UpsertGovernmentIdsMutation, UpsertGovernmentIdsMutationVariables>;

/**
 * __useUpsertGovernmentIdsMutation__
 *
 * To run a mutation, you first call `useUpsertGovernmentIdsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpsertGovernmentIdsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [upsertGovernmentIdsMutation, { data, loading, error }] = useUpsertGovernmentIdsMutation({
 *   variables: {
 *      objects: // value for 'objects'
 *   },
 * });
 */
export function useUpsertGovernmentIdsMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpsertGovernmentIdsMutation, UpsertGovernmentIdsMutationVariables>) {
        return ApolloReactHooks.useMutation<UpsertGovernmentIdsMutation, UpsertGovernmentIdsMutationVariables>(UpsertGovernmentIdsDocument, baseOptions);
      }
export type UpsertGovernmentIdsMutationHookResult = ReturnType<typeof useUpsertGovernmentIdsMutation>;
export type UpsertGovernmentIdsMutationResult = ApolloReactCommon.MutationResult<UpsertGovernmentIdsMutation>;
export type UpsertGovernmentIdsMutationOptions = ApolloReactCommon.BaseMutationOptions<UpsertGovernmentIdsMutation, UpsertGovernmentIdsMutationVariables>;
export const UpsertProcoreDailyLogDocument = gql`
    mutation UpsertProcoreDailyLog($input: ProcoreDailyLogInput!) {
  procoreDailyLog(input: $input) {
    statement
  }
}
    `;
export type UpsertProcoreDailyLogMutationFn = ApolloReactCommon.MutationFunction<UpsertProcoreDailyLogMutation, UpsertProcoreDailyLogMutationVariables>;

/**
 * __useUpsertProcoreDailyLogMutation__
 *
 * To run a mutation, you first call `useUpsertProcoreDailyLogMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpsertProcoreDailyLogMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [upsertProcoreDailyLogMutation, { data, loading, error }] = useUpsertProcoreDailyLogMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpsertProcoreDailyLogMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpsertProcoreDailyLogMutation, UpsertProcoreDailyLogMutationVariables>) {
        return ApolloReactHooks.useMutation<UpsertProcoreDailyLogMutation, UpsertProcoreDailyLogMutationVariables>(UpsertProcoreDailyLogDocument, baseOptions);
      }
export type UpsertProcoreDailyLogMutationHookResult = ReturnType<typeof useUpsertProcoreDailyLogMutation>;
export type UpsertProcoreDailyLogMutationResult = ApolloReactCommon.MutationResult<UpsertProcoreDailyLogMutation>;
export type UpsertProcoreDailyLogMutationOptions = ApolloReactCommon.BaseMutationOptions<UpsertProcoreDailyLogMutation, UpsertProcoreDailyLogMutationVariables>;
export const UpsertProcoreDailyNoteDocument = gql`
    mutation UpsertProcoreDailyNote($input: ProcoreDailyNoteInput!) {
  procoreDailyNote(input: $input) {
    statement
  }
}
    `;
export type UpsertProcoreDailyNoteMutationFn = ApolloReactCommon.MutationFunction<UpsertProcoreDailyNoteMutation, UpsertProcoreDailyNoteMutationVariables>;

/**
 * __useUpsertProcoreDailyNoteMutation__
 *
 * To run a mutation, you first call `useUpsertProcoreDailyNoteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpsertProcoreDailyNoteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [upsertProcoreDailyNoteMutation, { data, loading, error }] = useUpsertProcoreDailyNoteMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpsertProcoreDailyNoteMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpsertProcoreDailyNoteMutation, UpsertProcoreDailyNoteMutationVariables>) {
        return ApolloReactHooks.useMutation<UpsertProcoreDailyNoteMutation, UpsertProcoreDailyNoteMutationVariables>(UpsertProcoreDailyNoteDocument, baseOptions);
      }
export type UpsertProcoreDailyNoteMutationHookResult = ReturnType<typeof useUpsertProcoreDailyNoteMutation>;
export type UpsertProcoreDailyNoteMutationResult = ApolloReactCommon.MutationResult<UpsertProcoreDailyNoteMutation>;
export type UpsertProcoreDailyNoteMutationOptions = ApolloReactCommon.BaseMutationOptions<UpsertProcoreDailyNoteMutation, UpsertProcoreDailyNoteMutationVariables>;
export const UpsertProcoreDailyWeatherDocument = gql`
    mutation UpsertProcoreDailyWeather($input: ProcoreDailyWeatherInput!) {
  procoreDailyWeather(input: $input) {
    statement
  }
}
    `;
export type UpsertProcoreDailyWeatherMutationFn = ApolloReactCommon.MutationFunction<UpsertProcoreDailyWeatherMutation, UpsertProcoreDailyWeatherMutationVariables>;

/**
 * __useUpsertProcoreDailyWeatherMutation__
 *
 * To run a mutation, you first call `useUpsertProcoreDailyWeatherMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpsertProcoreDailyWeatherMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [upsertProcoreDailyWeatherMutation, { data, loading, error }] = useUpsertProcoreDailyWeatherMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpsertProcoreDailyWeatherMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpsertProcoreDailyWeatherMutation, UpsertProcoreDailyWeatherMutationVariables>) {
        return ApolloReactHooks.useMutation<UpsertProcoreDailyWeatherMutation, UpsertProcoreDailyWeatherMutationVariables>(UpsertProcoreDailyWeatherDocument, baseOptions);
      }
export type UpsertProcoreDailyWeatherMutationHookResult = ReturnType<typeof useUpsertProcoreDailyWeatherMutation>;
export type UpsertProcoreDailyWeatherMutationResult = ApolloReactCommon.MutationResult<UpsertProcoreDailyWeatherMutation>;
export type UpsertProcoreDailyWeatherMutationOptions = ApolloReactCommon.BaseMutationOptions<UpsertProcoreDailyWeatherMutation, UpsertProcoreDailyWeatherMutationVariables>;
export const WorkerResetPasswordDocument = gql`
    mutation WorkerResetPassword($input: WorkerCreatePasswordInput!) {
  workerCreatePassword(input: $input) {
    token
    subcontractors {
      id
      name
    }
  }
}
    `;
export type WorkerResetPasswordMutationFn = ApolloReactCommon.MutationFunction<WorkerResetPasswordMutation, WorkerResetPasswordMutationVariables>;

/**
 * __useWorkerResetPasswordMutation__
 *
 * To run a mutation, you first call `useWorkerResetPasswordMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useWorkerResetPasswordMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [workerResetPasswordMutation, { data, loading, error }] = useWorkerResetPasswordMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useWorkerResetPasswordMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<WorkerResetPasswordMutation, WorkerResetPasswordMutationVariables>) {
        return ApolloReactHooks.useMutation<WorkerResetPasswordMutation, WorkerResetPasswordMutationVariables>(WorkerResetPasswordDocument, baseOptions);
      }
export type WorkerResetPasswordMutationHookResult = ReturnType<typeof useWorkerResetPasswordMutation>;
export type WorkerResetPasswordMutationResult = ApolloReactCommon.MutationResult<WorkerResetPasswordMutation>;
export type WorkerResetPasswordMutationOptions = ApolloReactCommon.BaseMutationOptions<WorkerResetPasswordMutation, WorkerResetPasswordMutationVariables>;